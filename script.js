(() => {
  var __create = Object.create;
  var __defProp = Object.defineProperty;
  var __defProps = Object.defineProperties;
  var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
  var __getOwnPropDescs = Object.getOwnPropertyDescriptors;
  var __getOwnPropNames = Object.getOwnPropertyNames;
  var __getOwnPropSymbols = Object.getOwnPropertySymbols;
  var __getProtoOf = Object.getPrototypeOf;
  var __hasOwnProp = Object.prototype.hasOwnProperty;
  var __propIsEnum = Object.prototype.propertyIsEnumerable;
  var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
  var __spreadValues = (a3, b3) => {
    for (var prop in b3 || (b3 = {}))
      if (__hasOwnProp.call(b3, prop))
        __defNormalProp(a3, prop, b3[prop]);
    if (__getOwnPropSymbols)
      for (var prop of __getOwnPropSymbols(b3)) {
        if (__propIsEnum.call(b3, prop))
          __defNormalProp(a3, prop, b3[prop]);
      }
    return a3;
  };
  var __spreadProps = (a3, b3) => __defProps(a3, __getOwnPropDescs(b3));
  var __commonJS = (cb, mod) => function __require() {
    return mod || (0, cb[__getOwnPropNames(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;
  };
  var __copyProps = (to, from, except, desc) => {
    if (from && typeof from === "object" || typeof from === "function") {
      for (let key of __getOwnPropNames(from))
        if (!__hasOwnProp.call(to, key) && key !== except)
          __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
    }
    return to;
  };
  var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target, mod));

  // node_modules/react/cjs/react.development.js
  var require_react_development = __commonJS({
    "node_modules/react/cjs/react.development.js"(exports, module) {
      "use strict";
      if (true) {
        (function() {
          "use strict";
          if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart === "function") {
            __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart(new Error());
          }
          var ReactVersion = "18.0.0-fc46dba67-20220329";
          var REACT_ELEMENT_TYPE = Symbol.for("react.element");
          var REACT_PORTAL_TYPE = Symbol.for("react.portal");
          var REACT_FRAGMENT_TYPE = Symbol.for("react.fragment");
          var REACT_STRICT_MODE_TYPE = Symbol.for("react.strict_mode");
          var REACT_PROFILER_TYPE = Symbol.for("react.profiler");
          var REACT_PROVIDER_TYPE = Symbol.for("react.provider");
          var REACT_CONTEXT_TYPE = Symbol.for("react.context");
          var REACT_FORWARD_REF_TYPE = Symbol.for("react.forward_ref");
          var REACT_SUSPENSE_TYPE = Symbol.for("react.suspense");
          var REACT_SUSPENSE_LIST_TYPE = Symbol.for("react.suspense_list");
          var REACT_MEMO_TYPE = Symbol.for("react.memo");
          var REACT_LAZY_TYPE = Symbol.for("react.lazy");
          var REACT_OFFSCREEN_TYPE = Symbol.for("react.offscreen");
          var MAYBE_ITERATOR_SYMBOL = Symbol.iterator;
          var FAUX_ITERATOR_SYMBOL = "@@iterator";
          function getIteratorFn(maybeIterable) {
            if (maybeIterable === null || typeof maybeIterable !== "object") {
              return null;
            }
            var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];
            if (typeof maybeIterator === "function") {
              return maybeIterator;
            }
            return null;
          }
          var ReactCurrentDispatcher = {
            current: null
          };
          var ReactCurrentBatchConfig = {
            transition: null
          };
          var ReactCurrentActQueue = {
            current: null,
            isBatchingLegacy: false,
            didScheduleLegacyUpdate: false
          };
          var ReactCurrentOwner = {
            current: null
          };
          var ReactDebugCurrentFrame = {};
          var currentExtraStackFrame = null;
          function setExtraStackFrame(stack) {
            {
              currentExtraStackFrame = stack;
            }
          }
          {
            ReactDebugCurrentFrame.setExtraStackFrame = function(stack) {
              {
                currentExtraStackFrame = stack;
              }
            };
            ReactDebugCurrentFrame.getCurrentStack = null;
            ReactDebugCurrentFrame.getStackAddendum = function() {
              var stack = "";
              if (currentExtraStackFrame) {
                stack += currentExtraStackFrame;
              }
              var impl = ReactDebugCurrentFrame.getCurrentStack;
              if (impl) {
                stack += impl() || "";
              }
              return stack;
            };
          }
          var enableScopeAPI = false;
          var enableCacheElement = false;
          var enableTransitionTracing = false;
          var enableLegacyHidden = false;
          var enableDebugTracing = false;
          var ReactSharedInternals = {
            ReactCurrentDispatcher,
            ReactCurrentBatchConfig,
            ReactCurrentOwner
          };
          {
            ReactSharedInternals.ReactDebugCurrentFrame = ReactDebugCurrentFrame;
            ReactSharedInternals.ReactCurrentActQueue = ReactCurrentActQueue;
          }
          function warn(format) {
            {
              {
                for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
                  args[_key - 1] = arguments[_key];
                }
                printWarning("warn", format, args);
              }
            }
          }
          function error(format) {
            {
              {
                for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
                  args[_key2 - 1] = arguments[_key2];
                }
                printWarning("error", format, args);
              }
            }
          }
          function printWarning(level, format, args) {
            {
              var ReactDebugCurrentFrame2 = ReactSharedInternals.ReactDebugCurrentFrame;
              var stack = ReactDebugCurrentFrame2.getStackAddendum();
              if (stack !== "") {
                format += "%s";
                args = args.concat([stack]);
              }
              var argsWithFormat = args.map(function(item) {
                return String(item);
              });
              argsWithFormat.unshift("Warning: " + format);
              Function.prototype.apply.call(console[level], console, argsWithFormat);
            }
          }
          var didWarnStateUpdateForUnmountedComponent = {};
          function warnNoop(publicInstance, callerName) {
            {
              var _constructor = publicInstance.constructor;
              var componentName = _constructor && (_constructor.displayName || _constructor.name) || "ReactClass";
              var warningKey = componentName + "." + callerName;
              if (didWarnStateUpdateForUnmountedComponent[warningKey]) {
                return;
              }
              error("Can't call %s on a component that is not yet mounted. This is a no-op, but it might indicate a bug in your application. Instead, assign to `this.state` directly or define a `state = {};` class property with the desired state in the %s component.", callerName, componentName);
              didWarnStateUpdateForUnmountedComponent[warningKey] = true;
            }
          }
          var ReactNoopUpdateQueue = {
            isMounted: function(publicInstance) {
              return false;
            },
            enqueueForceUpdate: function(publicInstance, callback, callerName) {
              warnNoop(publicInstance, "forceUpdate");
            },
            enqueueReplaceState: function(publicInstance, completeState, callback, callerName) {
              warnNoop(publicInstance, "replaceState");
            },
            enqueueSetState: function(publicInstance, partialState, callback, callerName) {
              warnNoop(publicInstance, "setState");
            }
          };
          var assign = Object.assign;
          var emptyObject = {};
          {
            Object.freeze(emptyObject);
          }
          function Component(props, context, updater) {
            this.props = props;
            this.context = context;
            this.refs = emptyObject;
            this.updater = updater || ReactNoopUpdateQueue;
          }
          Component.prototype.isReactComponent = {};
          Component.prototype.setState = function(partialState, callback) {
            if (typeof partialState !== "object" && typeof partialState !== "function" && partialState != null) {
              throw new Error("setState(...): takes an object of state variables to update or a function which returns an object of state variables.");
            }
            this.updater.enqueueSetState(this, partialState, callback, "setState");
          };
          Component.prototype.forceUpdate = function(callback) {
            this.updater.enqueueForceUpdate(this, callback, "forceUpdate");
          };
          {
            var deprecatedAPIs = {
              isMounted: ["isMounted", "Instead, make sure to clean up subscriptions and pending requests in componentWillUnmount to prevent memory leaks."],
              replaceState: ["replaceState", "Refactor your code to use setState instead (see https://github.com/facebook/react/issues/3236)."]
            };
            var defineDeprecationWarning = function(methodName, info) {
              Object.defineProperty(Component.prototype, methodName, {
                get: function() {
                  warn("%s(...) is deprecated in plain JavaScript React classes. %s", info[0], info[1]);
                  return void 0;
                }
              });
            };
            for (var fnName in deprecatedAPIs) {
              if (deprecatedAPIs.hasOwnProperty(fnName)) {
                defineDeprecationWarning(fnName, deprecatedAPIs[fnName]);
              }
            }
          }
          function ComponentDummy() {
          }
          ComponentDummy.prototype = Component.prototype;
          function PureComponent(props, context, updater) {
            this.props = props;
            this.context = context;
            this.refs = emptyObject;
            this.updater = updater || ReactNoopUpdateQueue;
          }
          var pureComponentPrototype = PureComponent.prototype = new ComponentDummy();
          pureComponentPrototype.constructor = PureComponent;
          assign(pureComponentPrototype, Component.prototype);
          pureComponentPrototype.isPureReactComponent = true;
          function createRef() {
            var refObject = {
              current: null
            };
            {
              Object.seal(refObject);
            }
            return refObject;
          }
          var isArrayImpl = Array.isArray;
          function isArray(a3) {
            return isArrayImpl(a3);
          }
          function typeName(value) {
            {
              var hasToStringTag = typeof Symbol === "function" && Symbol.toStringTag;
              var type = hasToStringTag && value[Symbol.toStringTag] || value.constructor.name || "Object";
              return type;
            }
          }
          function willCoercionThrow(value) {
            {
              try {
                testStringCoercion(value);
                return false;
              } catch (e4) {
                return true;
              }
            }
          }
          function testStringCoercion(value) {
            return "" + value;
          }
          function checkKeyStringCoercion(value) {
            {
              if (willCoercionThrow(value)) {
                error("The provided key is an unsupported type %s. This value must be coerced to a string before before using it here.", typeName(value));
                return testStringCoercion(value);
              }
            }
          }
          function getWrappedName(outerType, innerType, wrapperName) {
            var displayName = outerType.displayName;
            if (displayName) {
              return displayName;
            }
            var functionName = innerType.displayName || innerType.name || "";
            return functionName !== "" ? wrapperName + "(" + functionName + ")" : wrapperName;
          }
          function getContextName(type) {
            return type.displayName || "Context";
          }
          function getComponentNameFromType(type) {
            if (type == null) {
              return null;
            }
            {
              if (typeof type.tag === "number") {
                error("Received an unexpected object in getComponentNameFromType(). This is likely a bug in React. Please file an issue.");
              }
            }
            if (typeof type === "function") {
              return type.displayName || type.name || null;
            }
            if (typeof type === "string") {
              return type;
            }
            switch (type) {
              case REACT_FRAGMENT_TYPE:
                return "Fragment";
              case REACT_PORTAL_TYPE:
                return "Portal";
              case REACT_PROFILER_TYPE:
                return "Profiler";
              case REACT_STRICT_MODE_TYPE:
                return "StrictMode";
              case REACT_SUSPENSE_TYPE:
                return "Suspense";
              case REACT_SUSPENSE_LIST_TYPE:
                return "SuspenseList";
            }
            if (typeof type === "object") {
              switch (type.$$typeof) {
                case REACT_CONTEXT_TYPE:
                  var context = type;
                  return getContextName(context) + ".Consumer";
                case REACT_PROVIDER_TYPE:
                  var provider = type;
                  return getContextName(provider._context) + ".Provider";
                case REACT_FORWARD_REF_TYPE:
                  return getWrappedName(type, type.render, "ForwardRef");
                case REACT_MEMO_TYPE:
                  var outerName = type.displayName || null;
                  if (outerName !== null) {
                    return outerName;
                  }
                  return getComponentNameFromType(type.type) || "Memo";
                case REACT_LAZY_TYPE: {
                  var lazyComponent = type;
                  var payload = lazyComponent._payload;
                  var init = lazyComponent._init;
                  try {
                    return getComponentNameFromType(init(payload));
                  } catch (x4) {
                    return null;
                  }
                }
              }
            }
            return null;
          }
          var hasOwnProperty = Object.prototype.hasOwnProperty;
          var RESERVED_PROPS = {
            key: true,
            ref: true,
            __self: true,
            __source: true
          };
          var specialPropKeyWarningShown, specialPropRefWarningShown, didWarnAboutStringRefs;
          {
            didWarnAboutStringRefs = {};
          }
          function hasValidRef(config2) {
            {
              if (hasOwnProperty.call(config2, "ref")) {
                var getter = Object.getOwnPropertyDescriptor(config2, "ref").get;
                if (getter && getter.isReactWarning) {
                  return false;
                }
              }
            }
            return config2.ref !== void 0;
          }
          function hasValidKey(config2) {
            {
              if (hasOwnProperty.call(config2, "key")) {
                var getter = Object.getOwnPropertyDescriptor(config2, "key").get;
                if (getter && getter.isReactWarning) {
                  return false;
                }
              }
            }
            return config2.key !== void 0;
          }
          function defineKeyPropWarningGetter(props, displayName) {
            var warnAboutAccessingKey = function() {
              {
                if (!specialPropKeyWarningShown) {
                  specialPropKeyWarningShown = true;
                  error("%s: `key` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://reactjs.org/link/special-props)", displayName);
                }
              }
            };
            warnAboutAccessingKey.isReactWarning = true;
            Object.defineProperty(props, "key", {
              get: warnAboutAccessingKey,
              configurable: true
            });
          }
          function defineRefPropWarningGetter(props, displayName) {
            var warnAboutAccessingRef = function() {
              {
                if (!specialPropRefWarningShown) {
                  specialPropRefWarningShown = true;
                  error("%s: `ref` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://reactjs.org/link/special-props)", displayName);
                }
              }
            };
            warnAboutAccessingRef.isReactWarning = true;
            Object.defineProperty(props, "ref", {
              get: warnAboutAccessingRef,
              configurable: true
            });
          }
          function warnIfStringRefCannotBeAutoConverted(config2) {
            {
              if (typeof config2.ref === "string" && ReactCurrentOwner.current && config2.__self && ReactCurrentOwner.current.stateNode !== config2.__self) {
                var componentName = getComponentNameFromType(ReactCurrentOwner.current.type);
                if (!didWarnAboutStringRefs[componentName]) {
                  error('Component "%s" contains the string ref "%s". Support for string refs will be removed in a future major release. This case cannot be automatically converted to an arrow function. We ask you to manually fix this case by using useRef() or createRef() instead. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-string-ref', componentName, config2.ref);
                  didWarnAboutStringRefs[componentName] = true;
                }
              }
            }
          }
          var ReactElement = function(type, key, ref, self2, source, owner, props) {
            var element = {
              $$typeof: REACT_ELEMENT_TYPE,
              type,
              key,
              ref,
              props,
              _owner: owner
            };
            {
              element._store = {};
              Object.defineProperty(element._store, "validated", {
                configurable: false,
                enumerable: false,
                writable: true,
                value: false
              });
              Object.defineProperty(element, "_self", {
                configurable: false,
                enumerable: false,
                writable: false,
                value: self2
              });
              Object.defineProperty(element, "_source", {
                configurable: false,
                enumerable: false,
                writable: false,
                value: source
              });
              if (Object.freeze) {
                Object.freeze(element.props);
                Object.freeze(element);
              }
            }
            return element;
          };
          function createElement7(type, config2, children) {
            var propName;
            var props = {};
            var key = null;
            var ref = null;
            var self2 = null;
            var source = null;
            if (config2 != null) {
              if (hasValidRef(config2)) {
                ref = config2.ref;
                {
                  warnIfStringRefCannotBeAutoConverted(config2);
                }
              }
              if (hasValidKey(config2)) {
                {
                  checkKeyStringCoercion(config2.key);
                }
                key = "" + config2.key;
              }
              self2 = config2.__self === void 0 ? null : config2.__self;
              source = config2.__source === void 0 ? null : config2.__source;
              for (propName in config2) {
                if (hasOwnProperty.call(config2, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
                  props[propName] = config2[propName];
                }
              }
            }
            var childrenLength = arguments.length - 2;
            if (childrenLength === 1) {
              props.children = children;
            } else if (childrenLength > 1) {
              var childArray = Array(childrenLength);
              for (var i3 = 0; i3 < childrenLength; i3++) {
                childArray[i3] = arguments[i3 + 2];
              }
              {
                if (Object.freeze) {
                  Object.freeze(childArray);
                }
              }
              props.children = childArray;
            }
            if (type && type.defaultProps) {
              var defaultProps = type.defaultProps;
              for (propName in defaultProps) {
                if (props[propName] === void 0) {
                  props[propName] = defaultProps[propName];
                }
              }
            }
            {
              if (key || ref) {
                var displayName = typeof type === "function" ? type.displayName || type.name || "Unknown" : type;
                if (key) {
                  defineKeyPropWarningGetter(props, displayName);
                }
                if (ref) {
                  defineRefPropWarningGetter(props, displayName);
                }
              }
            }
            return ReactElement(type, key, ref, self2, source, ReactCurrentOwner.current, props);
          }
          function cloneAndReplaceKey(oldElement, newKey) {
            var newElement = ReactElement(oldElement.type, newKey, oldElement.ref, oldElement._self, oldElement._source, oldElement._owner, oldElement.props);
            return newElement;
          }
          function cloneElement2(element, config2, children) {
            if (element === null || element === void 0) {
              throw new Error("React.cloneElement(...): The argument must be a React element, but you passed " + element + ".");
            }
            var propName;
            var props = assign({}, element.props);
            var key = element.key;
            var ref = element.ref;
            var self2 = element._self;
            var source = element._source;
            var owner = element._owner;
            if (config2 != null) {
              if (hasValidRef(config2)) {
                ref = config2.ref;
                owner = ReactCurrentOwner.current;
              }
              if (hasValidKey(config2)) {
                {
                  checkKeyStringCoercion(config2.key);
                }
                key = "" + config2.key;
              }
              var defaultProps;
              if (element.type && element.type.defaultProps) {
                defaultProps = element.type.defaultProps;
              }
              for (propName in config2) {
                if (hasOwnProperty.call(config2, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
                  if (config2[propName] === void 0 && defaultProps !== void 0) {
                    props[propName] = defaultProps[propName];
                  } else {
                    props[propName] = config2[propName];
                  }
                }
              }
            }
            var childrenLength = arguments.length - 2;
            if (childrenLength === 1) {
              props.children = children;
            } else if (childrenLength > 1) {
              var childArray = Array(childrenLength);
              for (var i3 = 0; i3 < childrenLength; i3++) {
                childArray[i3] = arguments[i3 + 2];
              }
              props.children = childArray;
            }
            return ReactElement(element.type, key, ref, self2, source, owner, props);
          }
          function isValidElement(object) {
            return typeof object === "object" && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
          }
          var SEPARATOR = ".";
          var SUBSEPARATOR = ":";
          function escape(key) {
            var escapeRegex = /[=:]/g;
            var escaperLookup = {
              "=": "=0",
              ":": "=2"
            };
            var escapedString = key.replace(escapeRegex, function(match) {
              return escaperLookup[match];
            });
            return "$" + escapedString;
          }
          var didWarnAboutMaps = false;
          var userProvidedKeyEscapeRegex = /\/+/g;
          function escapeUserProvidedKey(text) {
            return text.replace(userProvidedKeyEscapeRegex, "$&/");
          }
          function getElementKey(element, index) {
            if (typeof element === "object" && element !== null && element.key != null) {
              {
                checkKeyStringCoercion(element.key);
              }
              return escape("" + element.key);
            }
            return index.toString(36);
          }
          function mapIntoArray(children, array, escapedPrefix, nameSoFar, callback) {
            var type = typeof children;
            if (type === "undefined" || type === "boolean") {
              children = null;
            }
            var invokeCallback = false;
            if (children === null) {
              invokeCallback = true;
            } else {
              switch (type) {
                case "string":
                case "number":
                  invokeCallback = true;
                  break;
                case "object":
                  switch (children.$$typeof) {
                    case REACT_ELEMENT_TYPE:
                    case REACT_PORTAL_TYPE:
                      invokeCallback = true;
                  }
              }
            }
            if (invokeCallback) {
              var _child = children;
              var mappedChild = callback(_child);
              var childKey = nameSoFar === "" ? SEPARATOR + getElementKey(_child, 0) : nameSoFar;
              if (isArray(mappedChild)) {
                var escapedChildKey = "";
                if (childKey != null) {
                  escapedChildKey = escapeUserProvidedKey(childKey) + "/";
                }
                mapIntoArray(mappedChild, array, escapedChildKey, "", function(c4) {
                  return c4;
                });
              } else if (mappedChild != null) {
                if (isValidElement(mappedChild)) {
                  {
                    if (mappedChild.key && (!_child || _child.key !== mappedChild.key)) {
                      checkKeyStringCoercion(mappedChild.key);
                    }
                  }
                  mappedChild = cloneAndReplaceKey(mappedChild, escapedPrefix + (mappedChild.key && (!_child || _child.key !== mappedChild.key) ? escapeUserProvidedKey("" + mappedChild.key) + "/" : "") + childKey);
                }
                array.push(mappedChild);
              }
              return 1;
            }
            var child;
            var nextName;
            var subtreeCount = 0;
            var nextNamePrefix = nameSoFar === "" ? SEPARATOR : nameSoFar + SUBSEPARATOR;
            if (isArray(children)) {
              for (var i3 = 0; i3 < children.length; i3++) {
                child = children[i3];
                nextName = nextNamePrefix + getElementKey(child, i3);
                subtreeCount += mapIntoArray(child, array, escapedPrefix, nextName, callback);
              }
            } else {
              var iteratorFn = getIteratorFn(children);
              if (typeof iteratorFn === "function") {
                var iterableChildren = children;
                {
                  if (iteratorFn === iterableChildren.entries) {
                    if (!didWarnAboutMaps) {
                      warn("Using Maps as children is not supported. Use an array of keyed ReactElements instead.");
                    }
                    didWarnAboutMaps = true;
                  }
                }
                var iterator = iteratorFn.call(iterableChildren);
                var step;
                var ii = 0;
                while (!(step = iterator.next()).done) {
                  child = step.value;
                  nextName = nextNamePrefix + getElementKey(child, ii++);
                  subtreeCount += mapIntoArray(child, array, escapedPrefix, nextName, callback);
                }
              } else if (type === "object") {
                var childrenString = String(children);
                throw new Error("Objects are not valid as a React child (found: " + (childrenString === "[object Object]" ? "object with keys {" + Object.keys(children).join(", ") + "}" : childrenString) + "). If you meant to render a collection of children, use an array instead.");
              }
            }
            return subtreeCount;
          }
          function mapChildren(children, func, context) {
            if (children == null) {
              return children;
            }
            var result = [];
            var count = 0;
            mapIntoArray(children, result, "", "", function(child) {
              return func.call(context, child, count++);
            });
            return result;
          }
          function countChildren(children) {
            var n4 = 0;
            mapChildren(children, function() {
              n4++;
            });
            return n4;
          }
          function forEachChildren(children, forEachFunc, forEachContext) {
            mapChildren(children, function() {
              forEachFunc.apply(this, arguments);
            }, forEachContext);
          }
          function toArray(children) {
            return mapChildren(children, function(child) {
              return child;
            }) || [];
          }
          function onlyChild(children) {
            if (!isValidElement(children)) {
              throw new Error("React.Children.only expected to receive a single React element child.");
            }
            return children;
          }
          function createContext(defaultValue2) {
            var context = {
              $$typeof: REACT_CONTEXT_TYPE,
              _currentValue: defaultValue2,
              _currentValue2: defaultValue2,
              _threadCount: 0,
              Provider: null,
              Consumer: null,
              _defaultValue: null,
              _globalName: null
            };
            context.Provider = {
              $$typeof: REACT_PROVIDER_TYPE,
              _context: context
            };
            var hasWarnedAboutUsingNestedContextConsumers = false;
            var hasWarnedAboutUsingConsumerProvider = false;
            var hasWarnedAboutDisplayNameOnConsumer = false;
            {
              var Consumer = {
                $$typeof: REACT_CONTEXT_TYPE,
                _context: context
              };
              Object.defineProperties(Consumer, {
                Provider: {
                  get: function() {
                    if (!hasWarnedAboutUsingConsumerProvider) {
                      hasWarnedAboutUsingConsumerProvider = true;
                      error("Rendering <Context.Consumer.Provider> is not supported and will be removed in a future major release. Did you mean to render <Context.Provider> instead?");
                    }
                    return context.Provider;
                  },
                  set: function(_Provider) {
                    context.Provider = _Provider;
                  }
                },
                _currentValue: {
                  get: function() {
                    return context._currentValue;
                  },
                  set: function(_currentValue) {
                    context._currentValue = _currentValue;
                  }
                },
                _currentValue2: {
                  get: function() {
                    return context._currentValue2;
                  },
                  set: function(_currentValue2) {
                    context._currentValue2 = _currentValue2;
                  }
                },
                _threadCount: {
                  get: function() {
                    return context._threadCount;
                  },
                  set: function(_threadCount) {
                    context._threadCount = _threadCount;
                  }
                },
                Consumer: {
                  get: function() {
                    if (!hasWarnedAboutUsingNestedContextConsumers) {
                      hasWarnedAboutUsingNestedContextConsumers = true;
                      error("Rendering <Context.Consumer.Consumer> is not supported and will be removed in a future major release. Did you mean to render <Context.Consumer> instead?");
                    }
                    return context.Consumer;
                  }
                },
                displayName: {
                  get: function() {
                    return context.displayName;
                  },
                  set: function(displayName) {
                    if (!hasWarnedAboutDisplayNameOnConsumer) {
                      warn("Setting `displayName` on Context.Consumer has no effect. You should set it directly on the context with Context.displayName = '%s'.", displayName);
                      hasWarnedAboutDisplayNameOnConsumer = true;
                    }
                  }
                }
              });
              context.Consumer = Consumer;
            }
            {
              context._currentRenderer = null;
              context._currentRenderer2 = null;
            }
            return context;
          }
          var Uninitialized = -1;
          var Pending = 0;
          var Resolved = 1;
          var Rejected = 2;
          function lazyInitializer(payload) {
            if (payload._status === Uninitialized) {
              var ctor = payload._result;
              var thenable = ctor();
              thenable.then(function(moduleObject2) {
                if (payload._status === Pending || payload._status === Uninitialized) {
                  var resolved = payload;
                  resolved._status = Resolved;
                  resolved._result = moduleObject2;
                }
              }, function(error2) {
                if (payload._status === Pending || payload._status === Uninitialized) {
                  var rejected = payload;
                  rejected._status = Rejected;
                  rejected._result = error2;
                }
              });
              if (payload._status === Uninitialized) {
                var pending = payload;
                pending._status = Pending;
                pending._result = thenable;
              }
            }
            if (payload._status === Resolved) {
              var moduleObject = payload._result;
              {
                if (moduleObject === void 0) {
                  error("lazy: Expected the result of a dynamic import() call. Instead received: %s\n\nYour code should look like: \n  const MyComponent = lazy(() => import('./MyComponent'))\n\nDid you accidentally put curly braces around the import?", moduleObject);
                }
              }
              {
                if (!("default" in moduleObject)) {
                  error("lazy: Expected the result of a dynamic import() call. Instead received: %s\n\nYour code should look like: \n  const MyComponent = lazy(() => import('./MyComponent'))", moduleObject);
                }
              }
              return moduleObject.default;
            } else {
              throw payload._result;
            }
          }
          function lazy(ctor) {
            var payload = {
              _status: Uninitialized,
              _result: ctor
            };
            var lazyType = {
              $$typeof: REACT_LAZY_TYPE,
              _payload: payload,
              _init: lazyInitializer
            };
            {
              var defaultProps;
              var propTypes;
              Object.defineProperties(lazyType, {
                defaultProps: {
                  configurable: true,
                  get: function() {
                    return defaultProps;
                  },
                  set: function(newDefaultProps) {
                    error("React.lazy(...): It is not supported to assign `defaultProps` to a lazy component import. Either specify them where the component is defined, or create a wrapping component around it.");
                    defaultProps = newDefaultProps;
                    Object.defineProperty(lazyType, "defaultProps", {
                      enumerable: true
                    });
                  }
                },
                propTypes: {
                  configurable: true,
                  get: function() {
                    return propTypes;
                  },
                  set: function(newPropTypes) {
                    error("React.lazy(...): It is not supported to assign `propTypes` to a lazy component import. Either specify them where the component is defined, or create a wrapping component around it.");
                    propTypes = newPropTypes;
                    Object.defineProperty(lazyType, "propTypes", {
                      enumerable: true
                    });
                  }
                }
              });
            }
            return lazyType;
          }
          function forwardRef3(render) {
            {
              if (render != null && render.$$typeof === REACT_MEMO_TYPE) {
                error("forwardRef requires a render function but received a `memo` component. Instead of forwardRef(memo(...)), use memo(forwardRef(...)).");
              } else if (typeof render !== "function") {
                error("forwardRef requires a render function but was given %s.", render === null ? "null" : typeof render);
              } else {
                if (render.length !== 0 && render.length !== 2) {
                  error("forwardRef render functions accept exactly two parameters: props and ref. %s", render.length === 1 ? "Did you forget to use the ref parameter?" : "Any additional parameter will be undefined.");
                }
              }
              if (render != null) {
                if (render.defaultProps != null || render.propTypes != null) {
                  error("forwardRef render functions do not support propTypes or defaultProps. Did you accidentally pass a React component?");
                }
              }
            }
            var elementType = {
              $$typeof: REACT_FORWARD_REF_TYPE,
              render
            };
            {
              var ownName;
              Object.defineProperty(elementType, "displayName", {
                enumerable: false,
                configurable: true,
                get: function() {
                  return ownName;
                },
                set: function(name) {
                  ownName = name;
                  if (!render.name && !render.displayName) {
                    render.displayName = name;
                  }
                }
              });
            }
            return elementType;
          }
          var REACT_MODULE_REFERENCE = Symbol.for("react.module.reference");
          function isValidElementType(type) {
            if (typeof type === "string" || typeof type === "function") {
              return true;
            }
            if (type === REACT_FRAGMENT_TYPE || type === REACT_PROFILER_TYPE || enableDebugTracing || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || enableLegacyHidden || type === REACT_OFFSCREEN_TYPE || enableScopeAPI || enableCacheElement || enableTransitionTracing) {
              return true;
            }
            if (typeof type === "object" && type !== null) {
              if (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || type.$$typeof === REACT_MODULE_REFERENCE || type.getModuleId !== void 0) {
                return true;
              }
            }
            return false;
          }
          function memo(type, compare) {
            {
              if (!isValidElementType(type)) {
                error("memo: The first argument must be a component. Instead received: %s", type === null ? "null" : typeof type);
              }
            }
            var elementType = {
              $$typeof: REACT_MEMO_TYPE,
              type,
              compare: compare === void 0 ? null : compare
            };
            {
              var ownName;
              Object.defineProperty(elementType, "displayName", {
                enumerable: false,
                configurable: true,
                get: function() {
                  return ownName;
                },
                set: function(name) {
                  ownName = name;
                  if (!type.name && !type.displayName) {
                    type.displayName = name;
                  }
                }
              });
            }
            return elementType;
          }
          function resolveDispatcher() {
            var dispatcher = ReactCurrentDispatcher.current;
            {
              if (dispatcher === null) {
                error("Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for one of the following reasons:\n1. You might have mismatching versions of React and the renderer (such as React DOM)\n2. You might be breaking the Rules of Hooks\n3. You might have more than one copy of React in the same app\nSee https://reactjs.org/link/invalid-hook-call for tips about how to debug and fix this problem.");
              }
            }
            return dispatcher;
          }
          function useContext(Context) {
            var dispatcher = resolveDispatcher();
            {
              if (Context._context !== void 0) {
                var realContext = Context._context;
                if (realContext.Consumer === Context) {
                  error("Calling useContext(Context.Consumer) is not supported, may cause bugs, and will be removed in a future major release. Did you mean to call useContext(Context) instead?");
                } else if (realContext.Provider === Context) {
                  error("Calling useContext(Context.Provider) is not supported. Did you mean to call useContext(Context) instead?");
                }
              }
            }
            return dispatcher.useContext(Context);
          }
          function useState17(initialState) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useState(initialState);
          }
          function useReducer(reducer, initialArg, init) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useReducer(reducer, initialArg, init);
          }
          function useRef4(initialValue) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useRef(initialValue);
          }
          function useEffect18(create, deps) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useEffect(create, deps);
          }
          function useInsertionEffect(create, deps) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useInsertionEffect(create, deps);
          }
          function useLayoutEffect2(create, deps) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useLayoutEffect(create, deps);
          }
          function useCallback3(callback, deps) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useCallback(callback, deps);
          }
          function useMemo2(create, deps) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useMemo(create, deps);
          }
          function useImperativeHandle(ref, create, deps) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useImperativeHandle(ref, create, deps);
          }
          function useDebugValue(value, formatterFn) {
            {
              var dispatcher = resolveDispatcher();
              return dispatcher.useDebugValue(value, formatterFn);
            }
          }
          function useTransition() {
            var dispatcher = resolveDispatcher();
            return dispatcher.useTransition();
          }
          function useDeferredValue(value) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useDeferredValue(value);
          }
          function useId() {
            var dispatcher = resolveDispatcher();
            return dispatcher.useId();
          }
          function useSyncExternalStore(subscribe, getSnapshot, getServerSnapshot) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useSyncExternalStore(subscribe, getSnapshot, getServerSnapshot);
          }
          var disabledDepth = 0;
          var prevLog;
          var prevInfo;
          var prevWarn;
          var prevError;
          var prevGroup;
          var prevGroupCollapsed;
          var prevGroupEnd;
          function disabledLog() {
          }
          disabledLog.__reactDisabledLog = true;
          function disableLogs() {
            {
              if (disabledDepth === 0) {
                prevLog = console.log;
                prevInfo = console.info;
                prevWarn = console.warn;
                prevError = console.error;
                prevGroup = console.group;
                prevGroupCollapsed = console.groupCollapsed;
                prevGroupEnd = console.groupEnd;
                var props = {
                  configurable: true,
                  enumerable: true,
                  value: disabledLog,
                  writable: true
                };
                Object.defineProperties(console, {
                  info: props,
                  log: props,
                  warn: props,
                  error: props,
                  group: props,
                  groupCollapsed: props,
                  groupEnd: props
                });
              }
              disabledDepth++;
            }
          }
          function reenableLogs() {
            {
              disabledDepth--;
              if (disabledDepth === 0) {
                var props = {
                  configurable: true,
                  enumerable: true,
                  writable: true
                };
                Object.defineProperties(console, {
                  log: assign({}, props, {
                    value: prevLog
                  }),
                  info: assign({}, props, {
                    value: prevInfo
                  }),
                  warn: assign({}, props, {
                    value: prevWarn
                  }),
                  error: assign({}, props, {
                    value: prevError
                  }),
                  group: assign({}, props, {
                    value: prevGroup
                  }),
                  groupCollapsed: assign({}, props, {
                    value: prevGroupCollapsed
                  }),
                  groupEnd: assign({}, props, {
                    value: prevGroupEnd
                  })
                });
              }
              if (disabledDepth < 0) {
                error("disabledDepth fell below zero. This is a bug in React. Please file an issue.");
              }
            }
          }
          var ReactCurrentDispatcher$1 = ReactSharedInternals.ReactCurrentDispatcher;
          var prefix;
          function describeBuiltInComponentFrame(name, source, ownerFn) {
            {
              if (prefix === void 0) {
                try {
                  throw Error();
                } catch (x4) {
                  var match = x4.stack.trim().match(/\n( *(at )?)/);
                  prefix = match && match[1] || "";
                }
              }
              return "\n" + prefix + name;
            }
          }
          var reentry = false;
          var componentFrameCache;
          {
            var PossiblyWeakMap = typeof WeakMap === "function" ? WeakMap : Map;
            componentFrameCache = new PossiblyWeakMap();
          }
          function describeNativeComponentFrame(fn, construct) {
            if (!fn || reentry) {
              return "";
            }
            {
              var frame = componentFrameCache.get(fn);
              if (frame !== void 0) {
                return frame;
              }
            }
            var control;
            reentry = true;
            var previousPrepareStackTrace = Error.prepareStackTrace;
            Error.prepareStackTrace = void 0;
            var previousDispatcher;
            {
              previousDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = null;
              disableLogs();
            }
            try {
              if (construct) {
                var Fake = function() {
                  throw Error();
                };
                Object.defineProperty(Fake.prototype, "props", {
                  set: function() {
                    throw Error();
                  }
                });
                if (typeof Reflect === "object" && Reflect.construct) {
                  try {
                    Reflect.construct(Fake, []);
                  } catch (x4) {
                    control = x4;
                  }
                  Reflect.construct(fn, [], Fake);
                } else {
                  try {
                    Fake.call();
                  } catch (x4) {
                    control = x4;
                  }
                  fn.call(Fake.prototype);
                }
              } else {
                try {
                  throw Error();
                } catch (x4) {
                  control = x4;
                }
                fn();
              }
            } catch (sample) {
              if (sample && control && typeof sample.stack === "string") {
                var sampleLines = sample.stack.split("\n");
                var controlLines = control.stack.split("\n");
                var s5 = sampleLines.length - 1;
                var c4 = controlLines.length - 1;
                while (s5 >= 1 && c4 >= 0 && sampleLines[s5] !== controlLines[c4]) {
                  c4--;
                }
                for (; s5 >= 1 && c4 >= 0; s5--, c4--) {
                  if (sampleLines[s5] !== controlLines[c4]) {
                    if (s5 !== 1 || c4 !== 1) {
                      do {
                        s5--;
                        c4--;
                        if (c4 < 0 || sampleLines[s5] !== controlLines[c4]) {
                          var _frame = "\n" + sampleLines[s5].replace(" at new ", " at ");
                          if (fn.displayName && _frame.includes("<anonymous>")) {
                            _frame = _frame.replace("<anonymous>", fn.displayName);
                          }
                          {
                            if (typeof fn === "function") {
                              componentFrameCache.set(fn, _frame);
                            }
                          }
                          return _frame;
                        }
                      } while (s5 >= 1 && c4 >= 0);
                    }
                    break;
                  }
                }
              }
            } finally {
              reentry = false;
              {
                ReactCurrentDispatcher$1.current = previousDispatcher;
                reenableLogs();
              }
              Error.prepareStackTrace = previousPrepareStackTrace;
            }
            var name = fn ? fn.displayName || fn.name : "";
            var syntheticFrame = name ? describeBuiltInComponentFrame(name) : "";
            {
              if (typeof fn === "function") {
                componentFrameCache.set(fn, syntheticFrame);
              }
            }
            return syntheticFrame;
          }
          function describeFunctionComponentFrame(fn, source, ownerFn) {
            {
              return describeNativeComponentFrame(fn, false);
            }
          }
          function shouldConstruct(Component2) {
            var prototype = Component2.prototype;
            return !!(prototype && prototype.isReactComponent);
          }
          function describeUnknownElementTypeFrameInDEV(type, source, ownerFn) {
            if (type == null) {
              return "";
            }
            if (typeof type === "function") {
              {
                return describeNativeComponentFrame(type, shouldConstruct(type));
              }
            }
            if (typeof type === "string") {
              return describeBuiltInComponentFrame(type);
            }
            switch (type) {
              case REACT_SUSPENSE_TYPE:
                return describeBuiltInComponentFrame("Suspense");
              case REACT_SUSPENSE_LIST_TYPE:
                return describeBuiltInComponentFrame("SuspenseList");
            }
            if (typeof type === "object") {
              switch (type.$$typeof) {
                case REACT_FORWARD_REF_TYPE:
                  return describeFunctionComponentFrame(type.render);
                case REACT_MEMO_TYPE:
                  return describeUnknownElementTypeFrameInDEV(type.type, source, ownerFn);
                case REACT_LAZY_TYPE: {
                  var lazyComponent = type;
                  var payload = lazyComponent._payload;
                  var init = lazyComponent._init;
                  try {
                    return describeUnknownElementTypeFrameInDEV(init(payload), source, ownerFn);
                  } catch (x4) {
                  }
                }
              }
            }
            return "";
          }
          var loggedTypeFailures = {};
          var ReactDebugCurrentFrame$1 = ReactSharedInternals.ReactDebugCurrentFrame;
          function setCurrentlyValidatingElement(element) {
            {
              if (element) {
                var owner = element._owner;
                var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
                ReactDebugCurrentFrame$1.setExtraStackFrame(stack);
              } else {
                ReactDebugCurrentFrame$1.setExtraStackFrame(null);
              }
            }
          }
          function checkPropTypes(typeSpecs, values, location2, componentName, element) {
            {
              var has = Function.call.bind(hasOwnProperty);
              for (var typeSpecName in typeSpecs) {
                if (has(typeSpecs, typeSpecName)) {
                  var error$1 = void 0;
                  try {
                    if (typeof typeSpecs[typeSpecName] !== "function") {
                      var err = Error((componentName || "React class") + ": " + location2 + " type `" + typeSpecName + "` is invalid; it must be a function, usually from the `prop-types` package, but received `" + typeof typeSpecs[typeSpecName] + "`.This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.");
                      err.name = "Invariant Violation";
                      throw err;
                    }
                    error$1 = typeSpecs[typeSpecName](values, typeSpecName, componentName, location2, null, "SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED");
                  } catch (ex) {
                    error$1 = ex;
                  }
                  if (error$1 && !(error$1 instanceof Error)) {
                    setCurrentlyValidatingElement(element);
                    error("%s: type specification of %s `%s` is invalid; the type checker function must return `null` or an `Error` but returned a %s. You may have forgotten to pass an argument to the type checker creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and shape all require an argument).", componentName || "React class", location2, typeSpecName, typeof error$1);
                    setCurrentlyValidatingElement(null);
                  }
                  if (error$1 instanceof Error && !(error$1.message in loggedTypeFailures)) {
                    loggedTypeFailures[error$1.message] = true;
                    setCurrentlyValidatingElement(element);
                    error("Failed %s type: %s", location2, error$1.message);
                    setCurrentlyValidatingElement(null);
                  }
                }
              }
            }
          }
          function setCurrentlyValidatingElement$1(element) {
            {
              if (element) {
                var owner = element._owner;
                var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
                setExtraStackFrame(stack);
              } else {
                setExtraStackFrame(null);
              }
            }
          }
          var propTypesMisspellWarningShown;
          {
            propTypesMisspellWarningShown = false;
          }
          function getDeclarationErrorAddendum() {
            if (ReactCurrentOwner.current) {
              var name = getComponentNameFromType(ReactCurrentOwner.current.type);
              if (name) {
                return "\n\nCheck the render method of `" + name + "`.";
              }
            }
            return "";
          }
          function getSourceInfoErrorAddendum(source) {
            if (source !== void 0) {
              var fileName = source.fileName.replace(/^.*[\\\/]/, "");
              var lineNumber = source.lineNumber;
              return "\n\nCheck your code at " + fileName + ":" + lineNumber + ".";
            }
            return "";
          }
          function getSourceInfoErrorAddendumForProps(elementProps) {
            if (elementProps !== null && elementProps !== void 0) {
              return getSourceInfoErrorAddendum(elementProps.__source);
            }
            return "";
          }
          var ownerHasKeyUseWarning = {};
          function getCurrentComponentErrorInfo(parentType) {
            var info = getDeclarationErrorAddendum();
            if (!info) {
              var parentName = typeof parentType === "string" ? parentType : parentType.displayName || parentType.name;
              if (parentName) {
                info = "\n\nCheck the top-level render call using <" + parentName + ">.";
              }
            }
            return info;
          }
          function validateExplicitKey(element, parentType) {
            if (!element._store || element._store.validated || element.key != null) {
              return;
            }
            element._store.validated = true;
            var currentComponentErrorInfo = getCurrentComponentErrorInfo(parentType);
            if (ownerHasKeyUseWarning[currentComponentErrorInfo]) {
              return;
            }
            ownerHasKeyUseWarning[currentComponentErrorInfo] = true;
            var childOwner = "";
            if (element && element._owner && element._owner !== ReactCurrentOwner.current) {
              childOwner = " It was passed a child from " + getComponentNameFromType(element._owner.type) + ".";
            }
            {
              setCurrentlyValidatingElement$1(element);
              error('Each child in a list should have a unique "key" prop.%s%s See https://reactjs.org/link/warning-keys for more information.', currentComponentErrorInfo, childOwner);
              setCurrentlyValidatingElement$1(null);
            }
          }
          function validateChildKeys(node, parentType) {
            if (typeof node !== "object") {
              return;
            }
            if (isArray(node)) {
              for (var i3 = 0; i3 < node.length; i3++) {
                var child = node[i3];
                if (isValidElement(child)) {
                  validateExplicitKey(child, parentType);
                }
              }
            } else if (isValidElement(node)) {
              if (node._store) {
                node._store.validated = true;
              }
            } else if (node) {
              var iteratorFn = getIteratorFn(node);
              if (typeof iteratorFn === "function") {
                if (iteratorFn !== node.entries) {
                  var iterator = iteratorFn.call(node);
                  var step;
                  while (!(step = iterator.next()).done) {
                    if (isValidElement(step.value)) {
                      validateExplicitKey(step.value, parentType);
                    }
                  }
                }
              }
            }
          }
          function validatePropTypes(element) {
            {
              var type = element.type;
              if (type === null || type === void 0 || typeof type === "string") {
                return;
              }
              var propTypes;
              if (typeof type === "function") {
                propTypes = type.propTypes;
              } else if (typeof type === "object" && (type.$$typeof === REACT_FORWARD_REF_TYPE || type.$$typeof === REACT_MEMO_TYPE)) {
                propTypes = type.propTypes;
              } else {
                return;
              }
              if (propTypes) {
                var name = getComponentNameFromType(type);
                checkPropTypes(propTypes, element.props, "prop", name, element);
              } else if (type.PropTypes !== void 0 && !propTypesMisspellWarningShown) {
                propTypesMisspellWarningShown = true;
                var _name = getComponentNameFromType(type);
                error("Component %s declared `PropTypes` instead of `propTypes`. Did you misspell the property assignment?", _name || "Unknown");
              }
              if (typeof type.getDefaultProps === "function" && !type.getDefaultProps.isReactClassApproved) {
                error("getDefaultProps is only used on classic React.createClass definitions. Use a static property named `defaultProps` instead.");
              }
            }
          }
          function validateFragmentProps(fragment) {
            {
              var keys = Object.keys(fragment.props);
              for (var i3 = 0; i3 < keys.length; i3++) {
                var key = keys[i3];
                if (key !== "children" && key !== "key") {
                  setCurrentlyValidatingElement$1(fragment);
                  error("Invalid prop `%s` supplied to `React.Fragment`. React.Fragment can only have `key` and `children` props.", key);
                  setCurrentlyValidatingElement$1(null);
                  break;
                }
              }
              if (fragment.ref !== null) {
                setCurrentlyValidatingElement$1(fragment);
                error("Invalid attribute `ref` supplied to `React.Fragment`.");
                setCurrentlyValidatingElement$1(null);
              }
            }
          }
          function createElementWithValidation(type, props, children) {
            var validType = isValidElementType(type);
            if (!validType) {
              var info = "";
              if (type === void 0 || typeof type === "object" && type !== null && Object.keys(type).length === 0) {
                info += " You likely forgot to export your component from the file it's defined in, or you might have mixed up default and named imports.";
              }
              var sourceInfo = getSourceInfoErrorAddendumForProps(props);
              if (sourceInfo) {
                info += sourceInfo;
              } else {
                info += getDeclarationErrorAddendum();
              }
              var typeString;
              if (type === null) {
                typeString = "null";
              } else if (isArray(type)) {
                typeString = "array";
              } else if (type !== void 0 && type.$$typeof === REACT_ELEMENT_TYPE) {
                typeString = "<" + (getComponentNameFromType(type.type) || "Unknown") + " />";
                info = " Did you accidentally export a JSX literal instead of a component?";
              } else {
                typeString = typeof type;
              }
              {
                error("React.createElement: type is invalid -- expected a string (for built-in components) or a class/function (for composite components) but got: %s.%s", typeString, info);
              }
            }
            var element = createElement7.apply(this, arguments);
            if (element == null) {
              return element;
            }
            if (validType) {
              for (var i3 = 2; i3 < arguments.length; i3++) {
                validateChildKeys(arguments[i3], type);
              }
            }
            if (type === REACT_FRAGMENT_TYPE) {
              validateFragmentProps(element);
            } else {
              validatePropTypes(element);
            }
            return element;
          }
          var didWarnAboutDeprecatedCreateFactory = false;
          function createFactoryWithValidation(type) {
            var validatedFactory = createElementWithValidation.bind(null, type);
            validatedFactory.type = type;
            {
              if (!didWarnAboutDeprecatedCreateFactory) {
                didWarnAboutDeprecatedCreateFactory = true;
                warn("React.createFactory() is deprecated and will be removed in a future major release. Consider using JSX or use React.createElement() directly instead.");
              }
              Object.defineProperty(validatedFactory, "type", {
                enumerable: false,
                get: function() {
                  warn("Factory.type is deprecated. Access the class directly before passing it to createFactory.");
                  Object.defineProperty(this, "type", {
                    value: type
                  });
                  return type;
                }
              });
            }
            return validatedFactory;
          }
          function cloneElementWithValidation(element, props, children) {
            var newElement = cloneElement2.apply(this, arguments);
            for (var i3 = 2; i3 < arguments.length; i3++) {
              validateChildKeys(arguments[i3], newElement.type);
            }
            validatePropTypes(newElement);
            return newElement;
          }
          function startTransition(scope, options) {
            var prevTransition = ReactCurrentBatchConfig.transition;
            ReactCurrentBatchConfig.transition = {};
            var currentTransition = ReactCurrentBatchConfig.transition;
            {
              ReactCurrentBatchConfig.transition._updatedFibers = /* @__PURE__ */ new Set();
            }
            try {
              scope();
            } finally {
              ReactCurrentBatchConfig.transition = prevTransition;
              {
                if (prevTransition === null && currentTransition._updatedFibers) {
                  var updatedFibersCount = currentTransition._updatedFibers.size;
                  if (updatedFibersCount > 10) {
                    warn("Detected a large number of updates inside startTransition. If this is due to a subscription please re-write it to use React provided hooks. Otherwise concurrent mode guarantees are off the table.");
                  }
                  currentTransition._updatedFibers.clear();
                }
              }
            }
          }
          var didWarnAboutMessageChannel = false;
          var enqueueTaskImpl = null;
          function enqueueTask(task) {
            if (enqueueTaskImpl === null) {
              try {
                var requireString = ("require" + Math.random()).slice(0, 7);
                var nodeRequire = module && module[requireString];
                enqueueTaskImpl = nodeRequire.call(module, "timers").setImmediate;
              } catch (_err) {
                enqueueTaskImpl = function(callback) {
                  {
                    if (didWarnAboutMessageChannel === false) {
                      didWarnAboutMessageChannel = true;
                      if (typeof MessageChannel === "undefined") {
                        error("This browser does not have a MessageChannel implementation, so enqueuing tasks via await act(async () => ...) will fail. Please file an issue at https://github.com/facebook/react/issues if you encounter this warning.");
                      }
                    }
                  }
                  var channel = new MessageChannel();
                  channel.port1.onmessage = callback;
                  channel.port2.postMessage(void 0);
                };
              }
            }
            return enqueueTaskImpl(task);
          }
          var actScopeDepth = 0;
          var didWarnNoAwaitAct = false;
          function act(callback) {
            {
              var prevActScopeDepth = actScopeDepth;
              actScopeDepth++;
              if (ReactCurrentActQueue.current === null) {
                ReactCurrentActQueue.current = [];
              }
              var prevIsBatchingLegacy = ReactCurrentActQueue.isBatchingLegacy;
              var result;
              try {
                ReactCurrentActQueue.isBatchingLegacy = true;
                result = callback();
                if (!prevIsBatchingLegacy && ReactCurrentActQueue.didScheduleLegacyUpdate) {
                  var queue = ReactCurrentActQueue.current;
                  if (queue !== null) {
                    ReactCurrentActQueue.didScheduleLegacyUpdate = false;
                    flushActQueue(queue);
                  }
                }
              } catch (error2) {
                popActScope(prevActScopeDepth);
                throw error2;
              } finally {
                ReactCurrentActQueue.isBatchingLegacy = prevIsBatchingLegacy;
              }
              if (result !== null && typeof result === "object" && typeof result.then === "function") {
                var thenableResult = result;
                var wasAwaited = false;
                var thenable = {
                  then: function(resolve, reject) {
                    wasAwaited = true;
                    thenableResult.then(function(returnValue2) {
                      popActScope(prevActScopeDepth);
                      if (actScopeDepth === 0) {
                        recursivelyFlushAsyncActWork(returnValue2, resolve, reject);
                      } else {
                        resolve(returnValue2);
                      }
                    }, function(error2) {
                      popActScope(prevActScopeDepth);
                      reject(error2);
                    });
                  }
                };
                {
                  if (!didWarnNoAwaitAct && typeof Promise !== "undefined") {
                    Promise.resolve().then(function() {
                    }).then(function() {
                      if (!wasAwaited) {
                        didWarnNoAwaitAct = true;
                        error("You called act(async () => ...) without await. This could lead to unexpected testing behaviour, interleaving multiple act calls and mixing their scopes. You should - await act(async () => ...);");
                      }
                    });
                  }
                }
                return thenable;
              } else {
                var returnValue = result;
                popActScope(prevActScopeDepth);
                if (actScopeDepth === 0) {
                  var _queue = ReactCurrentActQueue.current;
                  if (_queue !== null) {
                    flushActQueue(_queue);
                    ReactCurrentActQueue.current = null;
                  }
                  var _thenable = {
                    then: function(resolve, reject) {
                      if (ReactCurrentActQueue.current === null) {
                        ReactCurrentActQueue.current = [];
                        recursivelyFlushAsyncActWork(returnValue, resolve, reject);
                      } else {
                        resolve(returnValue);
                      }
                    }
                  };
                  return _thenable;
                } else {
                  var _thenable2 = {
                    then: function(resolve, reject) {
                      resolve(returnValue);
                    }
                  };
                  return _thenable2;
                }
              }
            }
          }
          function popActScope(prevActScopeDepth) {
            {
              if (prevActScopeDepth !== actScopeDepth - 1) {
                error("You seem to have overlapping act() calls, this is not supported. Be sure to await previous act() calls before making a new one. ");
              }
              actScopeDepth = prevActScopeDepth;
            }
          }
          function recursivelyFlushAsyncActWork(returnValue, resolve, reject) {
            {
              var queue = ReactCurrentActQueue.current;
              if (queue !== null) {
                try {
                  flushActQueue(queue);
                  enqueueTask(function() {
                    if (queue.length === 0) {
                      ReactCurrentActQueue.current = null;
                      resolve(returnValue);
                    } else {
                      recursivelyFlushAsyncActWork(returnValue, resolve, reject);
                    }
                  });
                } catch (error2) {
                  reject(error2);
                }
              } else {
                resolve(returnValue);
              }
            }
          }
          var isFlushing = false;
          function flushActQueue(queue) {
            {
              if (!isFlushing) {
                isFlushing = true;
                var i3 = 0;
                try {
                  for (; i3 < queue.length; i3++) {
                    var callback = queue[i3];
                    do {
                      callback = callback(true);
                    } while (callback !== null);
                  }
                  queue.length = 0;
                } catch (error2) {
                  queue = queue.slice(i3 + 1);
                  throw error2;
                } finally {
                  isFlushing = false;
                }
              }
            }
          }
          var createElement$1 = createElementWithValidation;
          var cloneElement$1 = cloneElementWithValidation;
          var createFactory = createFactoryWithValidation;
          var Children2 = {
            map: mapChildren,
            forEach: forEachChildren,
            count: countChildren,
            toArray,
            only: onlyChild
          };
          exports.Children = Children2;
          exports.Component = Component;
          exports.Fragment = REACT_FRAGMENT_TYPE;
          exports.Profiler = REACT_PROFILER_TYPE;
          exports.PureComponent = PureComponent;
          exports.StrictMode = REACT_STRICT_MODE_TYPE;
          exports.Suspense = REACT_SUSPENSE_TYPE;
          exports.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = ReactSharedInternals;
          exports.cloneElement = cloneElement$1;
          exports.createContext = createContext;
          exports.createElement = createElement$1;
          exports.createFactory = createFactory;
          exports.createRef = createRef;
          exports.forwardRef = forwardRef3;
          exports.isValidElement = isValidElement;
          exports.lazy = lazy;
          exports.memo = memo;
          exports.startTransition = startTransition;
          exports.unstable_act = act;
          exports.useCallback = useCallback3;
          exports.useContext = useContext;
          exports.useDebugValue = useDebugValue;
          exports.useDeferredValue = useDeferredValue;
          exports.useEffect = useEffect18;
          exports.useId = useId;
          exports.useImperativeHandle = useImperativeHandle;
          exports.useInsertionEffect = useInsertionEffect;
          exports.useLayoutEffect = useLayoutEffect2;
          exports.useMemo = useMemo2;
          exports.useReducer = useReducer;
          exports.useRef = useRef4;
          exports.useState = useState17;
          exports.useSyncExternalStore = useSyncExternalStore;
          exports.useTransition = useTransition;
          exports.version = ReactVersion;
          if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop === "function") {
            __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop(new Error());
          }
        })();
      }
    }
  });

  // node_modules/react/index.js
  var require_react = __commonJS({
    "node_modules/react/index.js"(exports, module) {
      "use strict";
      if (false) {
        module.exports = null;
      } else {
        module.exports = require_react_development();
      }
    }
  });

  // node_modules/typesafe-actions/dist/typesafe-actions.umd.production.js
  var require_typesafe_actions_umd_production = __commonJS({
    "node_modules/typesafe-actions/dist/typesafe-actions.umd.production.js"(exports, module) {
      !function(n4, t4) {
        typeof exports == "object" && typeof module != "undefined" ? t4(exports) : typeof define == "function" && define.amd ? define(["exports"], t4) : t4((n4 = n4 || self).TypesafeActions = {});
      }(exports, function(n4) {
        "use strict";
        function t4(n5) {
          return n5 == null;
        }
        function r3(n5) {
          throw new Error("Argument " + n5 + " is empty.");
        }
        function e4(n5) {
          return typeof n5 == "function" && "getType" in n5;
        }
        function i3(n5) {
          throw new Error("Argument " + n5 + ' is invalid, it should be an action-creator instance from "typesafe-actions"');
        }
        function o3(n5, t5) {
          if (n5 == null)
            throw new Error("Argument contains array with empty element at index " + t5);
          if (n5.getType == null)
            throw new Error("Argument contains array with invalid element at index " + t5 + ', it should be an action-creator instance from "typesafe-actions"');
        }
        function u4(n5) {
          return typeof n5 == "string" || typeof n5 == "symbol";
        }
        function a3(n5) {
          return !u4(n5);
        }
        function c4(n5) {
          throw new Error("Argument " + n5 + " is invalid, it should be an action type of type: string | symbol");
        }
        function f3(n5, t5) {
          if (n5 == null)
            throw new Error("Argument contains array with empty element at index " + t5);
          if (typeof n5 != "string" && typeof n5 != "symbol")
            throw new Error("Argument contains array with invalid element at index " + t5 + ", it should be of type: string | symbol");
        }
        function s5(n5, e5, o4, u5) {
          return t4(n5) && r3(1), a3(n5) && i3(1), { type: n5, payload: e5, meta: o4, error: u5 };
        }
        function y4(n5, e5) {
          t4(n5) && r3(1), a3(n5) && c4(1);
          return Object.assign(function() {
            var t5 = e5 != null ? e5.apply(void 0, arguments) : void 0;
            return Object.assign({ type: n5 }, t5);
          }, { getType: function() {
            return n5;
          }, toString: function() {
            return n5;
          } });
        }
        function l4(n5, e5, i4) {
          return t4(n5) && r3(1), a3(n5) && c4(1), function() {
            return y4(n5, function() {
              var n6 = arguments.length <= 0 ? void 0 : arguments[0], t5 = arguments.length <= 1 ? void 0 : arguments[1];
              return e5 == null && i4 == null || (n6 = e5 != null ? e5.apply(void 0, arguments) : void 0, t5 = i4 != null ? i4.apply(void 0, arguments) : void 0), Object.assign({}, n6 !== void 0 && { payload: n6 }, {}, t5 !== void 0 && { meta: t5 });
            });
          };
        }
        function p5(n5) {
          return t4(n5) && r3(1), e4(n5) || i3(1), n5.getType();
        }
        function d3(n5, e5) {
          t4(n5) && r3(1), a3(n5) && c4(1);
          var i4 = e5 != null ? e5(n5) : function() {
            return { type: n5 };
          };
          return Object.assign(i4, { getType: function() {
            return n5;
          }, toString: function() {
            return n5;
          } });
        }
        var g3 = { createAction: function(n5, t5) {
          var r4 = t5 == null ? function() {
            return s5(n5);
          } : t5(s5.bind(null, n5));
          return Object.assign(r4, { getType: function() {
            return n5;
          }, toString: function() {
            return n5;
          } });
        }, createCustomAction: d3, createStandardAction: function(n5) {
          return t4(n5) && r3(1), a3(n5) && c4(1), Object.assign(function() {
            return d3(n5, function(n6) {
              return function(t5, r4) {
                return { type: n6, payload: t5, meta: r4 };
              };
            });
          }, { map: function(t5) {
            return d3(n5, function(n6) {
              return function(r4, e5) {
                return Object.assign(t5(r4, e5), { type: n6 });
              };
            });
          } });
        } };
        n4.action = s5, n4.createAction = l4, n4.createAsyncAction = function(n5, t5, r4, e5) {
          return function() {
            var i4 = [n5, t5, r4, e5].map(function(n6, t6) {
              return Array.isArray(n6) ? l4(n6[0], n6[1], n6[2])() : typeof n6 == "string" || typeof n6 == "symbol" ? l4(n6)() : void (t6 < 3 && function(n7) {
                throw new Error("Argument " + n7 + ' is invalid, it should be an action type of "string | symbol" or a tuple of "[string | symbol, Function, Function?]"');
              }(t6));
            });
            return { request: i4[0], success: i4[1], failure: i4[2], cancel: i4[3] };
          };
        }, n4.createCustomAction = y4, n4.createReducer = function n5(t5, r4) {
          r4 === void 0 && (r4 = {});
          var i4 = Object.assign({}, r4), o4 = function(r5, o5) {
            var a4 = Array.isArray(r5) ? r5 : [r5], c5 = {};
            return a4.map(function(n6, t6) {
              return e4(n6) ? p5(n6) : u4(n6) ? n6 : function(n7) {
                throw new Error("Argument " + n7 + ' is invalid, it should be an action-creator instance from "typesafe-actions" or action type of type: string | symbol');
              }(t6 + 1);
            }).forEach(function(n6) {
              return c5[n6] = o5;
            }), n5(t5, Object.assign({}, i4, {}, c5));
          };
          return Object.assign(function(n6, r5) {
            if (n6 === void 0 && (n6 = t5), i4.hasOwnProperty(r5.type)) {
              var e5 = i4[r5.type];
              if (typeof e5 != "function")
                throw Error('Reducer under "' + r5.type + '" key is not a valid reducer');
              return e5(n6, r5);
            }
            return n6;
          }, { handlers: Object.assign({}, i4), handleAction: o4, handleType: o4 });
        }, n4.deprecated = g3, n4.getType = p5, n4.isActionOf = function(n5, e5) {
          t4(n5) && r3(1);
          var i4 = Array.isArray(n5) ? n5 : [n5];
          i4.forEach(o3);
          var u5 = function(n6) {
            return i4.some(function(t5) {
              return n6.type === t5.getType();
            });
          };
          return e5 === void 0 ? u5 : u5(e5);
        }, n4.isOfType = function(n5, e5) {
          t4(n5) && r3(1);
          var i4 = Array.isArray(n5) ? n5 : [n5];
          i4.forEach(f3);
          var o4 = function(n6) {
            return i4.includes(n6.type);
          };
          return e5 === void 0 ? o4 : o4(e5);
        };
      });
    }
  });

  // node_modules/scheduler/cjs/scheduler.development.js
  var require_scheduler_development = __commonJS({
    "node_modules/scheduler/cjs/scheduler.development.js"(exports) {
      "use strict";
      if (true) {
        (function() {
          "use strict";
          if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart === "function") {
            __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart(new Error());
          }
          var enableSchedulerDebugging = false;
          var enableProfiling = false;
          var frameYieldMs = 5;
          function push(heap, node) {
            var index = heap.length;
            heap.push(node);
            siftUp(heap, node, index);
          }
          function peek(heap) {
            return heap.length === 0 ? null : heap[0];
          }
          function pop(heap) {
            if (heap.length === 0) {
              return null;
            }
            var first = heap[0];
            var last = heap.pop();
            if (last !== first) {
              heap[0] = last;
              siftDown(heap, last, 0);
            }
            return first;
          }
          function siftUp(heap, node, i3) {
            var index = i3;
            while (index > 0) {
              var parentIndex = index - 1 >>> 1;
              var parent = heap[parentIndex];
              if (compare(parent, node) > 0) {
                heap[parentIndex] = node;
                heap[index] = parent;
                index = parentIndex;
              } else {
                return;
              }
            }
          }
          function siftDown(heap, node, i3) {
            var index = i3;
            var length = heap.length;
            var halfLength = length >>> 1;
            while (index < halfLength) {
              var leftIndex = (index + 1) * 2 - 1;
              var left = heap[leftIndex];
              var rightIndex = leftIndex + 1;
              var right = heap[rightIndex];
              if (compare(left, node) < 0) {
                if (rightIndex < length && compare(right, left) < 0) {
                  heap[index] = right;
                  heap[rightIndex] = node;
                  index = rightIndex;
                } else {
                  heap[index] = left;
                  heap[leftIndex] = node;
                  index = leftIndex;
                }
              } else if (rightIndex < length && compare(right, node) < 0) {
                heap[index] = right;
                heap[rightIndex] = node;
                index = rightIndex;
              } else {
                return;
              }
            }
          }
          function compare(a3, b3) {
            var diff = a3.sortIndex - b3.sortIndex;
            return diff !== 0 ? diff : a3.id - b3.id;
          }
          var ImmediatePriority = 1;
          var UserBlockingPriority = 2;
          var NormalPriority = 3;
          var LowPriority = 4;
          var IdlePriority = 5;
          function markTaskErrored(task, ms) {
          }
          var hasPerformanceNow = typeof performance === "object" && typeof performance.now === "function";
          if (hasPerformanceNow) {
            var localPerformance = performance;
            exports.unstable_now = function() {
              return localPerformance.now();
            };
          } else {
            var localDate = Date;
            var initialTime = localDate.now();
            exports.unstable_now = function() {
              return localDate.now() - initialTime;
            };
          }
          var maxSigned31BitInt = 1073741823;
          var IMMEDIATE_PRIORITY_TIMEOUT = -1;
          var USER_BLOCKING_PRIORITY_TIMEOUT = 250;
          var NORMAL_PRIORITY_TIMEOUT = 5e3;
          var LOW_PRIORITY_TIMEOUT = 1e4;
          var IDLE_PRIORITY_TIMEOUT = maxSigned31BitInt;
          var taskQueue = [];
          var timerQueue = [];
          var taskIdCounter = 1;
          var currentTask = null;
          var currentPriorityLevel = NormalPriority;
          var isPerformingWork = false;
          var isHostCallbackScheduled = false;
          var isHostTimeoutScheduled = false;
          var localSetTimeout = typeof setTimeout === "function" ? setTimeout : null;
          var localClearTimeout = typeof clearTimeout === "function" ? clearTimeout : null;
          var localSetImmediate = typeof setImmediate !== "undefined" ? setImmediate : null;
          var isInputPending = typeof navigator !== "undefined" && navigator.scheduling !== void 0 && navigator.scheduling.isInputPending !== void 0 ? navigator.scheduling.isInputPending.bind(navigator.scheduling) : null;
          function advanceTimers(currentTime) {
            var timer = peek(timerQueue);
            while (timer !== null) {
              if (timer.callback === null) {
                pop(timerQueue);
              } else if (timer.startTime <= currentTime) {
                pop(timerQueue);
                timer.sortIndex = timer.expirationTime;
                push(taskQueue, timer);
              } else {
                return;
              }
              timer = peek(timerQueue);
            }
          }
          function handleTimeout(currentTime) {
            isHostTimeoutScheduled = false;
            advanceTimers(currentTime);
            if (!isHostCallbackScheduled) {
              if (peek(taskQueue) !== null) {
                isHostCallbackScheduled = true;
                requestHostCallback(flushWork);
              } else {
                var firstTimer = peek(timerQueue);
                if (firstTimer !== null) {
                  requestHostTimeout(handleTimeout, firstTimer.startTime - currentTime);
                }
              }
            }
          }
          function flushWork(hasTimeRemaining, initialTime2) {
            isHostCallbackScheduled = false;
            if (isHostTimeoutScheduled) {
              isHostTimeoutScheduled = false;
              cancelHostTimeout();
            }
            isPerformingWork = true;
            var previousPriorityLevel = currentPriorityLevel;
            try {
              if (enableProfiling) {
                try {
                  return workLoop(hasTimeRemaining, initialTime2);
                } catch (error) {
                  if (currentTask !== null) {
                    var currentTime = exports.unstable_now();
                    markTaskErrored(currentTask, currentTime);
                    currentTask.isQueued = false;
                  }
                  throw error;
                }
              } else {
                return workLoop(hasTimeRemaining, initialTime2);
              }
            } finally {
              currentTask = null;
              currentPriorityLevel = previousPriorityLevel;
              isPerformingWork = false;
            }
          }
          function workLoop(hasTimeRemaining, initialTime2) {
            var currentTime = initialTime2;
            advanceTimers(currentTime);
            currentTask = peek(taskQueue);
            while (currentTask !== null && !enableSchedulerDebugging) {
              if (currentTask.expirationTime > currentTime && (!hasTimeRemaining || shouldYieldToHost())) {
                break;
              }
              var callback = currentTask.callback;
              if (typeof callback === "function") {
                currentTask.callback = null;
                currentPriorityLevel = currentTask.priorityLevel;
                var didUserCallbackTimeout = currentTask.expirationTime <= currentTime;
                var continuationCallback = callback(didUserCallbackTimeout);
                currentTime = exports.unstable_now();
                if (typeof continuationCallback === "function") {
                  currentTask.callback = continuationCallback;
                } else {
                  if (currentTask === peek(taskQueue)) {
                    pop(taskQueue);
                  }
                }
                advanceTimers(currentTime);
              } else {
                pop(taskQueue);
              }
              currentTask = peek(taskQueue);
            }
            if (currentTask !== null) {
              return true;
            } else {
              var firstTimer = peek(timerQueue);
              if (firstTimer !== null) {
                requestHostTimeout(handleTimeout, firstTimer.startTime - currentTime);
              }
              return false;
            }
          }
          function unstable_runWithPriority(priorityLevel, eventHandler) {
            switch (priorityLevel) {
              case ImmediatePriority:
              case UserBlockingPriority:
              case NormalPriority:
              case LowPriority:
              case IdlePriority:
                break;
              default:
                priorityLevel = NormalPriority;
            }
            var previousPriorityLevel = currentPriorityLevel;
            currentPriorityLevel = priorityLevel;
            try {
              return eventHandler();
            } finally {
              currentPriorityLevel = previousPriorityLevel;
            }
          }
          function unstable_next(eventHandler) {
            var priorityLevel;
            switch (currentPriorityLevel) {
              case ImmediatePriority:
              case UserBlockingPriority:
              case NormalPriority:
                priorityLevel = NormalPriority;
                break;
              default:
                priorityLevel = currentPriorityLevel;
                break;
            }
            var previousPriorityLevel = currentPriorityLevel;
            currentPriorityLevel = priorityLevel;
            try {
              return eventHandler();
            } finally {
              currentPriorityLevel = previousPriorityLevel;
            }
          }
          function unstable_wrapCallback(callback) {
            var parentPriorityLevel = currentPriorityLevel;
            return function() {
              var previousPriorityLevel = currentPriorityLevel;
              currentPriorityLevel = parentPriorityLevel;
              try {
                return callback.apply(this, arguments);
              } finally {
                currentPriorityLevel = previousPriorityLevel;
              }
            };
          }
          function unstable_scheduleCallback(priorityLevel, callback, options) {
            var currentTime = exports.unstable_now();
            var startTime2;
            if (typeof options === "object" && options !== null) {
              var delay = options.delay;
              if (typeof delay === "number" && delay > 0) {
                startTime2 = currentTime + delay;
              } else {
                startTime2 = currentTime;
              }
            } else {
              startTime2 = currentTime;
            }
            var timeout;
            switch (priorityLevel) {
              case ImmediatePriority:
                timeout = IMMEDIATE_PRIORITY_TIMEOUT;
                break;
              case UserBlockingPriority:
                timeout = USER_BLOCKING_PRIORITY_TIMEOUT;
                break;
              case IdlePriority:
                timeout = IDLE_PRIORITY_TIMEOUT;
                break;
              case LowPriority:
                timeout = LOW_PRIORITY_TIMEOUT;
                break;
              case NormalPriority:
              default:
                timeout = NORMAL_PRIORITY_TIMEOUT;
                break;
            }
            var expirationTime = startTime2 + timeout;
            var newTask = {
              id: taskIdCounter++,
              callback,
              priorityLevel,
              startTime: startTime2,
              expirationTime,
              sortIndex: -1
            };
            if (startTime2 > currentTime) {
              newTask.sortIndex = startTime2;
              push(timerQueue, newTask);
              if (peek(taskQueue) === null && newTask === peek(timerQueue)) {
                if (isHostTimeoutScheduled) {
                  cancelHostTimeout();
                } else {
                  isHostTimeoutScheduled = true;
                }
                requestHostTimeout(handleTimeout, startTime2 - currentTime);
              }
            } else {
              newTask.sortIndex = expirationTime;
              push(taskQueue, newTask);
              if (!isHostCallbackScheduled && !isPerformingWork) {
                isHostCallbackScheduled = true;
                requestHostCallback(flushWork);
              }
            }
            return newTask;
          }
          function unstable_pauseExecution() {
          }
          function unstable_continueExecution() {
            if (!isHostCallbackScheduled && !isPerformingWork) {
              isHostCallbackScheduled = true;
              requestHostCallback(flushWork);
            }
          }
          function unstable_getFirstCallbackNode() {
            return peek(taskQueue);
          }
          function unstable_cancelCallback(task) {
            task.callback = null;
          }
          function unstable_getCurrentPriorityLevel() {
            return currentPriorityLevel;
          }
          var isMessageLoopRunning = false;
          var scheduledHostCallback = null;
          var taskTimeoutID = -1;
          var frameInterval = frameYieldMs;
          var startTime = -1;
          function shouldYieldToHost() {
            var timeElapsed = exports.unstable_now() - startTime;
            if (timeElapsed < frameInterval) {
              return false;
            }
            return true;
          }
          function requestPaint() {
          }
          function forceFrameRate(fps) {
            if (fps < 0 || fps > 125) {
              console["error"]("forceFrameRate takes a positive int between 0 and 125, forcing frame rates higher than 125 fps is not supported");
              return;
            }
            if (fps > 0) {
              frameInterval = Math.floor(1e3 / fps);
            } else {
              frameInterval = frameYieldMs;
            }
          }
          var performWorkUntilDeadline = function() {
            if (scheduledHostCallback !== null) {
              var currentTime = exports.unstable_now();
              startTime = currentTime;
              var hasTimeRemaining = true;
              var hasMoreWork = true;
              try {
                hasMoreWork = scheduledHostCallback(hasTimeRemaining, currentTime);
              } finally {
                if (hasMoreWork) {
                  schedulePerformWorkUntilDeadline();
                } else {
                  isMessageLoopRunning = false;
                  scheduledHostCallback = null;
                }
              }
            } else {
              isMessageLoopRunning = false;
            }
          };
          var schedulePerformWorkUntilDeadline;
          if (typeof localSetImmediate === "function") {
            schedulePerformWorkUntilDeadline = function() {
              localSetImmediate(performWorkUntilDeadline);
            };
          } else if (typeof MessageChannel !== "undefined") {
            var channel = new MessageChannel();
            var port = channel.port2;
            channel.port1.onmessage = performWorkUntilDeadline;
            schedulePerformWorkUntilDeadline = function() {
              port.postMessage(null);
            };
          } else {
            schedulePerformWorkUntilDeadline = function() {
              localSetTimeout(performWorkUntilDeadline, 0);
            };
          }
          function requestHostCallback(callback) {
            scheduledHostCallback = callback;
            if (!isMessageLoopRunning) {
              isMessageLoopRunning = true;
              schedulePerformWorkUntilDeadline();
            }
          }
          function requestHostTimeout(callback, ms) {
            taskTimeoutID = localSetTimeout(function() {
              callback(exports.unstable_now());
            }, ms);
          }
          function cancelHostTimeout() {
            localClearTimeout(taskTimeoutID);
            taskTimeoutID = -1;
          }
          var unstable_requestPaint = requestPaint;
          var unstable_Profiling = null;
          exports.unstable_IdlePriority = IdlePriority;
          exports.unstable_ImmediatePriority = ImmediatePriority;
          exports.unstable_LowPriority = LowPriority;
          exports.unstable_NormalPriority = NormalPriority;
          exports.unstable_Profiling = unstable_Profiling;
          exports.unstable_UserBlockingPriority = UserBlockingPriority;
          exports.unstable_cancelCallback = unstable_cancelCallback;
          exports.unstable_continueExecution = unstable_continueExecution;
          exports.unstable_forceFrameRate = forceFrameRate;
          exports.unstable_getCurrentPriorityLevel = unstable_getCurrentPriorityLevel;
          exports.unstable_getFirstCallbackNode = unstable_getFirstCallbackNode;
          exports.unstable_next = unstable_next;
          exports.unstable_pauseExecution = unstable_pauseExecution;
          exports.unstable_requestPaint = unstable_requestPaint;
          exports.unstable_runWithPriority = unstable_runWithPriority;
          exports.unstable_scheduleCallback = unstable_scheduleCallback;
          exports.unstable_shouldYield = shouldYieldToHost;
          exports.unstable_wrapCallback = unstable_wrapCallback;
          if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop === "function") {
            __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop(new Error());
          }
        })();
      }
    }
  });

  // node_modules/scheduler/index.js
  var require_scheduler = __commonJS({
    "node_modules/scheduler/index.js"(exports, module) {
      "use strict";
      if (false) {
        module.exports = null;
      } else {
        module.exports = require_scheduler_development();
      }
    }
  });

  // node_modules/react-dom/cjs/react-dom.development.js
  var require_react_dom_development = __commonJS({
    "node_modules/react-dom/cjs/react-dom.development.js"(exports) {
      "use strict";
      if (true) {
        (function() {
          "use strict";
          if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart === "function") {
            __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart(new Error());
          }
          var React35 = require_react();
          var Scheduler = require_scheduler();
          var ReactSharedInternals = React35.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;
          var suppressWarning = false;
          function setSuppressWarning(newSuppressWarning) {
            {
              suppressWarning = newSuppressWarning;
            }
          }
          function warn(format) {
            {
              if (!suppressWarning) {
                for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
                  args[_key - 1] = arguments[_key];
                }
                printWarning("warn", format, args);
              }
            }
          }
          function error(format) {
            {
              if (!suppressWarning) {
                for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
                  args[_key2 - 1] = arguments[_key2];
                }
                printWarning("error", format, args);
              }
            }
          }
          function printWarning(level, format, args) {
            {
              var ReactDebugCurrentFrame2 = ReactSharedInternals.ReactDebugCurrentFrame;
              var stack = ReactDebugCurrentFrame2.getStackAddendum();
              if (stack !== "") {
                format += "%s";
                args = args.concat([stack]);
              }
              var argsWithFormat = args.map(function(item) {
                return String(item);
              });
              argsWithFormat.unshift("Warning: " + format);
              Function.prototype.apply.call(console[level], console, argsWithFormat);
            }
          }
          var FunctionComponent = 0;
          var ClassComponent = 1;
          var IndeterminateComponent = 2;
          var HostRoot = 3;
          var HostPortal = 4;
          var HostComponent = 5;
          var HostText = 6;
          var Fragment4 = 7;
          var Mode = 8;
          var ContextConsumer = 9;
          var ContextProvider = 10;
          var ForwardRef = 11;
          var Profiler = 12;
          var SuspenseComponent = 13;
          var MemoComponent = 14;
          var SimpleMemoComponent = 15;
          var LazyComponent = 16;
          var IncompleteClassComponent = 17;
          var DehydratedFragment = 18;
          var SuspenseListComponent = 19;
          var ScopeComponent = 21;
          var OffscreenComponent = 22;
          var LegacyHiddenComponent = 23;
          var CacheComponent = 24;
          var TracingMarkerComponent = 25;
          var enableClientRenderFallbackOnTextMismatch = true;
          var enableNewReconciler = false;
          var enableLazyContextPropagation = false;
          var enableLegacyHidden = false;
          var enableSuspenseAvoidThisFallback = false;
          var disableCommentsAsDOMContainers = true;
          var enableCustomElementPropertySupport = false;
          var warnAboutStringRefs = false;
          var enableSchedulingProfiler = true;
          var enableProfilerTimer = true;
          var enableProfilerCommitHooks = true;
          var allNativeEvents = /* @__PURE__ */ new Set();
          var registrationNameDependencies = {};
          var possibleRegistrationNames = {};
          function registerTwoPhaseEvent(registrationName, dependencies) {
            registerDirectEvent(registrationName, dependencies);
            registerDirectEvent(registrationName + "Capture", dependencies);
          }
          function registerDirectEvent(registrationName, dependencies) {
            {
              if (registrationNameDependencies[registrationName]) {
                error("EventRegistry: More than one plugin attempted to publish the same registration name, `%s`.", registrationName);
              }
            }
            registrationNameDependencies[registrationName] = dependencies;
            {
              var lowerCasedName = registrationName.toLowerCase();
              possibleRegistrationNames[lowerCasedName] = registrationName;
              if (registrationName === "onDoubleClick") {
                possibleRegistrationNames.ondblclick = registrationName;
              }
            }
            for (var i3 = 0; i3 < dependencies.length; i3++) {
              allNativeEvents.add(dependencies[i3]);
            }
          }
          var canUseDOM = !!(typeof window !== "undefined" && typeof window.document !== "undefined" && typeof window.document.createElement !== "undefined");
          var hasOwnProperty = Object.prototype.hasOwnProperty;
          function typeName(value) {
            {
              var hasToStringTag = typeof Symbol === "function" && Symbol.toStringTag;
              var type = hasToStringTag && value[Symbol.toStringTag] || value.constructor.name || "Object";
              return type;
            }
          }
          function willCoercionThrow(value) {
            {
              try {
                testStringCoercion(value);
                return false;
              } catch (e4) {
                return true;
              }
            }
          }
          function testStringCoercion(value) {
            return "" + value;
          }
          function checkAttributeStringCoercion(value, attributeName) {
            {
              if (willCoercionThrow(value)) {
                error("The provided `%s` attribute is an unsupported type %s. This value must be coerced to a string before before using it here.", attributeName, typeName(value));
                return testStringCoercion(value);
              }
            }
          }
          function checkKeyStringCoercion(value) {
            {
              if (willCoercionThrow(value)) {
                error("The provided key is an unsupported type %s. This value must be coerced to a string before before using it here.", typeName(value));
                return testStringCoercion(value);
              }
            }
          }
          function checkPropStringCoercion(value, propName) {
            {
              if (willCoercionThrow(value)) {
                error("The provided `%s` prop is an unsupported type %s. This value must be coerced to a string before before using it here.", propName, typeName(value));
                return testStringCoercion(value);
              }
            }
          }
          function checkCSSPropertyStringCoercion(value, propName) {
            {
              if (willCoercionThrow(value)) {
                error("The provided `%s` CSS property is an unsupported type %s. This value must be coerced to a string before before using it here.", propName, typeName(value));
                return testStringCoercion(value);
              }
            }
          }
          function checkHtmlStringCoercion(value) {
            {
              if (willCoercionThrow(value)) {
                error("The provided HTML markup uses a value of unsupported type %s. This value must be coerced to a string before before using it here.", typeName(value));
                return testStringCoercion(value);
              }
            }
          }
          function checkFormFieldValueStringCoercion(value) {
            {
              if (willCoercionThrow(value)) {
                error("Form field values (value, checked, defaultValue, or defaultChecked props) must be strings, not %s. This value must be coerced to a string before before using it here.", typeName(value));
                return testStringCoercion(value);
              }
            }
          }
          var RESERVED = 0;
          var STRING = 1;
          var BOOLEANISH_STRING = 2;
          var BOOLEAN = 3;
          var OVERLOADED_BOOLEAN = 4;
          var NUMERIC = 5;
          var POSITIVE_NUMERIC = 6;
          var ATTRIBUTE_NAME_START_CHAR = ":A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD";
          var ATTRIBUTE_NAME_CHAR = ATTRIBUTE_NAME_START_CHAR + "\\-.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040";
          var VALID_ATTRIBUTE_NAME_REGEX = new RegExp("^[" + ATTRIBUTE_NAME_START_CHAR + "][" + ATTRIBUTE_NAME_CHAR + "]*$");
          var illegalAttributeNameCache = {};
          var validatedAttributeNameCache = {};
          function isAttributeNameSafe(attributeName) {
            if (hasOwnProperty.call(validatedAttributeNameCache, attributeName)) {
              return true;
            }
            if (hasOwnProperty.call(illegalAttributeNameCache, attributeName)) {
              return false;
            }
            if (VALID_ATTRIBUTE_NAME_REGEX.test(attributeName)) {
              validatedAttributeNameCache[attributeName] = true;
              return true;
            }
            illegalAttributeNameCache[attributeName] = true;
            {
              error("Invalid attribute name: `%s`", attributeName);
            }
            return false;
          }
          function shouldIgnoreAttribute(name, propertyInfo, isCustomComponentTag) {
            if (propertyInfo !== null) {
              return propertyInfo.type === RESERVED;
            }
            if (isCustomComponentTag) {
              return false;
            }
            if (name.length > 2 && (name[0] === "o" || name[0] === "O") && (name[1] === "n" || name[1] === "N")) {
              return true;
            }
            return false;
          }
          function shouldRemoveAttributeWithWarning(name, value, propertyInfo, isCustomComponentTag) {
            if (propertyInfo !== null && propertyInfo.type === RESERVED) {
              return false;
            }
            switch (typeof value) {
              case "function":
              case "symbol":
                return true;
              case "boolean": {
                if (isCustomComponentTag) {
                  return false;
                }
                if (propertyInfo !== null) {
                  return !propertyInfo.acceptsBooleans;
                } else {
                  var prefix2 = name.toLowerCase().slice(0, 5);
                  return prefix2 !== "data-" && prefix2 !== "aria-";
                }
              }
              default:
                return false;
            }
          }
          function shouldRemoveAttribute(name, value, propertyInfo, isCustomComponentTag) {
            if (value === null || typeof value === "undefined") {
              return true;
            }
            if (shouldRemoveAttributeWithWarning(name, value, propertyInfo, isCustomComponentTag)) {
              return true;
            }
            if (isCustomComponentTag) {
              return false;
            }
            if (propertyInfo !== null) {
              switch (propertyInfo.type) {
                case BOOLEAN:
                  return !value;
                case OVERLOADED_BOOLEAN:
                  return value === false;
                case NUMERIC:
                  return isNaN(value);
                case POSITIVE_NUMERIC:
                  return isNaN(value) || value < 1;
              }
            }
            return false;
          }
          function getPropertyInfo(name) {
            return properties.hasOwnProperty(name) ? properties[name] : null;
          }
          function PropertyInfoRecord(name, type, mustUseProperty, attributeName, attributeNamespace, sanitizeURL2, removeEmptyString) {
            this.acceptsBooleans = type === BOOLEANISH_STRING || type === BOOLEAN || type === OVERLOADED_BOOLEAN;
            this.attributeName = attributeName;
            this.attributeNamespace = attributeNamespace;
            this.mustUseProperty = mustUseProperty;
            this.propertyName = name;
            this.type = type;
            this.sanitizeURL = sanitizeURL2;
            this.removeEmptyString = removeEmptyString;
          }
          var properties = {};
          var reservedProps = [
            "children",
            "dangerouslySetInnerHTML",
            "defaultValue",
            "defaultChecked",
            "innerHTML",
            "suppressContentEditableWarning",
            "suppressHydrationWarning",
            "style"
          ];
          reservedProps.forEach(function(name) {
            properties[name] = new PropertyInfoRecord(name, RESERVED, false, name, null, false, false);
          });
          [["acceptCharset", "accept-charset"], ["className", "class"], ["htmlFor", "for"], ["httpEquiv", "http-equiv"]].forEach(function(_ref) {
            var name = _ref[0], attributeName = _ref[1];
            properties[name] = new PropertyInfoRecord(name, STRING, false, attributeName, null, false, false);
          });
          ["contentEditable", "draggable", "spellCheck", "value"].forEach(function(name) {
            properties[name] = new PropertyInfoRecord(name, BOOLEANISH_STRING, false, name.toLowerCase(), null, false, false);
          });
          ["autoReverse", "externalResourcesRequired", "focusable", "preserveAlpha"].forEach(function(name) {
            properties[name] = new PropertyInfoRecord(name, BOOLEANISH_STRING, false, name, null, false, false);
          });
          [
            "allowFullScreen",
            "async",
            "autoFocus",
            "autoPlay",
            "controls",
            "default",
            "defer",
            "disabled",
            "disablePictureInPicture",
            "disableRemotePlayback",
            "formNoValidate",
            "hidden",
            "loop",
            "noModule",
            "noValidate",
            "open",
            "playsInline",
            "readOnly",
            "required",
            "reversed",
            "scoped",
            "seamless",
            "itemScope"
          ].forEach(function(name) {
            properties[name] = new PropertyInfoRecord(name, BOOLEAN, false, name.toLowerCase(), null, false, false);
          });
          [
            "checked",
            "multiple",
            "muted",
            "selected"
          ].forEach(function(name) {
            properties[name] = new PropertyInfoRecord(name, BOOLEAN, true, name, null, false, false);
          });
          [
            "capture",
            "download"
          ].forEach(function(name) {
            properties[name] = new PropertyInfoRecord(name, OVERLOADED_BOOLEAN, false, name, null, false, false);
          });
          [
            "cols",
            "rows",
            "size",
            "span"
          ].forEach(function(name) {
            properties[name] = new PropertyInfoRecord(name, POSITIVE_NUMERIC, false, name, null, false, false);
          });
          ["rowSpan", "start"].forEach(function(name) {
            properties[name] = new PropertyInfoRecord(name, NUMERIC, false, name.toLowerCase(), null, false, false);
          });
          var CAMELIZE = /[\-\:]([a-z])/g;
          var capitalize = function(token) {
            return token[1].toUpperCase();
          };
          [
            "accent-height",
            "alignment-baseline",
            "arabic-form",
            "baseline-shift",
            "cap-height",
            "clip-path",
            "clip-rule",
            "color-interpolation",
            "color-interpolation-filters",
            "color-profile",
            "color-rendering",
            "dominant-baseline",
            "enable-background",
            "fill-opacity",
            "fill-rule",
            "flood-color",
            "flood-opacity",
            "font-family",
            "font-size",
            "font-size-adjust",
            "font-stretch",
            "font-style",
            "font-variant",
            "font-weight",
            "glyph-name",
            "glyph-orientation-horizontal",
            "glyph-orientation-vertical",
            "horiz-adv-x",
            "horiz-origin-x",
            "image-rendering",
            "letter-spacing",
            "lighting-color",
            "marker-end",
            "marker-mid",
            "marker-start",
            "overline-position",
            "overline-thickness",
            "paint-order",
            "panose-1",
            "pointer-events",
            "rendering-intent",
            "shape-rendering",
            "stop-color",
            "stop-opacity",
            "strikethrough-position",
            "strikethrough-thickness",
            "stroke-dasharray",
            "stroke-dashoffset",
            "stroke-linecap",
            "stroke-linejoin",
            "stroke-miterlimit",
            "stroke-opacity",
            "stroke-width",
            "text-anchor",
            "text-decoration",
            "text-rendering",
            "underline-position",
            "underline-thickness",
            "unicode-bidi",
            "unicode-range",
            "units-per-em",
            "v-alphabetic",
            "v-hanging",
            "v-ideographic",
            "v-mathematical",
            "vector-effect",
            "vert-adv-y",
            "vert-origin-x",
            "vert-origin-y",
            "word-spacing",
            "writing-mode",
            "xmlns:xlink",
            "x-height"
          ].forEach(function(attributeName) {
            var name = attributeName.replace(CAMELIZE, capitalize);
            properties[name] = new PropertyInfoRecord(name, STRING, false, attributeName, null, false, false);
          });
          [
            "xlink:actuate",
            "xlink:arcrole",
            "xlink:role",
            "xlink:show",
            "xlink:title",
            "xlink:type"
          ].forEach(function(attributeName) {
            var name = attributeName.replace(CAMELIZE, capitalize);
            properties[name] = new PropertyInfoRecord(name, STRING, false, attributeName, "http://www.w3.org/1999/xlink", false, false);
          });
          [
            "xml:base",
            "xml:lang",
            "xml:space"
          ].forEach(function(attributeName) {
            var name = attributeName.replace(CAMELIZE, capitalize);
            properties[name] = new PropertyInfoRecord(name, STRING, false, attributeName, "http://www.w3.org/XML/1998/namespace", false, false);
          });
          ["tabIndex", "crossOrigin"].forEach(function(attributeName) {
            properties[attributeName] = new PropertyInfoRecord(attributeName, STRING, false, attributeName.toLowerCase(), null, false, false);
          });
          var xlinkHref = "xlinkHref";
          properties[xlinkHref] = new PropertyInfoRecord("xlinkHref", STRING, false, "xlink:href", "http://www.w3.org/1999/xlink", true, false);
          ["src", "href", "action", "formAction"].forEach(function(attributeName) {
            properties[attributeName] = new PropertyInfoRecord(attributeName, STRING, false, attributeName.toLowerCase(), null, true, true);
          });
          var isJavaScriptProtocol = /^[\u0000-\u001F ]*j[\r\n\t]*a[\r\n\t]*v[\r\n\t]*a[\r\n\t]*s[\r\n\t]*c[\r\n\t]*r[\r\n\t]*i[\r\n\t]*p[\r\n\t]*t[\r\n\t]*\:/i;
          var didWarn = false;
          function sanitizeURL(url) {
            {
              if (!didWarn && isJavaScriptProtocol.test(url)) {
                didWarn = true;
                error("A future version of React will block javascript: URLs as a security precaution. Use event handlers instead if you can. If you need to generate unsafe HTML try using dangerouslySetInnerHTML instead. React was passed %s.", JSON.stringify(url));
              }
            }
          }
          function getValueForProperty(node, name, expected, propertyInfo) {
            {
              if (propertyInfo.mustUseProperty) {
                var propertyName = propertyInfo.propertyName;
                return node[propertyName];
              } else {
                {
                  checkAttributeStringCoercion(expected, name);
                }
                if (propertyInfo.sanitizeURL) {
                  sanitizeURL("" + expected);
                }
                var attributeName = propertyInfo.attributeName;
                var stringValue = null;
                if (propertyInfo.type === OVERLOADED_BOOLEAN) {
                  if (node.hasAttribute(attributeName)) {
                    var value = node.getAttribute(attributeName);
                    if (value === "") {
                      return true;
                    }
                    if (shouldRemoveAttribute(name, expected, propertyInfo, false)) {
                      return value;
                    }
                    if (value === "" + expected) {
                      return expected;
                    }
                    return value;
                  }
                } else if (node.hasAttribute(attributeName)) {
                  if (shouldRemoveAttribute(name, expected, propertyInfo, false)) {
                    return node.getAttribute(attributeName);
                  }
                  if (propertyInfo.type === BOOLEAN) {
                    return expected;
                  }
                  stringValue = node.getAttribute(attributeName);
                }
                if (shouldRemoveAttribute(name, expected, propertyInfo, false)) {
                  return stringValue === null ? expected : stringValue;
                } else if (stringValue === "" + expected) {
                  return expected;
                } else {
                  return stringValue;
                }
              }
            }
          }
          function getValueForAttribute(node, name, expected) {
            {
              if (!isAttributeNameSafe(name)) {
                return;
              }
              if (!node.hasAttribute(name)) {
                return expected === void 0 ? void 0 : null;
              }
              var value = node.getAttribute(name);
              {
                checkAttributeStringCoercion(expected, name);
              }
              if (value === "" + expected) {
                return expected;
              }
              return value;
            }
          }
          function setValueForProperty(node, name, value, isCustomComponentTag) {
            var propertyInfo = getPropertyInfo(name);
            if (shouldIgnoreAttribute(name, propertyInfo, isCustomComponentTag)) {
              return;
            }
            if (shouldRemoveAttribute(name, value, propertyInfo, isCustomComponentTag)) {
              value = null;
            }
            if (isCustomComponentTag || propertyInfo === null) {
              if (isAttributeNameSafe(name)) {
                var _attributeName = name;
                if (value === null) {
                  node.removeAttribute(_attributeName);
                } else {
                  {
                    checkAttributeStringCoercion(value, name);
                  }
                  node.setAttribute(_attributeName, "" + value);
                }
              }
              return;
            }
            var mustUseProperty = propertyInfo.mustUseProperty;
            if (mustUseProperty) {
              var propertyName = propertyInfo.propertyName;
              if (value === null) {
                var type = propertyInfo.type;
                node[propertyName] = type === BOOLEAN ? false : "";
              } else {
                node[propertyName] = value;
              }
              return;
            }
            var attributeName = propertyInfo.attributeName, attributeNamespace = propertyInfo.attributeNamespace;
            if (value === null) {
              node.removeAttribute(attributeName);
            } else {
              var _type = propertyInfo.type;
              var attributeValue;
              if (_type === BOOLEAN || _type === OVERLOADED_BOOLEAN && value === true) {
                attributeValue = "";
              } else {
                {
                  {
                    checkAttributeStringCoercion(value, attributeName);
                  }
                  attributeValue = "" + value;
                }
                if (propertyInfo.sanitizeURL) {
                  sanitizeURL(attributeValue.toString());
                }
              }
              if (attributeNamespace) {
                node.setAttributeNS(attributeNamespace, attributeName, attributeValue);
              } else {
                node.setAttribute(attributeName, attributeValue);
              }
            }
          }
          var REACT_ELEMENT_TYPE = Symbol.for("react.element");
          var REACT_PORTAL_TYPE = Symbol.for("react.portal");
          var REACT_FRAGMENT_TYPE = Symbol.for("react.fragment");
          var REACT_STRICT_MODE_TYPE = Symbol.for("react.strict_mode");
          var REACT_PROFILER_TYPE = Symbol.for("react.profiler");
          var REACT_PROVIDER_TYPE = Symbol.for("react.provider");
          var REACT_CONTEXT_TYPE = Symbol.for("react.context");
          var REACT_FORWARD_REF_TYPE = Symbol.for("react.forward_ref");
          var REACT_SUSPENSE_TYPE = Symbol.for("react.suspense");
          var REACT_SUSPENSE_LIST_TYPE = Symbol.for("react.suspense_list");
          var REACT_MEMO_TYPE = Symbol.for("react.memo");
          var REACT_LAZY_TYPE = Symbol.for("react.lazy");
          var REACT_SCOPE_TYPE = Symbol.for("react.scope");
          var REACT_DEBUG_TRACING_MODE_TYPE = Symbol.for("react.debug_trace_mode");
          var REACT_OFFSCREEN_TYPE = Symbol.for("react.offscreen");
          var REACT_LEGACY_HIDDEN_TYPE = Symbol.for("react.legacy_hidden");
          var REACT_CACHE_TYPE = Symbol.for("react.cache");
          var REACT_TRACING_MARKER_TYPE = Symbol.for("react.tracing_marker");
          var MAYBE_ITERATOR_SYMBOL = Symbol.iterator;
          var FAUX_ITERATOR_SYMBOL = "@@iterator";
          function getIteratorFn(maybeIterable) {
            if (maybeIterable === null || typeof maybeIterable !== "object") {
              return null;
            }
            var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];
            if (typeof maybeIterator === "function") {
              return maybeIterator;
            }
            return null;
          }
          var assign = Object.assign;
          var disabledDepth = 0;
          var prevLog;
          var prevInfo;
          var prevWarn;
          var prevError;
          var prevGroup;
          var prevGroupCollapsed;
          var prevGroupEnd;
          function disabledLog() {
          }
          disabledLog.__reactDisabledLog = true;
          function disableLogs() {
            {
              if (disabledDepth === 0) {
                prevLog = console.log;
                prevInfo = console.info;
                prevWarn = console.warn;
                prevError = console.error;
                prevGroup = console.group;
                prevGroupCollapsed = console.groupCollapsed;
                prevGroupEnd = console.groupEnd;
                var props = {
                  configurable: true,
                  enumerable: true,
                  value: disabledLog,
                  writable: true
                };
                Object.defineProperties(console, {
                  info: props,
                  log: props,
                  warn: props,
                  error: props,
                  group: props,
                  groupCollapsed: props,
                  groupEnd: props
                });
              }
              disabledDepth++;
            }
          }
          function reenableLogs() {
            {
              disabledDepth--;
              if (disabledDepth === 0) {
                var props = {
                  configurable: true,
                  enumerable: true,
                  writable: true
                };
                Object.defineProperties(console, {
                  log: assign({}, props, {
                    value: prevLog
                  }),
                  info: assign({}, props, {
                    value: prevInfo
                  }),
                  warn: assign({}, props, {
                    value: prevWarn
                  }),
                  error: assign({}, props, {
                    value: prevError
                  }),
                  group: assign({}, props, {
                    value: prevGroup
                  }),
                  groupCollapsed: assign({}, props, {
                    value: prevGroupCollapsed
                  }),
                  groupEnd: assign({}, props, {
                    value: prevGroupEnd
                  })
                });
              }
              if (disabledDepth < 0) {
                error("disabledDepth fell below zero. This is a bug in React. Please file an issue.");
              }
            }
          }
          var ReactCurrentDispatcher = ReactSharedInternals.ReactCurrentDispatcher;
          var prefix;
          function describeBuiltInComponentFrame(name, source, ownerFn) {
            {
              if (prefix === void 0) {
                try {
                  throw Error();
                } catch (x4) {
                  var match = x4.stack.trim().match(/\n( *(at )?)/);
                  prefix = match && match[1] || "";
                }
              }
              return "\n" + prefix + name;
            }
          }
          var reentry = false;
          var componentFrameCache;
          {
            var PossiblyWeakMap = typeof WeakMap === "function" ? WeakMap : Map;
            componentFrameCache = new PossiblyWeakMap();
          }
          function describeNativeComponentFrame(fn, construct) {
            if (!fn || reentry) {
              return "";
            }
            {
              var frame = componentFrameCache.get(fn);
              if (frame !== void 0) {
                return frame;
              }
            }
            var control;
            reentry = true;
            var previousPrepareStackTrace = Error.prepareStackTrace;
            Error.prepareStackTrace = void 0;
            var previousDispatcher;
            {
              previousDispatcher = ReactCurrentDispatcher.current;
              ReactCurrentDispatcher.current = null;
              disableLogs();
            }
            try {
              if (construct) {
                var Fake = function() {
                  throw Error();
                };
                Object.defineProperty(Fake.prototype, "props", {
                  set: function() {
                    throw Error();
                  }
                });
                if (typeof Reflect === "object" && Reflect.construct) {
                  try {
                    Reflect.construct(Fake, []);
                  } catch (x4) {
                    control = x4;
                  }
                  Reflect.construct(fn, [], Fake);
                } else {
                  try {
                    Fake.call();
                  } catch (x4) {
                    control = x4;
                  }
                  fn.call(Fake.prototype);
                }
              } else {
                try {
                  throw Error();
                } catch (x4) {
                  control = x4;
                }
                fn();
              }
            } catch (sample) {
              if (sample && control && typeof sample.stack === "string") {
                var sampleLines = sample.stack.split("\n");
                var controlLines = control.stack.split("\n");
                var s5 = sampleLines.length - 1;
                var c4 = controlLines.length - 1;
                while (s5 >= 1 && c4 >= 0 && sampleLines[s5] !== controlLines[c4]) {
                  c4--;
                }
                for (; s5 >= 1 && c4 >= 0; s5--, c4--) {
                  if (sampleLines[s5] !== controlLines[c4]) {
                    if (s5 !== 1 || c4 !== 1) {
                      do {
                        s5--;
                        c4--;
                        if (c4 < 0 || sampleLines[s5] !== controlLines[c4]) {
                          var _frame = "\n" + sampleLines[s5].replace(" at new ", " at ");
                          if (fn.displayName && _frame.includes("<anonymous>")) {
                            _frame = _frame.replace("<anonymous>", fn.displayName);
                          }
                          {
                            if (typeof fn === "function") {
                              componentFrameCache.set(fn, _frame);
                            }
                          }
                          return _frame;
                        }
                      } while (s5 >= 1 && c4 >= 0);
                    }
                    break;
                  }
                }
              }
            } finally {
              reentry = false;
              {
                ReactCurrentDispatcher.current = previousDispatcher;
                reenableLogs();
              }
              Error.prepareStackTrace = previousPrepareStackTrace;
            }
            var name = fn ? fn.displayName || fn.name : "";
            var syntheticFrame = name ? describeBuiltInComponentFrame(name) : "";
            {
              if (typeof fn === "function") {
                componentFrameCache.set(fn, syntheticFrame);
              }
            }
            return syntheticFrame;
          }
          function describeClassComponentFrame(ctor, source, ownerFn) {
            {
              return describeNativeComponentFrame(ctor, true);
            }
          }
          function describeFunctionComponentFrame(fn, source, ownerFn) {
            {
              return describeNativeComponentFrame(fn, false);
            }
          }
          function shouldConstruct(Component) {
            var prototype = Component.prototype;
            return !!(prototype && prototype.isReactComponent);
          }
          function describeUnknownElementTypeFrameInDEV(type, source, ownerFn) {
            if (type == null) {
              return "";
            }
            if (typeof type === "function") {
              {
                return describeNativeComponentFrame(type, shouldConstruct(type));
              }
            }
            if (typeof type === "string") {
              return describeBuiltInComponentFrame(type);
            }
            switch (type) {
              case REACT_SUSPENSE_TYPE:
                return describeBuiltInComponentFrame("Suspense");
              case REACT_SUSPENSE_LIST_TYPE:
                return describeBuiltInComponentFrame("SuspenseList");
            }
            if (typeof type === "object") {
              switch (type.$$typeof) {
                case REACT_FORWARD_REF_TYPE:
                  return describeFunctionComponentFrame(type.render);
                case REACT_MEMO_TYPE:
                  return describeUnknownElementTypeFrameInDEV(type.type, source, ownerFn);
                case REACT_LAZY_TYPE: {
                  var lazyComponent = type;
                  var payload = lazyComponent._payload;
                  var init = lazyComponent._init;
                  try {
                    return describeUnknownElementTypeFrameInDEV(init(payload), source, ownerFn);
                  } catch (x4) {
                  }
                }
              }
            }
            return "";
          }
          function describeFiber(fiber) {
            var owner = fiber._debugOwner ? fiber._debugOwner.type : null;
            var source = fiber._debugSource;
            switch (fiber.tag) {
              case HostComponent:
                return describeBuiltInComponentFrame(fiber.type);
              case LazyComponent:
                return describeBuiltInComponentFrame("Lazy");
              case SuspenseComponent:
                return describeBuiltInComponentFrame("Suspense");
              case SuspenseListComponent:
                return describeBuiltInComponentFrame("SuspenseList");
              case FunctionComponent:
              case IndeterminateComponent:
              case SimpleMemoComponent:
                return describeFunctionComponentFrame(fiber.type);
              case ForwardRef:
                return describeFunctionComponentFrame(fiber.type.render);
              case ClassComponent:
                return describeClassComponentFrame(fiber.type);
              default:
                return "";
            }
          }
          function getStackByFiberInDevAndProd(workInProgress2) {
            try {
              var info = "";
              var node = workInProgress2;
              do {
                info += describeFiber(node);
                node = node.return;
              } while (node);
              return info;
            } catch (x4) {
              return "\nError generating stack: " + x4.message + "\n" + x4.stack;
            }
          }
          function getWrappedName(outerType, innerType, wrapperName) {
            var displayName = outerType.displayName;
            if (displayName) {
              return displayName;
            }
            var functionName = innerType.displayName || innerType.name || "";
            return functionName !== "" ? wrapperName + "(" + functionName + ")" : wrapperName;
          }
          function getContextName(type) {
            return type.displayName || "Context";
          }
          function getComponentNameFromType(type) {
            if (type == null) {
              return null;
            }
            {
              if (typeof type.tag === "number") {
                error("Received an unexpected object in getComponentNameFromType(). This is likely a bug in React. Please file an issue.");
              }
            }
            if (typeof type === "function") {
              return type.displayName || type.name || null;
            }
            if (typeof type === "string") {
              return type;
            }
            switch (type) {
              case REACT_FRAGMENT_TYPE:
                return "Fragment";
              case REACT_PORTAL_TYPE:
                return "Portal";
              case REACT_PROFILER_TYPE:
                return "Profiler";
              case REACT_STRICT_MODE_TYPE:
                return "StrictMode";
              case REACT_SUSPENSE_TYPE:
                return "Suspense";
              case REACT_SUSPENSE_LIST_TYPE:
                return "SuspenseList";
            }
            if (typeof type === "object") {
              switch (type.$$typeof) {
                case REACT_CONTEXT_TYPE:
                  var context = type;
                  return getContextName(context) + ".Consumer";
                case REACT_PROVIDER_TYPE:
                  var provider = type;
                  return getContextName(provider._context) + ".Provider";
                case REACT_FORWARD_REF_TYPE:
                  return getWrappedName(type, type.render, "ForwardRef");
                case REACT_MEMO_TYPE:
                  var outerName = type.displayName || null;
                  if (outerName !== null) {
                    return outerName;
                  }
                  return getComponentNameFromType(type.type) || "Memo";
                case REACT_LAZY_TYPE: {
                  var lazyComponent = type;
                  var payload = lazyComponent._payload;
                  var init = lazyComponent._init;
                  try {
                    return getComponentNameFromType(init(payload));
                  } catch (x4) {
                    return null;
                  }
                }
              }
            }
            return null;
          }
          function getWrappedName$1(outerType, innerType, wrapperName) {
            var functionName = innerType.displayName || innerType.name || "";
            return outerType.displayName || (functionName !== "" ? wrapperName + "(" + functionName + ")" : wrapperName);
          }
          function getContextName$1(type) {
            return type.displayName || "Context";
          }
          function getComponentNameFromFiber(fiber) {
            var tag = fiber.tag, type = fiber.type;
            switch (tag) {
              case CacheComponent:
                return "Cache";
              case ContextConsumer:
                var context = type;
                return getContextName$1(context) + ".Consumer";
              case ContextProvider:
                var provider = type;
                return getContextName$1(provider._context) + ".Provider";
              case DehydratedFragment:
                return "DehydratedFragment";
              case ForwardRef:
                return getWrappedName$1(type, type.render, "ForwardRef");
              case Fragment4:
                return "Fragment";
              case HostComponent:
                return type;
              case HostPortal:
                return "Portal";
              case HostRoot:
                return "Root";
              case HostText:
                return "Text";
              case LazyComponent:
                return getComponentNameFromType(type);
              case Mode:
                if (type === REACT_STRICT_MODE_TYPE) {
                  return "StrictMode";
                }
                return "Mode";
              case OffscreenComponent:
                return "Offscreen";
              case Profiler:
                return "Profiler";
              case ScopeComponent:
                return "Scope";
              case SuspenseComponent:
                return "Suspense";
              case SuspenseListComponent:
                return "SuspenseList";
              case TracingMarkerComponent:
                return "TracingMarker";
              case ClassComponent:
              case FunctionComponent:
              case IncompleteClassComponent:
              case IndeterminateComponent:
              case MemoComponent:
              case SimpleMemoComponent:
                if (typeof type === "function") {
                  return type.displayName || type.name || null;
                }
                if (typeof type === "string") {
                  return type;
                }
                break;
            }
            return null;
          }
          var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;
          var current = null;
          var isRendering = false;
          function getCurrentFiberOwnerNameInDevOrNull() {
            {
              if (current === null) {
                return null;
              }
              var owner = current._debugOwner;
              if (owner !== null && typeof owner !== "undefined") {
                return getComponentNameFromFiber(owner);
              }
            }
            return null;
          }
          function getCurrentFiberStackInDev() {
            {
              if (current === null) {
                return "";
              }
              return getStackByFiberInDevAndProd(current);
            }
          }
          function resetCurrentFiber() {
            {
              ReactDebugCurrentFrame.getCurrentStack = null;
              current = null;
              isRendering = false;
            }
          }
          function setCurrentFiber(fiber) {
            {
              ReactDebugCurrentFrame.getCurrentStack = getCurrentFiberStackInDev;
              current = fiber;
              isRendering = false;
            }
          }
          function setIsRendering(rendering) {
            {
              isRendering = rendering;
            }
          }
          function toString(value) {
            return "" + value;
          }
          function getToStringValue(value) {
            switch (typeof value) {
              case "boolean":
              case "number":
              case "string":
              case "undefined":
                return value;
              case "object":
                {
                  checkFormFieldValueStringCoercion(value);
                }
                return value;
              default:
                return "";
            }
          }
          var hasReadOnlyValue = {
            button: true,
            checkbox: true,
            image: true,
            hidden: true,
            radio: true,
            reset: true,
            submit: true
          };
          function checkControlledValueProps(tagName, props) {
            {
              if (!(hasReadOnlyValue[props.type] || props.onChange || props.onInput || props.readOnly || props.disabled || props.value == null)) {
                error("You provided a `value` prop to a form field without an `onChange` handler. This will render a read-only field. If the field should be mutable use `defaultValue`. Otherwise, set either `onChange` or `readOnly`.");
              }
              if (!(props.onChange || props.readOnly || props.disabled || props.checked == null)) {
                error("You provided a `checked` prop to a form field without an `onChange` handler. This will render a read-only field. If the field should be mutable use `defaultChecked`. Otherwise, set either `onChange` or `readOnly`.");
              }
            }
          }
          function isCheckable(elem) {
            var type = elem.type;
            var nodeName = elem.nodeName;
            return nodeName && nodeName.toLowerCase() === "input" && (type === "checkbox" || type === "radio");
          }
          function getTracker(node) {
            return node._valueTracker;
          }
          function detachTracker(node) {
            node._valueTracker = null;
          }
          function getValueFromNode(node) {
            var value = "";
            if (!node) {
              return value;
            }
            if (isCheckable(node)) {
              value = node.checked ? "true" : "false";
            } else {
              value = node.value;
            }
            return value;
          }
          function trackValueOnNode(node) {
            var valueField = isCheckable(node) ? "checked" : "value";
            var descriptor = Object.getOwnPropertyDescriptor(node.constructor.prototype, valueField);
            {
              checkFormFieldValueStringCoercion(node[valueField]);
            }
            var currentValue = "" + node[valueField];
            if (node.hasOwnProperty(valueField) || typeof descriptor === "undefined" || typeof descriptor.get !== "function" || typeof descriptor.set !== "function") {
              return;
            }
            var get2 = descriptor.get, set2 = descriptor.set;
            Object.defineProperty(node, valueField, {
              configurable: true,
              get: function() {
                return get2.call(this);
              },
              set: function(value) {
                {
                  checkFormFieldValueStringCoercion(value);
                }
                currentValue = "" + value;
                set2.call(this, value);
              }
            });
            Object.defineProperty(node, valueField, {
              enumerable: descriptor.enumerable
            });
            var tracker = {
              getValue: function() {
                return currentValue;
              },
              setValue: function(value) {
                {
                  checkFormFieldValueStringCoercion(value);
                }
                currentValue = "" + value;
              },
              stopTracking: function() {
                detachTracker(node);
                delete node[valueField];
              }
            };
            return tracker;
          }
          function track(node) {
            if (getTracker(node)) {
              return;
            }
            node._valueTracker = trackValueOnNode(node);
          }
          function updateValueIfChanged(node) {
            if (!node) {
              return false;
            }
            var tracker = getTracker(node);
            if (!tracker) {
              return true;
            }
            var lastValue = tracker.getValue();
            var nextValue = getValueFromNode(node);
            if (nextValue !== lastValue) {
              tracker.setValue(nextValue);
              return true;
            }
            return false;
          }
          function getActiveElement(doc) {
            doc = doc || (typeof document !== "undefined" ? document : void 0);
            if (typeof doc === "undefined") {
              return null;
            }
            try {
              return doc.activeElement || doc.body;
            } catch (e4) {
              return doc.body;
            }
          }
          var didWarnValueDefaultValue = false;
          var didWarnCheckedDefaultChecked = false;
          var didWarnControlledToUncontrolled = false;
          var didWarnUncontrolledToControlled = false;
          function isControlled(props) {
            var usesChecked = props.type === "checkbox" || props.type === "radio";
            return usesChecked ? props.checked != null : props.value != null;
          }
          function getHostProps(element, props) {
            var node = element;
            var checked = props.checked;
            var hostProps = assign({}, props, {
              defaultChecked: void 0,
              defaultValue: void 0,
              value: void 0,
              checked: checked != null ? checked : node._wrapperState.initialChecked
            });
            return hostProps;
          }
          function initWrapperState(element, props) {
            {
              checkControlledValueProps("input", props);
              if (props.checked !== void 0 && props.defaultChecked !== void 0 && !didWarnCheckedDefaultChecked) {
                error("%s contains an input of type %s with both checked and defaultChecked props. Input elements must be either controlled or uncontrolled (specify either the checked prop, or the defaultChecked prop, but not both). Decide between using a controlled or uncontrolled input element and remove one of these props. More info: https://reactjs.org/link/controlled-components", getCurrentFiberOwnerNameInDevOrNull() || "A component", props.type);
                didWarnCheckedDefaultChecked = true;
              }
              if (props.value !== void 0 && props.defaultValue !== void 0 && !didWarnValueDefaultValue) {
                error("%s contains an input of type %s with both value and defaultValue props. Input elements must be either controlled or uncontrolled (specify either the value prop, or the defaultValue prop, but not both). Decide between using a controlled or uncontrolled input element and remove one of these props. More info: https://reactjs.org/link/controlled-components", getCurrentFiberOwnerNameInDevOrNull() || "A component", props.type);
                didWarnValueDefaultValue = true;
              }
            }
            var node = element;
            var defaultValue2 = props.defaultValue == null ? "" : props.defaultValue;
            node._wrapperState = {
              initialChecked: props.checked != null ? props.checked : props.defaultChecked,
              initialValue: getToStringValue(props.value != null ? props.value : defaultValue2),
              controlled: isControlled(props)
            };
          }
          function updateChecked(element, props) {
            var node = element;
            var checked = props.checked;
            if (checked != null) {
              setValueForProperty(node, "checked", checked, false);
            }
          }
          function updateWrapper(element, props) {
            var node = element;
            {
              var controlled = isControlled(props);
              if (!node._wrapperState.controlled && controlled && !didWarnUncontrolledToControlled) {
                error("A component is changing an uncontrolled input to be controlled. This is likely caused by the value changing from undefined to a defined value, which should not happen. Decide between using a controlled or uncontrolled input element for the lifetime of the component. More info: https://reactjs.org/link/controlled-components");
                didWarnUncontrolledToControlled = true;
              }
              if (node._wrapperState.controlled && !controlled && !didWarnControlledToUncontrolled) {
                error("A component is changing a controlled input to be uncontrolled. This is likely caused by the value changing from a defined to undefined, which should not happen. Decide between using a controlled or uncontrolled input element for the lifetime of the component. More info: https://reactjs.org/link/controlled-components");
                didWarnControlledToUncontrolled = true;
              }
            }
            updateChecked(element, props);
            var value = getToStringValue(props.value);
            var type = props.type;
            if (value != null) {
              if (type === "number") {
                if (value === 0 && node.value === "" || node.value != value) {
                  node.value = toString(value);
                }
              } else if (node.value !== toString(value)) {
                node.value = toString(value);
              }
            } else if (type === "submit" || type === "reset") {
              node.removeAttribute("value");
              return;
            }
            {
              if (props.hasOwnProperty("value")) {
                setDefaultValue(node, props.type, value);
              } else if (props.hasOwnProperty("defaultValue")) {
                setDefaultValue(node, props.type, getToStringValue(props.defaultValue));
              }
            }
            {
              if (props.checked == null && props.defaultChecked != null) {
                node.defaultChecked = !!props.defaultChecked;
              }
            }
          }
          function postMountWrapper(element, props, isHydrating2) {
            var node = element;
            if (props.hasOwnProperty("value") || props.hasOwnProperty("defaultValue")) {
              var type = props.type;
              var isButton = type === "submit" || type === "reset";
              if (isButton && (props.value === void 0 || props.value === null)) {
                return;
              }
              var initialValue = toString(node._wrapperState.initialValue);
              if (!isHydrating2) {
                {
                  if (initialValue !== node.value) {
                    node.value = initialValue;
                  }
                }
              }
              {
                node.defaultValue = initialValue;
              }
            }
            var name = node.name;
            if (name !== "") {
              node.name = "";
            }
            {
              node.defaultChecked = !node.defaultChecked;
              node.defaultChecked = !!node._wrapperState.initialChecked;
            }
            if (name !== "") {
              node.name = name;
            }
          }
          function restoreControlledState(element, props) {
            var node = element;
            updateWrapper(node, props);
            updateNamedCousins(node, props);
          }
          function updateNamedCousins(rootNode, props) {
            var name = props.name;
            if (props.type === "radio" && name != null) {
              var queryRoot = rootNode;
              while (queryRoot.parentNode) {
                queryRoot = queryRoot.parentNode;
              }
              {
                checkAttributeStringCoercion(name, "name");
              }
              var group = queryRoot.querySelectorAll("input[name=" + JSON.stringify("" + name) + '][type="radio"]');
              for (var i3 = 0; i3 < group.length; i3++) {
                var otherNode = group[i3];
                if (otherNode === rootNode || otherNode.form !== rootNode.form) {
                  continue;
                }
                var otherProps = getFiberCurrentPropsFromNode(otherNode);
                if (!otherProps) {
                  throw new Error("ReactDOMInput: Mixing React and non-React radio inputs with the same `name` is not supported.");
                }
                updateValueIfChanged(otherNode);
                updateWrapper(otherNode, otherProps);
              }
            }
          }
          function setDefaultValue(node, type, value) {
            if (type !== "number" || getActiveElement(node.ownerDocument) !== node) {
              if (value == null) {
                node.defaultValue = toString(node._wrapperState.initialValue);
              } else if (node.defaultValue !== toString(value)) {
                node.defaultValue = toString(value);
              }
            }
          }
          var didWarnSelectedSetOnOption = false;
          var didWarnInvalidChild = false;
          var didWarnInvalidInnerHTML = false;
          function validateProps(element, props) {
            {
              if (props.value == null) {
                if (typeof props.children === "object" && props.children !== null) {
                  React35.Children.forEach(props.children, function(child) {
                    if (child == null) {
                      return;
                    }
                    if (typeof child === "string" || typeof child === "number") {
                      return;
                    }
                    if (!didWarnInvalidChild) {
                      didWarnInvalidChild = true;
                      error("Cannot infer the option value of complex children. Pass a `value` prop or use a plain string as children to <option>.");
                    }
                  });
                } else if (props.dangerouslySetInnerHTML != null) {
                  if (!didWarnInvalidInnerHTML) {
                    didWarnInvalidInnerHTML = true;
                    error("Pass a `value` prop if you set dangerouslyInnerHTML so React knows which value should be selected.");
                  }
                }
              }
              if (props.selected != null && !didWarnSelectedSetOnOption) {
                error("Use the `defaultValue` or `value` props on <select> instead of setting `selected` on <option>.");
                didWarnSelectedSetOnOption = true;
              }
            }
          }
          function postMountWrapper$1(element, props) {
            if (props.value != null) {
              element.setAttribute("value", toString(getToStringValue(props.value)));
            }
          }
          var isArrayImpl = Array.isArray;
          function isArray(a3) {
            return isArrayImpl(a3);
          }
          var didWarnValueDefaultValue$1;
          {
            didWarnValueDefaultValue$1 = false;
          }
          function getDeclarationErrorAddendum() {
            var ownerName = getCurrentFiberOwnerNameInDevOrNull();
            if (ownerName) {
              return "\n\nCheck the render method of `" + ownerName + "`.";
            }
            return "";
          }
          var valuePropNames = ["value", "defaultValue"];
          function checkSelectPropTypes(props) {
            {
              checkControlledValueProps("select", props);
              for (var i3 = 0; i3 < valuePropNames.length; i3++) {
                var propName = valuePropNames[i3];
                if (props[propName] == null) {
                  continue;
                }
                var propNameIsArray = isArray(props[propName]);
                if (props.multiple && !propNameIsArray) {
                  error("The `%s` prop supplied to <select> must be an array if `multiple` is true.%s", propName, getDeclarationErrorAddendum());
                } else if (!props.multiple && propNameIsArray) {
                  error("The `%s` prop supplied to <select> must be a scalar value if `multiple` is false.%s", propName, getDeclarationErrorAddendum());
                }
              }
            }
          }
          function updateOptions(node, multiple, propValue, setDefaultSelected) {
            var options2 = node.options;
            if (multiple) {
              var selectedValues = propValue;
              var selectedValue = {};
              for (var i3 = 0; i3 < selectedValues.length; i3++) {
                selectedValue["$" + selectedValues[i3]] = true;
              }
              for (var _i = 0; _i < options2.length; _i++) {
                var selected = selectedValue.hasOwnProperty("$" + options2[_i].value);
                if (options2[_i].selected !== selected) {
                  options2[_i].selected = selected;
                }
                if (selected && setDefaultSelected) {
                  options2[_i].defaultSelected = true;
                }
              }
            } else {
              var _selectedValue = toString(getToStringValue(propValue));
              var defaultSelected = null;
              for (var _i2 = 0; _i2 < options2.length; _i2++) {
                if (options2[_i2].value === _selectedValue) {
                  options2[_i2].selected = true;
                  if (setDefaultSelected) {
                    options2[_i2].defaultSelected = true;
                  }
                  return;
                }
                if (defaultSelected === null && !options2[_i2].disabled) {
                  defaultSelected = options2[_i2];
                }
              }
              if (defaultSelected !== null) {
                defaultSelected.selected = true;
              }
            }
          }
          function getHostProps$1(element, props) {
            return assign({}, props, {
              value: void 0
            });
          }
          function initWrapperState$1(element, props) {
            var node = element;
            {
              checkSelectPropTypes(props);
            }
            node._wrapperState = {
              wasMultiple: !!props.multiple
            };
            {
              if (props.value !== void 0 && props.defaultValue !== void 0 && !didWarnValueDefaultValue$1) {
                error("Select elements must be either controlled or uncontrolled (specify either the value prop, or the defaultValue prop, but not both). Decide between using a controlled or uncontrolled select element and remove one of these props. More info: https://reactjs.org/link/controlled-components");
                didWarnValueDefaultValue$1 = true;
              }
            }
          }
          function postMountWrapper$2(element, props) {
            var node = element;
            node.multiple = !!props.multiple;
            var value = props.value;
            if (value != null) {
              updateOptions(node, !!props.multiple, value, false);
            } else if (props.defaultValue != null) {
              updateOptions(node, !!props.multiple, props.defaultValue, true);
            }
          }
          function postUpdateWrapper(element, props) {
            var node = element;
            var wasMultiple = node._wrapperState.wasMultiple;
            node._wrapperState.wasMultiple = !!props.multiple;
            var value = props.value;
            if (value != null) {
              updateOptions(node, !!props.multiple, value, false);
            } else if (wasMultiple !== !!props.multiple) {
              if (props.defaultValue != null) {
                updateOptions(node, !!props.multiple, props.defaultValue, true);
              } else {
                updateOptions(node, !!props.multiple, props.multiple ? [] : "", false);
              }
            }
          }
          function restoreControlledState$1(element, props) {
            var node = element;
            var value = props.value;
            if (value != null) {
              updateOptions(node, !!props.multiple, value, false);
            }
          }
          var didWarnValDefaultVal = false;
          function getHostProps$2(element, props) {
            var node = element;
            if (props.dangerouslySetInnerHTML != null) {
              throw new Error("`dangerouslySetInnerHTML` does not make sense on <textarea>.");
            }
            var hostProps = assign({}, props, {
              value: void 0,
              defaultValue: void 0,
              children: toString(node._wrapperState.initialValue)
            });
            return hostProps;
          }
          function initWrapperState$2(element, props) {
            var node = element;
            {
              checkControlledValueProps("textarea", props);
              if (props.value !== void 0 && props.defaultValue !== void 0 && !didWarnValDefaultVal) {
                error("%s contains a textarea with both value and defaultValue props. Textarea elements must be either controlled or uncontrolled (specify either the value prop, or the defaultValue prop, but not both). Decide between using a controlled or uncontrolled textarea and remove one of these props. More info: https://reactjs.org/link/controlled-components", getCurrentFiberOwnerNameInDevOrNull() || "A component");
                didWarnValDefaultVal = true;
              }
            }
            var initialValue = props.value;
            if (initialValue == null) {
              var children = props.children, defaultValue2 = props.defaultValue;
              if (children != null) {
                {
                  error("Use the `defaultValue` or `value` props instead of setting children on <textarea>.");
                }
                {
                  if (defaultValue2 != null) {
                    throw new Error("If you supply `defaultValue` on a <textarea>, do not pass children.");
                  }
                  if (isArray(children)) {
                    if (children.length > 1) {
                      throw new Error("<textarea> can only have at most one child.");
                    }
                    children = children[0];
                  }
                  defaultValue2 = children;
                }
              }
              if (defaultValue2 == null) {
                defaultValue2 = "";
              }
              initialValue = defaultValue2;
            }
            node._wrapperState = {
              initialValue: getToStringValue(initialValue)
            };
          }
          function updateWrapper$1(element, props) {
            var node = element;
            var value = getToStringValue(props.value);
            var defaultValue2 = getToStringValue(props.defaultValue);
            if (value != null) {
              var newValue = toString(value);
              if (newValue !== node.value) {
                node.value = newValue;
              }
              if (props.defaultValue == null && node.defaultValue !== newValue) {
                node.defaultValue = newValue;
              }
            }
            if (defaultValue2 != null) {
              node.defaultValue = toString(defaultValue2);
            }
          }
          function postMountWrapper$3(element, props) {
            var node = element;
            var textContent = node.textContent;
            if (textContent === node._wrapperState.initialValue) {
              if (textContent !== "" && textContent !== null) {
                node.value = textContent;
              }
            }
          }
          function restoreControlledState$2(element, props) {
            updateWrapper$1(element, props);
          }
          var HTML_NAMESPACE = "http://www.w3.org/1999/xhtml";
          var MATH_NAMESPACE = "http://www.w3.org/1998/Math/MathML";
          var SVG_NAMESPACE = "http://www.w3.org/2000/svg";
          function getIntrinsicNamespace(type) {
            switch (type) {
              case "svg":
                return SVG_NAMESPACE;
              case "math":
                return MATH_NAMESPACE;
              default:
                return HTML_NAMESPACE;
            }
          }
          function getChildNamespace(parentNamespace, type) {
            if (parentNamespace == null || parentNamespace === HTML_NAMESPACE) {
              return getIntrinsicNamespace(type);
            }
            if (parentNamespace === SVG_NAMESPACE && type === "foreignObject") {
              return HTML_NAMESPACE;
            }
            return parentNamespace;
          }
          var createMicrosoftUnsafeLocalFunction = function(func) {
            if (typeof MSApp !== "undefined" && MSApp.execUnsafeLocalFunction) {
              return function(arg0, arg1, arg2, arg3) {
                MSApp.execUnsafeLocalFunction(function() {
                  return func(arg0, arg1, arg2, arg3);
                });
              };
            } else {
              return func;
            }
          };
          var reusableSVGContainer;
          var setInnerHTML = createMicrosoftUnsafeLocalFunction(function(node, html) {
            if (node.namespaceURI === SVG_NAMESPACE) {
              if (!("innerHTML" in node)) {
                reusableSVGContainer = reusableSVGContainer || document.createElement("div");
                reusableSVGContainer.innerHTML = "<svg>" + html.valueOf().toString() + "</svg>";
                var svgNode = reusableSVGContainer.firstChild;
                while (node.firstChild) {
                  node.removeChild(node.firstChild);
                }
                while (svgNode.firstChild) {
                  node.appendChild(svgNode.firstChild);
                }
                return;
              }
            }
            node.innerHTML = html;
          });
          var ELEMENT_NODE = 1;
          var TEXT_NODE = 3;
          var COMMENT_NODE = 8;
          var DOCUMENT_NODE = 9;
          var DOCUMENT_FRAGMENT_NODE = 11;
          var setTextContent = function(node, text) {
            if (text) {
              var firstChild = node.firstChild;
              if (firstChild && firstChild === node.lastChild && firstChild.nodeType === TEXT_NODE) {
                firstChild.nodeValue = text;
                return;
              }
            }
            node.textContent = text;
          };
          var shorthandToLonghand = {
            animation: ["animationDelay", "animationDirection", "animationDuration", "animationFillMode", "animationIterationCount", "animationName", "animationPlayState", "animationTimingFunction"],
            background: ["backgroundAttachment", "backgroundClip", "backgroundColor", "backgroundImage", "backgroundOrigin", "backgroundPositionX", "backgroundPositionY", "backgroundRepeat", "backgroundSize"],
            backgroundPosition: ["backgroundPositionX", "backgroundPositionY"],
            border: ["borderBottomColor", "borderBottomStyle", "borderBottomWidth", "borderImageOutset", "borderImageRepeat", "borderImageSlice", "borderImageSource", "borderImageWidth", "borderLeftColor", "borderLeftStyle", "borderLeftWidth", "borderRightColor", "borderRightStyle", "borderRightWidth", "borderTopColor", "borderTopStyle", "borderTopWidth"],
            borderBlockEnd: ["borderBlockEndColor", "borderBlockEndStyle", "borderBlockEndWidth"],
            borderBlockStart: ["borderBlockStartColor", "borderBlockStartStyle", "borderBlockStartWidth"],
            borderBottom: ["borderBottomColor", "borderBottomStyle", "borderBottomWidth"],
            borderColor: ["borderBottomColor", "borderLeftColor", "borderRightColor", "borderTopColor"],
            borderImage: ["borderImageOutset", "borderImageRepeat", "borderImageSlice", "borderImageSource", "borderImageWidth"],
            borderInlineEnd: ["borderInlineEndColor", "borderInlineEndStyle", "borderInlineEndWidth"],
            borderInlineStart: ["borderInlineStartColor", "borderInlineStartStyle", "borderInlineStartWidth"],
            borderLeft: ["borderLeftColor", "borderLeftStyle", "borderLeftWidth"],
            borderRadius: ["borderBottomLeftRadius", "borderBottomRightRadius", "borderTopLeftRadius", "borderTopRightRadius"],
            borderRight: ["borderRightColor", "borderRightStyle", "borderRightWidth"],
            borderStyle: ["borderBottomStyle", "borderLeftStyle", "borderRightStyle", "borderTopStyle"],
            borderTop: ["borderTopColor", "borderTopStyle", "borderTopWidth"],
            borderWidth: ["borderBottomWidth", "borderLeftWidth", "borderRightWidth", "borderTopWidth"],
            columnRule: ["columnRuleColor", "columnRuleStyle", "columnRuleWidth"],
            columns: ["columnCount", "columnWidth"],
            flex: ["flexBasis", "flexGrow", "flexShrink"],
            flexFlow: ["flexDirection", "flexWrap"],
            font: ["fontFamily", "fontFeatureSettings", "fontKerning", "fontLanguageOverride", "fontSize", "fontSizeAdjust", "fontStretch", "fontStyle", "fontVariant", "fontVariantAlternates", "fontVariantCaps", "fontVariantEastAsian", "fontVariantLigatures", "fontVariantNumeric", "fontVariantPosition", "fontWeight", "lineHeight"],
            fontVariant: ["fontVariantAlternates", "fontVariantCaps", "fontVariantEastAsian", "fontVariantLigatures", "fontVariantNumeric", "fontVariantPosition"],
            gap: ["columnGap", "rowGap"],
            grid: ["gridAutoColumns", "gridAutoFlow", "gridAutoRows", "gridTemplateAreas", "gridTemplateColumns", "gridTemplateRows"],
            gridArea: ["gridColumnEnd", "gridColumnStart", "gridRowEnd", "gridRowStart"],
            gridColumn: ["gridColumnEnd", "gridColumnStart"],
            gridColumnGap: ["columnGap"],
            gridGap: ["columnGap", "rowGap"],
            gridRow: ["gridRowEnd", "gridRowStart"],
            gridRowGap: ["rowGap"],
            gridTemplate: ["gridTemplateAreas", "gridTemplateColumns", "gridTemplateRows"],
            listStyle: ["listStyleImage", "listStylePosition", "listStyleType"],
            margin: ["marginBottom", "marginLeft", "marginRight", "marginTop"],
            marker: ["markerEnd", "markerMid", "markerStart"],
            mask: ["maskClip", "maskComposite", "maskImage", "maskMode", "maskOrigin", "maskPositionX", "maskPositionY", "maskRepeat", "maskSize"],
            maskPosition: ["maskPositionX", "maskPositionY"],
            outline: ["outlineColor", "outlineStyle", "outlineWidth"],
            overflow: ["overflowX", "overflowY"],
            padding: ["paddingBottom", "paddingLeft", "paddingRight", "paddingTop"],
            placeContent: ["alignContent", "justifyContent"],
            placeItems: ["alignItems", "justifyItems"],
            placeSelf: ["alignSelf", "justifySelf"],
            textDecoration: ["textDecorationColor", "textDecorationLine", "textDecorationStyle"],
            textEmphasis: ["textEmphasisColor", "textEmphasisStyle"],
            transition: ["transitionDelay", "transitionDuration", "transitionProperty", "transitionTimingFunction"],
            wordWrap: ["overflowWrap"]
          };
          var isUnitlessNumber = {
            animationIterationCount: true,
            aspectRatio: true,
            borderImageOutset: true,
            borderImageSlice: true,
            borderImageWidth: true,
            boxFlex: true,
            boxFlexGroup: true,
            boxOrdinalGroup: true,
            columnCount: true,
            columns: true,
            flex: true,
            flexGrow: true,
            flexPositive: true,
            flexShrink: true,
            flexNegative: true,
            flexOrder: true,
            gridArea: true,
            gridRow: true,
            gridRowEnd: true,
            gridRowSpan: true,
            gridRowStart: true,
            gridColumn: true,
            gridColumnEnd: true,
            gridColumnSpan: true,
            gridColumnStart: true,
            fontWeight: true,
            lineClamp: true,
            lineHeight: true,
            opacity: true,
            order: true,
            orphans: true,
            tabSize: true,
            widows: true,
            zIndex: true,
            zoom: true,
            fillOpacity: true,
            floodOpacity: true,
            stopOpacity: true,
            strokeDasharray: true,
            strokeDashoffset: true,
            strokeMiterlimit: true,
            strokeOpacity: true,
            strokeWidth: true
          };
          function prefixKey(prefix2, key) {
            return prefix2 + key.charAt(0).toUpperCase() + key.substring(1);
          }
          var prefixes = ["Webkit", "ms", "Moz", "O"];
          Object.keys(isUnitlessNumber).forEach(function(prop) {
            prefixes.forEach(function(prefix2) {
              isUnitlessNumber[prefixKey(prefix2, prop)] = isUnitlessNumber[prop];
            });
          });
          function dangerousStyleValue(name, value, isCustomProperty) {
            var isEmpty = value == null || typeof value === "boolean" || value === "";
            if (isEmpty) {
              return "";
            }
            if (!isCustomProperty && typeof value === "number" && value !== 0 && !(isUnitlessNumber.hasOwnProperty(name) && isUnitlessNumber[name])) {
              return value + "px";
            }
            {
              checkCSSPropertyStringCoercion(value, name);
            }
            return ("" + value).trim();
          }
          var uppercasePattern = /([A-Z])/g;
          var msPattern = /^ms-/;
          function hyphenateStyleName(name) {
            return name.replace(uppercasePattern, "-$1").toLowerCase().replace(msPattern, "-ms-");
          }
          var warnValidStyle = function() {
          };
          {
            var badVendoredStyleNamePattern = /^(?:webkit|moz|o)[A-Z]/;
            var msPattern$1 = /^-ms-/;
            var hyphenPattern = /-(.)/g;
            var badStyleValueWithSemicolonPattern = /;\s*$/;
            var warnedStyleNames = {};
            var warnedStyleValues = {};
            var warnedForNaNValue = false;
            var warnedForInfinityValue = false;
            var camelize = function(string) {
              return string.replace(hyphenPattern, function(_3, character) {
                return character.toUpperCase();
              });
            };
            var warnHyphenatedStyleName = function(name) {
              if (warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name]) {
                return;
              }
              warnedStyleNames[name] = true;
              error("Unsupported style property %s. Did you mean %s?", name, camelize(name.replace(msPattern$1, "ms-")));
            };
            var warnBadVendoredStyleName = function(name) {
              if (warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name]) {
                return;
              }
              warnedStyleNames[name] = true;
              error("Unsupported vendor-prefixed style property %s. Did you mean %s?", name, name.charAt(0).toUpperCase() + name.slice(1));
            };
            var warnStyleValueWithSemicolon = function(name, value) {
              if (warnedStyleValues.hasOwnProperty(value) && warnedStyleValues[value]) {
                return;
              }
              warnedStyleValues[value] = true;
              error(`Style property values shouldn't contain a semicolon. Try "%s: %s" instead.`, name, value.replace(badStyleValueWithSemicolonPattern, ""));
            };
            var warnStyleValueIsNaN = function(name, value) {
              if (warnedForNaNValue) {
                return;
              }
              warnedForNaNValue = true;
              error("`NaN` is an invalid value for the `%s` css style property.", name);
            };
            var warnStyleValueIsInfinity = function(name, value) {
              if (warnedForInfinityValue) {
                return;
              }
              warnedForInfinityValue = true;
              error("`Infinity` is an invalid value for the `%s` css style property.", name);
            };
            warnValidStyle = function(name, value) {
              if (name.indexOf("-") > -1) {
                warnHyphenatedStyleName(name);
              } else if (badVendoredStyleNamePattern.test(name)) {
                warnBadVendoredStyleName(name);
              } else if (badStyleValueWithSemicolonPattern.test(value)) {
                warnStyleValueWithSemicolon(name, value);
              }
              if (typeof value === "number") {
                if (isNaN(value)) {
                  warnStyleValueIsNaN(name, value);
                } else if (!isFinite(value)) {
                  warnStyleValueIsInfinity(name, value);
                }
              }
            };
          }
          var warnValidStyle$1 = warnValidStyle;
          function createDangerousStringForStyles(styles) {
            {
              var serialized = "";
              var delimiter = "";
              for (var styleName in styles) {
                if (!styles.hasOwnProperty(styleName)) {
                  continue;
                }
                var styleValue = styles[styleName];
                if (styleValue != null) {
                  var isCustomProperty = styleName.indexOf("--") === 0;
                  serialized += delimiter + (isCustomProperty ? styleName : hyphenateStyleName(styleName)) + ":";
                  serialized += dangerousStyleValue(styleName, styleValue, isCustomProperty);
                  delimiter = ";";
                }
              }
              return serialized || null;
            }
          }
          function setValueForStyles(node, styles) {
            var style2 = node.style;
            for (var styleName in styles) {
              if (!styles.hasOwnProperty(styleName)) {
                continue;
              }
              var isCustomProperty = styleName.indexOf("--") === 0;
              {
                if (!isCustomProperty) {
                  warnValidStyle$1(styleName, styles[styleName]);
                }
              }
              var styleValue = dangerousStyleValue(styleName, styles[styleName], isCustomProperty);
              if (styleName === "float") {
                styleName = "cssFloat";
              }
              if (isCustomProperty) {
                style2.setProperty(styleName, styleValue);
              } else {
                style2[styleName] = styleValue;
              }
            }
          }
          function isValueEmpty(value) {
            return value == null || typeof value === "boolean" || value === "";
          }
          function expandShorthandMap(styles) {
            var expanded = {};
            for (var key in styles) {
              var longhands = shorthandToLonghand[key] || [key];
              for (var i3 = 0; i3 < longhands.length; i3++) {
                expanded[longhands[i3]] = key;
              }
            }
            return expanded;
          }
          function validateShorthandPropertyCollisionInDev(styleUpdates, nextStyles) {
            {
              if (!nextStyles) {
                return;
              }
              var expandedUpdates = expandShorthandMap(styleUpdates);
              var expandedStyles = expandShorthandMap(nextStyles);
              var warnedAbout = {};
              for (var key in expandedUpdates) {
                var originalKey = expandedUpdates[key];
                var correctOriginalKey = expandedStyles[key];
                if (correctOriginalKey && originalKey !== correctOriginalKey) {
                  var warningKey = originalKey + "," + correctOriginalKey;
                  if (warnedAbout[warningKey]) {
                    continue;
                  }
                  warnedAbout[warningKey] = true;
                  error("%s a style property during rerender (%s) when a conflicting property is set (%s) can lead to styling bugs. To avoid this, don't mix shorthand and non-shorthand properties for the same value; instead, replace the shorthand with separate values.", isValueEmpty(styleUpdates[originalKey]) ? "Removing" : "Updating", originalKey, correctOriginalKey);
                }
              }
            }
          }
          var omittedCloseTags = {
            area: true,
            base: true,
            br: true,
            col: true,
            embed: true,
            hr: true,
            img: true,
            input: true,
            keygen: true,
            link: true,
            meta: true,
            param: true,
            source: true,
            track: true,
            wbr: true
          };
          var voidElementTags = assign({
            menuitem: true
          }, omittedCloseTags);
          var HTML = "__html";
          function assertValidProps(tag, props) {
            if (!props) {
              return;
            }
            if (voidElementTags[tag]) {
              if (props.children != null || props.dangerouslySetInnerHTML != null) {
                throw new Error(tag + " is a void element tag and must neither have `children` nor use `dangerouslySetInnerHTML`.");
              }
            }
            if (props.dangerouslySetInnerHTML != null) {
              if (props.children != null) {
                throw new Error("Can only set one of `children` or `props.dangerouslySetInnerHTML`.");
              }
              if (typeof props.dangerouslySetInnerHTML !== "object" || !(HTML in props.dangerouslySetInnerHTML)) {
                throw new Error("`props.dangerouslySetInnerHTML` must be in the form `{__html: ...}`. Please visit https://reactjs.org/link/dangerously-set-inner-html for more information.");
              }
            }
            {
              if (!props.suppressContentEditableWarning && props.contentEditable && props.children != null) {
                error("A component is `contentEditable` and contains `children` managed by React. It is now your responsibility to guarantee that none of those nodes are unexpectedly modified or duplicated. This is probably not intentional.");
              }
            }
            if (props.style != null && typeof props.style !== "object") {
              throw new Error("The `style` prop expects a mapping from style properties to values, not a string. For example, style={{marginRight: spacing + 'em'}} when using JSX.");
            }
          }
          function isCustomComponent(tagName, props) {
            if (tagName.indexOf("-") === -1) {
              return typeof props.is === "string";
            }
            switch (tagName) {
              case "annotation-xml":
              case "color-profile":
              case "font-face":
              case "font-face-src":
              case "font-face-uri":
              case "font-face-format":
              case "font-face-name":
              case "missing-glyph":
                return false;
              default:
                return true;
            }
          }
          var possibleStandardNames = {
            accept: "accept",
            acceptcharset: "acceptCharset",
            "accept-charset": "acceptCharset",
            accesskey: "accessKey",
            action: "action",
            allowfullscreen: "allowFullScreen",
            alt: "alt",
            as: "as",
            async: "async",
            autocapitalize: "autoCapitalize",
            autocomplete: "autoComplete",
            autocorrect: "autoCorrect",
            autofocus: "autoFocus",
            autoplay: "autoPlay",
            autosave: "autoSave",
            capture: "capture",
            cellpadding: "cellPadding",
            cellspacing: "cellSpacing",
            challenge: "challenge",
            charset: "charSet",
            checked: "checked",
            children: "children",
            cite: "cite",
            class: "className",
            classid: "classID",
            classname: "className",
            cols: "cols",
            colspan: "colSpan",
            content: "content",
            contenteditable: "contentEditable",
            contextmenu: "contextMenu",
            controls: "controls",
            controlslist: "controlsList",
            coords: "coords",
            crossorigin: "crossOrigin",
            dangerouslysetinnerhtml: "dangerouslySetInnerHTML",
            data: "data",
            datetime: "dateTime",
            default: "default",
            defaultchecked: "defaultChecked",
            defaultvalue: "defaultValue",
            defer: "defer",
            dir: "dir",
            disabled: "disabled",
            disablepictureinpicture: "disablePictureInPicture",
            disableremoteplayback: "disableRemotePlayback",
            download: "download",
            draggable: "draggable",
            enctype: "encType",
            enterkeyhint: "enterKeyHint",
            for: "htmlFor",
            form: "form",
            formmethod: "formMethod",
            formaction: "formAction",
            formenctype: "formEncType",
            formnovalidate: "formNoValidate",
            formtarget: "formTarget",
            frameborder: "frameBorder",
            headers: "headers",
            height: "height",
            hidden: "hidden",
            high: "high",
            href: "href",
            hreflang: "hrefLang",
            htmlfor: "htmlFor",
            httpequiv: "httpEquiv",
            "http-equiv": "httpEquiv",
            icon: "icon",
            id: "id",
            imagesizes: "imageSizes",
            imagesrcset: "imageSrcSet",
            innerhtml: "innerHTML",
            inputmode: "inputMode",
            integrity: "integrity",
            is: "is",
            itemid: "itemID",
            itemprop: "itemProp",
            itemref: "itemRef",
            itemscope: "itemScope",
            itemtype: "itemType",
            keyparams: "keyParams",
            keytype: "keyType",
            kind: "kind",
            label: "label",
            lang: "lang",
            list: "list",
            loop: "loop",
            low: "low",
            manifest: "manifest",
            marginwidth: "marginWidth",
            marginheight: "marginHeight",
            max: "max",
            maxlength: "maxLength",
            media: "media",
            mediagroup: "mediaGroup",
            method: "method",
            min: "min",
            minlength: "minLength",
            multiple: "multiple",
            muted: "muted",
            name: "name",
            nomodule: "noModule",
            nonce: "nonce",
            novalidate: "noValidate",
            open: "open",
            optimum: "optimum",
            pattern: "pattern",
            placeholder: "placeholder",
            playsinline: "playsInline",
            poster: "poster",
            preload: "preload",
            profile: "profile",
            radiogroup: "radioGroup",
            readonly: "readOnly",
            referrerpolicy: "referrerPolicy",
            rel: "rel",
            required: "required",
            reversed: "reversed",
            role: "role",
            rows: "rows",
            rowspan: "rowSpan",
            sandbox: "sandbox",
            scope: "scope",
            scoped: "scoped",
            scrolling: "scrolling",
            seamless: "seamless",
            selected: "selected",
            shape: "shape",
            size: "size",
            sizes: "sizes",
            span: "span",
            spellcheck: "spellCheck",
            src: "src",
            srcdoc: "srcDoc",
            srclang: "srcLang",
            srcset: "srcSet",
            start: "start",
            step: "step",
            style: "style",
            summary: "summary",
            tabindex: "tabIndex",
            target: "target",
            title: "title",
            type: "type",
            usemap: "useMap",
            value: "value",
            width: "width",
            wmode: "wmode",
            wrap: "wrap",
            about: "about",
            accentheight: "accentHeight",
            "accent-height": "accentHeight",
            accumulate: "accumulate",
            additive: "additive",
            alignmentbaseline: "alignmentBaseline",
            "alignment-baseline": "alignmentBaseline",
            allowreorder: "allowReorder",
            alphabetic: "alphabetic",
            amplitude: "amplitude",
            arabicform: "arabicForm",
            "arabic-form": "arabicForm",
            ascent: "ascent",
            attributename: "attributeName",
            attributetype: "attributeType",
            autoreverse: "autoReverse",
            azimuth: "azimuth",
            basefrequency: "baseFrequency",
            baselineshift: "baselineShift",
            "baseline-shift": "baselineShift",
            baseprofile: "baseProfile",
            bbox: "bbox",
            begin: "begin",
            bias: "bias",
            by: "by",
            calcmode: "calcMode",
            capheight: "capHeight",
            "cap-height": "capHeight",
            clip: "clip",
            clippath: "clipPath",
            "clip-path": "clipPath",
            clippathunits: "clipPathUnits",
            cliprule: "clipRule",
            "clip-rule": "clipRule",
            color: "color",
            colorinterpolation: "colorInterpolation",
            "color-interpolation": "colorInterpolation",
            colorinterpolationfilters: "colorInterpolationFilters",
            "color-interpolation-filters": "colorInterpolationFilters",
            colorprofile: "colorProfile",
            "color-profile": "colorProfile",
            colorrendering: "colorRendering",
            "color-rendering": "colorRendering",
            contentscripttype: "contentScriptType",
            contentstyletype: "contentStyleType",
            cursor: "cursor",
            cx: "cx",
            cy: "cy",
            d: "d",
            datatype: "datatype",
            decelerate: "decelerate",
            descent: "descent",
            diffuseconstant: "diffuseConstant",
            direction: "direction",
            display: "display",
            divisor: "divisor",
            dominantbaseline: "dominantBaseline",
            "dominant-baseline": "dominantBaseline",
            dur: "dur",
            dx: "dx",
            dy: "dy",
            edgemode: "edgeMode",
            elevation: "elevation",
            enablebackground: "enableBackground",
            "enable-background": "enableBackground",
            end: "end",
            exponent: "exponent",
            externalresourcesrequired: "externalResourcesRequired",
            fill: "fill",
            fillopacity: "fillOpacity",
            "fill-opacity": "fillOpacity",
            fillrule: "fillRule",
            "fill-rule": "fillRule",
            filter: "filter",
            filterres: "filterRes",
            filterunits: "filterUnits",
            floodopacity: "floodOpacity",
            "flood-opacity": "floodOpacity",
            floodcolor: "floodColor",
            "flood-color": "floodColor",
            focusable: "focusable",
            fontfamily: "fontFamily",
            "font-family": "fontFamily",
            fontsize: "fontSize",
            "font-size": "fontSize",
            fontsizeadjust: "fontSizeAdjust",
            "font-size-adjust": "fontSizeAdjust",
            fontstretch: "fontStretch",
            "font-stretch": "fontStretch",
            fontstyle: "fontStyle",
            "font-style": "fontStyle",
            fontvariant: "fontVariant",
            "font-variant": "fontVariant",
            fontweight: "fontWeight",
            "font-weight": "fontWeight",
            format: "format",
            from: "from",
            fx: "fx",
            fy: "fy",
            g1: "g1",
            g2: "g2",
            glyphname: "glyphName",
            "glyph-name": "glyphName",
            glyphorientationhorizontal: "glyphOrientationHorizontal",
            "glyph-orientation-horizontal": "glyphOrientationHorizontal",
            glyphorientationvertical: "glyphOrientationVertical",
            "glyph-orientation-vertical": "glyphOrientationVertical",
            glyphref: "glyphRef",
            gradienttransform: "gradientTransform",
            gradientunits: "gradientUnits",
            hanging: "hanging",
            horizadvx: "horizAdvX",
            "horiz-adv-x": "horizAdvX",
            horizoriginx: "horizOriginX",
            "horiz-origin-x": "horizOriginX",
            ideographic: "ideographic",
            imagerendering: "imageRendering",
            "image-rendering": "imageRendering",
            in2: "in2",
            in: "in",
            inlist: "inlist",
            intercept: "intercept",
            k1: "k1",
            k2: "k2",
            k3: "k3",
            k4: "k4",
            k: "k",
            kernelmatrix: "kernelMatrix",
            kernelunitlength: "kernelUnitLength",
            kerning: "kerning",
            keypoints: "keyPoints",
            keysplines: "keySplines",
            keytimes: "keyTimes",
            lengthadjust: "lengthAdjust",
            letterspacing: "letterSpacing",
            "letter-spacing": "letterSpacing",
            lightingcolor: "lightingColor",
            "lighting-color": "lightingColor",
            limitingconeangle: "limitingConeAngle",
            local: "local",
            markerend: "markerEnd",
            "marker-end": "markerEnd",
            markerheight: "markerHeight",
            markermid: "markerMid",
            "marker-mid": "markerMid",
            markerstart: "markerStart",
            "marker-start": "markerStart",
            markerunits: "markerUnits",
            markerwidth: "markerWidth",
            mask: "mask",
            maskcontentunits: "maskContentUnits",
            maskunits: "maskUnits",
            mathematical: "mathematical",
            mode: "mode",
            numoctaves: "numOctaves",
            offset: "offset",
            opacity: "opacity",
            operator: "operator",
            order: "order",
            orient: "orient",
            orientation: "orientation",
            origin: "origin",
            overflow: "overflow",
            overlineposition: "overlinePosition",
            "overline-position": "overlinePosition",
            overlinethickness: "overlineThickness",
            "overline-thickness": "overlineThickness",
            paintorder: "paintOrder",
            "paint-order": "paintOrder",
            panose1: "panose1",
            "panose-1": "panose1",
            pathlength: "pathLength",
            patterncontentunits: "patternContentUnits",
            patterntransform: "patternTransform",
            patternunits: "patternUnits",
            pointerevents: "pointerEvents",
            "pointer-events": "pointerEvents",
            points: "points",
            pointsatx: "pointsAtX",
            pointsaty: "pointsAtY",
            pointsatz: "pointsAtZ",
            prefix: "prefix",
            preservealpha: "preserveAlpha",
            preserveaspectratio: "preserveAspectRatio",
            primitiveunits: "primitiveUnits",
            property: "property",
            r: "r",
            radius: "radius",
            refx: "refX",
            refy: "refY",
            renderingintent: "renderingIntent",
            "rendering-intent": "renderingIntent",
            repeatcount: "repeatCount",
            repeatdur: "repeatDur",
            requiredextensions: "requiredExtensions",
            requiredfeatures: "requiredFeatures",
            resource: "resource",
            restart: "restart",
            result: "result",
            results: "results",
            rotate: "rotate",
            rx: "rx",
            ry: "ry",
            scale: "scale",
            security: "security",
            seed: "seed",
            shaperendering: "shapeRendering",
            "shape-rendering": "shapeRendering",
            slope: "slope",
            spacing: "spacing",
            specularconstant: "specularConstant",
            specularexponent: "specularExponent",
            speed: "speed",
            spreadmethod: "spreadMethod",
            startoffset: "startOffset",
            stddeviation: "stdDeviation",
            stemh: "stemh",
            stemv: "stemv",
            stitchtiles: "stitchTiles",
            stopcolor: "stopColor",
            "stop-color": "stopColor",
            stopopacity: "stopOpacity",
            "stop-opacity": "stopOpacity",
            strikethroughposition: "strikethroughPosition",
            "strikethrough-position": "strikethroughPosition",
            strikethroughthickness: "strikethroughThickness",
            "strikethrough-thickness": "strikethroughThickness",
            string: "string",
            stroke: "stroke",
            strokedasharray: "strokeDasharray",
            "stroke-dasharray": "strokeDasharray",
            strokedashoffset: "strokeDashoffset",
            "stroke-dashoffset": "strokeDashoffset",
            strokelinecap: "strokeLinecap",
            "stroke-linecap": "strokeLinecap",
            strokelinejoin: "strokeLinejoin",
            "stroke-linejoin": "strokeLinejoin",
            strokemiterlimit: "strokeMiterlimit",
            "stroke-miterlimit": "strokeMiterlimit",
            strokewidth: "strokeWidth",
            "stroke-width": "strokeWidth",
            strokeopacity: "strokeOpacity",
            "stroke-opacity": "strokeOpacity",
            suppresscontenteditablewarning: "suppressContentEditableWarning",
            suppresshydrationwarning: "suppressHydrationWarning",
            surfacescale: "surfaceScale",
            systemlanguage: "systemLanguage",
            tablevalues: "tableValues",
            targetx: "targetX",
            targety: "targetY",
            textanchor: "textAnchor",
            "text-anchor": "textAnchor",
            textdecoration: "textDecoration",
            "text-decoration": "textDecoration",
            textlength: "textLength",
            textrendering: "textRendering",
            "text-rendering": "textRendering",
            to: "to",
            transform: "transform",
            typeof: "typeof",
            u1: "u1",
            u2: "u2",
            underlineposition: "underlinePosition",
            "underline-position": "underlinePosition",
            underlinethickness: "underlineThickness",
            "underline-thickness": "underlineThickness",
            unicode: "unicode",
            unicodebidi: "unicodeBidi",
            "unicode-bidi": "unicodeBidi",
            unicoderange: "unicodeRange",
            "unicode-range": "unicodeRange",
            unitsperem: "unitsPerEm",
            "units-per-em": "unitsPerEm",
            unselectable: "unselectable",
            valphabetic: "vAlphabetic",
            "v-alphabetic": "vAlphabetic",
            values: "values",
            vectoreffect: "vectorEffect",
            "vector-effect": "vectorEffect",
            version: "version",
            vertadvy: "vertAdvY",
            "vert-adv-y": "vertAdvY",
            vertoriginx: "vertOriginX",
            "vert-origin-x": "vertOriginX",
            vertoriginy: "vertOriginY",
            "vert-origin-y": "vertOriginY",
            vhanging: "vHanging",
            "v-hanging": "vHanging",
            videographic: "vIdeographic",
            "v-ideographic": "vIdeographic",
            viewbox: "viewBox",
            viewtarget: "viewTarget",
            visibility: "visibility",
            vmathematical: "vMathematical",
            "v-mathematical": "vMathematical",
            vocab: "vocab",
            widths: "widths",
            wordspacing: "wordSpacing",
            "word-spacing": "wordSpacing",
            writingmode: "writingMode",
            "writing-mode": "writingMode",
            x1: "x1",
            x2: "x2",
            x: "x",
            xchannelselector: "xChannelSelector",
            xheight: "xHeight",
            "x-height": "xHeight",
            xlinkactuate: "xlinkActuate",
            "xlink:actuate": "xlinkActuate",
            xlinkarcrole: "xlinkArcrole",
            "xlink:arcrole": "xlinkArcrole",
            xlinkhref: "xlinkHref",
            "xlink:href": "xlinkHref",
            xlinkrole: "xlinkRole",
            "xlink:role": "xlinkRole",
            xlinkshow: "xlinkShow",
            "xlink:show": "xlinkShow",
            xlinktitle: "xlinkTitle",
            "xlink:title": "xlinkTitle",
            xlinktype: "xlinkType",
            "xlink:type": "xlinkType",
            xmlbase: "xmlBase",
            "xml:base": "xmlBase",
            xmllang: "xmlLang",
            "xml:lang": "xmlLang",
            xmlns: "xmlns",
            "xml:space": "xmlSpace",
            xmlnsxlink: "xmlnsXlink",
            "xmlns:xlink": "xmlnsXlink",
            xmlspace: "xmlSpace",
            y1: "y1",
            y2: "y2",
            y: "y",
            ychannelselector: "yChannelSelector",
            z: "z",
            zoomandpan: "zoomAndPan"
          };
          var ariaProperties = {
            "aria-current": 0,
            "aria-description": 0,
            "aria-details": 0,
            "aria-disabled": 0,
            "aria-hidden": 0,
            "aria-invalid": 0,
            "aria-keyshortcuts": 0,
            "aria-label": 0,
            "aria-roledescription": 0,
            "aria-autocomplete": 0,
            "aria-checked": 0,
            "aria-expanded": 0,
            "aria-haspopup": 0,
            "aria-level": 0,
            "aria-modal": 0,
            "aria-multiline": 0,
            "aria-multiselectable": 0,
            "aria-orientation": 0,
            "aria-placeholder": 0,
            "aria-pressed": 0,
            "aria-readonly": 0,
            "aria-required": 0,
            "aria-selected": 0,
            "aria-sort": 0,
            "aria-valuemax": 0,
            "aria-valuemin": 0,
            "aria-valuenow": 0,
            "aria-valuetext": 0,
            "aria-atomic": 0,
            "aria-busy": 0,
            "aria-live": 0,
            "aria-relevant": 0,
            "aria-dropeffect": 0,
            "aria-grabbed": 0,
            "aria-activedescendant": 0,
            "aria-colcount": 0,
            "aria-colindex": 0,
            "aria-colspan": 0,
            "aria-controls": 0,
            "aria-describedby": 0,
            "aria-errormessage": 0,
            "aria-flowto": 0,
            "aria-labelledby": 0,
            "aria-owns": 0,
            "aria-posinset": 0,
            "aria-rowcount": 0,
            "aria-rowindex": 0,
            "aria-rowspan": 0,
            "aria-setsize": 0
          };
          var warnedProperties = {};
          var rARIA = new RegExp("^(aria)-[" + ATTRIBUTE_NAME_CHAR + "]*$");
          var rARIACamel = new RegExp("^(aria)[A-Z][" + ATTRIBUTE_NAME_CHAR + "]*$");
          function validateProperty(tagName, name) {
            {
              if (hasOwnProperty.call(warnedProperties, name) && warnedProperties[name]) {
                return true;
              }
              if (rARIACamel.test(name)) {
                var ariaName = "aria-" + name.slice(4).toLowerCase();
                var correctName = ariaProperties.hasOwnProperty(ariaName) ? ariaName : null;
                if (correctName == null) {
                  error("Invalid ARIA attribute `%s`. ARIA attributes follow the pattern aria-* and must be lowercase.", name);
                  warnedProperties[name] = true;
                  return true;
                }
                if (name !== correctName) {
                  error("Invalid ARIA attribute `%s`. Did you mean `%s`?", name, correctName);
                  warnedProperties[name] = true;
                  return true;
                }
              }
              if (rARIA.test(name)) {
                var lowerCasedName = name.toLowerCase();
                var standardName = ariaProperties.hasOwnProperty(lowerCasedName) ? lowerCasedName : null;
                if (standardName == null) {
                  warnedProperties[name] = true;
                  return false;
                }
                if (name !== standardName) {
                  error("Unknown ARIA attribute `%s`. Did you mean `%s`?", name, standardName);
                  warnedProperties[name] = true;
                  return true;
                }
              }
            }
            return true;
          }
          function warnInvalidARIAProps(type, props) {
            {
              var invalidProps = [];
              for (var key in props) {
                var isValid = validateProperty(type, key);
                if (!isValid) {
                  invalidProps.push(key);
                }
              }
              var unknownPropString = invalidProps.map(function(prop) {
                return "`" + prop + "`";
              }).join(", ");
              if (invalidProps.length === 1) {
                error("Invalid aria prop %s on <%s> tag. For details, see https://reactjs.org/link/invalid-aria-props", unknownPropString, type);
              } else if (invalidProps.length > 1) {
                error("Invalid aria props %s on <%s> tag. For details, see https://reactjs.org/link/invalid-aria-props", unknownPropString, type);
              }
            }
          }
          function validateProperties(type, props) {
            if (isCustomComponent(type, props)) {
              return;
            }
            warnInvalidARIAProps(type, props);
          }
          var didWarnValueNull = false;
          function validateProperties$1(type, props) {
            {
              if (type !== "input" && type !== "textarea" && type !== "select") {
                return;
              }
              if (props != null && props.value === null && !didWarnValueNull) {
                didWarnValueNull = true;
                if (type === "select" && props.multiple) {
                  error("`value` prop on `%s` should not be null. Consider using an empty array when `multiple` is set to `true` to clear the component or `undefined` for uncontrolled components.", type);
                } else {
                  error("`value` prop on `%s` should not be null. Consider using an empty string to clear the component or `undefined` for uncontrolled components.", type);
                }
              }
            }
          }
          var validateProperty$1 = function() {
          };
          {
            var warnedProperties$1 = {};
            var EVENT_NAME_REGEX = /^on./;
            var INVALID_EVENT_NAME_REGEX = /^on[^A-Z]/;
            var rARIA$1 = new RegExp("^(aria)-[" + ATTRIBUTE_NAME_CHAR + "]*$");
            var rARIACamel$1 = new RegExp("^(aria)[A-Z][" + ATTRIBUTE_NAME_CHAR + "]*$");
            validateProperty$1 = function(tagName, name, value, eventRegistry) {
              if (hasOwnProperty.call(warnedProperties$1, name) && warnedProperties$1[name]) {
                return true;
              }
              var lowerCasedName = name.toLowerCase();
              if (lowerCasedName === "onfocusin" || lowerCasedName === "onfocusout") {
                error("React uses onFocus and onBlur instead of onFocusIn and onFocusOut. All React events are normalized to bubble, so onFocusIn and onFocusOut are not needed/supported by React.");
                warnedProperties$1[name] = true;
                return true;
              }
              if (eventRegistry != null) {
                var registrationNameDependencies2 = eventRegistry.registrationNameDependencies, possibleRegistrationNames2 = eventRegistry.possibleRegistrationNames;
                if (registrationNameDependencies2.hasOwnProperty(name)) {
                  return true;
                }
                var registrationName = possibleRegistrationNames2.hasOwnProperty(lowerCasedName) ? possibleRegistrationNames2[lowerCasedName] : null;
                if (registrationName != null) {
                  error("Invalid event handler property `%s`. Did you mean `%s`?", name, registrationName);
                  warnedProperties$1[name] = true;
                  return true;
                }
                if (EVENT_NAME_REGEX.test(name)) {
                  error("Unknown event handler property `%s`. It will be ignored.", name);
                  warnedProperties$1[name] = true;
                  return true;
                }
              } else if (EVENT_NAME_REGEX.test(name)) {
                if (INVALID_EVENT_NAME_REGEX.test(name)) {
                  error("Invalid event handler property `%s`. React events use the camelCase naming convention, for example `onClick`.", name);
                }
                warnedProperties$1[name] = true;
                return true;
              }
              if (rARIA$1.test(name) || rARIACamel$1.test(name)) {
                return true;
              }
              if (lowerCasedName === "innerhtml") {
                error("Directly setting property `innerHTML` is not permitted. For more information, lookup documentation on `dangerouslySetInnerHTML`.");
                warnedProperties$1[name] = true;
                return true;
              }
              if (lowerCasedName === "aria") {
                error("The `aria` attribute is reserved for future use in React. Pass individual `aria-` attributes instead.");
                warnedProperties$1[name] = true;
                return true;
              }
              if (lowerCasedName === "is" && value !== null && value !== void 0 && typeof value !== "string") {
                error("Received a `%s` for a string attribute `is`. If this is expected, cast the value to a string.", typeof value);
                warnedProperties$1[name] = true;
                return true;
              }
              if (typeof value === "number" && isNaN(value)) {
                error("Received NaN for the `%s` attribute. If this is expected, cast the value to a string.", name);
                warnedProperties$1[name] = true;
                return true;
              }
              var propertyInfo = getPropertyInfo(name);
              var isReserved = propertyInfo !== null && propertyInfo.type === RESERVED;
              if (possibleStandardNames.hasOwnProperty(lowerCasedName)) {
                var standardName = possibleStandardNames[lowerCasedName];
                if (standardName !== name) {
                  error("Invalid DOM property `%s`. Did you mean `%s`?", name, standardName);
                  warnedProperties$1[name] = true;
                  return true;
                }
              } else if (!isReserved && name !== lowerCasedName) {
                error("React does not recognize the `%s` prop on a DOM element. If you intentionally want it to appear in the DOM as a custom attribute, spell it as lowercase `%s` instead. If you accidentally passed it from a parent component, remove it from the DOM element.", name, lowerCasedName);
                warnedProperties$1[name] = true;
                return true;
              }
              if (typeof value === "boolean" && shouldRemoveAttributeWithWarning(name, value, propertyInfo, false)) {
                if (value) {
                  error('Received `%s` for a non-boolean attribute `%s`.\n\nIf you want to write it to the DOM, pass a string instead: %s="%s" or %s={value.toString()}.', value, name, name, value, name);
                } else {
                  error('Received `%s` for a non-boolean attribute `%s`.\n\nIf you want to write it to the DOM, pass a string instead: %s="%s" or %s={value.toString()}.\n\nIf you used to conditionally omit it with %s={condition && value}, pass %s={condition ? value : undefined} instead.', value, name, name, value, name, name, name);
                }
                warnedProperties$1[name] = true;
                return true;
              }
              if (isReserved) {
                return true;
              }
              if (shouldRemoveAttributeWithWarning(name, value, propertyInfo, false)) {
                warnedProperties$1[name] = true;
                return false;
              }
              if ((value === "false" || value === "true") && propertyInfo !== null && propertyInfo.type === BOOLEAN) {
                error("Received the string `%s` for the boolean attribute `%s`. %s Did you mean %s={%s}?", value, name, value === "false" ? "The browser will interpret it as a truthy value." : 'Although this works, it will not work as expected if you pass the string "false".', name, value);
                warnedProperties$1[name] = true;
                return true;
              }
              return true;
            };
          }
          var warnUnknownProperties = function(type, props, eventRegistry) {
            {
              var unknownProps = [];
              for (var key in props) {
                var isValid = validateProperty$1(type, key, props[key], eventRegistry);
                if (!isValid) {
                  unknownProps.push(key);
                }
              }
              var unknownPropString = unknownProps.map(function(prop) {
                return "`" + prop + "`";
              }).join(", ");
              if (unknownProps.length === 1) {
                error("Invalid value for prop %s on <%s> tag. Either remove it from the element, or pass a string or number value to keep it in the DOM. For details, see https://reactjs.org/link/attribute-behavior ", unknownPropString, type);
              } else if (unknownProps.length > 1) {
                error("Invalid values for props %s on <%s> tag. Either remove them from the element, or pass a string or number value to keep them in the DOM. For details, see https://reactjs.org/link/attribute-behavior ", unknownPropString, type);
              }
            }
          };
          function validateProperties$2(type, props, eventRegistry) {
            if (isCustomComponent(type, props)) {
              return;
            }
            warnUnknownProperties(type, props, eventRegistry);
          }
          var IS_EVENT_HANDLE_NON_MANAGED_NODE = 1;
          var IS_NON_DELEGATED = 1 << 1;
          var IS_CAPTURE_PHASE = 1 << 2;
          var SHOULD_NOT_PROCESS_POLYFILL_EVENT_PLUGINS = IS_EVENT_HANDLE_NON_MANAGED_NODE | IS_NON_DELEGATED | IS_CAPTURE_PHASE;
          var currentReplayingEvent = null;
          function setReplayingEvent(event) {
            {
              if (currentReplayingEvent !== null) {
                error("Expected currently replaying event to be null. This error is likely caused by a bug in React. Please file an issue.");
              }
            }
            currentReplayingEvent = event;
          }
          function resetReplayingEvent() {
            {
              if (currentReplayingEvent === null) {
                error("Expected currently replaying event to not be null. This error is likely caused by a bug in React. Please file an issue.");
              }
            }
            currentReplayingEvent = null;
          }
          function isReplayingEvent(event) {
            return event === currentReplayingEvent;
          }
          function getEventTarget(nativeEvent) {
            var target = nativeEvent.target || nativeEvent.srcElement || window;
            if (target.correspondingUseElement) {
              target = target.correspondingUseElement;
            }
            return target.nodeType === TEXT_NODE ? target.parentNode : target;
          }
          var restoreImpl = null;
          var restoreTarget = null;
          var restoreQueue = null;
          function restoreStateOfTarget(target) {
            var internalInstance = getInstanceFromNode(target);
            if (!internalInstance) {
              return;
            }
            if (typeof restoreImpl !== "function") {
              throw new Error("setRestoreImplementation() needs to be called to handle a target for controlled events. This error is likely caused by a bug in React. Please file an issue.");
            }
            var stateNode = internalInstance.stateNode;
            if (stateNode) {
              var _props = getFiberCurrentPropsFromNode(stateNode);
              restoreImpl(internalInstance.stateNode, internalInstance.type, _props);
            }
          }
          function setRestoreImplementation(impl) {
            restoreImpl = impl;
          }
          function enqueueStateRestore(target) {
            if (restoreTarget) {
              if (restoreQueue) {
                restoreQueue.push(target);
              } else {
                restoreQueue = [target];
              }
            } else {
              restoreTarget = target;
            }
          }
          function needsStateRestore() {
            return restoreTarget !== null || restoreQueue !== null;
          }
          function restoreStateIfNeeded() {
            if (!restoreTarget) {
              return;
            }
            var target = restoreTarget;
            var queuedTargets = restoreQueue;
            restoreTarget = null;
            restoreQueue = null;
            restoreStateOfTarget(target);
            if (queuedTargets) {
              for (var i3 = 0; i3 < queuedTargets.length; i3++) {
                restoreStateOfTarget(queuedTargets[i3]);
              }
            }
          }
          var batchedUpdatesImpl = function(fn, bookkeeping) {
            return fn(bookkeeping);
          };
          var flushSyncImpl = function() {
          };
          var isInsideEventHandler = false;
          function finishEventHandler() {
            var controlledComponentsHavePendingUpdates = needsStateRestore();
            if (controlledComponentsHavePendingUpdates) {
              flushSyncImpl();
              restoreStateIfNeeded();
            }
          }
          function batchedUpdates(fn, a3, b3) {
            if (isInsideEventHandler) {
              return fn(a3, b3);
            }
            isInsideEventHandler = true;
            try {
              return batchedUpdatesImpl(fn, a3, b3);
            } finally {
              isInsideEventHandler = false;
              finishEventHandler();
            }
          }
          function setBatchingImplementation(_batchedUpdatesImpl, _discreteUpdatesImpl, _flushSyncImpl) {
            batchedUpdatesImpl = _batchedUpdatesImpl;
            flushSyncImpl = _flushSyncImpl;
          }
          function isInteractive(tag) {
            return tag === "button" || tag === "input" || tag === "select" || tag === "textarea";
          }
          function shouldPreventMouseEvent(name, type, props) {
            switch (name) {
              case "onClick":
              case "onClickCapture":
              case "onDoubleClick":
              case "onDoubleClickCapture":
              case "onMouseDown":
              case "onMouseDownCapture":
              case "onMouseMove":
              case "onMouseMoveCapture":
              case "onMouseUp":
              case "onMouseUpCapture":
              case "onMouseEnter":
                return !!(props.disabled && isInteractive(type));
              default:
                return false;
            }
          }
          function getListener(inst, registrationName) {
            var stateNode = inst.stateNode;
            if (stateNode === null) {
              return null;
            }
            var props = getFiberCurrentPropsFromNode(stateNode);
            if (props === null) {
              return null;
            }
            var listener = props[registrationName];
            if (shouldPreventMouseEvent(registrationName, inst.type, props)) {
              return null;
            }
            if (listener && typeof listener !== "function") {
              throw new Error("Expected `" + registrationName + "` listener to be a function, instead got a value of `" + typeof listener + "` type.");
            }
            return listener;
          }
          var passiveBrowserEventsSupported = false;
          if (canUseDOM) {
            try {
              var options = {};
              Object.defineProperty(options, "passive", {
                get: function() {
                  passiveBrowserEventsSupported = true;
                }
              });
              window.addEventListener("test", options, options);
              window.removeEventListener("test", options, options);
            } catch (e4) {
              passiveBrowserEventsSupported = false;
            }
          }
          function invokeGuardedCallbackProd(name, func, context, a3, b3, c4, d3, e4, f3) {
            var funcArgs = Array.prototype.slice.call(arguments, 3);
            try {
              func.apply(context, funcArgs);
            } catch (error2) {
              this.onError(error2);
            }
          }
          var invokeGuardedCallbackImpl = invokeGuardedCallbackProd;
          {
            if (typeof window !== "undefined" && typeof window.dispatchEvent === "function" && typeof document !== "undefined" && typeof document.createEvent === "function") {
              var fakeNode = document.createElement("react");
              invokeGuardedCallbackImpl = function invokeGuardedCallbackDev(name, func, context, a3, b3, c4, d3, e4, f3) {
                if (typeof document === "undefined" || document === null) {
                  throw new Error("The `document` global was defined when React was initialized, but is not defined anymore. This can happen in a test environment if a component schedules an update from an asynchronous callback, but the test has already finished running. To solve this, you can either unmount the component at the end of your test (and ensure that any asynchronous operations get canceled in `componentWillUnmount`), or you can change the test itself to be asynchronous.");
                }
                var evt = document.createEvent("Event");
                var didCall = false;
                var didError = true;
                var windowEvent = window.event;
                var windowEventDescriptor = Object.getOwnPropertyDescriptor(window, "event");
                function restoreAfterDispatch() {
                  fakeNode.removeEventListener(evtType, callCallback2, false);
                  if (typeof window.event !== "undefined" && window.hasOwnProperty("event")) {
                    window.event = windowEvent;
                  }
                }
                var funcArgs = Array.prototype.slice.call(arguments, 3);
                function callCallback2() {
                  didCall = true;
                  restoreAfterDispatch();
                  func.apply(context, funcArgs);
                  didError = false;
                }
                var error2;
                var didSetError = false;
                var isCrossOriginError = false;
                function handleWindowError(event) {
                  error2 = event.error;
                  didSetError = true;
                  if (error2 === null && event.colno === 0 && event.lineno === 0) {
                    isCrossOriginError = true;
                  }
                  if (event.defaultPrevented) {
                    if (error2 != null && typeof error2 === "object") {
                      try {
                        error2._suppressLogging = true;
                      } catch (inner) {
                      }
                    }
                  }
                }
                var evtType = "react-" + (name ? name : "invokeguardedcallback");
                window.addEventListener("error", handleWindowError);
                fakeNode.addEventListener(evtType, callCallback2, false);
                evt.initEvent(evtType, false, false);
                fakeNode.dispatchEvent(evt);
                if (windowEventDescriptor) {
                  Object.defineProperty(window, "event", windowEventDescriptor);
                }
                if (didCall && didError) {
                  if (!didSetError) {
                    error2 = new Error(`An error was thrown inside one of your components, but React doesn't know what it was. This is likely due to browser flakiness. React does its best to preserve the "Pause on exceptions" behavior of the DevTools, which requires some DEV-mode only tricks. It's possible that these don't work in your browser. Try triggering the error in production mode, or switching to a modern browser. If you suspect that this is actually an issue with React, please file an issue.`);
                  } else if (isCrossOriginError) {
                    error2 = new Error("A cross-origin error was thrown. React doesn't have access to the actual error object in development. See https://reactjs.org/link/crossorigin-error for more information.");
                  }
                  this.onError(error2);
                }
                window.removeEventListener("error", handleWindowError);
                if (!didCall) {
                  restoreAfterDispatch();
                  return invokeGuardedCallbackProd.apply(this, arguments);
                }
              };
            }
          }
          var invokeGuardedCallbackImpl$1 = invokeGuardedCallbackImpl;
          var hasError = false;
          var caughtError = null;
          var hasRethrowError = false;
          var rethrowError = null;
          var reporter = {
            onError: function(error2) {
              hasError = true;
              caughtError = error2;
            }
          };
          function invokeGuardedCallback(name, func, context, a3, b3, c4, d3, e4, f3) {
            hasError = false;
            caughtError = null;
            invokeGuardedCallbackImpl$1.apply(reporter, arguments);
          }
          function invokeGuardedCallbackAndCatchFirstError(name, func, context, a3, b3, c4, d3, e4, f3) {
            invokeGuardedCallback.apply(this, arguments);
            if (hasError) {
              var error2 = clearCaughtError();
              if (!hasRethrowError) {
                hasRethrowError = true;
                rethrowError = error2;
              }
            }
          }
          function rethrowCaughtError() {
            if (hasRethrowError) {
              var error2 = rethrowError;
              hasRethrowError = false;
              rethrowError = null;
              throw error2;
            }
          }
          function hasCaughtError() {
            return hasError;
          }
          function clearCaughtError() {
            if (hasError) {
              var error2 = caughtError;
              hasError = false;
              caughtError = null;
              return error2;
            } else {
              throw new Error("clearCaughtError was called but no error was captured. This error is likely caused by a bug in React. Please file an issue.");
            }
          }
          function get(key) {
            return key._reactInternals;
          }
          function has(key) {
            return key._reactInternals !== void 0;
          }
          function set(key, value) {
            key._reactInternals = value;
          }
          var NoFlags = 0;
          var PerformedWork = 1;
          var Placement = 2;
          var Update = 4;
          var PlacementAndUpdate = Placement | Update;
          var ChildDeletion = 16;
          var ContentReset = 32;
          var Callback = 64;
          var DidCapture = 128;
          var ForceClientRender = 256;
          var Ref = 512;
          var Snapshot = 1024;
          var Passive = 2048;
          var Hydrating = 4096;
          var HydratingAndUpdate = Hydrating | Update;
          var Visibility = 8192;
          var StoreConsistency = 16384;
          var LifecycleEffectMask = Passive | Update | Callback | Ref | Snapshot | StoreConsistency;
          var HostEffectMask = 32767;
          var Incomplete = 32768;
          var ShouldCapture = 65536;
          var ForceUpdateForLegacySuspense = 131072;
          var Forked = 1048576;
          var RefStatic = 2097152;
          var LayoutStatic = 4194304;
          var PassiveStatic = 8388608;
          var MountLayoutDev = 16777216;
          var MountPassiveDev = 33554432;
          var BeforeMutationMask = Update | Snapshot | 0;
          var MutationMask = Placement | Update | ChildDeletion | ContentReset | Ref | Hydrating | Visibility;
          var LayoutMask = Update | Callback | Ref | Visibility;
          var PassiveMask = Passive | ChildDeletion;
          var StaticMask = LayoutStatic | PassiveStatic | RefStatic;
          var ReactCurrentOwner = ReactSharedInternals.ReactCurrentOwner;
          function getNearestMountedFiber(fiber) {
            var node = fiber;
            var nearestMounted = fiber;
            if (!fiber.alternate) {
              var nextNode = node;
              do {
                node = nextNode;
                if ((node.flags & (Placement | Hydrating)) !== NoFlags) {
                  nearestMounted = node.return;
                }
                nextNode = node.return;
              } while (nextNode);
            } else {
              while (node.return) {
                node = node.return;
              }
            }
            if (node.tag === HostRoot) {
              return nearestMounted;
            }
            return null;
          }
          function getSuspenseInstanceFromFiber(fiber) {
            if (fiber.tag === SuspenseComponent) {
              var suspenseState = fiber.memoizedState;
              if (suspenseState === null) {
                var current2 = fiber.alternate;
                if (current2 !== null) {
                  suspenseState = current2.memoizedState;
                }
              }
              if (suspenseState !== null) {
                return suspenseState.dehydrated;
              }
            }
            return null;
          }
          function getContainerFromFiber(fiber) {
            return fiber.tag === HostRoot ? fiber.stateNode.containerInfo : null;
          }
          function isFiberMounted(fiber) {
            return getNearestMountedFiber(fiber) === fiber;
          }
          function isMounted(component) {
            {
              var owner = ReactCurrentOwner.current;
              if (owner !== null && owner.tag === ClassComponent) {
                var ownerFiber = owner;
                var instance = ownerFiber.stateNode;
                if (!instance._warnedAboutRefsInRender) {
                  error("%s is accessing isMounted inside its render() function. render() should be a pure function of props and state. It should never access something that requires stale data from the previous render, such as refs. Move this logic to componentDidMount and componentDidUpdate instead.", getComponentNameFromFiber(ownerFiber) || "A component");
                }
                instance._warnedAboutRefsInRender = true;
              }
            }
            var fiber = get(component);
            if (!fiber) {
              return false;
            }
            return getNearestMountedFiber(fiber) === fiber;
          }
          function assertIsMounted(fiber) {
            if (getNearestMountedFiber(fiber) !== fiber) {
              throw new Error("Unable to find node on an unmounted component.");
            }
          }
          function findCurrentFiberUsingSlowPath(fiber) {
            var alternate = fiber.alternate;
            if (!alternate) {
              var nearestMounted = getNearestMountedFiber(fiber);
              if (nearestMounted === null) {
                throw new Error("Unable to find node on an unmounted component.");
              }
              if (nearestMounted !== fiber) {
                return null;
              }
              return fiber;
            }
            var a3 = fiber;
            var b3 = alternate;
            while (true) {
              var parentA = a3.return;
              if (parentA === null) {
                break;
              }
              var parentB = parentA.alternate;
              if (parentB === null) {
                var nextParent = parentA.return;
                if (nextParent !== null) {
                  a3 = b3 = nextParent;
                  continue;
                }
                break;
              }
              if (parentA.child === parentB.child) {
                var child = parentA.child;
                while (child) {
                  if (child === a3) {
                    assertIsMounted(parentA);
                    return fiber;
                  }
                  if (child === b3) {
                    assertIsMounted(parentA);
                    return alternate;
                  }
                  child = child.sibling;
                }
                throw new Error("Unable to find node on an unmounted component.");
              }
              if (a3.return !== b3.return) {
                a3 = parentA;
                b3 = parentB;
              } else {
                var didFindChild = false;
                var _child = parentA.child;
                while (_child) {
                  if (_child === a3) {
                    didFindChild = true;
                    a3 = parentA;
                    b3 = parentB;
                    break;
                  }
                  if (_child === b3) {
                    didFindChild = true;
                    b3 = parentA;
                    a3 = parentB;
                    break;
                  }
                  _child = _child.sibling;
                }
                if (!didFindChild) {
                  _child = parentB.child;
                  while (_child) {
                    if (_child === a3) {
                      didFindChild = true;
                      a3 = parentB;
                      b3 = parentA;
                      break;
                    }
                    if (_child === b3) {
                      didFindChild = true;
                      b3 = parentB;
                      a3 = parentA;
                      break;
                    }
                    _child = _child.sibling;
                  }
                  if (!didFindChild) {
                    throw new Error("Child was not found in either parent set. This indicates a bug in React related to the return pointer. Please file an issue.");
                  }
                }
              }
              if (a3.alternate !== b3) {
                throw new Error("Return fibers should always be each others' alternates. This error is likely caused by a bug in React. Please file an issue.");
              }
            }
            if (a3.tag !== HostRoot) {
              throw new Error("Unable to find node on an unmounted component.");
            }
            if (a3.stateNode.current === a3) {
              return fiber;
            }
            return alternate;
          }
          function findCurrentHostFiber(parent) {
            var currentParent = findCurrentFiberUsingSlowPath(parent);
            return currentParent !== null ? findCurrentHostFiberImpl(currentParent) : null;
          }
          function findCurrentHostFiberImpl(node) {
            if (node.tag === HostComponent || node.tag === HostText) {
              return node;
            }
            var child = node.child;
            while (child !== null) {
              var match = findCurrentHostFiberImpl(child);
              if (match !== null) {
                return match;
              }
              child = child.sibling;
            }
            return null;
          }
          function findCurrentHostFiberWithNoPortals(parent) {
            var currentParent = findCurrentFiberUsingSlowPath(parent);
            return currentParent !== null ? findCurrentHostFiberWithNoPortalsImpl(currentParent) : null;
          }
          function findCurrentHostFiberWithNoPortalsImpl(node) {
            if (node.tag === HostComponent || node.tag === HostText) {
              return node;
            }
            var child = node.child;
            while (child !== null) {
              if (child.tag !== HostPortal) {
                var match = findCurrentHostFiberWithNoPortalsImpl(child);
                if (match !== null) {
                  return match;
                }
              }
              child = child.sibling;
            }
            return null;
          }
          var scheduleCallback = Scheduler.unstable_scheduleCallback;
          var cancelCallback = Scheduler.unstable_cancelCallback;
          var shouldYield = Scheduler.unstable_shouldYield;
          var requestPaint = Scheduler.unstable_requestPaint;
          var now = Scheduler.unstable_now;
          var getCurrentPriorityLevel = Scheduler.unstable_getCurrentPriorityLevel;
          var ImmediatePriority = Scheduler.unstable_ImmediatePriority;
          var UserBlockingPriority = Scheduler.unstable_UserBlockingPriority;
          var NormalPriority = Scheduler.unstable_NormalPriority;
          var LowPriority = Scheduler.unstable_LowPriority;
          var IdlePriority = Scheduler.unstable_IdlePriority;
          var unstable_yieldValue = Scheduler.unstable_yieldValue;
          var unstable_setDisableYieldValue = Scheduler.unstable_setDisableYieldValue;
          var rendererID = null;
          var injectedHook = null;
          var injectedProfilingHooks = null;
          var hasLoggedError = false;
          var isDevToolsPresent = typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined";
          function injectInternals(internals) {
            if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ === "undefined") {
              return false;
            }
            var hook = __REACT_DEVTOOLS_GLOBAL_HOOK__;
            if (hook.isDisabled) {
              return true;
            }
            if (!hook.supportsFiber) {
              {
                error("The installed version of React DevTools is too old and will not work with the current version of React. Please update React DevTools. https://reactjs.org/link/react-devtools");
              }
              return true;
            }
            try {
              if (enableSchedulingProfiler) {
                internals = assign({}, internals, {
                  getLaneLabelMap,
                  injectProfilingHooks
                });
              }
              rendererID = hook.inject(internals);
              injectedHook = hook;
            } catch (err) {
              {
                error("React instrumentation encountered an error: %s.", err);
              }
            }
            if (hook.checkDCE) {
              return true;
            } else {
              return false;
            }
          }
          function onScheduleRoot(root3, children) {
            {
              if (injectedHook && typeof injectedHook.onScheduleFiberRoot === "function") {
                try {
                  injectedHook.onScheduleFiberRoot(rendererID, root3, children);
                } catch (err) {
                  if (!hasLoggedError) {
                    hasLoggedError = true;
                    error("React instrumentation encountered an error: %s", err);
                  }
                }
              }
            }
          }
          function onCommitRoot(root3, eventPriority) {
            if (injectedHook && typeof injectedHook.onCommitFiberRoot === "function") {
              try {
                var didError = (root3.current.flags & DidCapture) === DidCapture;
                if (enableProfilerTimer) {
                  var schedulerPriority;
                  switch (eventPriority) {
                    case DiscreteEventPriority:
                      schedulerPriority = ImmediatePriority;
                      break;
                    case ContinuousEventPriority:
                      schedulerPriority = UserBlockingPriority;
                      break;
                    case DefaultEventPriority:
                      schedulerPriority = NormalPriority;
                      break;
                    case IdleEventPriority:
                      schedulerPriority = IdlePriority;
                      break;
                    default:
                      schedulerPriority = NormalPriority;
                      break;
                  }
                  injectedHook.onCommitFiberRoot(rendererID, root3, schedulerPriority, didError);
                } else {
                  injectedHook.onCommitFiberRoot(rendererID, root3, void 0, didError);
                }
              } catch (err) {
                {
                  if (!hasLoggedError) {
                    hasLoggedError = true;
                    error("React instrumentation encountered an error: %s", err);
                  }
                }
              }
            }
          }
          function onPostCommitRoot(root3) {
            if (injectedHook && typeof injectedHook.onPostCommitFiberRoot === "function") {
              try {
                injectedHook.onPostCommitFiberRoot(rendererID, root3);
              } catch (err) {
                {
                  if (!hasLoggedError) {
                    hasLoggedError = true;
                    error("React instrumentation encountered an error: %s", err);
                  }
                }
              }
            }
          }
          function onCommitUnmount(fiber) {
            if (injectedHook && typeof injectedHook.onCommitFiberUnmount === "function") {
              try {
                injectedHook.onCommitFiberUnmount(rendererID, fiber);
              } catch (err) {
                {
                  if (!hasLoggedError) {
                    hasLoggedError = true;
                    error("React instrumentation encountered an error: %s", err);
                  }
                }
              }
            }
          }
          function setIsStrictModeForDevtools(newIsStrictMode) {
            {
              if (typeof unstable_yieldValue === "function") {
                unstable_setDisableYieldValue(newIsStrictMode);
                setSuppressWarning(newIsStrictMode);
              }
              if (injectedHook && typeof injectedHook.setStrictMode === "function") {
                try {
                  injectedHook.setStrictMode(rendererID, newIsStrictMode);
                } catch (err) {
                  {
                    if (!hasLoggedError) {
                      hasLoggedError = true;
                      error("React instrumentation encountered an error: %s", err);
                    }
                  }
                }
              }
            }
          }
          function injectProfilingHooks(profilingHooks) {
            injectedProfilingHooks = profilingHooks;
          }
          function getLaneLabelMap() {
            {
              var map = /* @__PURE__ */ new Map();
              var lane = 1;
              for (var index2 = 0; index2 < TotalLanes; index2++) {
                var label = getLabelForLane(lane);
                map.set(lane, label);
                lane *= 2;
              }
              return map;
            }
          }
          function markCommitStarted(lanes) {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markCommitStarted === "function") {
                injectedProfilingHooks.markCommitStarted(lanes);
              }
            }
          }
          function markCommitStopped() {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markCommitStopped === "function") {
                injectedProfilingHooks.markCommitStopped();
              }
            }
          }
          function markComponentRenderStarted(fiber) {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentRenderStarted === "function") {
                injectedProfilingHooks.markComponentRenderStarted(fiber);
              }
            }
          }
          function markComponentRenderStopped() {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentRenderStopped === "function") {
                injectedProfilingHooks.markComponentRenderStopped();
              }
            }
          }
          function markComponentPassiveEffectMountStarted(fiber) {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentPassiveEffectMountStarted === "function") {
                injectedProfilingHooks.markComponentPassiveEffectMountStarted(fiber);
              }
            }
          }
          function markComponentPassiveEffectMountStopped() {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentPassiveEffectMountStopped === "function") {
                injectedProfilingHooks.markComponentPassiveEffectMountStopped();
              }
            }
          }
          function markComponentPassiveEffectUnmountStarted(fiber) {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentPassiveEffectUnmountStarted === "function") {
                injectedProfilingHooks.markComponentPassiveEffectUnmountStarted(fiber);
              }
            }
          }
          function markComponentPassiveEffectUnmountStopped() {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentPassiveEffectUnmountStopped === "function") {
                injectedProfilingHooks.markComponentPassiveEffectUnmountStopped();
              }
            }
          }
          function markComponentLayoutEffectMountStarted(fiber) {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentLayoutEffectMountStarted === "function") {
                injectedProfilingHooks.markComponentLayoutEffectMountStarted(fiber);
              }
            }
          }
          function markComponentLayoutEffectMountStopped() {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentLayoutEffectMountStopped === "function") {
                injectedProfilingHooks.markComponentLayoutEffectMountStopped();
              }
            }
          }
          function markComponentLayoutEffectUnmountStarted(fiber) {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentLayoutEffectUnmountStarted === "function") {
                injectedProfilingHooks.markComponentLayoutEffectUnmountStarted(fiber);
              }
            }
          }
          function markComponentLayoutEffectUnmountStopped() {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentLayoutEffectUnmountStopped === "function") {
                injectedProfilingHooks.markComponentLayoutEffectUnmountStopped();
              }
            }
          }
          function markComponentErrored(fiber, thrownValue, lanes) {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentErrored === "function") {
                injectedProfilingHooks.markComponentErrored(fiber, thrownValue, lanes);
              }
            }
          }
          function markComponentSuspended(fiber, wakeable, lanes) {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentSuspended === "function") {
                injectedProfilingHooks.markComponentSuspended(fiber, wakeable, lanes);
              }
            }
          }
          function markLayoutEffectsStarted(lanes) {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markLayoutEffectsStarted === "function") {
                injectedProfilingHooks.markLayoutEffectsStarted(lanes);
              }
            }
          }
          function markLayoutEffectsStopped() {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markLayoutEffectsStopped === "function") {
                injectedProfilingHooks.markLayoutEffectsStopped();
              }
            }
          }
          function markPassiveEffectsStarted(lanes) {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markPassiveEffectsStarted === "function") {
                injectedProfilingHooks.markPassiveEffectsStarted(lanes);
              }
            }
          }
          function markPassiveEffectsStopped() {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markPassiveEffectsStopped === "function") {
                injectedProfilingHooks.markPassiveEffectsStopped();
              }
            }
          }
          function markRenderStarted(lanes) {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markRenderStarted === "function") {
                injectedProfilingHooks.markRenderStarted(lanes);
              }
            }
          }
          function markRenderYielded() {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markRenderYielded === "function") {
                injectedProfilingHooks.markRenderYielded();
              }
            }
          }
          function markRenderStopped() {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markRenderStopped === "function") {
                injectedProfilingHooks.markRenderStopped();
              }
            }
          }
          function markRenderScheduled(lane) {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markRenderScheduled === "function") {
                injectedProfilingHooks.markRenderScheduled(lane);
              }
            }
          }
          function markForceUpdateScheduled(fiber, lane) {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markForceUpdateScheduled === "function") {
                injectedProfilingHooks.markForceUpdateScheduled(fiber, lane);
              }
            }
          }
          function markStateUpdateScheduled(fiber, lane) {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markStateUpdateScheduled === "function") {
                injectedProfilingHooks.markStateUpdateScheduled(fiber, lane);
              }
            }
          }
          var NoMode = 0;
          var ConcurrentMode = 1;
          var ProfileMode = 2;
          var StrictLegacyMode = 8;
          var StrictEffectsMode = 16;
          var clz32 = Math.clz32 ? Math.clz32 : clz32Fallback;
          var log = Math.log;
          var LN2 = Math.LN2;
          function clz32Fallback(x4) {
            var asUint = x4 >>> 0;
            if (asUint === 0) {
              return 32;
            }
            return 31 - (log(asUint) / LN2 | 0) | 0;
          }
          var TotalLanes = 31;
          var NoLanes = 0;
          var NoLane = 0;
          var SyncLane = 1;
          var InputContinuousHydrationLane = 2;
          var InputContinuousLane = 4;
          var DefaultHydrationLane = 8;
          var DefaultLane = 16;
          var TransitionHydrationLane = 32;
          var TransitionLanes = 4194240;
          var TransitionLane1 = 64;
          var TransitionLane2 = 128;
          var TransitionLane3 = 256;
          var TransitionLane4 = 512;
          var TransitionLane5 = 1024;
          var TransitionLane6 = 2048;
          var TransitionLane7 = 4096;
          var TransitionLane8 = 8192;
          var TransitionLane9 = 16384;
          var TransitionLane10 = 32768;
          var TransitionLane11 = 65536;
          var TransitionLane12 = 131072;
          var TransitionLane13 = 262144;
          var TransitionLane14 = 524288;
          var TransitionLane15 = 1048576;
          var TransitionLane16 = 2097152;
          var RetryLanes = 130023424;
          var RetryLane1 = 4194304;
          var RetryLane2 = 8388608;
          var RetryLane3 = 16777216;
          var RetryLane4 = 33554432;
          var RetryLane5 = 67108864;
          var SomeRetryLane = RetryLane1;
          var SelectiveHydrationLane = 134217728;
          var NonIdleLanes = 268435455;
          var IdleHydrationLane = 268435456;
          var IdleLane = 536870912;
          var OffscreenLane = 1073741824;
          function getLabelForLane(lane) {
            {
              if (lane & SyncLane) {
                return "Sync";
              }
              if (lane & InputContinuousHydrationLane) {
                return "InputContinuousHydration";
              }
              if (lane & InputContinuousLane) {
                return "InputContinuous";
              }
              if (lane & DefaultHydrationLane) {
                return "DefaultHydration";
              }
              if (lane & DefaultLane) {
                return "Default";
              }
              if (lane & TransitionHydrationLane) {
                return "TransitionHydration";
              }
              if (lane & TransitionLanes) {
                return "Transition";
              }
              if (lane & RetryLanes) {
                return "Retry";
              }
              if (lane & SelectiveHydrationLane) {
                return "SelectiveHydration";
              }
              if (lane & IdleHydrationLane) {
                return "IdleHydration";
              }
              if (lane & IdleLane) {
                return "Idle";
              }
              if (lane & OffscreenLane) {
                return "Offscreen";
              }
            }
          }
          var NoTimestamp = -1;
          var nextTransitionLane = TransitionLane1;
          var nextRetryLane = RetryLane1;
          function getHighestPriorityLanes(lanes) {
            switch (getHighestPriorityLane(lanes)) {
              case SyncLane:
                return SyncLane;
              case InputContinuousHydrationLane:
                return InputContinuousHydrationLane;
              case InputContinuousLane:
                return InputContinuousLane;
              case DefaultHydrationLane:
                return DefaultHydrationLane;
              case DefaultLane:
                return DefaultLane;
              case TransitionHydrationLane:
                return TransitionHydrationLane;
              case TransitionLane1:
              case TransitionLane2:
              case TransitionLane3:
              case TransitionLane4:
              case TransitionLane5:
              case TransitionLane6:
              case TransitionLane7:
              case TransitionLane8:
              case TransitionLane9:
              case TransitionLane10:
              case TransitionLane11:
              case TransitionLane12:
              case TransitionLane13:
              case TransitionLane14:
              case TransitionLane15:
              case TransitionLane16:
                return lanes & TransitionLanes;
              case RetryLane1:
              case RetryLane2:
              case RetryLane3:
              case RetryLane4:
              case RetryLane5:
                return lanes & RetryLanes;
              case SelectiveHydrationLane:
                return SelectiveHydrationLane;
              case IdleHydrationLane:
                return IdleHydrationLane;
              case IdleLane:
                return IdleLane;
              case OffscreenLane:
                return OffscreenLane;
              default:
                {
                  error("Should have found matching lanes. This is a bug in React.");
                }
                return lanes;
            }
          }
          function getNextLanes(root3, wipLanes) {
            var pendingLanes = root3.pendingLanes;
            if (pendingLanes === NoLanes) {
              return NoLanes;
            }
            var nextLanes = NoLanes;
            var suspendedLanes = root3.suspendedLanes;
            var pingedLanes = root3.pingedLanes;
            var nonIdlePendingLanes = pendingLanes & NonIdleLanes;
            if (nonIdlePendingLanes !== NoLanes) {
              var nonIdleUnblockedLanes = nonIdlePendingLanes & ~suspendedLanes;
              if (nonIdleUnblockedLanes !== NoLanes) {
                nextLanes = getHighestPriorityLanes(nonIdleUnblockedLanes);
              } else {
                var nonIdlePingedLanes = nonIdlePendingLanes & pingedLanes;
                if (nonIdlePingedLanes !== NoLanes) {
                  nextLanes = getHighestPriorityLanes(nonIdlePingedLanes);
                }
              }
            } else {
              var unblockedLanes = pendingLanes & ~suspendedLanes;
              if (unblockedLanes !== NoLanes) {
                nextLanes = getHighestPriorityLanes(unblockedLanes);
              } else {
                if (pingedLanes !== NoLanes) {
                  nextLanes = getHighestPriorityLanes(pingedLanes);
                }
              }
            }
            if (nextLanes === NoLanes) {
              return NoLanes;
            }
            if (wipLanes !== NoLanes && wipLanes !== nextLanes && (wipLanes & suspendedLanes) === NoLanes) {
              var nextLane = getHighestPriorityLane(nextLanes);
              var wipLane = getHighestPriorityLane(wipLanes);
              if (nextLane >= wipLane || nextLane === DefaultLane && (wipLane & TransitionLanes) !== NoLanes) {
                return wipLanes;
              }
            }
            if ((nextLanes & InputContinuousLane) !== NoLanes) {
              nextLanes |= pendingLanes & DefaultLane;
            }
            var entangledLanes = root3.entangledLanes;
            if (entangledLanes !== NoLanes) {
              var entanglements = root3.entanglements;
              var lanes = nextLanes & entangledLanes;
              while (lanes > 0) {
                var index2 = pickArbitraryLaneIndex(lanes);
                var lane = 1 << index2;
                nextLanes |= entanglements[index2];
                lanes &= ~lane;
              }
            }
            return nextLanes;
          }
          function getMostRecentEventTime(root3, lanes) {
            var eventTimes = root3.eventTimes;
            var mostRecentEventTime = NoTimestamp;
            while (lanes > 0) {
              var index2 = pickArbitraryLaneIndex(lanes);
              var lane = 1 << index2;
              var eventTime = eventTimes[index2];
              if (eventTime > mostRecentEventTime) {
                mostRecentEventTime = eventTime;
              }
              lanes &= ~lane;
            }
            return mostRecentEventTime;
          }
          function computeExpirationTime(lane, currentTime) {
            switch (lane) {
              case SyncLane:
              case InputContinuousHydrationLane:
              case InputContinuousLane:
                return currentTime + 250;
              case DefaultHydrationLane:
              case DefaultLane:
              case TransitionHydrationLane:
              case TransitionLane1:
              case TransitionLane2:
              case TransitionLane3:
              case TransitionLane4:
              case TransitionLane5:
              case TransitionLane6:
              case TransitionLane7:
              case TransitionLane8:
              case TransitionLane9:
              case TransitionLane10:
              case TransitionLane11:
              case TransitionLane12:
              case TransitionLane13:
              case TransitionLane14:
              case TransitionLane15:
              case TransitionLane16:
                return currentTime + 5e3;
              case RetryLane1:
              case RetryLane2:
              case RetryLane3:
              case RetryLane4:
              case RetryLane5:
                return NoTimestamp;
              case SelectiveHydrationLane:
              case IdleHydrationLane:
              case IdleLane:
              case OffscreenLane:
                return NoTimestamp;
              default:
                {
                  error("Should have found matching lanes. This is a bug in React.");
                }
                return NoTimestamp;
            }
          }
          function markStarvedLanesAsExpired(root3, currentTime) {
            var pendingLanes = root3.pendingLanes;
            var suspendedLanes = root3.suspendedLanes;
            var pingedLanes = root3.pingedLanes;
            var expirationTimes = root3.expirationTimes;
            var lanes = pendingLanes;
            while (lanes > 0) {
              var index2 = pickArbitraryLaneIndex(lanes);
              var lane = 1 << index2;
              var expirationTime = expirationTimes[index2];
              if (expirationTime === NoTimestamp) {
                if ((lane & suspendedLanes) === NoLanes || (lane & pingedLanes) !== NoLanes) {
                  expirationTimes[index2] = computeExpirationTime(lane, currentTime);
                }
              } else if (expirationTime <= currentTime) {
                root3.expiredLanes |= lane;
              }
              lanes &= ~lane;
            }
          }
          function getHighestPriorityPendingLanes(root3) {
            return getHighestPriorityLanes(root3.pendingLanes);
          }
          function getLanesToRetrySynchronouslyOnError(root3) {
            var everythingButOffscreen = root3.pendingLanes & ~OffscreenLane;
            if (everythingButOffscreen !== NoLanes) {
              return everythingButOffscreen;
            }
            if (everythingButOffscreen & OffscreenLane) {
              return OffscreenLane;
            }
            return NoLanes;
          }
          function includesSyncLane(lanes) {
            return (lanes & SyncLane) !== NoLanes;
          }
          function includesNonIdleWork(lanes) {
            return (lanes & NonIdleLanes) !== NoLanes;
          }
          function includesOnlyRetries(lanes) {
            return (lanes & RetryLanes) === lanes;
          }
          function includesOnlyTransitions(lanes) {
            return (lanes & TransitionLanes) === lanes;
          }
          function includesBlockingLane(root3, lanes) {
            var SyncDefaultLanes = InputContinuousHydrationLane | InputContinuousLane | DefaultHydrationLane | DefaultLane;
            return (lanes & SyncDefaultLanes) !== NoLanes;
          }
          function includesExpiredLane(root3, lanes) {
            return (lanes & root3.expiredLanes) !== NoLanes;
          }
          function isTransitionLane(lane) {
            return (lane & TransitionLanes) !== 0;
          }
          function claimNextTransitionLane() {
            var lane = nextTransitionLane;
            nextTransitionLane <<= 1;
            if ((nextTransitionLane & TransitionLanes) === 0) {
              nextTransitionLane = TransitionLane1;
            }
            return lane;
          }
          function claimNextRetryLane() {
            var lane = nextRetryLane;
            nextRetryLane <<= 1;
            if ((nextRetryLane & RetryLanes) === 0) {
              nextRetryLane = RetryLane1;
            }
            return lane;
          }
          function getHighestPriorityLane(lanes) {
            return lanes & -lanes;
          }
          function pickArbitraryLane(lanes) {
            return getHighestPriorityLane(lanes);
          }
          function pickArbitraryLaneIndex(lanes) {
            return 31 - clz32(lanes);
          }
          function laneToIndex(lane) {
            return pickArbitraryLaneIndex(lane);
          }
          function includesSomeLane(a3, b3) {
            return (a3 & b3) !== NoLanes;
          }
          function isSubsetOfLanes(set2, subset) {
            return (set2 & subset) === subset;
          }
          function mergeLanes(a3, b3) {
            return a3 | b3;
          }
          function removeLanes(set2, subset) {
            return set2 & ~subset;
          }
          function intersectLanes(a3, b3) {
            return a3 & b3;
          }
          function laneToLanes(lane) {
            return lane;
          }
          function higherPriorityLane(a3, b3) {
            return a3 !== NoLane && a3 < b3 ? a3 : b3;
          }
          function createLaneMap(initial) {
            var laneMap = [];
            for (var i3 = 0; i3 < TotalLanes; i3++) {
              laneMap.push(initial);
            }
            return laneMap;
          }
          function markRootUpdated(root3, updateLane, eventTime) {
            root3.pendingLanes |= updateLane;
            if (updateLane !== IdleLane) {
              root3.suspendedLanes = NoLanes;
              root3.pingedLanes = NoLanes;
            }
            var eventTimes = root3.eventTimes;
            var index2 = laneToIndex(updateLane);
            eventTimes[index2] = eventTime;
          }
          function markRootSuspended(root3, suspendedLanes) {
            root3.suspendedLanes |= suspendedLanes;
            root3.pingedLanes &= ~suspendedLanes;
            var expirationTimes = root3.expirationTimes;
            var lanes = suspendedLanes;
            while (lanes > 0) {
              var index2 = pickArbitraryLaneIndex(lanes);
              var lane = 1 << index2;
              expirationTimes[index2] = NoTimestamp;
              lanes &= ~lane;
            }
          }
          function markRootPinged(root3, pingedLanes, eventTime) {
            root3.pingedLanes |= root3.suspendedLanes & pingedLanes;
          }
          function markRootFinished(root3, remainingLanes) {
            var noLongerPendingLanes = root3.pendingLanes & ~remainingLanes;
            root3.pendingLanes = remainingLanes;
            root3.suspendedLanes = 0;
            root3.pingedLanes = 0;
            root3.expiredLanes &= remainingLanes;
            root3.mutableReadLanes &= remainingLanes;
            root3.entangledLanes &= remainingLanes;
            var entanglements = root3.entanglements;
            var eventTimes = root3.eventTimes;
            var expirationTimes = root3.expirationTimes;
            var lanes = noLongerPendingLanes;
            while (lanes > 0) {
              var index2 = pickArbitraryLaneIndex(lanes);
              var lane = 1 << index2;
              entanglements[index2] = NoLanes;
              eventTimes[index2] = NoTimestamp;
              expirationTimes[index2] = NoTimestamp;
              lanes &= ~lane;
            }
          }
          function markRootEntangled(root3, entangledLanes) {
            var rootEntangledLanes = root3.entangledLanes |= entangledLanes;
            var entanglements = root3.entanglements;
            var lanes = rootEntangledLanes;
            while (lanes) {
              var index2 = pickArbitraryLaneIndex(lanes);
              var lane = 1 << index2;
              if (lane & entangledLanes | entanglements[index2] & entangledLanes) {
                entanglements[index2] |= entangledLanes;
              }
              lanes &= ~lane;
            }
          }
          function getBumpedLaneForHydration(root3, renderLanes2) {
            var renderLane = getHighestPriorityLane(renderLanes2);
            var lane;
            switch (renderLane) {
              case InputContinuousLane:
                lane = InputContinuousHydrationLane;
                break;
              case DefaultLane:
                lane = DefaultHydrationLane;
                break;
              case TransitionLane1:
              case TransitionLane2:
              case TransitionLane3:
              case TransitionLane4:
              case TransitionLane5:
              case TransitionLane6:
              case TransitionLane7:
              case TransitionLane8:
              case TransitionLane9:
              case TransitionLane10:
              case TransitionLane11:
              case TransitionLane12:
              case TransitionLane13:
              case TransitionLane14:
              case TransitionLane15:
              case TransitionLane16:
              case RetryLane1:
              case RetryLane2:
              case RetryLane3:
              case RetryLane4:
              case RetryLane5:
                lane = TransitionHydrationLane;
                break;
              case IdleLane:
                lane = IdleHydrationLane;
                break;
              default:
                lane = NoLane;
                break;
            }
            if ((lane & (root3.suspendedLanes | renderLanes2)) !== NoLane) {
              return NoLane;
            }
            return lane;
          }
          function addFiberToLanesMap(root3, fiber, lanes) {
            if (!isDevToolsPresent) {
              return;
            }
            var pendingUpdatersLaneMap = root3.pendingUpdatersLaneMap;
            while (lanes > 0) {
              var index2 = laneToIndex(lanes);
              var lane = 1 << index2;
              var updaters = pendingUpdatersLaneMap[index2];
              updaters.add(fiber);
              lanes &= ~lane;
            }
          }
          function movePendingFibersToMemoized(root3, lanes) {
            if (!isDevToolsPresent) {
              return;
            }
            var pendingUpdatersLaneMap = root3.pendingUpdatersLaneMap;
            var memoizedUpdaters = root3.memoizedUpdaters;
            while (lanes > 0) {
              var index2 = laneToIndex(lanes);
              var lane = 1 << index2;
              var updaters = pendingUpdatersLaneMap[index2];
              if (updaters.size > 0) {
                updaters.forEach(function(fiber) {
                  var alternate = fiber.alternate;
                  if (alternate === null || !memoizedUpdaters.has(alternate)) {
                    memoizedUpdaters.add(fiber);
                  }
                });
                updaters.clear();
              }
              lanes &= ~lane;
            }
          }
          var DiscreteEventPriority = SyncLane;
          var ContinuousEventPriority = InputContinuousLane;
          var DefaultEventPriority = DefaultLane;
          var IdleEventPriority = IdleLane;
          var currentUpdatePriority = NoLane;
          function getCurrentUpdatePriority() {
            return currentUpdatePriority;
          }
          function setCurrentUpdatePriority(newPriority) {
            currentUpdatePriority = newPriority;
          }
          function runWithPriority(priority, fn) {
            var previousPriority = currentUpdatePriority;
            try {
              currentUpdatePriority = priority;
              return fn();
            } finally {
              currentUpdatePriority = previousPriority;
            }
          }
          function higherEventPriority(a3, b3) {
            return a3 !== 0 && a3 < b3 ? a3 : b3;
          }
          function lowerEventPriority(a3, b3) {
            return a3 === 0 || a3 > b3 ? a3 : b3;
          }
          function isHigherEventPriority(a3, b3) {
            return a3 !== 0 && a3 < b3;
          }
          function lanesToEventPriority(lanes) {
            var lane = getHighestPriorityLane(lanes);
            if (!isHigherEventPriority(DiscreteEventPriority, lane)) {
              return DiscreteEventPriority;
            }
            if (!isHigherEventPriority(ContinuousEventPriority, lane)) {
              return ContinuousEventPriority;
            }
            if (includesNonIdleWork(lane)) {
              return DefaultEventPriority;
            }
            return IdleEventPriority;
          }
          function isRootDehydrated(root3) {
            var currentState = root3.current.memoizedState;
            return currentState.isDehydrated;
          }
          var _attemptSynchronousHydration;
          function setAttemptSynchronousHydration(fn) {
            _attemptSynchronousHydration = fn;
          }
          function attemptSynchronousHydration(fiber) {
            _attemptSynchronousHydration(fiber);
          }
          var attemptContinuousHydration;
          function setAttemptContinuousHydration(fn) {
            attemptContinuousHydration = fn;
          }
          var attemptHydrationAtCurrentPriority;
          function setAttemptHydrationAtCurrentPriority(fn) {
            attemptHydrationAtCurrentPriority = fn;
          }
          var getCurrentUpdatePriority$1;
          function setGetCurrentUpdatePriority(fn) {
            getCurrentUpdatePriority$1 = fn;
          }
          var attemptHydrationAtPriority;
          function setAttemptHydrationAtPriority(fn) {
            attemptHydrationAtPriority = fn;
          }
          var hasScheduledReplayAttempt = false;
          var queuedDiscreteEvents = [];
          var queuedFocus = null;
          var queuedDrag = null;
          var queuedMouse = null;
          var queuedPointers = /* @__PURE__ */ new Map();
          var queuedPointerCaptures = /* @__PURE__ */ new Map();
          var queuedExplicitHydrationTargets = [];
          var synchronouslyHydratedEvents = [
            "mousedown",
            "mouseup",
            "touchcancel",
            "touchend",
            "touchstart",
            "auxclick",
            "dblclick",
            "pointercancel",
            "pointerdown",
            "pointerup",
            "dragend",
            "dragstart",
            "drop",
            "compositionend",
            "compositionstart",
            "keydown",
            "keypress",
            "keyup",
            "input",
            "textInput",
            "copy",
            "cut",
            "paste",
            "click",
            "change",
            "contextmenu",
            "reset",
            "submit"
          ];
          function isDiscreteEventThatRequiresHydration(eventType) {
            return synchronouslyHydratedEvents.indexOf(eventType) > -1;
          }
          function createQueuedReplayableEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent) {
            return {
              blockedOn,
              domEventName,
              eventSystemFlags,
              nativeEvent,
              targetContainers: [targetContainer]
            };
          }
          function clearIfContinuousEvent(domEventName, nativeEvent) {
            switch (domEventName) {
              case "focusin":
              case "focusout":
                queuedFocus = null;
                break;
              case "dragenter":
              case "dragleave":
                queuedDrag = null;
                break;
              case "mouseover":
              case "mouseout":
                queuedMouse = null;
                break;
              case "pointerover":
              case "pointerout": {
                var pointerId = nativeEvent.pointerId;
                queuedPointers.delete(pointerId);
                break;
              }
              case "gotpointercapture":
              case "lostpointercapture": {
                var _pointerId = nativeEvent.pointerId;
                queuedPointerCaptures.delete(_pointerId);
                break;
              }
            }
          }
          function accumulateOrCreateContinuousQueuedReplayableEvent(existingQueuedEvent, blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent) {
            if (existingQueuedEvent === null || existingQueuedEvent.nativeEvent !== nativeEvent) {
              var queuedEvent = createQueuedReplayableEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent);
              if (blockedOn !== null) {
                var _fiber = getInstanceFromNode(blockedOn);
                if (_fiber !== null) {
                  attemptContinuousHydration(_fiber);
                }
              }
              return queuedEvent;
            }
            existingQueuedEvent.eventSystemFlags |= eventSystemFlags;
            var targetContainers = existingQueuedEvent.targetContainers;
            if (targetContainer !== null && targetContainers.indexOf(targetContainer) === -1) {
              targetContainers.push(targetContainer);
            }
            return existingQueuedEvent;
          }
          function queueIfContinuousEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent) {
            switch (domEventName) {
              case "focusin": {
                var focusEvent = nativeEvent;
                queuedFocus = accumulateOrCreateContinuousQueuedReplayableEvent(queuedFocus, blockedOn, domEventName, eventSystemFlags, targetContainer, focusEvent);
                return true;
              }
              case "dragenter": {
                var dragEvent = nativeEvent;
                queuedDrag = accumulateOrCreateContinuousQueuedReplayableEvent(queuedDrag, blockedOn, domEventName, eventSystemFlags, targetContainer, dragEvent);
                return true;
              }
              case "mouseover": {
                var mouseEvent = nativeEvent;
                queuedMouse = accumulateOrCreateContinuousQueuedReplayableEvent(queuedMouse, blockedOn, domEventName, eventSystemFlags, targetContainer, mouseEvent);
                return true;
              }
              case "pointerover": {
                var pointerEvent = nativeEvent;
                var pointerId = pointerEvent.pointerId;
                queuedPointers.set(pointerId, accumulateOrCreateContinuousQueuedReplayableEvent(queuedPointers.get(pointerId) || null, blockedOn, domEventName, eventSystemFlags, targetContainer, pointerEvent));
                return true;
              }
              case "gotpointercapture": {
                var _pointerEvent = nativeEvent;
                var _pointerId2 = _pointerEvent.pointerId;
                queuedPointerCaptures.set(_pointerId2, accumulateOrCreateContinuousQueuedReplayableEvent(queuedPointerCaptures.get(_pointerId2) || null, blockedOn, domEventName, eventSystemFlags, targetContainer, _pointerEvent));
                return true;
              }
            }
            return false;
          }
          function attemptExplicitHydrationTarget(queuedTarget) {
            var targetInst = getClosestInstanceFromNode(queuedTarget.target);
            if (targetInst !== null) {
              var nearestMounted = getNearestMountedFiber(targetInst);
              if (nearestMounted !== null) {
                var tag = nearestMounted.tag;
                if (tag === SuspenseComponent) {
                  var instance = getSuspenseInstanceFromFiber(nearestMounted);
                  if (instance !== null) {
                    queuedTarget.blockedOn = instance;
                    attemptHydrationAtPriority(queuedTarget.priority, function() {
                      attemptHydrationAtCurrentPriority(nearestMounted);
                    });
                    return;
                  }
                } else if (tag === HostRoot) {
                  var root3 = nearestMounted.stateNode;
                  if (isRootDehydrated(root3)) {
                    queuedTarget.blockedOn = getContainerFromFiber(nearestMounted);
                    return;
                  }
                }
              }
            }
            queuedTarget.blockedOn = null;
          }
          function queueExplicitHydrationTarget(target) {
            {
              var updatePriority = getCurrentUpdatePriority$1();
              var queuedTarget = {
                blockedOn: null,
                target,
                priority: updatePriority
              };
              var i3 = 0;
              for (; i3 < queuedExplicitHydrationTargets.length; i3++) {
                if (!isHigherEventPriority(updatePriority, queuedExplicitHydrationTargets[i3].priority)) {
                  break;
                }
              }
              queuedExplicitHydrationTargets.splice(i3, 0, queuedTarget);
              if (i3 === 0) {
                attemptExplicitHydrationTarget(queuedTarget);
              }
            }
          }
          function attemptReplayContinuousQueuedEvent(queuedEvent) {
            if (queuedEvent.blockedOn !== null) {
              return false;
            }
            var targetContainers = queuedEvent.targetContainers;
            while (targetContainers.length > 0) {
              var targetContainer = targetContainers[0];
              var nextBlockedOn = findInstanceBlockingEvent(queuedEvent.domEventName, queuedEvent.eventSystemFlags, targetContainer, queuedEvent.nativeEvent);
              if (nextBlockedOn === null) {
                var nativeEvent = queuedEvent.nativeEvent;
                var nativeEventClone = new nativeEvent.constructor(nativeEvent.type, nativeEvent);
                setReplayingEvent(nativeEventClone);
                nativeEvent.target.dispatchEvent(nativeEventClone);
                resetReplayingEvent();
              } else {
                var _fiber2 = getInstanceFromNode(nextBlockedOn);
                if (_fiber2 !== null) {
                  attemptContinuousHydration(_fiber2);
                }
                queuedEvent.blockedOn = nextBlockedOn;
                return false;
              }
              targetContainers.shift();
            }
            return true;
          }
          function attemptReplayContinuousQueuedEventInMap(queuedEvent, key, map) {
            if (attemptReplayContinuousQueuedEvent(queuedEvent)) {
              map.delete(key);
            }
          }
          function replayUnblockedEvents() {
            hasScheduledReplayAttempt = false;
            if (queuedFocus !== null && attemptReplayContinuousQueuedEvent(queuedFocus)) {
              queuedFocus = null;
            }
            if (queuedDrag !== null && attemptReplayContinuousQueuedEvent(queuedDrag)) {
              queuedDrag = null;
            }
            if (queuedMouse !== null && attemptReplayContinuousQueuedEvent(queuedMouse)) {
              queuedMouse = null;
            }
            queuedPointers.forEach(attemptReplayContinuousQueuedEventInMap);
            queuedPointerCaptures.forEach(attemptReplayContinuousQueuedEventInMap);
          }
          function scheduleCallbackIfUnblocked(queuedEvent, unblocked) {
            if (queuedEvent.blockedOn === unblocked) {
              queuedEvent.blockedOn = null;
              if (!hasScheduledReplayAttempt) {
                hasScheduledReplayAttempt = true;
                Scheduler.unstable_scheduleCallback(Scheduler.unstable_NormalPriority, replayUnblockedEvents);
              }
            }
          }
          function retryIfBlockedOn(unblocked) {
            if (queuedDiscreteEvents.length > 0) {
              scheduleCallbackIfUnblocked(queuedDiscreteEvents[0], unblocked);
              for (var i3 = 1; i3 < queuedDiscreteEvents.length; i3++) {
                var queuedEvent = queuedDiscreteEvents[i3];
                if (queuedEvent.blockedOn === unblocked) {
                  queuedEvent.blockedOn = null;
                }
              }
            }
            if (queuedFocus !== null) {
              scheduleCallbackIfUnblocked(queuedFocus, unblocked);
            }
            if (queuedDrag !== null) {
              scheduleCallbackIfUnblocked(queuedDrag, unblocked);
            }
            if (queuedMouse !== null) {
              scheduleCallbackIfUnblocked(queuedMouse, unblocked);
            }
            var unblock = function(queuedEvent2) {
              return scheduleCallbackIfUnblocked(queuedEvent2, unblocked);
            };
            queuedPointers.forEach(unblock);
            queuedPointerCaptures.forEach(unblock);
            for (var _i = 0; _i < queuedExplicitHydrationTargets.length; _i++) {
              var queuedTarget = queuedExplicitHydrationTargets[_i];
              if (queuedTarget.blockedOn === unblocked) {
                queuedTarget.blockedOn = null;
              }
            }
            while (queuedExplicitHydrationTargets.length > 0) {
              var nextExplicitTarget = queuedExplicitHydrationTargets[0];
              if (nextExplicitTarget.blockedOn !== null) {
                break;
              } else {
                attemptExplicitHydrationTarget(nextExplicitTarget);
                if (nextExplicitTarget.blockedOn === null) {
                  queuedExplicitHydrationTargets.shift();
                }
              }
            }
          }
          var ReactCurrentBatchConfig = ReactSharedInternals.ReactCurrentBatchConfig;
          function createEventListenerWrapperWithPriority(targetContainer, domEventName, eventSystemFlags) {
            var eventPriority = getEventPriority(domEventName);
            var listenerWrapper;
            switch (eventPriority) {
              case DiscreteEventPriority:
                listenerWrapper = dispatchDiscreteEvent;
                break;
              case ContinuousEventPriority:
                listenerWrapper = dispatchContinuousEvent;
                break;
              case DefaultEventPriority:
              default:
                listenerWrapper = dispatchEvent;
                break;
            }
            return listenerWrapper.bind(null, domEventName, eventSystemFlags, targetContainer);
          }
          function dispatchDiscreteEvent(domEventName, eventSystemFlags, container2, nativeEvent) {
            var previousPriority = getCurrentUpdatePriority();
            var prevTransition = ReactCurrentBatchConfig.transition;
            ReactCurrentBatchConfig.transition = null;
            try {
              setCurrentUpdatePriority(DiscreteEventPriority);
              dispatchEvent(domEventName, eventSystemFlags, container2, nativeEvent);
            } finally {
              setCurrentUpdatePriority(previousPriority);
              ReactCurrentBatchConfig.transition = prevTransition;
            }
          }
          function dispatchContinuousEvent(domEventName, eventSystemFlags, container2, nativeEvent) {
            var previousPriority = getCurrentUpdatePriority();
            var prevTransition = ReactCurrentBatchConfig.transition;
            ReactCurrentBatchConfig.transition = null;
            try {
              setCurrentUpdatePriority(ContinuousEventPriority);
              dispatchEvent(domEventName, eventSystemFlags, container2, nativeEvent);
            } finally {
              setCurrentUpdatePriority(previousPriority);
              ReactCurrentBatchConfig.transition = prevTransition;
            }
          }
          function dispatchEvent(domEventName, eventSystemFlags, targetContainer, nativeEvent) {
            var blockedOn = findInstanceBlockingEvent(domEventName, eventSystemFlags, targetContainer, nativeEvent);
            if (blockedOn === null) {
              dispatchEventForPluginEventSystem(domEventName, eventSystemFlags, nativeEvent, return_targetInst, targetContainer);
              clearIfContinuousEvent(domEventName, nativeEvent);
              return;
            }
            if (queueIfContinuousEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent)) {
              nativeEvent.stopPropagation();
              return;
            }
            clearIfContinuousEvent(domEventName, nativeEvent);
            if (eventSystemFlags & IS_CAPTURE_PHASE && isDiscreteEventThatRequiresHydration(domEventName)) {
              while (blockedOn !== null) {
                var fiber = getInstanceFromNode(blockedOn);
                if (fiber !== null) {
                  attemptSynchronousHydration(fiber);
                }
                var nextBlockedOn = findInstanceBlockingEvent(domEventName, eventSystemFlags, targetContainer, nativeEvent);
                if (nextBlockedOn === null) {
                  dispatchEventForPluginEventSystem(domEventName, eventSystemFlags, nativeEvent, return_targetInst, targetContainer);
                }
                if (nextBlockedOn === blockedOn) {
                  break;
                }
                blockedOn = nextBlockedOn;
              }
              if (blockedOn !== null) {
                nativeEvent.stopPropagation();
              }
              return;
            }
            dispatchEventForPluginEventSystem(domEventName, eventSystemFlags, nativeEvent, null, targetContainer);
          }
          var return_targetInst = null;
          function findInstanceBlockingEvent(domEventName, eventSystemFlags, targetContainer, nativeEvent) {
            return_targetInst = null;
            var nativeEventTarget = getEventTarget(nativeEvent);
            var targetInst = getClosestInstanceFromNode(nativeEventTarget);
            if (targetInst !== null) {
              var nearestMounted = getNearestMountedFiber(targetInst);
              if (nearestMounted === null) {
                targetInst = null;
              } else {
                var tag = nearestMounted.tag;
                if (tag === SuspenseComponent) {
                  var instance = getSuspenseInstanceFromFiber(nearestMounted);
                  if (instance !== null) {
                    return instance;
                  }
                  targetInst = null;
                } else if (tag === HostRoot) {
                  var root3 = nearestMounted.stateNode;
                  if (isRootDehydrated(root3)) {
                    return getContainerFromFiber(nearestMounted);
                  }
                  targetInst = null;
                } else if (nearestMounted !== targetInst) {
                  targetInst = null;
                }
              }
            }
            return_targetInst = targetInst;
            return null;
          }
          function getEventPriority(domEventName) {
            switch (domEventName) {
              case "cancel":
              case "click":
              case "close":
              case "contextmenu":
              case "copy":
              case "cut":
              case "auxclick":
              case "dblclick":
              case "dragend":
              case "dragstart":
              case "drop":
              case "focusin":
              case "focusout":
              case "input":
              case "invalid":
              case "keydown":
              case "keypress":
              case "keyup":
              case "mousedown":
              case "mouseup":
              case "paste":
              case "pause":
              case "play":
              case "pointercancel":
              case "pointerdown":
              case "pointerup":
              case "ratechange":
              case "reset":
              case "resize":
              case "seeked":
              case "submit":
              case "touchcancel":
              case "touchend":
              case "touchstart":
              case "volumechange":
              case "change":
              case "selectionchange":
              case "textInput":
              case "compositionstart":
              case "compositionend":
              case "compositionupdate":
              case "beforeblur":
              case "afterblur":
              case "beforeinput":
              case "blur":
              case "fullscreenchange":
              case "focus":
              case "hashchange":
              case "popstate":
              case "select":
              case "selectstart":
                return DiscreteEventPriority;
              case "drag":
              case "dragenter":
              case "dragexit":
              case "dragleave":
              case "dragover":
              case "mousemove":
              case "mouseout":
              case "mouseover":
              case "pointermove":
              case "pointerout":
              case "pointerover":
              case "scroll":
              case "toggle":
              case "touchmove":
              case "wheel":
              case "mouseenter":
              case "mouseleave":
              case "pointerenter":
              case "pointerleave":
                return ContinuousEventPriority;
              case "message": {
                var schedulerPriority = getCurrentPriorityLevel();
                switch (schedulerPriority) {
                  case ImmediatePriority:
                    return DiscreteEventPriority;
                  case UserBlockingPriority:
                    return ContinuousEventPriority;
                  case NormalPriority:
                  case LowPriority:
                    return DefaultEventPriority;
                  case IdlePriority:
                    return IdleEventPriority;
                  default:
                    return DefaultEventPriority;
                }
              }
              default:
                return DefaultEventPriority;
            }
          }
          function addEventBubbleListener(target, eventType, listener) {
            target.addEventListener(eventType, listener, false);
            return listener;
          }
          function addEventCaptureListener(target, eventType, listener) {
            target.addEventListener(eventType, listener, true);
            return listener;
          }
          function addEventCaptureListenerWithPassiveFlag(target, eventType, listener, passive) {
            target.addEventListener(eventType, listener, {
              capture: true,
              passive
            });
            return listener;
          }
          function addEventBubbleListenerWithPassiveFlag(target, eventType, listener, passive) {
            target.addEventListener(eventType, listener, {
              passive
            });
            return listener;
          }
          var root2 = null;
          var startText = null;
          var fallbackText = null;
          function initialize(nativeEventTarget) {
            root2 = nativeEventTarget;
            startText = getText();
            return true;
          }
          function reset() {
            root2 = null;
            startText = null;
            fallbackText = null;
          }
          function getData() {
            if (fallbackText) {
              return fallbackText;
            }
            var start;
            var startValue = startText;
            var startLength = startValue.length;
            var end;
            var endValue = getText();
            var endLength = endValue.length;
            for (start = 0; start < startLength; start++) {
              if (startValue[start] !== endValue[start]) {
                break;
              }
            }
            var minEnd = startLength - start;
            for (end = 1; end <= minEnd; end++) {
              if (startValue[startLength - end] !== endValue[endLength - end]) {
                break;
              }
            }
            var sliceTail = end > 1 ? 1 - end : void 0;
            fallbackText = endValue.slice(start, sliceTail);
            return fallbackText;
          }
          function getText() {
            if ("value" in root2) {
              return root2.value;
            }
            return root2.textContent;
          }
          function getEventCharCode(nativeEvent) {
            var charCode;
            var keyCode = nativeEvent.keyCode;
            if ("charCode" in nativeEvent) {
              charCode = nativeEvent.charCode;
              if (charCode === 0 && keyCode === 13) {
                charCode = 13;
              }
            } else {
              charCode = keyCode;
            }
            if (charCode === 10) {
              charCode = 13;
            }
            if (charCode >= 32 || charCode === 13) {
              return charCode;
            }
            return 0;
          }
          function functionThatReturnsTrue() {
            return true;
          }
          function functionThatReturnsFalse() {
            return false;
          }
          function createSyntheticEvent(Interface) {
            function SyntheticBaseEvent(reactName, reactEventType, targetInst, nativeEvent, nativeEventTarget) {
              this._reactName = reactName;
              this._targetInst = targetInst;
              this.type = reactEventType;
              this.nativeEvent = nativeEvent;
              this.target = nativeEventTarget;
              this.currentTarget = null;
              for (var _propName in Interface) {
                if (!Interface.hasOwnProperty(_propName)) {
                  continue;
                }
                var normalize = Interface[_propName];
                if (normalize) {
                  this[_propName] = normalize(nativeEvent);
                } else {
                  this[_propName] = nativeEvent[_propName];
                }
              }
              var defaultPrevented = nativeEvent.defaultPrevented != null ? nativeEvent.defaultPrevented : nativeEvent.returnValue === false;
              if (defaultPrevented) {
                this.isDefaultPrevented = functionThatReturnsTrue;
              } else {
                this.isDefaultPrevented = functionThatReturnsFalse;
              }
              this.isPropagationStopped = functionThatReturnsFalse;
              return this;
            }
            assign(SyntheticBaseEvent.prototype, {
              preventDefault: function() {
                this.defaultPrevented = true;
                var event = this.nativeEvent;
                if (!event) {
                  return;
                }
                if (event.preventDefault) {
                  event.preventDefault();
                } else if (typeof event.returnValue !== "unknown") {
                  event.returnValue = false;
                }
                this.isDefaultPrevented = functionThatReturnsTrue;
              },
              stopPropagation: function() {
                var event = this.nativeEvent;
                if (!event) {
                  return;
                }
                if (event.stopPropagation) {
                  event.stopPropagation();
                } else if (typeof event.cancelBubble !== "unknown") {
                  event.cancelBubble = true;
                }
                this.isPropagationStopped = functionThatReturnsTrue;
              },
              persist: function() {
              },
              isPersistent: functionThatReturnsTrue
            });
            return SyntheticBaseEvent;
          }
          var EventInterface = {
            eventPhase: 0,
            bubbles: 0,
            cancelable: 0,
            timeStamp: function(event) {
              return event.timeStamp || Date.now();
            },
            defaultPrevented: 0,
            isTrusted: 0
          };
          var SyntheticEvent = createSyntheticEvent(EventInterface);
          var UIEventInterface = assign({}, EventInterface, {
            view: 0,
            detail: 0
          });
          var SyntheticUIEvent = createSyntheticEvent(UIEventInterface);
          var lastMovementX;
          var lastMovementY;
          var lastMouseEvent;
          function updateMouseMovementPolyfillState(event) {
            if (event !== lastMouseEvent) {
              if (lastMouseEvent && event.type === "mousemove") {
                lastMovementX = event.screenX - lastMouseEvent.screenX;
                lastMovementY = event.screenY - lastMouseEvent.screenY;
              } else {
                lastMovementX = 0;
                lastMovementY = 0;
              }
              lastMouseEvent = event;
            }
          }
          var MouseEventInterface = assign({}, UIEventInterface, {
            screenX: 0,
            screenY: 0,
            clientX: 0,
            clientY: 0,
            pageX: 0,
            pageY: 0,
            ctrlKey: 0,
            shiftKey: 0,
            altKey: 0,
            metaKey: 0,
            getModifierState: getEventModifierState,
            button: 0,
            buttons: 0,
            relatedTarget: function(event) {
              if (event.relatedTarget === void 0)
                return event.fromElement === event.srcElement ? event.toElement : event.fromElement;
              return event.relatedTarget;
            },
            movementX: function(event) {
              if ("movementX" in event) {
                return event.movementX;
              }
              updateMouseMovementPolyfillState(event);
              return lastMovementX;
            },
            movementY: function(event) {
              if ("movementY" in event) {
                return event.movementY;
              }
              return lastMovementY;
            }
          });
          var SyntheticMouseEvent = createSyntheticEvent(MouseEventInterface);
          var DragEventInterface = assign({}, MouseEventInterface, {
            dataTransfer: 0
          });
          var SyntheticDragEvent = createSyntheticEvent(DragEventInterface);
          var FocusEventInterface = assign({}, UIEventInterface, {
            relatedTarget: 0
          });
          var SyntheticFocusEvent = createSyntheticEvent(FocusEventInterface);
          var AnimationEventInterface = assign({}, EventInterface, {
            animationName: 0,
            elapsedTime: 0,
            pseudoElement: 0
          });
          var SyntheticAnimationEvent = createSyntheticEvent(AnimationEventInterface);
          var ClipboardEventInterface = assign({}, EventInterface, {
            clipboardData: function(event) {
              return "clipboardData" in event ? event.clipboardData : window.clipboardData;
            }
          });
          var SyntheticClipboardEvent = createSyntheticEvent(ClipboardEventInterface);
          var CompositionEventInterface = assign({}, EventInterface, {
            data: 0
          });
          var SyntheticCompositionEvent = createSyntheticEvent(CompositionEventInterface);
          var SyntheticInputEvent = SyntheticCompositionEvent;
          var normalizeKey = {
            Esc: "Escape",
            Spacebar: " ",
            Left: "ArrowLeft",
            Up: "ArrowUp",
            Right: "ArrowRight",
            Down: "ArrowDown",
            Del: "Delete",
            Win: "OS",
            Menu: "ContextMenu",
            Apps: "ContextMenu",
            Scroll: "ScrollLock",
            MozPrintableKey: "Unidentified"
          };
          var translateToKey = {
            "8": "Backspace",
            "9": "Tab",
            "12": "Clear",
            "13": "Enter",
            "16": "Shift",
            "17": "Control",
            "18": "Alt",
            "19": "Pause",
            "20": "CapsLock",
            "27": "Escape",
            "32": " ",
            "33": "PageUp",
            "34": "PageDown",
            "35": "End",
            "36": "Home",
            "37": "ArrowLeft",
            "38": "ArrowUp",
            "39": "ArrowRight",
            "40": "ArrowDown",
            "45": "Insert",
            "46": "Delete",
            "112": "F1",
            "113": "F2",
            "114": "F3",
            "115": "F4",
            "116": "F5",
            "117": "F6",
            "118": "F7",
            "119": "F8",
            "120": "F9",
            "121": "F10",
            "122": "F11",
            "123": "F12",
            "144": "NumLock",
            "145": "ScrollLock",
            "224": "Meta"
          };
          function getEventKey(nativeEvent) {
            if (nativeEvent.key) {
              var key = normalizeKey[nativeEvent.key] || nativeEvent.key;
              if (key !== "Unidentified") {
                return key;
              }
            }
            if (nativeEvent.type === "keypress") {
              var charCode = getEventCharCode(nativeEvent);
              return charCode === 13 ? "Enter" : String.fromCharCode(charCode);
            }
            if (nativeEvent.type === "keydown" || nativeEvent.type === "keyup") {
              return translateToKey[nativeEvent.keyCode] || "Unidentified";
            }
            return "";
          }
          var modifierKeyToProp = {
            Alt: "altKey",
            Control: "ctrlKey",
            Meta: "metaKey",
            Shift: "shiftKey"
          };
          function modifierStateGetter(keyArg) {
            var syntheticEvent = this;
            var nativeEvent = syntheticEvent.nativeEvent;
            if (nativeEvent.getModifierState) {
              return nativeEvent.getModifierState(keyArg);
            }
            var keyProp = modifierKeyToProp[keyArg];
            return keyProp ? !!nativeEvent[keyProp] : false;
          }
          function getEventModifierState(nativeEvent) {
            return modifierStateGetter;
          }
          var KeyboardEventInterface = assign({}, UIEventInterface, {
            key: getEventKey,
            code: 0,
            location: 0,
            ctrlKey: 0,
            shiftKey: 0,
            altKey: 0,
            metaKey: 0,
            repeat: 0,
            locale: 0,
            getModifierState: getEventModifierState,
            charCode: function(event) {
              if (event.type === "keypress") {
                return getEventCharCode(event);
              }
              return 0;
            },
            keyCode: function(event) {
              if (event.type === "keydown" || event.type === "keyup") {
                return event.keyCode;
              }
              return 0;
            },
            which: function(event) {
              if (event.type === "keypress") {
                return getEventCharCode(event);
              }
              if (event.type === "keydown" || event.type === "keyup") {
                return event.keyCode;
              }
              return 0;
            }
          });
          var SyntheticKeyboardEvent = createSyntheticEvent(KeyboardEventInterface);
          var PointerEventInterface = assign({}, MouseEventInterface, {
            pointerId: 0,
            width: 0,
            height: 0,
            pressure: 0,
            tangentialPressure: 0,
            tiltX: 0,
            tiltY: 0,
            twist: 0,
            pointerType: 0,
            isPrimary: 0
          });
          var SyntheticPointerEvent = createSyntheticEvent(PointerEventInterface);
          var TouchEventInterface = assign({}, UIEventInterface, {
            touches: 0,
            targetTouches: 0,
            changedTouches: 0,
            altKey: 0,
            metaKey: 0,
            ctrlKey: 0,
            shiftKey: 0,
            getModifierState: getEventModifierState
          });
          var SyntheticTouchEvent = createSyntheticEvent(TouchEventInterface);
          var TransitionEventInterface = assign({}, EventInterface, {
            propertyName: 0,
            elapsedTime: 0,
            pseudoElement: 0
          });
          var SyntheticTransitionEvent = createSyntheticEvent(TransitionEventInterface);
          var WheelEventInterface = assign({}, MouseEventInterface, {
            deltaX: function(event) {
              return "deltaX" in event ? event.deltaX : "wheelDeltaX" in event ? -event.wheelDeltaX : 0;
            },
            deltaY: function(event) {
              return "deltaY" in event ? event.deltaY : "wheelDeltaY" in event ? -event.wheelDeltaY : "wheelDelta" in event ? -event.wheelDelta : 0;
            },
            deltaZ: 0,
            deltaMode: 0
          });
          var SyntheticWheelEvent = createSyntheticEvent(WheelEventInterface);
          var END_KEYCODES = [9, 13, 27, 32];
          var START_KEYCODE = 229;
          var canUseCompositionEvent = canUseDOM && "CompositionEvent" in window;
          var documentMode = null;
          if (canUseDOM && "documentMode" in document) {
            documentMode = document.documentMode;
          }
          var canUseTextInputEvent = canUseDOM && "TextEvent" in window && !documentMode;
          var useFallbackCompositionData = canUseDOM && (!canUseCompositionEvent || documentMode && documentMode > 8 && documentMode <= 11);
          var SPACEBAR_CODE = 32;
          var SPACEBAR_CHAR = String.fromCharCode(SPACEBAR_CODE);
          function registerEvents() {
            registerTwoPhaseEvent("onBeforeInput", ["compositionend", "keypress", "textInput", "paste"]);
            registerTwoPhaseEvent("onCompositionEnd", ["compositionend", "focusout", "keydown", "keypress", "keyup", "mousedown"]);
            registerTwoPhaseEvent("onCompositionStart", ["compositionstart", "focusout", "keydown", "keypress", "keyup", "mousedown"]);
            registerTwoPhaseEvent("onCompositionUpdate", ["compositionupdate", "focusout", "keydown", "keypress", "keyup", "mousedown"]);
          }
          var hasSpaceKeypress = false;
          function isKeypressCommand(nativeEvent) {
            return (nativeEvent.ctrlKey || nativeEvent.altKey || nativeEvent.metaKey) && !(nativeEvent.ctrlKey && nativeEvent.altKey);
          }
          function getCompositionEventType(domEventName) {
            switch (domEventName) {
              case "compositionstart":
                return "onCompositionStart";
              case "compositionend":
                return "onCompositionEnd";
              case "compositionupdate":
                return "onCompositionUpdate";
            }
          }
          function isFallbackCompositionStart(domEventName, nativeEvent) {
            return domEventName === "keydown" && nativeEvent.keyCode === START_KEYCODE;
          }
          function isFallbackCompositionEnd(domEventName, nativeEvent) {
            switch (domEventName) {
              case "keyup":
                return END_KEYCODES.indexOf(nativeEvent.keyCode) !== -1;
              case "keydown":
                return nativeEvent.keyCode !== START_KEYCODE;
              case "keypress":
              case "mousedown":
              case "focusout":
                return true;
              default:
                return false;
            }
          }
          function getDataFromCustomEvent(nativeEvent) {
            var detail = nativeEvent.detail;
            if (typeof detail === "object" && "data" in detail) {
              return detail.data;
            }
            return null;
          }
          function isUsingKoreanIME(nativeEvent) {
            return nativeEvent.locale === "ko";
          }
          var isComposing = false;
          function extractCompositionEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget) {
            var eventType;
            var fallbackData;
            if (canUseCompositionEvent) {
              eventType = getCompositionEventType(domEventName);
            } else if (!isComposing) {
              if (isFallbackCompositionStart(domEventName, nativeEvent)) {
                eventType = "onCompositionStart";
              }
            } else if (isFallbackCompositionEnd(domEventName, nativeEvent)) {
              eventType = "onCompositionEnd";
            }
            if (!eventType) {
              return null;
            }
            if (useFallbackCompositionData && !isUsingKoreanIME(nativeEvent)) {
              if (!isComposing && eventType === "onCompositionStart") {
                isComposing = initialize(nativeEventTarget);
              } else if (eventType === "onCompositionEnd") {
                if (isComposing) {
                  fallbackData = getData();
                }
              }
            }
            var listeners = accumulateTwoPhaseListeners(targetInst, eventType);
            if (listeners.length > 0) {
              var event = new SyntheticCompositionEvent(eventType, domEventName, null, nativeEvent, nativeEventTarget);
              dispatchQueue.push({
                event,
                listeners
              });
              if (fallbackData) {
                event.data = fallbackData;
              } else {
                var customData = getDataFromCustomEvent(nativeEvent);
                if (customData !== null) {
                  event.data = customData;
                }
              }
            }
          }
          function getNativeBeforeInputChars(domEventName, nativeEvent) {
            switch (domEventName) {
              case "compositionend":
                return getDataFromCustomEvent(nativeEvent);
              case "keypress":
                var which = nativeEvent.which;
                if (which !== SPACEBAR_CODE) {
                  return null;
                }
                hasSpaceKeypress = true;
                return SPACEBAR_CHAR;
              case "textInput":
                var chars = nativeEvent.data;
                if (chars === SPACEBAR_CHAR && hasSpaceKeypress) {
                  return null;
                }
                return chars;
              default:
                return null;
            }
          }
          function getFallbackBeforeInputChars(domEventName, nativeEvent) {
            if (isComposing) {
              if (domEventName === "compositionend" || !canUseCompositionEvent && isFallbackCompositionEnd(domEventName, nativeEvent)) {
                var chars = getData();
                reset();
                isComposing = false;
                return chars;
              }
              return null;
            }
            switch (domEventName) {
              case "paste":
                return null;
              case "keypress":
                if (!isKeypressCommand(nativeEvent)) {
                  if (nativeEvent.char && nativeEvent.char.length > 1) {
                    return nativeEvent.char;
                  } else if (nativeEvent.which) {
                    return String.fromCharCode(nativeEvent.which);
                  }
                }
                return null;
              case "compositionend":
                return useFallbackCompositionData && !isUsingKoreanIME(nativeEvent) ? null : nativeEvent.data;
              default:
                return null;
            }
          }
          function extractBeforeInputEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget) {
            var chars;
            if (canUseTextInputEvent) {
              chars = getNativeBeforeInputChars(domEventName, nativeEvent);
            } else {
              chars = getFallbackBeforeInputChars(domEventName, nativeEvent);
            }
            if (!chars) {
              return null;
            }
            var listeners = accumulateTwoPhaseListeners(targetInst, "onBeforeInput");
            if (listeners.length > 0) {
              var event = new SyntheticInputEvent("onBeforeInput", "beforeinput", null, nativeEvent, nativeEventTarget);
              dispatchQueue.push({
                event,
                listeners
              });
              event.data = chars;
            }
          }
          function extractEvents(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
            extractCompositionEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
            extractBeforeInputEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
          }
          var supportedInputTypes = {
            color: true,
            date: true,
            datetime: true,
            "datetime-local": true,
            email: true,
            month: true,
            number: true,
            password: true,
            range: true,
            search: true,
            tel: true,
            text: true,
            time: true,
            url: true,
            week: true
          };
          function isTextInputElement(elem) {
            var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase();
            if (nodeName === "input") {
              return !!supportedInputTypes[elem.type];
            }
            if (nodeName === "textarea") {
              return true;
            }
            return false;
          }
          function isEventSupported(eventNameSuffix) {
            if (!canUseDOM) {
              return false;
            }
            var eventName = "on" + eventNameSuffix;
            var isSupported = eventName in document;
            if (!isSupported) {
              var element = document.createElement("div");
              element.setAttribute(eventName, "return;");
              isSupported = typeof element[eventName] === "function";
            }
            return isSupported;
          }
          function registerEvents$1() {
            registerTwoPhaseEvent("onChange", ["change", "click", "focusin", "focusout", "input", "keydown", "keyup", "selectionchange"]);
          }
          function createAndAccumulateChangeEvent(dispatchQueue, inst, nativeEvent, target) {
            enqueueStateRestore(target);
            var listeners = accumulateTwoPhaseListeners(inst, "onChange");
            if (listeners.length > 0) {
              var event = new SyntheticEvent("onChange", "change", null, nativeEvent, target);
              dispatchQueue.push({
                event,
                listeners
              });
            }
          }
          var activeElement = null;
          var activeElementInst = null;
          function shouldUseChangeEvent(elem) {
            var nodeName = elem.nodeName && elem.nodeName.toLowerCase();
            return nodeName === "select" || nodeName === "input" && elem.type === "file";
          }
          function manualDispatchChangeEvent(nativeEvent) {
            var dispatchQueue = [];
            createAndAccumulateChangeEvent(dispatchQueue, activeElementInst, nativeEvent, getEventTarget(nativeEvent));
            batchedUpdates(runEventInBatch, dispatchQueue);
          }
          function runEventInBatch(dispatchQueue) {
            processDispatchQueue(dispatchQueue, 0);
          }
          function getInstIfValueChanged(targetInst) {
            var targetNode = getNodeFromInstance(targetInst);
            if (updateValueIfChanged(targetNode)) {
              return targetInst;
            }
          }
          function getTargetInstForChangeEvent(domEventName, targetInst) {
            if (domEventName === "change") {
              return targetInst;
            }
          }
          var isInputEventSupported = false;
          if (canUseDOM) {
            isInputEventSupported = isEventSupported("input") && (!document.documentMode || document.documentMode > 9);
          }
          function startWatchingForValueChange(target, targetInst) {
            activeElement = target;
            activeElementInst = targetInst;
            activeElement.attachEvent("onpropertychange", handlePropertyChange);
          }
          function stopWatchingForValueChange() {
            if (!activeElement) {
              return;
            }
            activeElement.detachEvent("onpropertychange", handlePropertyChange);
            activeElement = null;
            activeElementInst = null;
          }
          function handlePropertyChange(nativeEvent) {
            if (nativeEvent.propertyName !== "value") {
              return;
            }
            if (getInstIfValueChanged(activeElementInst)) {
              manualDispatchChangeEvent(nativeEvent);
            }
          }
          function handleEventsForInputEventPolyfill(domEventName, target, targetInst) {
            if (domEventName === "focusin") {
              stopWatchingForValueChange();
              startWatchingForValueChange(target, targetInst);
            } else if (domEventName === "focusout") {
              stopWatchingForValueChange();
            }
          }
          function getTargetInstForInputEventPolyfill(domEventName, targetInst) {
            if (domEventName === "selectionchange" || domEventName === "keyup" || domEventName === "keydown") {
              return getInstIfValueChanged(activeElementInst);
            }
          }
          function shouldUseClickEvent(elem) {
            var nodeName = elem.nodeName;
            return nodeName && nodeName.toLowerCase() === "input" && (elem.type === "checkbox" || elem.type === "radio");
          }
          function getTargetInstForClickEvent(domEventName, targetInst) {
            if (domEventName === "click") {
              return getInstIfValueChanged(targetInst);
            }
          }
          function getTargetInstForInputOrChangeEvent(domEventName, targetInst) {
            if (domEventName === "input" || domEventName === "change") {
              return getInstIfValueChanged(targetInst);
            }
          }
          function handleControlledInputBlur(node) {
            var state = node._wrapperState;
            if (!state || !state.controlled || node.type !== "number") {
              return;
            }
            {
              setDefaultValue(node, "number", node.value);
            }
          }
          function extractEvents$1(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
            var targetNode = targetInst ? getNodeFromInstance(targetInst) : window;
            var getTargetInstFunc, handleEventFunc;
            if (shouldUseChangeEvent(targetNode)) {
              getTargetInstFunc = getTargetInstForChangeEvent;
            } else if (isTextInputElement(targetNode)) {
              if (isInputEventSupported) {
                getTargetInstFunc = getTargetInstForInputOrChangeEvent;
              } else {
                getTargetInstFunc = getTargetInstForInputEventPolyfill;
                handleEventFunc = handleEventsForInputEventPolyfill;
              }
            } else if (shouldUseClickEvent(targetNode)) {
              getTargetInstFunc = getTargetInstForClickEvent;
            }
            if (getTargetInstFunc) {
              var inst = getTargetInstFunc(domEventName, targetInst);
              if (inst) {
                createAndAccumulateChangeEvent(dispatchQueue, inst, nativeEvent, nativeEventTarget);
                return;
              }
            }
            if (handleEventFunc) {
              handleEventFunc(domEventName, targetNode, targetInst);
            }
            if (domEventName === "focusout") {
              handleControlledInputBlur(targetNode);
            }
          }
          function registerEvents$2() {
            registerDirectEvent("onMouseEnter", ["mouseout", "mouseover"]);
            registerDirectEvent("onMouseLeave", ["mouseout", "mouseover"]);
            registerDirectEvent("onPointerEnter", ["pointerout", "pointerover"]);
            registerDirectEvent("onPointerLeave", ["pointerout", "pointerover"]);
          }
          function extractEvents$2(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
            var isOverEvent = domEventName === "mouseover" || domEventName === "pointerover";
            var isOutEvent = domEventName === "mouseout" || domEventName === "pointerout";
            if (isOverEvent && !isReplayingEvent(nativeEvent)) {
              var related = nativeEvent.relatedTarget || nativeEvent.fromElement;
              if (related) {
                if (getClosestInstanceFromNode(related) || isContainerMarkedAsRoot(related)) {
                  return;
                }
              }
            }
            if (!isOutEvent && !isOverEvent) {
              return;
            }
            var win;
            if (nativeEventTarget.window === nativeEventTarget) {
              win = nativeEventTarget;
            } else {
              var doc = nativeEventTarget.ownerDocument;
              if (doc) {
                win = doc.defaultView || doc.parentWindow;
              } else {
                win = window;
              }
            }
            var from;
            var to;
            if (isOutEvent) {
              var _related = nativeEvent.relatedTarget || nativeEvent.toElement;
              from = targetInst;
              to = _related ? getClosestInstanceFromNode(_related) : null;
              if (to !== null) {
                var nearestMounted = getNearestMountedFiber(to);
                if (to !== nearestMounted || to.tag !== HostComponent && to.tag !== HostText) {
                  to = null;
                }
              }
            } else {
              from = null;
              to = targetInst;
            }
            if (from === to) {
              return;
            }
            var SyntheticEventCtor = SyntheticMouseEvent;
            var leaveEventType = "onMouseLeave";
            var enterEventType = "onMouseEnter";
            var eventTypePrefix = "mouse";
            if (domEventName === "pointerout" || domEventName === "pointerover") {
              SyntheticEventCtor = SyntheticPointerEvent;
              leaveEventType = "onPointerLeave";
              enterEventType = "onPointerEnter";
              eventTypePrefix = "pointer";
            }
            var fromNode = from == null ? win : getNodeFromInstance(from);
            var toNode = to == null ? win : getNodeFromInstance(to);
            var leave = new SyntheticEventCtor(leaveEventType, eventTypePrefix + "leave", from, nativeEvent, nativeEventTarget);
            leave.target = fromNode;
            leave.relatedTarget = toNode;
            var enter = null;
            var nativeTargetInst = getClosestInstanceFromNode(nativeEventTarget);
            if (nativeTargetInst === targetInst) {
              var enterEvent = new SyntheticEventCtor(enterEventType, eventTypePrefix + "enter", to, nativeEvent, nativeEventTarget);
              enterEvent.target = toNode;
              enterEvent.relatedTarget = fromNode;
              enter = enterEvent;
            }
            accumulateEnterLeaveTwoPhaseListeners(dispatchQueue, leave, enter, from, to);
          }
          function is(x4, y4) {
            return x4 === y4 && (x4 !== 0 || 1 / x4 === 1 / y4) || x4 !== x4 && y4 !== y4;
          }
          var objectIs = typeof Object.is === "function" ? Object.is : is;
          function shallowEqual(objA, objB) {
            if (objectIs(objA, objB)) {
              return true;
            }
            if (typeof objA !== "object" || objA === null || typeof objB !== "object" || objB === null) {
              return false;
            }
            var keysA = Object.keys(objA);
            var keysB = Object.keys(objB);
            if (keysA.length !== keysB.length) {
              return false;
            }
            for (var i3 = 0; i3 < keysA.length; i3++) {
              var currentKey = keysA[i3];
              if (!hasOwnProperty.call(objB, currentKey) || !objectIs(objA[currentKey], objB[currentKey])) {
                return false;
              }
            }
            return true;
          }
          function getLeafNode(node) {
            while (node && node.firstChild) {
              node = node.firstChild;
            }
            return node;
          }
          function getSiblingNode(node) {
            while (node) {
              if (node.nextSibling) {
                return node.nextSibling;
              }
              node = node.parentNode;
            }
          }
          function getNodeForCharacterOffset(root3, offset) {
            var node = getLeafNode(root3);
            var nodeStart = 0;
            var nodeEnd = 0;
            while (node) {
              if (node.nodeType === TEXT_NODE) {
                nodeEnd = nodeStart + node.textContent.length;
                if (nodeStart <= offset && nodeEnd >= offset) {
                  return {
                    node,
                    offset: offset - nodeStart
                  };
                }
                nodeStart = nodeEnd;
              }
              node = getLeafNode(getSiblingNode(node));
            }
          }
          function getOffsets(outerNode) {
            var ownerDocument = outerNode.ownerDocument;
            var win = ownerDocument && ownerDocument.defaultView || window;
            var selection = win.getSelection && win.getSelection();
            if (!selection || selection.rangeCount === 0) {
              return null;
            }
            var anchorNode = selection.anchorNode, anchorOffset = selection.anchorOffset, focusNode = selection.focusNode, focusOffset = selection.focusOffset;
            try {
              anchorNode.nodeType;
              focusNode.nodeType;
            } catch (e4) {
              return null;
            }
            return getModernOffsetsFromPoints(outerNode, anchorNode, anchorOffset, focusNode, focusOffset);
          }
          function getModernOffsetsFromPoints(outerNode, anchorNode, anchorOffset, focusNode, focusOffset) {
            var length = 0;
            var start = -1;
            var end = -1;
            var indexWithinAnchor = 0;
            var indexWithinFocus = 0;
            var node = outerNode;
            var parentNode = null;
            outer:
              while (true) {
                var next = null;
                while (true) {
                  if (node === anchorNode && (anchorOffset === 0 || node.nodeType === TEXT_NODE)) {
                    start = length + anchorOffset;
                  }
                  if (node === focusNode && (focusOffset === 0 || node.nodeType === TEXT_NODE)) {
                    end = length + focusOffset;
                  }
                  if (node.nodeType === TEXT_NODE) {
                    length += node.nodeValue.length;
                  }
                  if ((next = node.firstChild) === null) {
                    break;
                  }
                  parentNode = node;
                  node = next;
                }
                while (true) {
                  if (node === outerNode) {
                    break outer;
                  }
                  if (parentNode === anchorNode && ++indexWithinAnchor === anchorOffset) {
                    start = length;
                  }
                  if (parentNode === focusNode && ++indexWithinFocus === focusOffset) {
                    end = length;
                  }
                  if ((next = node.nextSibling) !== null) {
                    break;
                  }
                  node = parentNode;
                  parentNode = node.parentNode;
                }
                node = next;
              }
            if (start === -1 || end === -1) {
              return null;
            }
            return {
              start,
              end
            };
          }
          function setOffsets(node, offsets) {
            var doc = node.ownerDocument || document;
            var win = doc && doc.defaultView || window;
            if (!win.getSelection) {
              return;
            }
            var selection = win.getSelection();
            var length = node.textContent.length;
            var start = Math.min(offsets.start, length);
            var end = offsets.end === void 0 ? start : Math.min(offsets.end, length);
            if (!selection.extend && start > end) {
              var temp = end;
              end = start;
              start = temp;
            }
            var startMarker = getNodeForCharacterOffset(node, start);
            var endMarker = getNodeForCharacterOffset(node, end);
            if (startMarker && endMarker) {
              if (selection.rangeCount === 1 && selection.anchorNode === startMarker.node && selection.anchorOffset === startMarker.offset && selection.focusNode === endMarker.node && selection.focusOffset === endMarker.offset) {
                return;
              }
              var range = doc.createRange();
              range.setStart(startMarker.node, startMarker.offset);
              selection.removeAllRanges();
              if (start > end) {
                selection.addRange(range);
                selection.extend(endMarker.node, endMarker.offset);
              } else {
                range.setEnd(endMarker.node, endMarker.offset);
                selection.addRange(range);
              }
            }
          }
          function isTextNode(node) {
            return node && node.nodeType === TEXT_NODE;
          }
          function containsNode(outerNode, innerNode) {
            if (!outerNode || !innerNode) {
              return false;
            } else if (outerNode === innerNode) {
              return true;
            } else if (isTextNode(outerNode)) {
              return false;
            } else if (isTextNode(innerNode)) {
              return containsNode(outerNode, innerNode.parentNode);
            } else if ("contains" in outerNode) {
              return outerNode.contains(innerNode);
            } else if (outerNode.compareDocumentPosition) {
              return !!(outerNode.compareDocumentPosition(innerNode) & 16);
            } else {
              return false;
            }
          }
          function isInDocument(node) {
            return node && node.ownerDocument && containsNode(node.ownerDocument.documentElement, node);
          }
          function isSameOriginFrame(iframe) {
            try {
              return typeof iframe.contentWindow.location.href === "string";
            } catch (err) {
              return false;
            }
          }
          function getActiveElementDeep() {
            var win = window;
            var element = getActiveElement();
            while (element instanceof win.HTMLIFrameElement) {
              if (isSameOriginFrame(element)) {
                win = element.contentWindow;
              } else {
                return element;
              }
              element = getActiveElement(win.document);
            }
            return element;
          }
          function hasSelectionCapabilities(elem) {
            var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase();
            return nodeName && (nodeName === "input" && (elem.type === "text" || elem.type === "search" || elem.type === "tel" || elem.type === "url" || elem.type === "password") || nodeName === "textarea" || elem.contentEditable === "true");
          }
          function getSelectionInformation() {
            var focusedElem = getActiveElementDeep();
            return {
              focusedElem,
              selectionRange: hasSelectionCapabilities(focusedElem) ? getSelection(focusedElem) : null
            };
          }
          function restoreSelection(priorSelectionInformation) {
            var curFocusedElem = getActiveElementDeep();
            var priorFocusedElem = priorSelectionInformation.focusedElem;
            var priorSelectionRange = priorSelectionInformation.selectionRange;
            if (curFocusedElem !== priorFocusedElem && isInDocument(priorFocusedElem)) {
              if (priorSelectionRange !== null && hasSelectionCapabilities(priorFocusedElem)) {
                setSelection(priorFocusedElem, priorSelectionRange);
              }
              var ancestors = [];
              var ancestor = priorFocusedElem;
              while (ancestor = ancestor.parentNode) {
                if (ancestor.nodeType === ELEMENT_NODE) {
                  ancestors.push({
                    element: ancestor,
                    left: ancestor.scrollLeft,
                    top: ancestor.scrollTop
                  });
                }
              }
              if (typeof priorFocusedElem.focus === "function") {
                priorFocusedElem.focus();
              }
              for (var i3 = 0; i3 < ancestors.length; i3++) {
                var info = ancestors[i3];
                info.element.scrollLeft = info.left;
                info.element.scrollTop = info.top;
              }
            }
          }
          function getSelection(input) {
            var selection;
            if ("selectionStart" in input) {
              selection = {
                start: input.selectionStart,
                end: input.selectionEnd
              };
            } else {
              selection = getOffsets(input);
            }
            return selection || {
              start: 0,
              end: 0
            };
          }
          function setSelection(input, offsets) {
            var start = offsets.start;
            var end = offsets.end;
            if (end === void 0) {
              end = start;
            }
            if ("selectionStart" in input) {
              input.selectionStart = start;
              input.selectionEnd = Math.min(end, input.value.length);
            } else {
              setOffsets(input, offsets);
            }
          }
          var skipSelectionChangeEvent = canUseDOM && "documentMode" in document && document.documentMode <= 11;
          function registerEvents$3() {
            registerTwoPhaseEvent("onSelect", ["focusout", "contextmenu", "dragend", "focusin", "keydown", "keyup", "mousedown", "mouseup", "selectionchange"]);
          }
          var activeElement$1 = null;
          var activeElementInst$1 = null;
          var lastSelection = null;
          var mouseDown = false;
          function getSelection$1(node) {
            if ("selectionStart" in node && hasSelectionCapabilities(node)) {
              return {
                start: node.selectionStart,
                end: node.selectionEnd
              };
            } else {
              var win = node.ownerDocument && node.ownerDocument.defaultView || window;
              var selection = win.getSelection();
              return {
                anchorNode: selection.anchorNode,
                anchorOffset: selection.anchorOffset,
                focusNode: selection.focusNode,
                focusOffset: selection.focusOffset
              };
            }
          }
          function getEventTargetDocument(eventTarget) {
            return eventTarget.window === eventTarget ? eventTarget.document : eventTarget.nodeType === DOCUMENT_NODE ? eventTarget : eventTarget.ownerDocument;
          }
          function constructSelectEvent(dispatchQueue, nativeEvent, nativeEventTarget) {
            var doc = getEventTargetDocument(nativeEventTarget);
            if (mouseDown || activeElement$1 == null || activeElement$1 !== getActiveElement(doc)) {
              return;
            }
            var currentSelection = getSelection$1(activeElement$1);
            if (!lastSelection || !shallowEqual(lastSelection, currentSelection)) {
              lastSelection = currentSelection;
              var listeners = accumulateTwoPhaseListeners(activeElementInst$1, "onSelect");
              if (listeners.length > 0) {
                var event = new SyntheticEvent("onSelect", "select", null, nativeEvent, nativeEventTarget);
                dispatchQueue.push({
                  event,
                  listeners
                });
                event.target = activeElement$1;
              }
            }
          }
          function extractEvents$3(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
            var targetNode = targetInst ? getNodeFromInstance(targetInst) : window;
            switch (domEventName) {
              case "focusin":
                if (isTextInputElement(targetNode) || targetNode.contentEditable === "true") {
                  activeElement$1 = targetNode;
                  activeElementInst$1 = targetInst;
                  lastSelection = null;
                }
                break;
              case "focusout":
                activeElement$1 = null;
                activeElementInst$1 = null;
                lastSelection = null;
                break;
              case "mousedown":
                mouseDown = true;
                break;
              case "contextmenu":
              case "mouseup":
              case "dragend":
                mouseDown = false;
                constructSelectEvent(dispatchQueue, nativeEvent, nativeEventTarget);
                break;
              case "selectionchange":
                if (skipSelectionChangeEvent) {
                  break;
                }
              case "keydown":
              case "keyup":
                constructSelectEvent(dispatchQueue, nativeEvent, nativeEventTarget);
            }
          }
          function makePrefixMap(styleProp, eventName) {
            var prefixes2 = {};
            prefixes2[styleProp.toLowerCase()] = eventName.toLowerCase();
            prefixes2["Webkit" + styleProp] = "webkit" + eventName;
            prefixes2["Moz" + styleProp] = "moz" + eventName;
            return prefixes2;
          }
          var vendorPrefixes = {
            animationend: makePrefixMap("Animation", "AnimationEnd"),
            animationiteration: makePrefixMap("Animation", "AnimationIteration"),
            animationstart: makePrefixMap("Animation", "AnimationStart"),
            transitionend: makePrefixMap("Transition", "TransitionEnd")
          };
          var prefixedEventNames = {};
          var style = {};
          if (canUseDOM) {
            style = document.createElement("div").style;
            if (!("AnimationEvent" in window)) {
              delete vendorPrefixes.animationend.animation;
              delete vendorPrefixes.animationiteration.animation;
              delete vendorPrefixes.animationstart.animation;
            }
            if (!("TransitionEvent" in window)) {
              delete vendorPrefixes.transitionend.transition;
            }
          }
          function getVendorPrefixedEventName(eventName) {
            if (prefixedEventNames[eventName]) {
              return prefixedEventNames[eventName];
            } else if (!vendorPrefixes[eventName]) {
              return eventName;
            }
            var prefixMap = vendorPrefixes[eventName];
            for (var styleProp in prefixMap) {
              if (prefixMap.hasOwnProperty(styleProp) && styleProp in style) {
                return prefixedEventNames[eventName] = prefixMap[styleProp];
              }
            }
            return eventName;
          }
          var ANIMATION_END = getVendorPrefixedEventName("animationend");
          var ANIMATION_ITERATION = getVendorPrefixedEventName("animationiteration");
          var ANIMATION_START = getVendorPrefixedEventName("animationstart");
          var TRANSITION_END = getVendorPrefixedEventName("transitionend");
          var topLevelEventsToReactNames = /* @__PURE__ */ new Map();
          var simpleEventPluginEvents = ["abort", "auxClick", "cancel", "canPlay", "canPlayThrough", "click", "close", "contextMenu", "copy", "cut", "drag", "dragEnd", "dragEnter", "dragExit", "dragLeave", "dragOver", "dragStart", "drop", "durationChange", "emptied", "encrypted", "ended", "error", "gotPointerCapture", "input", "invalid", "keyDown", "keyPress", "keyUp", "load", "loadedData", "loadedMetadata", "loadStart", "lostPointerCapture", "mouseDown", "mouseMove", "mouseOut", "mouseOver", "mouseUp", "paste", "pause", "play", "playing", "pointerCancel", "pointerDown", "pointerMove", "pointerOut", "pointerOver", "pointerUp", "progress", "rateChange", "reset", "resize", "seeked", "seeking", "stalled", "submit", "suspend", "timeUpdate", "touchCancel", "touchEnd", "touchStart", "volumeChange", "scroll", "toggle", "touchMove", "waiting", "wheel"];
          function registerSimpleEvent(domEventName, reactName) {
            topLevelEventsToReactNames.set(domEventName, reactName);
            registerTwoPhaseEvent(reactName, [domEventName]);
          }
          function registerSimpleEvents() {
            for (var i3 = 0; i3 < simpleEventPluginEvents.length; i3++) {
              var eventName = simpleEventPluginEvents[i3];
              var domEventName = eventName.toLowerCase();
              var capitalizedEvent = eventName[0].toUpperCase() + eventName.slice(1);
              registerSimpleEvent(domEventName, "on" + capitalizedEvent);
            }
            registerSimpleEvent(ANIMATION_END, "onAnimationEnd");
            registerSimpleEvent(ANIMATION_ITERATION, "onAnimationIteration");
            registerSimpleEvent(ANIMATION_START, "onAnimationStart");
            registerSimpleEvent("dblclick", "onDoubleClick");
            registerSimpleEvent("focusin", "onFocus");
            registerSimpleEvent("focusout", "onBlur");
            registerSimpleEvent(TRANSITION_END, "onTransitionEnd");
          }
          function extractEvents$4(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
            var reactName = topLevelEventsToReactNames.get(domEventName);
            if (reactName === void 0) {
              return;
            }
            var SyntheticEventCtor = SyntheticEvent;
            var reactEventType = domEventName;
            switch (domEventName) {
              case "keypress":
                if (getEventCharCode(nativeEvent) === 0) {
                  return;
                }
              case "keydown":
              case "keyup":
                SyntheticEventCtor = SyntheticKeyboardEvent;
                break;
              case "focusin":
                reactEventType = "focus";
                SyntheticEventCtor = SyntheticFocusEvent;
                break;
              case "focusout":
                reactEventType = "blur";
                SyntheticEventCtor = SyntheticFocusEvent;
                break;
              case "beforeblur":
              case "afterblur":
                SyntheticEventCtor = SyntheticFocusEvent;
                break;
              case "click":
                if (nativeEvent.button === 2) {
                  return;
                }
              case "auxclick":
              case "dblclick":
              case "mousedown":
              case "mousemove":
              case "mouseup":
              case "mouseout":
              case "mouseover":
              case "contextmenu":
                SyntheticEventCtor = SyntheticMouseEvent;
                break;
              case "drag":
              case "dragend":
              case "dragenter":
              case "dragexit":
              case "dragleave":
              case "dragover":
              case "dragstart":
              case "drop":
                SyntheticEventCtor = SyntheticDragEvent;
                break;
              case "touchcancel":
              case "touchend":
              case "touchmove":
              case "touchstart":
                SyntheticEventCtor = SyntheticTouchEvent;
                break;
              case ANIMATION_END:
              case ANIMATION_ITERATION:
              case ANIMATION_START:
                SyntheticEventCtor = SyntheticAnimationEvent;
                break;
              case TRANSITION_END:
                SyntheticEventCtor = SyntheticTransitionEvent;
                break;
              case "scroll":
                SyntheticEventCtor = SyntheticUIEvent;
                break;
              case "wheel":
                SyntheticEventCtor = SyntheticWheelEvent;
                break;
              case "copy":
              case "cut":
              case "paste":
                SyntheticEventCtor = SyntheticClipboardEvent;
                break;
              case "gotpointercapture":
              case "lostpointercapture":
              case "pointercancel":
              case "pointerdown":
              case "pointermove":
              case "pointerout":
              case "pointerover":
              case "pointerup":
                SyntheticEventCtor = SyntheticPointerEvent;
                break;
            }
            var inCapturePhase = (eventSystemFlags & IS_CAPTURE_PHASE) !== 0;
            {
              var accumulateTargetOnly = !inCapturePhase && domEventName === "scroll";
              var _listeners = accumulateSinglePhaseListeners(targetInst, reactName, nativeEvent.type, inCapturePhase, accumulateTargetOnly);
              if (_listeners.length > 0) {
                var _event = new SyntheticEventCtor(reactName, reactEventType, null, nativeEvent, nativeEventTarget);
                dispatchQueue.push({
                  event: _event,
                  listeners: _listeners
                });
              }
            }
          }
          registerSimpleEvents();
          registerEvents$2();
          registerEvents$1();
          registerEvents$3();
          registerEvents();
          function extractEvents$5(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
            extractEvents$4(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags);
            var shouldProcessPolyfillPlugins = (eventSystemFlags & SHOULD_NOT_PROCESS_POLYFILL_EVENT_PLUGINS) === 0;
            if (shouldProcessPolyfillPlugins) {
              extractEvents$2(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
              extractEvents$1(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
              extractEvents$3(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
              extractEvents(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
            }
          }
          var mediaEventTypes = ["abort", "canplay", "canplaythrough", "durationchange", "emptied", "encrypted", "ended", "error", "loadeddata", "loadedmetadata", "loadstart", "pause", "play", "playing", "progress", "ratechange", "resize", "seeked", "seeking", "stalled", "suspend", "timeupdate", "volumechange", "waiting"];
          var nonDelegatedEvents = new Set(["cancel", "close", "invalid", "load", "scroll", "toggle"].concat(mediaEventTypes));
          function executeDispatch(event, listener, currentTarget) {
            var type = event.type || "unknown-event";
            event.currentTarget = currentTarget;
            invokeGuardedCallbackAndCatchFirstError(type, listener, void 0, event);
            event.currentTarget = null;
          }
          function processDispatchQueueItemsInOrder(event, dispatchListeners, inCapturePhase) {
            var previousInstance;
            if (inCapturePhase) {
              for (var i3 = dispatchListeners.length - 1; i3 >= 0; i3--) {
                var _dispatchListeners$i = dispatchListeners[i3], instance = _dispatchListeners$i.instance, currentTarget = _dispatchListeners$i.currentTarget, listener = _dispatchListeners$i.listener;
                if (instance !== previousInstance && event.isPropagationStopped()) {
                  return;
                }
                executeDispatch(event, listener, currentTarget);
                previousInstance = instance;
              }
            } else {
              for (var _i = 0; _i < dispatchListeners.length; _i++) {
                var _dispatchListeners$_i = dispatchListeners[_i], _instance = _dispatchListeners$_i.instance, _currentTarget = _dispatchListeners$_i.currentTarget, _listener = _dispatchListeners$_i.listener;
                if (_instance !== previousInstance && event.isPropagationStopped()) {
                  return;
                }
                executeDispatch(event, _listener, _currentTarget);
                previousInstance = _instance;
              }
            }
          }
          function processDispatchQueue(dispatchQueue, eventSystemFlags) {
            var inCapturePhase = (eventSystemFlags & IS_CAPTURE_PHASE) !== 0;
            for (var i3 = 0; i3 < dispatchQueue.length; i3++) {
              var _dispatchQueue$i = dispatchQueue[i3], event = _dispatchQueue$i.event, listeners = _dispatchQueue$i.listeners;
              processDispatchQueueItemsInOrder(event, listeners, inCapturePhase);
            }
            rethrowCaughtError();
          }
          function dispatchEventsForPlugins(domEventName, eventSystemFlags, nativeEvent, targetInst, targetContainer) {
            var nativeEventTarget = getEventTarget(nativeEvent);
            var dispatchQueue = [];
            extractEvents$5(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags);
            processDispatchQueue(dispatchQueue, eventSystemFlags);
          }
          function listenToNonDelegatedEvent(domEventName, targetElement) {
            {
              if (!nonDelegatedEvents.has(domEventName)) {
                error('Did not expect a listenToNonDelegatedEvent() call for "%s". This is a bug in React. Please file an issue.', domEventName);
              }
            }
            var isCapturePhaseListener = false;
            var listenerSet = getEventListenerSet(targetElement);
            var listenerSetKey = getListenerSetKey(domEventName, isCapturePhaseListener);
            if (!listenerSet.has(listenerSetKey)) {
              addTrappedEventListener(targetElement, domEventName, IS_NON_DELEGATED, isCapturePhaseListener);
              listenerSet.add(listenerSetKey);
            }
          }
          function listenToNativeEvent(domEventName, isCapturePhaseListener, target) {
            {
              if (nonDelegatedEvents.has(domEventName) && !isCapturePhaseListener) {
                error('Did not expect a listenToNativeEvent() call for "%s" in the bubble phase. This is a bug in React. Please file an issue.', domEventName);
              }
            }
            var eventSystemFlags = 0;
            if (isCapturePhaseListener) {
              eventSystemFlags |= IS_CAPTURE_PHASE;
            }
            addTrappedEventListener(target, domEventName, eventSystemFlags, isCapturePhaseListener);
          }
          var listeningMarker = "_reactListening" + Math.random().toString(36).slice(2);
          function listenToAllSupportedEvents(rootContainerElement) {
            if (!rootContainerElement[listeningMarker]) {
              rootContainerElement[listeningMarker] = true;
              allNativeEvents.forEach(function(domEventName) {
                if (domEventName !== "selectionchange") {
                  if (!nonDelegatedEvents.has(domEventName)) {
                    listenToNativeEvent(domEventName, false, rootContainerElement);
                  }
                  listenToNativeEvent(domEventName, true, rootContainerElement);
                }
              });
              var ownerDocument = rootContainerElement.nodeType === DOCUMENT_NODE ? rootContainerElement : rootContainerElement.ownerDocument;
              if (ownerDocument !== null) {
                if (!ownerDocument[listeningMarker]) {
                  ownerDocument[listeningMarker] = true;
                  listenToNativeEvent("selectionchange", false, ownerDocument);
                }
              }
            }
          }
          function addTrappedEventListener(targetContainer, domEventName, eventSystemFlags, isCapturePhaseListener, isDeferredListenerForLegacyFBSupport) {
            var listener = createEventListenerWrapperWithPriority(targetContainer, domEventName, eventSystemFlags);
            var isPassiveListener = void 0;
            if (passiveBrowserEventsSupported) {
              if (domEventName === "touchstart" || domEventName === "touchmove" || domEventName === "wheel") {
                isPassiveListener = true;
              }
            }
            targetContainer = targetContainer;
            var unsubscribeListener;
            if (isCapturePhaseListener) {
              if (isPassiveListener !== void 0) {
                unsubscribeListener = addEventCaptureListenerWithPassiveFlag(targetContainer, domEventName, listener, isPassiveListener);
              } else {
                unsubscribeListener = addEventCaptureListener(targetContainer, domEventName, listener);
              }
            } else {
              if (isPassiveListener !== void 0) {
                unsubscribeListener = addEventBubbleListenerWithPassiveFlag(targetContainer, domEventName, listener, isPassiveListener);
              } else {
                unsubscribeListener = addEventBubbleListener(targetContainer, domEventName, listener);
              }
            }
          }
          function isMatchingRootContainer(grandContainer, targetContainer) {
            return grandContainer === targetContainer || grandContainer.nodeType === COMMENT_NODE && grandContainer.parentNode === targetContainer;
          }
          function dispatchEventForPluginEventSystem(domEventName, eventSystemFlags, nativeEvent, targetInst, targetContainer) {
            var ancestorInst = targetInst;
            if ((eventSystemFlags & IS_EVENT_HANDLE_NON_MANAGED_NODE) === 0 && (eventSystemFlags & IS_NON_DELEGATED) === 0) {
              var targetContainerNode = targetContainer;
              if (targetInst !== null) {
                var node = targetInst;
                mainLoop:
                  while (true) {
                    if (node === null) {
                      return;
                    }
                    var nodeTag = node.tag;
                    if (nodeTag === HostRoot || nodeTag === HostPortal) {
                      var container2 = node.stateNode.containerInfo;
                      if (isMatchingRootContainer(container2, targetContainerNode)) {
                        break;
                      }
                      if (nodeTag === HostPortal) {
                        var grandNode = node.return;
                        while (grandNode !== null) {
                          var grandTag = grandNode.tag;
                          if (grandTag === HostRoot || grandTag === HostPortal) {
                            var grandContainer = grandNode.stateNode.containerInfo;
                            if (isMatchingRootContainer(grandContainer, targetContainerNode)) {
                              return;
                            }
                          }
                          grandNode = grandNode.return;
                        }
                      }
                      while (container2 !== null) {
                        var parentNode = getClosestInstanceFromNode(container2);
                        if (parentNode === null) {
                          return;
                        }
                        var parentTag = parentNode.tag;
                        if (parentTag === HostComponent || parentTag === HostText) {
                          node = ancestorInst = parentNode;
                          continue mainLoop;
                        }
                        container2 = container2.parentNode;
                      }
                    }
                    node = node.return;
                  }
              }
            }
            batchedUpdates(function() {
              return dispatchEventsForPlugins(domEventName, eventSystemFlags, nativeEvent, ancestorInst);
            });
          }
          function createDispatchListener(instance, listener, currentTarget) {
            return {
              instance,
              listener,
              currentTarget
            };
          }
          function accumulateSinglePhaseListeners(targetFiber, reactName, nativeEventType, inCapturePhase, accumulateTargetOnly, nativeEvent) {
            var captureName = reactName !== null ? reactName + "Capture" : null;
            var reactEventName = inCapturePhase ? captureName : reactName;
            var listeners = [];
            var instance = targetFiber;
            var lastHostComponent = null;
            while (instance !== null) {
              var _instance2 = instance, stateNode = _instance2.stateNode, tag = _instance2.tag;
              if (tag === HostComponent && stateNode !== null) {
                lastHostComponent = stateNode;
                if (reactEventName !== null) {
                  var listener = getListener(instance, reactEventName);
                  if (listener != null) {
                    listeners.push(createDispatchListener(instance, listener, lastHostComponent));
                  }
                }
              }
              if (accumulateTargetOnly) {
                break;
              }
              instance = instance.return;
            }
            return listeners;
          }
          function accumulateTwoPhaseListeners(targetFiber, reactName) {
            var captureName = reactName + "Capture";
            var listeners = [];
            var instance = targetFiber;
            while (instance !== null) {
              var _instance3 = instance, stateNode = _instance3.stateNode, tag = _instance3.tag;
              if (tag === HostComponent && stateNode !== null) {
                var currentTarget = stateNode;
                var captureListener = getListener(instance, captureName);
                if (captureListener != null) {
                  listeners.unshift(createDispatchListener(instance, captureListener, currentTarget));
                }
                var bubbleListener = getListener(instance, reactName);
                if (bubbleListener != null) {
                  listeners.push(createDispatchListener(instance, bubbleListener, currentTarget));
                }
              }
              instance = instance.return;
            }
            return listeners;
          }
          function getParent(inst) {
            if (inst === null) {
              return null;
            }
            do {
              inst = inst.return;
            } while (inst && inst.tag !== HostComponent);
            if (inst) {
              return inst;
            }
            return null;
          }
          function getLowestCommonAncestor(instA, instB) {
            var nodeA = instA;
            var nodeB = instB;
            var depthA = 0;
            for (var tempA = nodeA; tempA; tempA = getParent(tempA)) {
              depthA++;
            }
            var depthB = 0;
            for (var tempB = nodeB; tempB; tempB = getParent(tempB)) {
              depthB++;
            }
            while (depthA - depthB > 0) {
              nodeA = getParent(nodeA);
              depthA--;
            }
            while (depthB - depthA > 0) {
              nodeB = getParent(nodeB);
              depthB--;
            }
            var depth = depthA;
            while (depth--) {
              if (nodeA === nodeB || nodeB !== null && nodeA === nodeB.alternate) {
                return nodeA;
              }
              nodeA = getParent(nodeA);
              nodeB = getParent(nodeB);
            }
            return null;
          }
          function accumulateEnterLeaveListenersForEvent(dispatchQueue, event, target, common, inCapturePhase) {
            var registrationName = event._reactName;
            var listeners = [];
            var instance = target;
            while (instance !== null) {
              if (instance === common) {
                break;
              }
              var _instance4 = instance, alternate = _instance4.alternate, stateNode = _instance4.stateNode, tag = _instance4.tag;
              if (alternate !== null && alternate === common) {
                break;
              }
              if (tag === HostComponent && stateNode !== null) {
                var currentTarget = stateNode;
                if (inCapturePhase) {
                  var captureListener = getListener(instance, registrationName);
                  if (captureListener != null) {
                    listeners.unshift(createDispatchListener(instance, captureListener, currentTarget));
                  }
                } else if (!inCapturePhase) {
                  var bubbleListener = getListener(instance, registrationName);
                  if (bubbleListener != null) {
                    listeners.push(createDispatchListener(instance, bubbleListener, currentTarget));
                  }
                }
              }
              instance = instance.return;
            }
            if (listeners.length !== 0) {
              dispatchQueue.push({
                event,
                listeners
              });
            }
          }
          function accumulateEnterLeaveTwoPhaseListeners(dispatchQueue, leaveEvent, enterEvent, from, to) {
            var common = from && to ? getLowestCommonAncestor(from, to) : null;
            if (from !== null) {
              accumulateEnterLeaveListenersForEvent(dispatchQueue, leaveEvent, from, common, false);
            }
            if (to !== null && enterEvent !== null) {
              accumulateEnterLeaveListenersForEvent(dispatchQueue, enterEvent, to, common, true);
            }
          }
          function getListenerSetKey(domEventName, capture) {
            return domEventName + "__" + (capture ? "capture" : "bubble");
          }
          var didWarnInvalidHydration = false;
          var DANGEROUSLY_SET_INNER_HTML = "dangerouslySetInnerHTML";
          var SUPPRESS_CONTENT_EDITABLE_WARNING = "suppressContentEditableWarning";
          var SUPPRESS_HYDRATION_WARNING = "suppressHydrationWarning";
          var AUTOFOCUS = "autoFocus";
          var CHILDREN = "children";
          var STYLE = "style";
          var HTML$1 = "__html";
          var warnedUnknownTags;
          var suppressHydrationWarning;
          var validatePropertiesInDevelopment;
          var warnForPropDifference;
          var warnForExtraAttributes;
          var warnForInvalidEventListener;
          var canDiffStyleForHydrationWarning;
          var normalizeHTML;
          {
            warnedUnknownTags = {
              dialog: true,
              webview: true
            };
            validatePropertiesInDevelopment = function(type, props) {
              validateProperties(type, props);
              validateProperties$1(type, props);
              validateProperties$2(type, props, {
                registrationNameDependencies,
                possibleRegistrationNames
              });
            };
            canDiffStyleForHydrationWarning = canUseDOM && !document.documentMode;
            warnForPropDifference = function(propName, serverValue, clientValue) {
              if (didWarnInvalidHydration) {
                return;
              }
              var normalizedClientValue = normalizeMarkupForTextOrAttribute(clientValue);
              var normalizedServerValue = normalizeMarkupForTextOrAttribute(serverValue);
              if (normalizedServerValue === normalizedClientValue) {
                return;
              }
              didWarnInvalidHydration = true;
              error("Prop `%s` did not match. Server: %s Client: %s", propName, JSON.stringify(normalizedServerValue), JSON.stringify(normalizedClientValue));
            };
            warnForExtraAttributes = function(attributeNames) {
              if (didWarnInvalidHydration) {
                return;
              }
              didWarnInvalidHydration = true;
              var names = [];
              attributeNames.forEach(function(name) {
                names.push(name);
              });
              error("Extra attributes from the server: %s", names);
            };
            warnForInvalidEventListener = function(registrationName, listener) {
              if (listener === false) {
                error("Expected `%s` listener to be a function, instead got `false`.\n\nIf you used to conditionally omit it with %s={condition && value}, pass %s={condition ? value : undefined} instead.", registrationName, registrationName, registrationName);
              } else {
                error("Expected `%s` listener to be a function, instead got a value of `%s` type.", registrationName, typeof listener);
              }
            };
            normalizeHTML = function(parent, html) {
              var testElement = parent.namespaceURI === HTML_NAMESPACE ? parent.ownerDocument.createElement(parent.tagName) : parent.ownerDocument.createElementNS(parent.namespaceURI, parent.tagName);
              testElement.innerHTML = html;
              return testElement.innerHTML;
            };
          }
          var NORMALIZE_NEWLINES_REGEX = /\r\n?/g;
          var NORMALIZE_NULL_AND_REPLACEMENT_REGEX = /\u0000|\uFFFD/g;
          function normalizeMarkupForTextOrAttribute(markup) {
            {
              checkHtmlStringCoercion(markup);
            }
            var markupString = typeof markup === "string" ? markup : "" + markup;
            return markupString.replace(NORMALIZE_NEWLINES_REGEX, "\n").replace(NORMALIZE_NULL_AND_REPLACEMENT_REGEX, "");
          }
          function checkForUnmatchedText(serverText, clientText, isConcurrentMode, shouldWarnDev) {
            var normalizedClientText = normalizeMarkupForTextOrAttribute(clientText);
            var normalizedServerText = normalizeMarkupForTextOrAttribute(serverText);
            if (normalizedServerText === normalizedClientText) {
              return;
            }
            if (shouldWarnDev) {
              {
                if (!didWarnInvalidHydration) {
                  didWarnInvalidHydration = true;
                  error('Text content did not match. Server: "%s" Client: "%s"', normalizedServerText, normalizedClientText);
                }
              }
            }
            if (isConcurrentMode && enableClientRenderFallbackOnTextMismatch) {
              throw new Error("Text content does not match server-rendered HTML.");
            }
          }
          function getOwnerDocumentFromRootContainer(rootContainerElement) {
            return rootContainerElement.nodeType === DOCUMENT_NODE ? rootContainerElement : rootContainerElement.ownerDocument;
          }
          function noop() {
          }
          function trapClickOnNonInteractiveElement(node) {
            node.onclick = noop;
          }
          function setInitialDOMProperties(tag, domElement, rootContainerElement, nextProps, isCustomComponentTag) {
            for (var propKey in nextProps) {
              if (!nextProps.hasOwnProperty(propKey)) {
                continue;
              }
              var nextProp = nextProps[propKey];
              if (propKey === STYLE) {
                {
                  if (nextProp) {
                    Object.freeze(nextProp);
                  }
                }
                setValueForStyles(domElement, nextProp);
              } else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
                var nextHtml = nextProp ? nextProp[HTML$1] : void 0;
                if (nextHtml != null) {
                  setInnerHTML(domElement, nextHtml);
                }
              } else if (propKey === CHILDREN) {
                if (typeof nextProp === "string") {
                  var canSetTextContent = tag !== "textarea" || nextProp !== "";
                  if (canSetTextContent) {
                    setTextContent(domElement, nextProp);
                  }
                } else if (typeof nextProp === "number") {
                  setTextContent(domElement, "" + nextProp);
                }
              } else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING)
                ;
              else if (propKey === AUTOFOCUS)
                ;
              else if (registrationNameDependencies.hasOwnProperty(propKey)) {
                if (nextProp != null) {
                  if (typeof nextProp !== "function") {
                    warnForInvalidEventListener(propKey, nextProp);
                  }
                  if (propKey === "onScroll") {
                    listenToNonDelegatedEvent("scroll", domElement);
                  }
                }
              } else if (nextProp != null) {
                setValueForProperty(domElement, propKey, nextProp, isCustomComponentTag);
              }
            }
          }
          function updateDOMProperties(domElement, updatePayload, wasCustomComponentTag, isCustomComponentTag) {
            for (var i3 = 0; i3 < updatePayload.length; i3 += 2) {
              var propKey = updatePayload[i3];
              var propValue = updatePayload[i3 + 1];
              if (propKey === STYLE) {
                setValueForStyles(domElement, propValue);
              } else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
                setInnerHTML(domElement, propValue);
              } else if (propKey === CHILDREN) {
                setTextContent(domElement, propValue);
              } else {
                setValueForProperty(domElement, propKey, propValue, isCustomComponentTag);
              }
            }
          }
          function createElement7(type, props, rootContainerElement, parentNamespace) {
            var isCustomComponentTag;
            var ownerDocument = getOwnerDocumentFromRootContainer(rootContainerElement);
            var domElement;
            var namespaceURI = parentNamespace;
            if (namespaceURI === HTML_NAMESPACE) {
              namespaceURI = getIntrinsicNamespace(type);
            }
            if (namespaceURI === HTML_NAMESPACE) {
              {
                isCustomComponentTag = isCustomComponent(type, props);
                if (!isCustomComponentTag && type !== type.toLowerCase()) {
                  error("<%s /> is using incorrect casing. Use PascalCase for React components, or lowercase for HTML elements.", type);
                }
              }
              if (type === "script") {
                var div = ownerDocument.createElement("div");
                div.innerHTML = "<script><\/script>";
                var firstChild = div.firstChild;
                domElement = div.removeChild(firstChild);
              } else if (typeof props.is === "string") {
                domElement = ownerDocument.createElement(type, {
                  is: props.is
                });
              } else {
                domElement = ownerDocument.createElement(type);
                if (type === "select") {
                  var node = domElement;
                  if (props.multiple) {
                    node.multiple = true;
                  } else if (props.size) {
                    node.size = props.size;
                  }
                }
              }
            } else {
              domElement = ownerDocument.createElementNS(namespaceURI, type);
            }
            {
              if (namespaceURI === HTML_NAMESPACE) {
                if (!isCustomComponentTag && Object.prototype.toString.call(domElement) === "[object HTMLUnknownElement]" && !hasOwnProperty.call(warnedUnknownTags, type)) {
                  warnedUnknownTags[type] = true;
                  error("The tag <%s> is unrecognized in this browser. If you meant to render a React component, start its name with an uppercase letter.", type);
                }
              }
            }
            return domElement;
          }
          function createTextNode(text, rootContainerElement) {
            return getOwnerDocumentFromRootContainer(rootContainerElement).createTextNode(text);
          }
          function setInitialProperties(domElement, tag, rawProps, rootContainerElement) {
            var isCustomComponentTag = isCustomComponent(tag, rawProps);
            {
              validatePropertiesInDevelopment(tag, rawProps);
            }
            var props;
            switch (tag) {
              case "dialog":
                listenToNonDelegatedEvent("cancel", domElement);
                listenToNonDelegatedEvent("close", domElement);
                props = rawProps;
                break;
              case "iframe":
              case "object":
              case "embed":
                listenToNonDelegatedEvent("load", domElement);
                props = rawProps;
                break;
              case "video":
              case "audio":
                for (var i3 = 0; i3 < mediaEventTypes.length; i3++) {
                  listenToNonDelegatedEvent(mediaEventTypes[i3], domElement);
                }
                props = rawProps;
                break;
              case "source":
                listenToNonDelegatedEvent("error", domElement);
                props = rawProps;
                break;
              case "img":
              case "image":
              case "link":
                listenToNonDelegatedEvent("error", domElement);
                listenToNonDelegatedEvent("load", domElement);
                props = rawProps;
                break;
              case "details":
                listenToNonDelegatedEvent("toggle", domElement);
                props = rawProps;
                break;
              case "input":
                initWrapperState(domElement, rawProps);
                props = getHostProps(domElement, rawProps);
                listenToNonDelegatedEvent("invalid", domElement);
                break;
              case "option":
                validateProps(domElement, rawProps);
                props = rawProps;
                break;
              case "select":
                initWrapperState$1(domElement, rawProps);
                props = getHostProps$1(domElement, rawProps);
                listenToNonDelegatedEvent("invalid", domElement);
                break;
              case "textarea":
                initWrapperState$2(domElement, rawProps);
                props = getHostProps$2(domElement, rawProps);
                listenToNonDelegatedEvent("invalid", domElement);
                break;
              default:
                props = rawProps;
            }
            assertValidProps(tag, props);
            setInitialDOMProperties(tag, domElement, rootContainerElement, props, isCustomComponentTag);
            switch (tag) {
              case "input":
                track(domElement);
                postMountWrapper(domElement, rawProps, false);
                break;
              case "textarea":
                track(domElement);
                postMountWrapper$3(domElement);
                break;
              case "option":
                postMountWrapper$1(domElement, rawProps);
                break;
              case "select":
                postMountWrapper$2(domElement, rawProps);
                break;
              default:
                if (typeof props.onClick === "function") {
                  trapClickOnNonInteractiveElement(domElement);
                }
                break;
            }
          }
          function diffProperties(domElement, tag, lastRawProps, nextRawProps, rootContainerElement) {
            {
              validatePropertiesInDevelopment(tag, nextRawProps);
            }
            var updatePayload = null;
            var lastProps;
            var nextProps;
            switch (tag) {
              case "input":
                lastProps = getHostProps(domElement, lastRawProps);
                nextProps = getHostProps(domElement, nextRawProps);
                updatePayload = [];
                break;
              case "select":
                lastProps = getHostProps$1(domElement, lastRawProps);
                nextProps = getHostProps$1(domElement, nextRawProps);
                updatePayload = [];
                break;
              case "textarea":
                lastProps = getHostProps$2(domElement, lastRawProps);
                nextProps = getHostProps$2(domElement, nextRawProps);
                updatePayload = [];
                break;
              default:
                lastProps = lastRawProps;
                nextProps = nextRawProps;
                if (typeof lastProps.onClick !== "function" && typeof nextProps.onClick === "function") {
                  trapClickOnNonInteractiveElement(domElement);
                }
                break;
            }
            assertValidProps(tag, nextProps);
            var propKey;
            var styleName;
            var styleUpdates = null;
            for (propKey in lastProps) {
              if (nextProps.hasOwnProperty(propKey) || !lastProps.hasOwnProperty(propKey) || lastProps[propKey] == null) {
                continue;
              }
              if (propKey === STYLE) {
                var lastStyle = lastProps[propKey];
                for (styleName in lastStyle) {
                  if (lastStyle.hasOwnProperty(styleName)) {
                    if (!styleUpdates) {
                      styleUpdates = {};
                    }
                    styleUpdates[styleName] = "";
                  }
                }
              } else if (propKey === DANGEROUSLY_SET_INNER_HTML || propKey === CHILDREN)
                ;
              else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING)
                ;
              else if (propKey === AUTOFOCUS)
                ;
              else if (registrationNameDependencies.hasOwnProperty(propKey)) {
                if (!updatePayload) {
                  updatePayload = [];
                }
              } else {
                (updatePayload = updatePayload || []).push(propKey, null);
              }
            }
            for (propKey in nextProps) {
              var nextProp = nextProps[propKey];
              var lastProp = lastProps != null ? lastProps[propKey] : void 0;
              if (!nextProps.hasOwnProperty(propKey) || nextProp === lastProp || nextProp == null && lastProp == null) {
                continue;
              }
              if (propKey === STYLE) {
                {
                  if (nextProp) {
                    Object.freeze(nextProp);
                  }
                }
                if (lastProp) {
                  for (styleName in lastProp) {
                    if (lastProp.hasOwnProperty(styleName) && (!nextProp || !nextProp.hasOwnProperty(styleName))) {
                      if (!styleUpdates) {
                        styleUpdates = {};
                      }
                      styleUpdates[styleName] = "";
                    }
                  }
                  for (styleName in nextProp) {
                    if (nextProp.hasOwnProperty(styleName) && lastProp[styleName] !== nextProp[styleName]) {
                      if (!styleUpdates) {
                        styleUpdates = {};
                      }
                      styleUpdates[styleName] = nextProp[styleName];
                    }
                  }
                } else {
                  if (!styleUpdates) {
                    if (!updatePayload) {
                      updatePayload = [];
                    }
                    updatePayload.push(propKey, styleUpdates);
                  }
                  styleUpdates = nextProp;
                }
              } else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
                var nextHtml = nextProp ? nextProp[HTML$1] : void 0;
                var lastHtml = lastProp ? lastProp[HTML$1] : void 0;
                if (nextHtml != null) {
                  if (lastHtml !== nextHtml) {
                    (updatePayload = updatePayload || []).push(propKey, nextHtml);
                  }
                }
              } else if (propKey === CHILDREN) {
                if (typeof nextProp === "string" || typeof nextProp === "number") {
                  (updatePayload = updatePayload || []).push(propKey, "" + nextProp);
                }
              } else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING)
                ;
              else if (registrationNameDependencies.hasOwnProperty(propKey)) {
                if (nextProp != null) {
                  if (typeof nextProp !== "function") {
                    warnForInvalidEventListener(propKey, nextProp);
                  }
                  if (propKey === "onScroll") {
                    listenToNonDelegatedEvent("scroll", domElement);
                  }
                }
                if (!updatePayload && lastProp !== nextProp) {
                  updatePayload = [];
                }
              } else {
                (updatePayload = updatePayload || []).push(propKey, nextProp);
              }
            }
            if (styleUpdates) {
              {
                validateShorthandPropertyCollisionInDev(styleUpdates, nextProps[STYLE]);
              }
              (updatePayload = updatePayload || []).push(STYLE, styleUpdates);
            }
            return updatePayload;
          }
          function updateProperties(domElement, updatePayload, tag, lastRawProps, nextRawProps) {
            if (tag === "input" && nextRawProps.type === "radio" && nextRawProps.name != null) {
              updateChecked(domElement, nextRawProps);
            }
            var wasCustomComponentTag = isCustomComponent(tag, lastRawProps);
            var isCustomComponentTag = isCustomComponent(tag, nextRawProps);
            updateDOMProperties(domElement, updatePayload, wasCustomComponentTag, isCustomComponentTag);
            switch (tag) {
              case "input":
                updateWrapper(domElement, nextRawProps);
                break;
              case "textarea":
                updateWrapper$1(domElement, nextRawProps);
                break;
              case "select":
                postUpdateWrapper(domElement, nextRawProps);
                break;
            }
          }
          function getPossibleStandardName(propName) {
            {
              var lowerCasedName = propName.toLowerCase();
              if (!possibleStandardNames.hasOwnProperty(lowerCasedName)) {
                return null;
              }
              return possibleStandardNames[lowerCasedName] || null;
            }
          }
          function diffHydratedProperties(domElement, tag, rawProps, parentNamespace, rootContainerElement, isConcurrentMode, shouldWarnDev) {
            var isCustomComponentTag;
            var extraAttributeNames;
            {
              suppressHydrationWarning = rawProps[SUPPRESS_HYDRATION_WARNING] === true;
              isCustomComponentTag = isCustomComponent(tag, rawProps);
              validatePropertiesInDevelopment(tag, rawProps);
            }
            switch (tag) {
              case "dialog":
                listenToNonDelegatedEvent("cancel", domElement);
                listenToNonDelegatedEvent("close", domElement);
                break;
              case "iframe":
              case "object":
              case "embed":
                listenToNonDelegatedEvent("load", domElement);
                break;
              case "video":
              case "audio":
                for (var i3 = 0; i3 < mediaEventTypes.length; i3++) {
                  listenToNonDelegatedEvent(mediaEventTypes[i3], domElement);
                }
                break;
              case "source":
                listenToNonDelegatedEvent("error", domElement);
                break;
              case "img":
              case "image":
              case "link":
                listenToNonDelegatedEvent("error", domElement);
                listenToNonDelegatedEvent("load", domElement);
                break;
              case "details":
                listenToNonDelegatedEvent("toggle", domElement);
                break;
              case "input":
                initWrapperState(domElement, rawProps);
                listenToNonDelegatedEvent("invalid", domElement);
                break;
              case "option":
                validateProps(domElement, rawProps);
                break;
              case "select":
                initWrapperState$1(domElement, rawProps);
                listenToNonDelegatedEvent("invalid", domElement);
                break;
              case "textarea":
                initWrapperState$2(domElement, rawProps);
                listenToNonDelegatedEvent("invalid", domElement);
                break;
            }
            assertValidProps(tag, rawProps);
            {
              extraAttributeNames = /* @__PURE__ */ new Set();
              var attributes = domElement.attributes;
              for (var _i = 0; _i < attributes.length; _i++) {
                var name = attributes[_i].name.toLowerCase();
                switch (name) {
                  case "value":
                    break;
                  case "checked":
                    break;
                  case "selected":
                    break;
                  default:
                    extraAttributeNames.add(attributes[_i].name);
                }
              }
            }
            var updatePayload = null;
            for (var propKey in rawProps) {
              if (!rawProps.hasOwnProperty(propKey)) {
                continue;
              }
              var nextProp = rawProps[propKey];
              if (propKey === CHILDREN) {
                if (typeof nextProp === "string") {
                  if (domElement.textContent !== nextProp) {
                    if (!suppressHydrationWarning) {
                      checkForUnmatchedText(domElement.textContent, nextProp, isConcurrentMode, shouldWarnDev);
                    }
                    updatePayload = [CHILDREN, nextProp];
                  }
                } else if (typeof nextProp === "number") {
                  if (domElement.textContent !== "" + nextProp) {
                    if (!suppressHydrationWarning) {
                      checkForUnmatchedText(domElement.textContent, nextProp, isConcurrentMode, shouldWarnDev);
                    }
                    updatePayload = [CHILDREN, "" + nextProp];
                  }
                }
              } else if (registrationNameDependencies.hasOwnProperty(propKey)) {
                if (nextProp != null) {
                  if (typeof nextProp !== "function") {
                    warnForInvalidEventListener(propKey, nextProp);
                  }
                  if (propKey === "onScroll") {
                    listenToNonDelegatedEvent("scroll", domElement);
                  }
                }
              } else if (shouldWarnDev && true && typeof isCustomComponentTag === "boolean") {
                var serverValue = void 0;
                var propertyInfo = isCustomComponentTag && enableCustomElementPropertySupport ? null : getPropertyInfo(propKey);
                if (suppressHydrationWarning)
                  ;
                else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING || propKey === "value" || propKey === "checked" || propKey === "selected")
                  ;
                else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
                  var serverHTML = domElement.innerHTML;
                  var nextHtml = nextProp ? nextProp[HTML$1] : void 0;
                  if (nextHtml != null) {
                    var expectedHTML = normalizeHTML(domElement, nextHtml);
                    if (expectedHTML !== serverHTML) {
                      warnForPropDifference(propKey, serverHTML, expectedHTML);
                    }
                  }
                } else if (propKey === STYLE) {
                  extraAttributeNames.delete(propKey);
                  if (canDiffStyleForHydrationWarning) {
                    var expectedStyle = createDangerousStringForStyles(nextProp);
                    serverValue = domElement.getAttribute("style");
                    if (expectedStyle !== serverValue) {
                      warnForPropDifference(propKey, serverValue, expectedStyle);
                    }
                  }
                } else if (isCustomComponentTag && !enableCustomElementPropertySupport) {
                  extraAttributeNames.delete(propKey.toLowerCase());
                  serverValue = getValueForAttribute(domElement, propKey, nextProp);
                  if (nextProp !== serverValue) {
                    warnForPropDifference(propKey, serverValue, nextProp);
                  }
                } else if (!shouldIgnoreAttribute(propKey, propertyInfo, isCustomComponentTag) && !shouldRemoveAttribute(propKey, nextProp, propertyInfo, isCustomComponentTag)) {
                  var isMismatchDueToBadCasing = false;
                  if (propertyInfo !== null) {
                    extraAttributeNames.delete(propertyInfo.attributeName);
                    serverValue = getValueForProperty(domElement, propKey, nextProp, propertyInfo);
                  } else {
                    var ownNamespace = parentNamespace;
                    if (ownNamespace === HTML_NAMESPACE) {
                      ownNamespace = getIntrinsicNamespace(tag);
                    }
                    if (ownNamespace === HTML_NAMESPACE) {
                      extraAttributeNames.delete(propKey.toLowerCase());
                    } else {
                      var standardName = getPossibleStandardName(propKey);
                      if (standardName !== null && standardName !== propKey) {
                        isMismatchDueToBadCasing = true;
                        extraAttributeNames.delete(standardName);
                      }
                      extraAttributeNames.delete(propKey);
                    }
                    serverValue = getValueForAttribute(domElement, propKey, nextProp);
                  }
                  var dontWarnCustomElement = enableCustomElementPropertySupport;
                  if (!dontWarnCustomElement && nextProp !== serverValue && !isMismatchDueToBadCasing) {
                    warnForPropDifference(propKey, serverValue, nextProp);
                  }
                }
              }
            }
            {
              if (shouldWarnDev) {
                if (extraAttributeNames.size > 0 && !suppressHydrationWarning) {
                  warnForExtraAttributes(extraAttributeNames);
                }
              }
            }
            switch (tag) {
              case "input":
                track(domElement);
                postMountWrapper(domElement, rawProps, true);
                break;
              case "textarea":
                track(domElement);
                postMountWrapper$3(domElement);
                break;
              case "select":
              case "option":
                break;
              default:
                if (typeof rawProps.onClick === "function") {
                  trapClickOnNonInteractiveElement(domElement);
                }
                break;
            }
            return updatePayload;
          }
          function diffHydratedText(textNode, text, isConcurrentMode) {
            var isDifferent = textNode.nodeValue !== text;
            return isDifferent;
          }
          function warnForDeletedHydratableElement(parentNode, child) {
            {
              if (didWarnInvalidHydration) {
                return;
              }
              didWarnInvalidHydration = true;
              error("Did not expect server HTML to contain a <%s> in <%s>.", child.nodeName.toLowerCase(), parentNode.nodeName.toLowerCase());
            }
          }
          function warnForDeletedHydratableText(parentNode, child) {
            {
              if (didWarnInvalidHydration) {
                return;
              }
              didWarnInvalidHydration = true;
              error('Did not expect server HTML to contain the text node "%s" in <%s>.', child.nodeValue, parentNode.nodeName.toLowerCase());
            }
          }
          function warnForInsertedHydratedElement(parentNode, tag, props) {
            {
              if (didWarnInvalidHydration) {
                return;
              }
              didWarnInvalidHydration = true;
              error("Expected server HTML to contain a matching <%s> in <%s>.", tag, parentNode.nodeName.toLowerCase());
            }
          }
          function warnForInsertedHydratedText(parentNode, text) {
            {
              if (text === "") {
                return;
              }
              if (didWarnInvalidHydration) {
                return;
              }
              didWarnInvalidHydration = true;
              error('Expected server HTML to contain a matching text node for "%s" in <%s>.', text, parentNode.nodeName.toLowerCase());
            }
          }
          function restoreControlledState$3(domElement, tag, props) {
            switch (tag) {
              case "input":
                restoreControlledState(domElement, props);
                return;
              case "textarea":
                restoreControlledState$2(domElement, props);
                return;
              case "select":
                restoreControlledState$1(domElement, props);
                return;
            }
          }
          var validateDOMNesting = function() {
          };
          var updatedAncestorInfo = function() {
          };
          {
            var specialTags = ["address", "applet", "area", "article", "aside", "base", "basefont", "bgsound", "blockquote", "body", "br", "button", "caption", "center", "col", "colgroup", "dd", "details", "dir", "div", "dl", "dt", "embed", "fieldset", "figcaption", "figure", "footer", "form", "frame", "frameset", "h1", "h2", "h3", "h4", "h5", "h6", "head", "header", "hgroup", "hr", "html", "iframe", "img", "input", "isindex", "li", "link", "listing", "main", "marquee", "menu", "menuitem", "meta", "nav", "noembed", "noframes", "noscript", "object", "ol", "p", "param", "plaintext", "pre", "script", "section", "select", "source", "style", "summary", "table", "tbody", "td", "template", "textarea", "tfoot", "th", "thead", "title", "tr", "track", "ul", "wbr", "xmp"];
            var inScopeTags = [
              "applet",
              "caption",
              "html",
              "table",
              "td",
              "th",
              "marquee",
              "object",
              "template",
              "foreignObject",
              "desc",
              "title"
            ];
            var buttonScopeTags = inScopeTags.concat(["button"]);
            var impliedEndTags = ["dd", "dt", "li", "option", "optgroup", "p", "rp", "rt"];
            var emptyAncestorInfo = {
              current: null,
              formTag: null,
              aTagInScope: null,
              buttonTagInScope: null,
              nobrTagInScope: null,
              pTagInButtonScope: null,
              listItemTagAutoclosing: null,
              dlItemTagAutoclosing: null
            };
            updatedAncestorInfo = function(oldInfo, tag) {
              var ancestorInfo = assign({}, oldInfo || emptyAncestorInfo);
              var info = {
                tag
              };
              if (inScopeTags.indexOf(tag) !== -1) {
                ancestorInfo.aTagInScope = null;
                ancestorInfo.buttonTagInScope = null;
                ancestorInfo.nobrTagInScope = null;
              }
              if (buttonScopeTags.indexOf(tag) !== -1) {
                ancestorInfo.pTagInButtonScope = null;
              }
              if (specialTags.indexOf(tag) !== -1 && tag !== "address" && tag !== "div" && tag !== "p") {
                ancestorInfo.listItemTagAutoclosing = null;
                ancestorInfo.dlItemTagAutoclosing = null;
              }
              ancestorInfo.current = info;
              if (tag === "form") {
                ancestorInfo.formTag = info;
              }
              if (tag === "a") {
                ancestorInfo.aTagInScope = info;
              }
              if (tag === "button") {
                ancestorInfo.buttonTagInScope = info;
              }
              if (tag === "nobr") {
                ancestorInfo.nobrTagInScope = info;
              }
              if (tag === "p") {
                ancestorInfo.pTagInButtonScope = info;
              }
              if (tag === "li") {
                ancestorInfo.listItemTagAutoclosing = info;
              }
              if (tag === "dd" || tag === "dt") {
                ancestorInfo.dlItemTagAutoclosing = info;
              }
              return ancestorInfo;
            };
            var isTagValidWithParent = function(tag, parentTag) {
              switch (parentTag) {
                case "select":
                  return tag === "option" || tag === "optgroup" || tag === "#text";
                case "optgroup":
                  return tag === "option" || tag === "#text";
                case "option":
                  return tag === "#text";
                case "tr":
                  return tag === "th" || tag === "td" || tag === "style" || tag === "script" || tag === "template";
                case "tbody":
                case "thead":
                case "tfoot":
                  return tag === "tr" || tag === "style" || tag === "script" || tag === "template";
                case "colgroup":
                  return tag === "col" || tag === "template";
                case "table":
                  return tag === "caption" || tag === "colgroup" || tag === "tbody" || tag === "tfoot" || tag === "thead" || tag === "style" || tag === "script" || tag === "template";
                case "head":
                  return tag === "base" || tag === "basefont" || tag === "bgsound" || tag === "link" || tag === "meta" || tag === "title" || tag === "noscript" || tag === "noframes" || tag === "style" || tag === "script" || tag === "template";
                case "html":
                  return tag === "head" || tag === "body" || tag === "frameset";
                case "frameset":
                  return tag === "frame";
                case "#document":
                  return tag === "html";
              }
              switch (tag) {
                case "h1":
                case "h2":
                case "h3":
                case "h4":
                case "h5":
                case "h6":
                  return parentTag !== "h1" && parentTag !== "h2" && parentTag !== "h3" && parentTag !== "h4" && parentTag !== "h5" && parentTag !== "h6";
                case "rp":
                case "rt":
                  return impliedEndTags.indexOf(parentTag) === -1;
                case "body":
                case "caption":
                case "col":
                case "colgroup":
                case "frameset":
                case "frame":
                case "head":
                case "html":
                case "tbody":
                case "td":
                case "tfoot":
                case "th":
                case "thead":
                case "tr":
                  return parentTag == null;
              }
              return true;
            };
            var findInvalidAncestorForTag = function(tag, ancestorInfo) {
              switch (tag) {
                case "address":
                case "article":
                case "aside":
                case "blockquote":
                case "center":
                case "details":
                case "dialog":
                case "dir":
                case "div":
                case "dl":
                case "fieldset":
                case "figcaption":
                case "figure":
                case "footer":
                case "header":
                case "hgroup":
                case "main":
                case "menu":
                case "nav":
                case "ol":
                case "p":
                case "section":
                case "summary":
                case "ul":
                case "pre":
                case "listing":
                case "table":
                case "hr":
                case "xmp":
                case "h1":
                case "h2":
                case "h3":
                case "h4":
                case "h5":
                case "h6":
                  return ancestorInfo.pTagInButtonScope;
                case "form":
                  return ancestorInfo.formTag || ancestorInfo.pTagInButtonScope;
                case "li":
                  return ancestorInfo.listItemTagAutoclosing;
                case "dd":
                case "dt":
                  return ancestorInfo.dlItemTagAutoclosing;
                case "button":
                  return ancestorInfo.buttonTagInScope;
                case "a":
                  return ancestorInfo.aTagInScope;
                case "nobr":
                  return ancestorInfo.nobrTagInScope;
              }
              return null;
            };
            var didWarn$1 = {};
            validateDOMNesting = function(childTag, childText, ancestorInfo) {
              ancestorInfo = ancestorInfo || emptyAncestorInfo;
              var parentInfo = ancestorInfo.current;
              var parentTag = parentInfo && parentInfo.tag;
              if (childText != null) {
                if (childTag != null) {
                  error("validateDOMNesting: when childText is passed, childTag should be null");
                }
                childTag = "#text";
              }
              var invalidParent = isTagValidWithParent(childTag, parentTag) ? null : parentInfo;
              var invalidAncestor = invalidParent ? null : findInvalidAncestorForTag(childTag, ancestorInfo);
              var invalidParentOrAncestor = invalidParent || invalidAncestor;
              if (!invalidParentOrAncestor) {
                return;
              }
              var ancestorTag = invalidParentOrAncestor.tag;
              var warnKey = !!invalidParent + "|" + childTag + "|" + ancestorTag;
              if (didWarn$1[warnKey]) {
                return;
              }
              didWarn$1[warnKey] = true;
              var tagDisplayName = childTag;
              var whitespaceInfo = "";
              if (childTag === "#text") {
                if (/\S/.test(childText)) {
                  tagDisplayName = "Text nodes";
                } else {
                  tagDisplayName = "Whitespace text nodes";
                  whitespaceInfo = " Make sure you don't have any extra whitespace between tags on each line of your source code.";
                }
              } else {
                tagDisplayName = "<" + childTag + ">";
              }
              if (invalidParent) {
                var info = "";
                if (ancestorTag === "table" && childTag === "tr") {
                  info += " Add a <tbody>, <thead> or <tfoot> to your code to match the DOM tree generated by the browser.";
                }
                error("validateDOMNesting(...): %s cannot appear as a child of <%s>.%s%s", tagDisplayName, ancestorTag, whitespaceInfo, info);
              } else {
                error("validateDOMNesting(...): %s cannot appear as a descendant of <%s>.", tagDisplayName, ancestorTag);
              }
            };
          }
          var SUPPRESS_HYDRATION_WARNING$1;
          {
            SUPPRESS_HYDRATION_WARNING$1 = "suppressHydrationWarning";
          }
          var SUSPENSE_START_DATA = "$";
          var SUSPENSE_END_DATA = "/$";
          var SUSPENSE_PENDING_START_DATA = "$?";
          var SUSPENSE_FALLBACK_START_DATA = "$!";
          var STYLE$1 = "style";
          var selectionInformation = null;
          function getRootHostContext(rootContainerInstance) {
            var type;
            var namespace;
            var nodeType = rootContainerInstance.nodeType;
            switch (nodeType) {
              case DOCUMENT_NODE:
              case DOCUMENT_FRAGMENT_NODE: {
                type = nodeType === DOCUMENT_NODE ? "#document" : "#fragment";
                var root3 = rootContainerInstance.documentElement;
                namespace = root3 ? root3.namespaceURI : getChildNamespace(null, "");
                break;
              }
              default: {
                var container2 = nodeType === COMMENT_NODE ? rootContainerInstance.parentNode : rootContainerInstance;
                var ownNamespace = container2.namespaceURI || null;
                type = container2.tagName;
                namespace = getChildNamespace(ownNamespace, type);
                break;
              }
            }
            {
              var validatedTag = type.toLowerCase();
              var ancestorInfo = updatedAncestorInfo(null, validatedTag);
              return {
                namespace,
                ancestorInfo
              };
            }
          }
          function getChildHostContext(parentHostContext, type, rootContainerInstance) {
            {
              var parentHostContextDev = parentHostContext;
              var namespace = getChildNamespace(parentHostContextDev.namespace, type);
              var ancestorInfo = updatedAncestorInfo(parentHostContextDev.ancestorInfo, type);
              return {
                namespace,
                ancestorInfo
              };
            }
          }
          function getPublicInstance(instance) {
            return instance;
          }
          function prepareForCommit(containerInfo) {
            selectionInformation = getSelectionInformation();
            var activeInstance = null;
            return activeInstance;
          }
          function resetAfterCommit(containerInfo) {
            restoreSelection(selectionInformation);
            selectionInformation = null;
          }
          function createInstance(type, props, rootContainerInstance, hostContext, internalInstanceHandle) {
            var parentNamespace;
            {
              var hostContextDev = hostContext;
              validateDOMNesting(type, null, hostContextDev.ancestorInfo);
              if (typeof props.children === "string" || typeof props.children === "number") {
                var string = "" + props.children;
                var ownAncestorInfo = updatedAncestorInfo(hostContextDev.ancestorInfo, type);
                validateDOMNesting(null, string, ownAncestorInfo);
              }
              parentNamespace = hostContextDev.namespace;
            }
            var domElement = createElement7(type, props, rootContainerInstance, parentNamespace);
            precacheFiberNode(internalInstanceHandle, domElement);
            updateFiberProps(domElement, props);
            return domElement;
          }
          function appendInitialChild(parentInstance, child) {
            parentInstance.appendChild(child);
          }
          function finalizeInitialChildren(domElement, type, props, rootContainerInstance, hostContext) {
            setInitialProperties(domElement, type, props, rootContainerInstance);
            switch (type) {
              case "button":
              case "input":
              case "select":
              case "textarea":
                return !!props.autoFocus;
              case "img":
                return true;
              default:
                return false;
            }
          }
          function prepareUpdate(domElement, type, oldProps, newProps, rootContainerInstance, hostContext) {
            {
              var hostContextDev = hostContext;
              if (typeof newProps.children !== typeof oldProps.children && (typeof newProps.children === "string" || typeof newProps.children === "number")) {
                var string = "" + newProps.children;
                var ownAncestorInfo = updatedAncestorInfo(hostContextDev.ancestorInfo, type);
                validateDOMNesting(null, string, ownAncestorInfo);
              }
            }
            return diffProperties(domElement, type, oldProps, newProps);
          }
          function shouldSetTextContent(type, props) {
            return type === "textarea" || type === "noscript" || typeof props.children === "string" || typeof props.children === "number" || typeof props.dangerouslySetInnerHTML === "object" && props.dangerouslySetInnerHTML !== null && props.dangerouslySetInnerHTML.__html != null;
          }
          function createTextInstance(text, rootContainerInstance, hostContext, internalInstanceHandle) {
            {
              var hostContextDev = hostContext;
              validateDOMNesting(null, text, hostContextDev.ancestorInfo);
            }
            var textNode = createTextNode(text, rootContainerInstance);
            precacheFiberNode(internalInstanceHandle, textNode);
            return textNode;
          }
          function getCurrentEventPriority() {
            var currentEvent = window.event;
            if (currentEvent === void 0) {
              return DefaultEventPriority;
            }
            return getEventPriority(currentEvent.type);
          }
          var scheduleTimeout = typeof setTimeout === "function" ? setTimeout : void 0;
          var cancelTimeout = typeof clearTimeout === "function" ? clearTimeout : void 0;
          var noTimeout = -1;
          var localPromise = typeof Promise === "function" ? Promise : void 0;
          var scheduleMicrotask = typeof queueMicrotask === "function" ? queueMicrotask : typeof localPromise !== "undefined" ? function(callback) {
            return localPromise.resolve(null).then(callback).catch(handleErrorInNextTick);
          } : scheduleTimeout;
          function handleErrorInNextTick(error2) {
            setTimeout(function() {
              throw error2;
            });
          }
          function commitMount(domElement, type, newProps, internalInstanceHandle) {
            switch (type) {
              case "button":
              case "input":
              case "select":
              case "textarea":
                if (newProps.autoFocus) {
                  domElement.focus();
                }
                return;
              case "img": {
                if (newProps.src) {
                  domElement.src = newProps.src;
                }
                return;
              }
            }
          }
          function commitUpdate(domElement, updatePayload, type, oldProps, newProps, internalInstanceHandle) {
            updateProperties(domElement, updatePayload, type, oldProps, newProps);
            updateFiberProps(domElement, newProps);
          }
          function resetTextContent(domElement) {
            setTextContent(domElement, "");
          }
          function commitTextUpdate(textInstance, oldText, newText) {
            textInstance.nodeValue = newText;
          }
          function appendChild(parentInstance, child) {
            parentInstance.appendChild(child);
          }
          function appendChildToContainer(container2, child) {
            var parentNode;
            if (container2.nodeType === COMMENT_NODE) {
              parentNode = container2.parentNode;
              parentNode.insertBefore(child, container2);
            } else {
              parentNode = container2;
              parentNode.appendChild(child);
            }
            var reactRootContainer = container2._reactRootContainer;
            if ((reactRootContainer === null || reactRootContainer === void 0) && parentNode.onclick === null) {
              trapClickOnNonInteractiveElement(parentNode);
            }
          }
          function insertBefore(parentInstance, child, beforeChild) {
            parentInstance.insertBefore(child, beforeChild);
          }
          function insertInContainerBefore(container2, child, beforeChild) {
            if (container2.nodeType === COMMENT_NODE) {
              container2.parentNode.insertBefore(child, beforeChild);
            } else {
              container2.insertBefore(child, beforeChild);
            }
          }
          function removeChild(parentInstance, child) {
            parentInstance.removeChild(child);
          }
          function removeChildFromContainer(container2, child) {
            if (container2.nodeType === COMMENT_NODE) {
              container2.parentNode.removeChild(child);
            } else {
              container2.removeChild(child);
            }
          }
          function clearSuspenseBoundary(parentInstance, suspenseInstance) {
            var node = suspenseInstance;
            var depth = 0;
            do {
              var nextNode = node.nextSibling;
              parentInstance.removeChild(node);
              if (nextNode && nextNode.nodeType === COMMENT_NODE) {
                var data = nextNode.data;
                if (data === SUSPENSE_END_DATA) {
                  if (depth === 0) {
                    parentInstance.removeChild(nextNode);
                    retryIfBlockedOn(suspenseInstance);
                    return;
                  } else {
                    depth--;
                  }
                } else if (data === SUSPENSE_START_DATA || data === SUSPENSE_PENDING_START_DATA || data === SUSPENSE_FALLBACK_START_DATA) {
                  depth++;
                }
              }
              node = nextNode;
            } while (node);
            retryIfBlockedOn(suspenseInstance);
          }
          function clearSuspenseBoundaryFromContainer(container2, suspenseInstance) {
            if (container2.nodeType === COMMENT_NODE) {
              clearSuspenseBoundary(container2.parentNode, suspenseInstance);
            } else if (container2.nodeType === ELEMENT_NODE) {
              clearSuspenseBoundary(container2, suspenseInstance);
            }
            retryIfBlockedOn(container2);
          }
          function hideInstance(instance) {
            instance = instance;
            var style2 = instance.style;
            if (typeof style2.setProperty === "function") {
              style2.setProperty("display", "none", "important");
            } else {
              style2.display = "none";
            }
          }
          function hideTextInstance(textInstance) {
            textInstance.nodeValue = "";
          }
          function unhideInstance(instance, props) {
            instance = instance;
            var styleProp = props[STYLE$1];
            var display = styleProp !== void 0 && styleProp !== null && styleProp.hasOwnProperty("display") ? styleProp.display : null;
            instance.style.display = dangerousStyleValue("display", display);
          }
          function unhideTextInstance(textInstance, text) {
            textInstance.nodeValue = text;
          }
          function clearContainer(container2) {
            if (container2.nodeType === ELEMENT_NODE) {
              container2.textContent = "";
            } else if (container2.nodeType === DOCUMENT_NODE) {
              var body = container2.body;
              if (body != null) {
                body.textContent = "";
              }
            }
          }
          function canHydrateInstance(instance, type, props) {
            if (instance.nodeType !== ELEMENT_NODE || type.toLowerCase() !== instance.nodeName.toLowerCase()) {
              return null;
            }
            return instance;
          }
          function canHydrateTextInstance(instance, text) {
            if (text === "" || instance.nodeType !== TEXT_NODE) {
              return null;
            }
            return instance;
          }
          function canHydrateSuspenseInstance(instance) {
            if (instance.nodeType !== COMMENT_NODE) {
              return null;
            }
            return instance;
          }
          function isSuspenseInstancePending(instance) {
            return instance.data === SUSPENSE_PENDING_START_DATA;
          }
          function isSuspenseInstanceFallback(instance) {
            return instance.data === SUSPENSE_FALLBACK_START_DATA;
          }
          function registerSuspenseInstanceRetry(instance, callback) {
            instance._reactRetry = callback;
          }
          function getNextHydratable(node) {
            for (; node != null; node = node.nextSibling) {
              var nodeType = node.nodeType;
              if (nodeType === ELEMENT_NODE || nodeType === TEXT_NODE) {
                break;
              }
              {
                if (nodeType === COMMENT_NODE) {
                  var nodeData = node.data;
                  if (nodeData === SUSPENSE_START_DATA || nodeData === SUSPENSE_FALLBACK_START_DATA || nodeData === SUSPENSE_PENDING_START_DATA) {
                    break;
                  }
                  if (nodeData === SUSPENSE_END_DATA) {
                    return null;
                  }
                }
              }
            }
            return node;
          }
          function getNextHydratableSibling(instance) {
            return getNextHydratable(instance.nextSibling);
          }
          function getFirstHydratableChild(parentInstance) {
            return getNextHydratable(parentInstance.firstChild);
          }
          function getFirstHydratableChildWithinContainer(parentContainer) {
            return getNextHydratable(parentContainer.firstChild);
          }
          function getFirstHydratableChildWithinSuspenseInstance(parentInstance) {
            return getNextHydratable(parentInstance.nextSibling);
          }
          function hydrateInstance(instance, type, props, rootContainerInstance, hostContext, internalInstanceHandle, shouldWarnDev) {
            precacheFiberNode(internalInstanceHandle, instance);
            updateFiberProps(instance, props);
            var parentNamespace;
            {
              var hostContextDev = hostContext;
              parentNamespace = hostContextDev.namespace;
            }
            var isConcurrentMode = (internalInstanceHandle.mode & ConcurrentMode) !== NoMode;
            return diffHydratedProperties(instance, type, props, parentNamespace, rootContainerInstance, isConcurrentMode, shouldWarnDev);
          }
          function hydrateTextInstance(textInstance, text, internalInstanceHandle, shouldWarnDev) {
            precacheFiberNode(internalInstanceHandle, textInstance);
            var isConcurrentMode = (internalInstanceHandle.mode & ConcurrentMode) !== NoMode;
            return diffHydratedText(textInstance, text);
          }
          function hydrateSuspenseInstance(suspenseInstance, internalInstanceHandle) {
            precacheFiberNode(internalInstanceHandle, suspenseInstance);
          }
          function getNextHydratableInstanceAfterSuspenseInstance(suspenseInstance) {
            var node = suspenseInstance.nextSibling;
            var depth = 0;
            while (node) {
              if (node.nodeType === COMMENT_NODE) {
                var data = node.data;
                if (data === SUSPENSE_END_DATA) {
                  if (depth === 0) {
                    return getNextHydratableSibling(node);
                  } else {
                    depth--;
                  }
                } else if (data === SUSPENSE_START_DATA || data === SUSPENSE_FALLBACK_START_DATA || data === SUSPENSE_PENDING_START_DATA) {
                  depth++;
                }
              }
              node = node.nextSibling;
            }
            return null;
          }
          function getParentSuspenseInstance(targetInstance) {
            var node = targetInstance.previousSibling;
            var depth = 0;
            while (node) {
              if (node.nodeType === COMMENT_NODE) {
                var data = node.data;
                if (data === SUSPENSE_START_DATA || data === SUSPENSE_FALLBACK_START_DATA || data === SUSPENSE_PENDING_START_DATA) {
                  if (depth === 0) {
                    return node;
                  } else {
                    depth--;
                  }
                } else if (data === SUSPENSE_END_DATA) {
                  depth++;
                }
              }
              node = node.previousSibling;
            }
            return null;
          }
          function commitHydratedContainer(container2) {
            retryIfBlockedOn(container2);
          }
          function commitHydratedSuspenseInstance(suspenseInstance) {
            retryIfBlockedOn(suspenseInstance);
          }
          function shouldDeleteUnhydratedTailInstances(parentType) {
            return parentType !== "head" && parentType !== "body";
          }
          function didNotMatchHydratedContainerTextInstance(parentContainer, textInstance, text, isConcurrentMode) {
            var shouldWarnDev = true;
            checkForUnmatchedText(textInstance.nodeValue, text, isConcurrentMode, shouldWarnDev);
          }
          function didNotMatchHydratedTextInstance(parentType, parentProps, parentInstance, textInstance, text, isConcurrentMode) {
            if (parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true) {
              var shouldWarnDev = true;
              checkForUnmatchedText(textInstance.nodeValue, text, isConcurrentMode, shouldWarnDev);
            }
          }
          function didNotHydrateInstanceWithinContainer(parentContainer, instance) {
            {
              if (instance.nodeType === ELEMENT_NODE) {
                warnForDeletedHydratableElement(parentContainer, instance);
              } else if (instance.nodeType === COMMENT_NODE)
                ;
              else {
                warnForDeletedHydratableText(parentContainer, instance);
              }
            }
          }
          function didNotHydrateInstanceWithinSuspenseInstance(parentInstance, instance) {
            {
              var parentNode = parentInstance.parentNode;
              if (parentNode !== null) {
                if (instance.nodeType === ELEMENT_NODE) {
                  warnForDeletedHydratableElement(parentNode, instance);
                } else if (instance.nodeType === COMMENT_NODE)
                  ;
                else {
                  warnForDeletedHydratableText(parentNode, instance);
                }
              }
            }
          }
          function didNotHydrateInstance(parentType, parentProps, parentInstance, instance) {
            if (parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true) {
              if (instance.nodeType === ELEMENT_NODE) {
                warnForDeletedHydratableElement(parentInstance, instance);
              } else if (instance.nodeType === COMMENT_NODE)
                ;
              else {
                warnForDeletedHydratableText(parentInstance, instance);
              }
            }
          }
          function didNotFindHydratableInstanceWithinContainer(parentContainer, type, props) {
            {
              warnForInsertedHydratedElement(parentContainer, type);
            }
          }
          function didNotFindHydratableTextInstanceWithinContainer(parentContainer, text) {
            {
              warnForInsertedHydratedText(parentContainer, text);
            }
          }
          function didNotFindHydratableInstanceWithinSuspenseInstance(parentInstance, type, props) {
            {
              var parentNode = parentInstance.parentNode;
              if (parentNode !== null)
                warnForInsertedHydratedElement(parentNode, type);
            }
          }
          function didNotFindHydratableTextInstanceWithinSuspenseInstance(parentInstance, text) {
            {
              var parentNode = parentInstance.parentNode;
              if (parentNode !== null)
                warnForInsertedHydratedText(parentNode, text);
            }
          }
          function didNotFindHydratableInstance(parentType, parentProps, parentInstance, type, props) {
            if (parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true) {
              warnForInsertedHydratedElement(parentInstance, type);
            }
          }
          function didNotFindHydratableTextInstance(parentType, parentProps, parentInstance, text) {
            if (parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true) {
              warnForInsertedHydratedText(parentInstance, text);
            }
          }
          function didNotFindHydratableSuspenseInstance(parentType, parentProps, parentInstance) {
            if (parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true)
              ;
          }
          function errorHydratingContainer(parentContainer) {
            {
              error("An error occurred during hydration. The server HTML was replaced with client content in <%s>.", parentContainer.nodeName.toLowerCase());
            }
          }
          function preparePortalMount(portalInstance) {
            listenToAllSupportedEvents(portalInstance);
          }
          var randomKey = Math.random().toString(36).slice(2);
          var internalInstanceKey = "__reactFiber$" + randomKey;
          var internalPropsKey = "__reactProps$" + randomKey;
          var internalContainerInstanceKey = "__reactContainer$" + randomKey;
          var internalEventHandlersKey = "__reactEvents$" + randomKey;
          var internalEventHandlerListenersKey = "__reactListeners$" + randomKey;
          var internalEventHandlesSetKey = "__reactHandles$" + randomKey;
          function detachDeletedInstance(node) {
            delete node[internalInstanceKey];
            delete node[internalPropsKey];
            delete node[internalEventHandlersKey];
            delete node[internalEventHandlerListenersKey];
            delete node[internalEventHandlesSetKey];
          }
          function precacheFiberNode(hostInst, node) {
            node[internalInstanceKey] = hostInst;
          }
          function markContainerAsRoot(hostRoot, node) {
            node[internalContainerInstanceKey] = hostRoot;
          }
          function unmarkContainerAsRoot(node) {
            node[internalContainerInstanceKey] = null;
          }
          function isContainerMarkedAsRoot(node) {
            return !!node[internalContainerInstanceKey];
          }
          function getClosestInstanceFromNode(targetNode) {
            var targetInst = targetNode[internalInstanceKey];
            if (targetInst) {
              return targetInst;
            }
            var parentNode = targetNode.parentNode;
            while (parentNode) {
              targetInst = parentNode[internalContainerInstanceKey] || parentNode[internalInstanceKey];
              if (targetInst) {
                var alternate = targetInst.alternate;
                if (targetInst.child !== null || alternate !== null && alternate.child !== null) {
                  var suspenseInstance = getParentSuspenseInstance(targetNode);
                  while (suspenseInstance !== null) {
                    var targetSuspenseInst = suspenseInstance[internalInstanceKey];
                    if (targetSuspenseInst) {
                      return targetSuspenseInst;
                    }
                    suspenseInstance = getParentSuspenseInstance(suspenseInstance);
                  }
                }
                return targetInst;
              }
              targetNode = parentNode;
              parentNode = targetNode.parentNode;
            }
            return null;
          }
          function getInstanceFromNode(node) {
            var inst = node[internalInstanceKey] || node[internalContainerInstanceKey];
            if (inst) {
              if (inst.tag === HostComponent || inst.tag === HostText || inst.tag === SuspenseComponent || inst.tag === HostRoot) {
                return inst;
              } else {
                return null;
              }
            }
            return null;
          }
          function getNodeFromInstance(inst) {
            if (inst.tag === HostComponent || inst.tag === HostText) {
              return inst.stateNode;
            }
            throw new Error("getNodeFromInstance: Invalid argument.");
          }
          function getFiberCurrentPropsFromNode(node) {
            return node[internalPropsKey] || null;
          }
          function updateFiberProps(node, props) {
            node[internalPropsKey] = props;
          }
          function getEventListenerSet(node) {
            var elementListenerSet = node[internalEventHandlersKey];
            if (elementListenerSet === void 0) {
              elementListenerSet = node[internalEventHandlersKey] = /* @__PURE__ */ new Set();
            }
            return elementListenerSet;
          }
          var loggedTypeFailures = {};
          var ReactDebugCurrentFrame$1 = ReactSharedInternals.ReactDebugCurrentFrame;
          function setCurrentlyValidatingElement(element) {
            {
              if (element) {
                var owner = element._owner;
                var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
                ReactDebugCurrentFrame$1.setExtraStackFrame(stack);
              } else {
                ReactDebugCurrentFrame$1.setExtraStackFrame(null);
              }
            }
          }
          function checkPropTypes(typeSpecs, values, location2, componentName, element) {
            {
              var has2 = Function.call.bind(hasOwnProperty);
              for (var typeSpecName in typeSpecs) {
                if (has2(typeSpecs, typeSpecName)) {
                  var error$1 = void 0;
                  try {
                    if (typeof typeSpecs[typeSpecName] !== "function") {
                      var err = Error((componentName || "React class") + ": " + location2 + " type `" + typeSpecName + "` is invalid; it must be a function, usually from the `prop-types` package, but received `" + typeof typeSpecs[typeSpecName] + "`.This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.");
                      err.name = "Invariant Violation";
                      throw err;
                    }
                    error$1 = typeSpecs[typeSpecName](values, typeSpecName, componentName, location2, null, "SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED");
                  } catch (ex) {
                    error$1 = ex;
                  }
                  if (error$1 && !(error$1 instanceof Error)) {
                    setCurrentlyValidatingElement(element);
                    error("%s: type specification of %s `%s` is invalid; the type checker function must return `null` or an `Error` but returned a %s. You may have forgotten to pass an argument to the type checker creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and shape all require an argument).", componentName || "React class", location2, typeSpecName, typeof error$1);
                    setCurrentlyValidatingElement(null);
                  }
                  if (error$1 instanceof Error && !(error$1.message in loggedTypeFailures)) {
                    loggedTypeFailures[error$1.message] = true;
                    setCurrentlyValidatingElement(element);
                    error("Failed %s type: %s", location2, error$1.message);
                    setCurrentlyValidatingElement(null);
                  }
                }
              }
            }
          }
          var valueStack = [];
          var fiberStack;
          {
            fiberStack = [];
          }
          var index = -1;
          function createCursor(defaultValue2) {
            return {
              current: defaultValue2
            };
          }
          function pop(cursor, fiber) {
            if (index < 0) {
              {
                error("Unexpected pop.");
              }
              return;
            }
            {
              if (fiber !== fiberStack[index]) {
                error("Unexpected Fiber popped.");
              }
            }
            cursor.current = valueStack[index];
            valueStack[index] = null;
            {
              fiberStack[index] = null;
            }
            index--;
          }
          function push(cursor, value, fiber) {
            index++;
            valueStack[index] = cursor.current;
            {
              fiberStack[index] = fiber;
            }
            cursor.current = value;
          }
          var warnedAboutMissingGetChildContext;
          {
            warnedAboutMissingGetChildContext = {};
          }
          var emptyContextObject = {};
          {
            Object.freeze(emptyContextObject);
          }
          var contextStackCursor = createCursor(emptyContextObject);
          var didPerformWorkStackCursor = createCursor(false);
          var previousContext = emptyContextObject;
          function getUnmaskedContext(workInProgress2, Component, didPushOwnContextIfProvider) {
            {
              if (didPushOwnContextIfProvider && isContextProvider(Component)) {
                return previousContext;
              }
              return contextStackCursor.current;
            }
          }
          function cacheContext(workInProgress2, unmaskedContext, maskedContext) {
            {
              var instance = workInProgress2.stateNode;
              instance.__reactInternalMemoizedUnmaskedChildContext = unmaskedContext;
              instance.__reactInternalMemoizedMaskedChildContext = maskedContext;
            }
          }
          function getMaskedContext(workInProgress2, unmaskedContext) {
            {
              var type = workInProgress2.type;
              var contextTypes = type.contextTypes;
              if (!contextTypes) {
                return emptyContextObject;
              }
              var instance = workInProgress2.stateNode;
              if (instance && instance.__reactInternalMemoizedUnmaskedChildContext === unmaskedContext) {
                return instance.__reactInternalMemoizedMaskedChildContext;
              }
              var context = {};
              for (var key in contextTypes) {
                context[key] = unmaskedContext[key];
              }
              {
                var name = getComponentNameFromFiber(workInProgress2) || "Unknown";
                checkPropTypes(contextTypes, context, "context", name);
              }
              if (instance) {
                cacheContext(workInProgress2, unmaskedContext, context);
              }
              return context;
            }
          }
          function hasContextChanged() {
            {
              return didPerformWorkStackCursor.current;
            }
          }
          function isContextProvider(type) {
            {
              var childContextTypes = type.childContextTypes;
              return childContextTypes !== null && childContextTypes !== void 0;
            }
          }
          function popContext(fiber) {
            {
              pop(didPerformWorkStackCursor, fiber);
              pop(contextStackCursor, fiber);
            }
          }
          function popTopLevelContextObject(fiber) {
            {
              pop(didPerformWorkStackCursor, fiber);
              pop(contextStackCursor, fiber);
            }
          }
          function pushTopLevelContextObject(fiber, context, didChange) {
            {
              if (contextStackCursor.current !== emptyContextObject) {
                throw new Error("Unexpected context found on stack. This error is likely caused by a bug in React. Please file an issue.");
              }
              push(contextStackCursor, context, fiber);
              push(didPerformWorkStackCursor, didChange, fiber);
            }
          }
          function processChildContext(fiber, type, parentContext) {
            {
              var instance = fiber.stateNode;
              var childContextTypes = type.childContextTypes;
              if (typeof instance.getChildContext !== "function") {
                {
                  var componentName = getComponentNameFromFiber(fiber) || "Unknown";
                  if (!warnedAboutMissingGetChildContext[componentName]) {
                    warnedAboutMissingGetChildContext[componentName] = true;
                    error("%s.childContextTypes is specified but there is no getChildContext() method on the instance. You can either define getChildContext() on %s or remove childContextTypes from it.", componentName, componentName);
                  }
                }
                return parentContext;
              }
              var childContext = instance.getChildContext();
              for (var contextKey in childContext) {
                if (!(contextKey in childContextTypes)) {
                  throw new Error((getComponentNameFromFiber(fiber) || "Unknown") + '.getChildContext(): key "' + contextKey + '" is not defined in childContextTypes.');
                }
              }
              {
                var name = getComponentNameFromFiber(fiber) || "Unknown";
                checkPropTypes(childContextTypes, childContext, "child context", name);
              }
              return assign({}, parentContext, childContext);
            }
          }
          function pushContextProvider(workInProgress2) {
            {
              var instance = workInProgress2.stateNode;
              var memoizedMergedChildContext = instance && instance.__reactInternalMemoizedMergedChildContext || emptyContextObject;
              previousContext = contextStackCursor.current;
              push(contextStackCursor, memoizedMergedChildContext, workInProgress2);
              push(didPerformWorkStackCursor, didPerformWorkStackCursor.current, workInProgress2);
              return true;
            }
          }
          function invalidateContextProvider(workInProgress2, type, didChange) {
            {
              var instance = workInProgress2.stateNode;
              if (!instance) {
                throw new Error("Expected to have an instance by this point. This error is likely caused by a bug in React. Please file an issue.");
              }
              if (didChange) {
                var mergedContext = processChildContext(workInProgress2, type, previousContext);
                instance.__reactInternalMemoizedMergedChildContext = mergedContext;
                pop(didPerformWorkStackCursor, workInProgress2);
                pop(contextStackCursor, workInProgress2);
                push(contextStackCursor, mergedContext, workInProgress2);
                push(didPerformWorkStackCursor, didChange, workInProgress2);
              } else {
                pop(didPerformWorkStackCursor, workInProgress2);
                push(didPerformWorkStackCursor, didChange, workInProgress2);
              }
            }
          }
          function findCurrentUnmaskedContext(fiber) {
            {
              if (!isFiberMounted(fiber) || fiber.tag !== ClassComponent) {
                throw new Error("Expected subtree parent to be a mounted class component. This error is likely caused by a bug in React. Please file an issue.");
              }
              var node = fiber;
              do {
                switch (node.tag) {
                  case HostRoot:
                    return node.stateNode.context;
                  case ClassComponent: {
                    var Component = node.type;
                    if (isContextProvider(Component)) {
                      return node.stateNode.__reactInternalMemoizedMergedChildContext;
                    }
                    break;
                  }
                }
                node = node.return;
              } while (node !== null);
              throw new Error("Found unexpected detached subtree parent. This error is likely caused by a bug in React. Please file an issue.");
            }
          }
          var LegacyRoot = 0;
          var ConcurrentRoot = 1;
          var syncQueue = null;
          var includesLegacySyncCallbacks = false;
          var isFlushingSyncQueue = false;
          function scheduleSyncCallback(callback) {
            if (syncQueue === null) {
              syncQueue = [callback];
            } else {
              syncQueue.push(callback);
            }
          }
          function scheduleLegacySyncCallback(callback) {
            includesLegacySyncCallbacks = true;
            scheduleSyncCallback(callback);
          }
          function flushSyncCallbacksOnlyInLegacyMode() {
            if (includesLegacySyncCallbacks) {
              flushSyncCallbacks();
            }
          }
          function flushSyncCallbacks() {
            if (!isFlushingSyncQueue && syncQueue !== null) {
              isFlushingSyncQueue = true;
              var i3 = 0;
              var previousUpdatePriority = getCurrentUpdatePriority();
              try {
                var isSync = true;
                var queue = syncQueue;
                setCurrentUpdatePriority(DiscreteEventPriority);
                for (; i3 < queue.length; i3++) {
                  var callback = queue[i3];
                  do {
                    callback = callback(isSync);
                  } while (callback !== null);
                }
                syncQueue = null;
                includesLegacySyncCallbacks = false;
              } catch (error2) {
                if (syncQueue !== null) {
                  syncQueue = syncQueue.slice(i3 + 1);
                }
                scheduleCallback(ImmediatePriority, flushSyncCallbacks);
                throw error2;
              } finally {
                setCurrentUpdatePriority(previousUpdatePriority);
                isFlushingSyncQueue = false;
              }
            }
            return null;
          }
          var ReactCurrentBatchConfig$1 = ReactSharedInternals.ReactCurrentBatchConfig;
          var NoTransition = null;
          function requestCurrentTransition() {
            return ReactCurrentBatchConfig$1.transition;
          }
          var ReactStrictModeWarnings = {
            recordUnsafeLifecycleWarnings: function(fiber, instance) {
            },
            flushPendingUnsafeLifecycleWarnings: function() {
            },
            recordLegacyContextWarning: function(fiber, instance) {
            },
            flushLegacyContextWarning: function() {
            },
            discardPendingWarnings: function() {
            }
          };
          {
            var findStrictRoot = function(fiber) {
              var maybeStrictRoot = null;
              var node = fiber;
              while (node !== null) {
                if (node.mode & StrictLegacyMode) {
                  maybeStrictRoot = node;
                }
                node = node.return;
              }
              return maybeStrictRoot;
            };
            var setToSortedString = function(set2) {
              var array = [];
              set2.forEach(function(value) {
                array.push(value);
              });
              return array.sort().join(", ");
            };
            var pendingComponentWillMountWarnings = [];
            var pendingUNSAFE_ComponentWillMountWarnings = [];
            var pendingComponentWillReceivePropsWarnings = [];
            var pendingUNSAFE_ComponentWillReceivePropsWarnings = [];
            var pendingComponentWillUpdateWarnings = [];
            var pendingUNSAFE_ComponentWillUpdateWarnings = [];
            var didWarnAboutUnsafeLifecycles = /* @__PURE__ */ new Set();
            ReactStrictModeWarnings.recordUnsafeLifecycleWarnings = function(fiber, instance) {
              if (didWarnAboutUnsafeLifecycles.has(fiber.type)) {
                return;
              }
              if (typeof instance.componentWillMount === "function" && instance.componentWillMount.__suppressDeprecationWarning !== true) {
                pendingComponentWillMountWarnings.push(fiber);
              }
              if (fiber.mode & StrictLegacyMode && typeof instance.UNSAFE_componentWillMount === "function") {
                pendingUNSAFE_ComponentWillMountWarnings.push(fiber);
              }
              if (typeof instance.componentWillReceiveProps === "function" && instance.componentWillReceiveProps.__suppressDeprecationWarning !== true) {
                pendingComponentWillReceivePropsWarnings.push(fiber);
              }
              if (fiber.mode & StrictLegacyMode && typeof instance.UNSAFE_componentWillReceiveProps === "function") {
                pendingUNSAFE_ComponentWillReceivePropsWarnings.push(fiber);
              }
              if (typeof instance.componentWillUpdate === "function" && instance.componentWillUpdate.__suppressDeprecationWarning !== true) {
                pendingComponentWillUpdateWarnings.push(fiber);
              }
              if (fiber.mode & StrictLegacyMode && typeof instance.UNSAFE_componentWillUpdate === "function") {
                pendingUNSAFE_ComponentWillUpdateWarnings.push(fiber);
              }
            };
            ReactStrictModeWarnings.flushPendingUnsafeLifecycleWarnings = function() {
              var componentWillMountUniqueNames = /* @__PURE__ */ new Set();
              if (pendingComponentWillMountWarnings.length > 0) {
                pendingComponentWillMountWarnings.forEach(function(fiber) {
                  componentWillMountUniqueNames.add(getComponentNameFromFiber(fiber) || "Component");
                  didWarnAboutUnsafeLifecycles.add(fiber.type);
                });
                pendingComponentWillMountWarnings = [];
              }
              var UNSAFE_componentWillMountUniqueNames = /* @__PURE__ */ new Set();
              if (pendingUNSAFE_ComponentWillMountWarnings.length > 0) {
                pendingUNSAFE_ComponentWillMountWarnings.forEach(function(fiber) {
                  UNSAFE_componentWillMountUniqueNames.add(getComponentNameFromFiber(fiber) || "Component");
                  didWarnAboutUnsafeLifecycles.add(fiber.type);
                });
                pendingUNSAFE_ComponentWillMountWarnings = [];
              }
              var componentWillReceivePropsUniqueNames = /* @__PURE__ */ new Set();
              if (pendingComponentWillReceivePropsWarnings.length > 0) {
                pendingComponentWillReceivePropsWarnings.forEach(function(fiber) {
                  componentWillReceivePropsUniqueNames.add(getComponentNameFromFiber(fiber) || "Component");
                  didWarnAboutUnsafeLifecycles.add(fiber.type);
                });
                pendingComponentWillReceivePropsWarnings = [];
              }
              var UNSAFE_componentWillReceivePropsUniqueNames = /* @__PURE__ */ new Set();
              if (pendingUNSAFE_ComponentWillReceivePropsWarnings.length > 0) {
                pendingUNSAFE_ComponentWillReceivePropsWarnings.forEach(function(fiber) {
                  UNSAFE_componentWillReceivePropsUniqueNames.add(getComponentNameFromFiber(fiber) || "Component");
                  didWarnAboutUnsafeLifecycles.add(fiber.type);
                });
                pendingUNSAFE_ComponentWillReceivePropsWarnings = [];
              }
              var componentWillUpdateUniqueNames = /* @__PURE__ */ new Set();
              if (pendingComponentWillUpdateWarnings.length > 0) {
                pendingComponentWillUpdateWarnings.forEach(function(fiber) {
                  componentWillUpdateUniqueNames.add(getComponentNameFromFiber(fiber) || "Component");
                  didWarnAboutUnsafeLifecycles.add(fiber.type);
                });
                pendingComponentWillUpdateWarnings = [];
              }
              var UNSAFE_componentWillUpdateUniqueNames = /* @__PURE__ */ new Set();
              if (pendingUNSAFE_ComponentWillUpdateWarnings.length > 0) {
                pendingUNSAFE_ComponentWillUpdateWarnings.forEach(function(fiber) {
                  UNSAFE_componentWillUpdateUniqueNames.add(getComponentNameFromFiber(fiber) || "Component");
                  didWarnAboutUnsafeLifecycles.add(fiber.type);
                });
                pendingUNSAFE_ComponentWillUpdateWarnings = [];
              }
              if (UNSAFE_componentWillMountUniqueNames.size > 0) {
                var sortedNames = setToSortedString(UNSAFE_componentWillMountUniqueNames);
                error("Using UNSAFE_componentWillMount in strict mode is not recommended and may indicate bugs in your code. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move code with side effects to componentDidMount, and set initial state in the constructor.\n\nPlease update the following components: %s", sortedNames);
              }
              if (UNSAFE_componentWillReceivePropsUniqueNames.size > 0) {
                var _sortedNames = setToSortedString(UNSAFE_componentWillReceivePropsUniqueNames);
                error("Using UNSAFE_componentWillReceiveProps in strict mode is not recommended and may indicate bugs in your code. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move data fetching code or side effects to componentDidUpdate.\n* If you're updating state whenever props change, refactor your code to use memoization techniques or move it to static getDerivedStateFromProps. Learn more at: https://reactjs.org/link/derived-state\n\nPlease update the following components: %s", _sortedNames);
              }
              if (UNSAFE_componentWillUpdateUniqueNames.size > 0) {
                var _sortedNames2 = setToSortedString(UNSAFE_componentWillUpdateUniqueNames);
                error("Using UNSAFE_componentWillUpdate in strict mode is not recommended and may indicate bugs in your code. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move data fetching code or side effects to componentDidUpdate.\n\nPlease update the following components: %s", _sortedNames2);
              }
              if (componentWillMountUniqueNames.size > 0) {
                var _sortedNames3 = setToSortedString(componentWillMountUniqueNames);
                warn("componentWillMount has been renamed, and is not recommended for use. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move code with side effects to componentDidMount, and set initial state in the constructor.\n* Rename componentWillMount to UNSAFE_componentWillMount to suppress this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. To rename all deprecated lifecycles to their new names, you can run `npx react-codemod rename-unsafe-lifecycles` in your project source folder.\n\nPlease update the following components: %s", _sortedNames3);
              }
              if (componentWillReceivePropsUniqueNames.size > 0) {
                var _sortedNames4 = setToSortedString(componentWillReceivePropsUniqueNames);
                warn("componentWillReceiveProps has been renamed, and is not recommended for use. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move data fetching code or side effects to componentDidUpdate.\n* If you're updating state whenever props change, refactor your code to use memoization techniques or move it to static getDerivedStateFromProps. Learn more at: https://reactjs.org/link/derived-state\n* Rename componentWillReceiveProps to UNSAFE_componentWillReceiveProps to suppress this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. To rename all deprecated lifecycles to their new names, you can run `npx react-codemod rename-unsafe-lifecycles` in your project source folder.\n\nPlease update the following components: %s", _sortedNames4);
              }
              if (componentWillUpdateUniqueNames.size > 0) {
                var _sortedNames5 = setToSortedString(componentWillUpdateUniqueNames);
                warn("componentWillUpdate has been renamed, and is not recommended for use. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move data fetching code or side effects to componentDidUpdate.\n* Rename componentWillUpdate to UNSAFE_componentWillUpdate to suppress this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. To rename all deprecated lifecycles to their new names, you can run `npx react-codemod rename-unsafe-lifecycles` in your project source folder.\n\nPlease update the following components: %s", _sortedNames5);
              }
            };
            var pendingLegacyContextWarning = /* @__PURE__ */ new Map();
            var didWarnAboutLegacyContext = /* @__PURE__ */ new Set();
            ReactStrictModeWarnings.recordLegacyContextWarning = function(fiber, instance) {
              var strictRoot = findStrictRoot(fiber);
              if (strictRoot === null) {
                error("Expected to find a StrictMode component in a strict mode tree. This error is likely caused by a bug in React. Please file an issue.");
                return;
              }
              if (didWarnAboutLegacyContext.has(fiber.type)) {
                return;
              }
              var warningsForRoot = pendingLegacyContextWarning.get(strictRoot);
              if (fiber.type.contextTypes != null || fiber.type.childContextTypes != null || instance !== null && typeof instance.getChildContext === "function") {
                if (warningsForRoot === void 0) {
                  warningsForRoot = [];
                  pendingLegacyContextWarning.set(strictRoot, warningsForRoot);
                }
                warningsForRoot.push(fiber);
              }
            };
            ReactStrictModeWarnings.flushLegacyContextWarning = function() {
              pendingLegacyContextWarning.forEach(function(fiberArray, strictRoot) {
                if (fiberArray.length === 0) {
                  return;
                }
                var firstFiber = fiberArray[0];
                var uniqueNames = /* @__PURE__ */ new Set();
                fiberArray.forEach(function(fiber) {
                  uniqueNames.add(getComponentNameFromFiber(fiber) || "Component");
                  didWarnAboutLegacyContext.add(fiber.type);
                });
                var sortedNames = setToSortedString(uniqueNames);
                try {
                  setCurrentFiber(firstFiber);
                  error("Legacy context API has been detected within a strict-mode tree.\n\nThe old API will be supported in all 16.x releases, but applications using it should migrate to the new version.\n\nPlease update the following components: %s\n\nLearn more about this warning here: https://reactjs.org/link/legacy-context", sortedNames);
                } finally {
                  resetCurrentFiber();
                }
              });
            };
            ReactStrictModeWarnings.discardPendingWarnings = function() {
              pendingComponentWillMountWarnings = [];
              pendingUNSAFE_ComponentWillMountWarnings = [];
              pendingComponentWillReceivePropsWarnings = [];
              pendingUNSAFE_ComponentWillReceivePropsWarnings = [];
              pendingComponentWillUpdateWarnings = [];
              pendingUNSAFE_ComponentWillUpdateWarnings = [];
              pendingLegacyContextWarning = /* @__PURE__ */ new Map();
            };
          }
          function resolveDefaultProps(Component, baseProps) {
            if (Component && Component.defaultProps) {
              var props = assign({}, baseProps);
              var defaultProps = Component.defaultProps;
              for (var propName in defaultProps) {
                if (props[propName] === void 0) {
                  props[propName] = defaultProps[propName];
                }
              }
              return props;
            }
            return baseProps;
          }
          var valueCursor = createCursor(null);
          var rendererSigil;
          {
            rendererSigil = {};
          }
          var currentlyRenderingFiber = null;
          var lastContextDependency = null;
          var lastFullyObservedContext = null;
          var isDisallowedContextReadInDEV = false;
          function resetContextDependencies() {
            currentlyRenderingFiber = null;
            lastContextDependency = null;
            lastFullyObservedContext = null;
            {
              isDisallowedContextReadInDEV = false;
            }
          }
          function enterDisallowedContextReadInDEV() {
            {
              isDisallowedContextReadInDEV = true;
            }
          }
          function exitDisallowedContextReadInDEV() {
            {
              isDisallowedContextReadInDEV = false;
            }
          }
          function pushProvider(providerFiber, context, nextValue) {
            {
              push(valueCursor, context._currentValue, providerFiber);
              context._currentValue = nextValue;
              {
                if (context._currentRenderer !== void 0 && context._currentRenderer !== null && context._currentRenderer !== rendererSigil) {
                  error("Detected multiple renderers concurrently rendering the same context provider. This is currently unsupported.");
                }
                context._currentRenderer = rendererSigil;
              }
            }
          }
          function popProvider(context, providerFiber) {
            var currentValue = valueCursor.current;
            pop(valueCursor, providerFiber);
            {
              {
                context._currentValue = currentValue;
              }
            }
          }
          function scheduleContextWorkOnParentPath(parent, renderLanes2, propagationRoot) {
            var node = parent;
            while (node !== null) {
              var alternate = node.alternate;
              if (!isSubsetOfLanes(node.childLanes, renderLanes2)) {
                node.childLanes = mergeLanes(node.childLanes, renderLanes2);
                if (alternate !== null) {
                  alternate.childLanes = mergeLanes(alternate.childLanes, renderLanes2);
                }
              } else if (alternate !== null && !isSubsetOfLanes(alternate.childLanes, renderLanes2)) {
                alternate.childLanes = mergeLanes(alternate.childLanes, renderLanes2);
              }
              if (node === propagationRoot) {
                break;
              }
              node = node.return;
            }
            {
              if (node !== propagationRoot) {
                error("Expected to find the propagation root when scheduling context work. This error is likely caused by a bug in React. Please file an issue.");
              }
            }
          }
          function propagateContextChange(workInProgress2, context, renderLanes2) {
            {
              propagateContextChange_eager(workInProgress2, context, renderLanes2);
            }
          }
          function propagateContextChange_eager(workInProgress2, context, renderLanes2) {
            var fiber = workInProgress2.child;
            if (fiber !== null) {
              fiber.return = workInProgress2;
            }
            while (fiber !== null) {
              var nextFiber = void 0;
              var list = fiber.dependencies;
              if (list !== null) {
                nextFiber = fiber.child;
                var dependency = list.firstContext;
                while (dependency !== null) {
                  if (dependency.context === context) {
                    if (fiber.tag === ClassComponent) {
                      var lane = pickArbitraryLane(renderLanes2);
                      var update = createUpdate(NoTimestamp, lane);
                      update.tag = ForceUpdate;
                      var updateQueue = fiber.updateQueue;
                      if (updateQueue === null)
                        ;
                      else {
                        var sharedQueue = updateQueue.shared;
                        var pending = sharedQueue.pending;
                        if (pending === null) {
                          update.next = update;
                        } else {
                          update.next = pending.next;
                          pending.next = update;
                        }
                        sharedQueue.pending = update;
                      }
                    }
                    fiber.lanes = mergeLanes(fiber.lanes, renderLanes2);
                    var alternate = fiber.alternate;
                    if (alternate !== null) {
                      alternate.lanes = mergeLanes(alternate.lanes, renderLanes2);
                    }
                    scheduleContextWorkOnParentPath(fiber.return, renderLanes2, workInProgress2);
                    list.lanes = mergeLanes(list.lanes, renderLanes2);
                    break;
                  }
                  dependency = dependency.next;
                }
              } else if (fiber.tag === ContextProvider) {
                nextFiber = fiber.type === workInProgress2.type ? null : fiber.child;
              } else if (fiber.tag === DehydratedFragment) {
                var parentSuspense = fiber.return;
                if (parentSuspense === null) {
                  throw new Error("We just came from a parent so we must have had a parent. This is a bug in React.");
                }
                parentSuspense.lanes = mergeLanes(parentSuspense.lanes, renderLanes2);
                var _alternate = parentSuspense.alternate;
                if (_alternate !== null) {
                  _alternate.lanes = mergeLanes(_alternate.lanes, renderLanes2);
                }
                scheduleContextWorkOnParentPath(parentSuspense, renderLanes2, workInProgress2);
                nextFiber = fiber.sibling;
              } else {
                nextFiber = fiber.child;
              }
              if (nextFiber !== null) {
                nextFiber.return = fiber;
              } else {
                nextFiber = fiber;
                while (nextFiber !== null) {
                  if (nextFiber === workInProgress2) {
                    nextFiber = null;
                    break;
                  }
                  var sibling = nextFiber.sibling;
                  if (sibling !== null) {
                    sibling.return = nextFiber.return;
                    nextFiber = sibling;
                    break;
                  }
                  nextFiber = nextFiber.return;
                }
              }
              fiber = nextFiber;
            }
          }
          function prepareToReadContext(workInProgress2, renderLanes2) {
            currentlyRenderingFiber = workInProgress2;
            lastContextDependency = null;
            lastFullyObservedContext = null;
            var dependencies = workInProgress2.dependencies;
            if (dependencies !== null) {
              {
                var firstContext = dependencies.firstContext;
                if (firstContext !== null) {
                  if (includesSomeLane(dependencies.lanes, renderLanes2)) {
                    markWorkInProgressReceivedUpdate();
                  }
                  dependencies.firstContext = null;
                }
              }
            }
          }
          function readContext(context) {
            {
              if (isDisallowedContextReadInDEV) {
                error("Context can only be read while React is rendering. In classes, you can read it in the render method or getDerivedStateFromProps. In function components, you can read it directly in the function body, but not inside Hooks like useReducer() or useMemo().");
              }
            }
            var value = context._currentValue;
            if (lastFullyObservedContext === context)
              ;
            else {
              var contextItem = {
                context,
                memoizedValue: value,
                next: null
              };
              if (lastContextDependency === null) {
                if (currentlyRenderingFiber === null) {
                  throw new Error("Context can only be read while React is rendering. In classes, you can read it in the render method or getDerivedStateFromProps. In function components, you can read it directly in the function body, but not inside Hooks like useReducer() or useMemo().");
                }
                lastContextDependency = contextItem;
                currentlyRenderingFiber.dependencies = {
                  lanes: NoLanes,
                  firstContext: contextItem
                };
              } else {
                lastContextDependency = lastContextDependency.next = contextItem;
              }
            }
            return value;
          }
          var interleavedQueues = null;
          function pushInterleavedQueue(queue) {
            if (interleavedQueues === null) {
              interleavedQueues = [queue];
            } else {
              interleavedQueues.push(queue);
            }
          }
          function enqueueInterleavedUpdates() {
            if (interleavedQueues !== null) {
              for (var i3 = 0; i3 < interleavedQueues.length; i3++) {
                var queue = interleavedQueues[i3];
                var lastInterleavedUpdate = queue.interleaved;
                if (lastInterleavedUpdate !== null) {
                  queue.interleaved = null;
                  var firstInterleavedUpdate = lastInterleavedUpdate.next;
                  var lastPendingUpdate = queue.pending;
                  if (lastPendingUpdate !== null) {
                    var firstPendingUpdate = lastPendingUpdate.next;
                    lastPendingUpdate.next = firstInterleavedUpdate;
                    lastInterleavedUpdate.next = firstPendingUpdate;
                  }
                  queue.pending = lastInterleavedUpdate;
                }
              }
              interleavedQueues = null;
            }
          }
          var UpdateState = 0;
          var ReplaceState = 1;
          var ForceUpdate = 2;
          var CaptureUpdate = 3;
          var hasForceUpdate = false;
          var didWarnUpdateInsideUpdate;
          var currentlyProcessingQueue;
          {
            didWarnUpdateInsideUpdate = false;
            currentlyProcessingQueue = null;
          }
          function initializeUpdateQueue(fiber) {
            var queue = {
              baseState: fiber.memoizedState,
              firstBaseUpdate: null,
              lastBaseUpdate: null,
              shared: {
                pending: null,
                interleaved: null,
                lanes: NoLanes
              },
              effects: null
            };
            fiber.updateQueue = queue;
          }
          function cloneUpdateQueue(current2, workInProgress2) {
            var queue = workInProgress2.updateQueue;
            var currentQueue = current2.updateQueue;
            if (queue === currentQueue) {
              var clone = {
                baseState: currentQueue.baseState,
                firstBaseUpdate: currentQueue.firstBaseUpdate,
                lastBaseUpdate: currentQueue.lastBaseUpdate,
                shared: currentQueue.shared,
                effects: currentQueue.effects
              };
              workInProgress2.updateQueue = clone;
            }
          }
          function createUpdate(eventTime, lane) {
            var update = {
              eventTime,
              lane,
              tag: UpdateState,
              payload: null,
              callback: null,
              next: null
            };
            return update;
          }
          function enqueueUpdate(fiber, update, lane) {
            var updateQueue = fiber.updateQueue;
            if (updateQueue === null) {
              return;
            }
            var sharedQueue = updateQueue.shared;
            if (isInterleavedUpdate(fiber)) {
              var interleaved = sharedQueue.interleaved;
              if (interleaved === null) {
                update.next = update;
                pushInterleavedQueue(sharedQueue);
              } else {
                update.next = interleaved.next;
                interleaved.next = update;
              }
              sharedQueue.interleaved = update;
            } else {
              var pending = sharedQueue.pending;
              if (pending === null) {
                update.next = update;
              } else {
                update.next = pending.next;
                pending.next = update;
              }
              sharedQueue.pending = update;
            }
            {
              if (currentlyProcessingQueue === sharedQueue && !didWarnUpdateInsideUpdate) {
                error("An update (setState, replaceState, or forceUpdate) was scheduled from inside an update function. Update functions should be pure, with zero side-effects. Consider using componentDidUpdate or a callback.");
                didWarnUpdateInsideUpdate = true;
              }
            }
          }
          function entangleTransitions(root3, fiber, lane) {
            var updateQueue = fiber.updateQueue;
            if (updateQueue === null) {
              return;
            }
            var sharedQueue = updateQueue.shared;
            if (isTransitionLane(lane)) {
              var queueLanes = sharedQueue.lanes;
              queueLanes = intersectLanes(queueLanes, root3.pendingLanes);
              var newQueueLanes = mergeLanes(queueLanes, lane);
              sharedQueue.lanes = newQueueLanes;
              markRootEntangled(root3, newQueueLanes);
            }
          }
          function enqueueCapturedUpdate(workInProgress2, capturedUpdate) {
            var queue = workInProgress2.updateQueue;
            var current2 = workInProgress2.alternate;
            if (current2 !== null) {
              var currentQueue = current2.updateQueue;
              if (queue === currentQueue) {
                var newFirst = null;
                var newLast = null;
                var firstBaseUpdate = queue.firstBaseUpdate;
                if (firstBaseUpdate !== null) {
                  var update = firstBaseUpdate;
                  do {
                    var clone = {
                      eventTime: update.eventTime,
                      lane: update.lane,
                      tag: update.tag,
                      payload: update.payload,
                      callback: update.callback,
                      next: null
                    };
                    if (newLast === null) {
                      newFirst = newLast = clone;
                    } else {
                      newLast.next = clone;
                      newLast = clone;
                    }
                    update = update.next;
                  } while (update !== null);
                  if (newLast === null) {
                    newFirst = newLast = capturedUpdate;
                  } else {
                    newLast.next = capturedUpdate;
                    newLast = capturedUpdate;
                  }
                } else {
                  newFirst = newLast = capturedUpdate;
                }
                queue = {
                  baseState: currentQueue.baseState,
                  firstBaseUpdate: newFirst,
                  lastBaseUpdate: newLast,
                  shared: currentQueue.shared,
                  effects: currentQueue.effects
                };
                workInProgress2.updateQueue = queue;
                return;
              }
            }
            var lastBaseUpdate = queue.lastBaseUpdate;
            if (lastBaseUpdate === null) {
              queue.firstBaseUpdate = capturedUpdate;
            } else {
              lastBaseUpdate.next = capturedUpdate;
            }
            queue.lastBaseUpdate = capturedUpdate;
          }
          function getStateFromUpdate(workInProgress2, queue, update, prevState, nextProps, instance) {
            switch (update.tag) {
              case ReplaceState: {
                var payload = update.payload;
                if (typeof payload === "function") {
                  {
                    enterDisallowedContextReadInDEV();
                  }
                  var nextState = payload.call(instance, prevState, nextProps);
                  {
                    if (workInProgress2.mode & StrictLegacyMode) {
                      setIsStrictModeForDevtools(true);
                      try {
                        payload.call(instance, prevState, nextProps);
                      } finally {
                        setIsStrictModeForDevtools(false);
                      }
                    }
                    exitDisallowedContextReadInDEV();
                  }
                  return nextState;
                }
                return payload;
              }
              case CaptureUpdate: {
                workInProgress2.flags = workInProgress2.flags & ~ShouldCapture | DidCapture;
              }
              case UpdateState: {
                var _payload = update.payload;
                var partialState;
                if (typeof _payload === "function") {
                  {
                    enterDisallowedContextReadInDEV();
                  }
                  partialState = _payload.call(instance, prevState, nextProps);
                  {
                    if (workInProgress2.mode & StrictLegacyMode) {
                      setIsStrictModeForDevtools(true);
                      try {
                        _payload.call(instance, prevState, nextProps);
                      } finally {
                        setIsStrictModeForDevtools(false);
                      }
                    }
                    exitDisallowedContextReadInDEV();
                  }
                } else {
                  partialState = _payload;
                }
                if (partialState === null || partialState === void 0) {
                  return prevState;
                }
                return assign({}, prevState, partialState);
              }
              case ForceUpdate: {
                hasForceUpdate = true;
                return prevState;
              }
            }
            return prevState;
          }
          function processUpdateQueue(workInProgress2, props, instance, renderLanes2) {
            var queue = workInProgress2.updateQueue;
            hasForceUpdate = false;
            {
              currentlyProcessingQueue = queue.shared;
            }
            var firstBaseUpdate = queue.firstBaseUpdate;
            var lastBaseUpdate = queue.lastBaseUpdate;
            var pendingQueue = queue.shared.pending;
            if (pendingQueue !== null) {
              queue.shared.pending = null;
              var lastPendingUpdate = pendingQueue;
              var firstPendingUpdate = lastPendingUpdate.next;
              lastPendingUpdate.next = null;
              if (lastBaseUpdate === null) {
                firstBaseUpdate = firstPendingUpdate;
              } else {
                lastBaseUpdate.next = firstPendingUpdate;
              }
              lastBaseUpdate = lastPendingUpdate;
              var current2 = workInProgress2.alternate;
              if (current2 !== null) {
                var currentQueue = current2.updateQueue;
                var currentLastBaseUpdate = currentQueue.lastBaseUpdate;
                if (currentLastBaseUpdate !== lastBaseUpdate) {
                  if (currentLastBaseUpdate === null) {
                    currentQueue.firstBaseUpdate = firstPendingUpdate;
                  } else {
                    currentLastBaseUpdate.next = firstPendingUpdate;
                  }
                  currentQueue.lastBaseUpdate = lastPendingUpdate;
                }
              }
            }
            if (firstBaseUpdate !== null) {
              var newState = queue.baseState;
              var newLanes = NoLanes;
              var newBaseState = null;
              var newFirstBaseUpdate = null;
              var newLastBaseUpdate = null;
              var update = firstBaseUpdate;
              do {
                var updateLane = update.lane;
                var updateEventTime = update.eventTime;
                if (!isSubsetOfLanes(renderLanes2, updateLane)) {
                  var clone = {
                    eventTime: updateEventTime,
                    lane: updateLane,
                    tag: update.tag,
                    payload: update.payload,
                    callback: update.callback,
                    next: null
                  };
                  if (newLastBaseUpdate === null) {
                    newFirstBaseUpdate = newLastBaseUpdate = clone;
                    newBaseState = newState;
                  } else {
                    newLastBaseUpdate = newLastBaseUpdate.next = clone;
                  }
                  newLanes = mergeLanes(newLanes, updateLane);
                } else {
                  if (newLastBaseUpdate !== null) {
                    var _clone = {
                      eventTime: updateEventTime,
                      lane: NoLane,
                      tag: update.tag,
                      payload: update.payload,
                      callback: update.callback,
                      next: null
                    };
                    newLastBaseUpdate = newLastBaseUpdate.next = _clone;
                  }
                  newState = getStateFromUpdate(workInProgress2, queue, update, newState, props, instance);
                  var callback = update.callback;
                  if (callback !== null && update.lane !== NoLane) {
                    workInProgress2.flags |= Callback;
                    var effects = queue.effects;
                    if (effects === null) {
                      queue.effects = [update];
                    } else {
                      effects.push(update);
                    }
                  }
                }
                update = update.next;
                if (update === null) {
                  pendingQueue = queue.shared.pending;
                  if (pendingQueue === null) {
                    break;
                  } else {
                    var _lastPendingUpdate = pendingQueue;
                    var _firstPendingUpdate = _lastPendingUpdate.next;
                    _lastPendingUpdate.next = null;
                    update = _firstPendingUpdate;
                    queue.lastBaseUpdate = _lastPendingUpdate;
                    queue.shared.pending = null;
                  }
                }
              } while (true);
              if (newLastBaseUpdate === null) {
                newBaseState = newState;
              }
              queue.baseState = newBaseState;
              queue.firstBaseUpdate = newFirstBaseUpdate;
              queue.lastBaseUpdate = newLastBaseUpdate;
              var lastInterleaved = queue.shared.interleaved;
              if (lastInterleaved !== null) {
                var interleaved = lastInterleaved;
                do {
                  newLanes = mergeLanes(newLanes, interleaved.lane);
                  interleaved = interleaved.next;
                } while (interleaved !== lastInterleaved);
              } else if (firstBaseUpdate === null) {
                queue.shared.lanes = NoLanes;
              }
              markSkippedUpdateLanes(newLanes);
              workInProgress2.lanes = newLanes;
              workInProgress2.memoizedState = newState;
            }
            {
              currentlyProcessingQueue = null;
            }
          }
          function callCallback(callback, context) {
            if (typeof callback !== "function") {
              throw new Error("Invalid argument passed as callback. Expected a function. Instead " + ("received: " + callback));
            }
            callback.call(context);
          }
          function resetHasForceUpdateBeforeProcessing() {
            hasForceUpdate = false;
          }
          function checkHasForceUpdateAfterProcessing() {
            return hasForceUpdate;
          }
          function commitUpdateQueue(finishedWork, finishedQueue, instance) {
            var effects = finishedQueue.effects;
            finishedQueue.effects = null;
            if (effects !== null) {
              for (var i3 = 0; i3 < effects.length; i3++) {
                var effect = effects[i3];
                var callback = effect.callback;
                if (callback !== null) {
                  effect.callback = null;
                  callCallback(callback, instance);
                }
              }
            }
          }
          var fakeInternalInstance = {};
          var emptyRefsObject = new React35.Component().refs;
          var didWarnAboutStateAssignmentForComponent;
          var didWarnAboutUninitializedState;
          var didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate;
          var didWarnAboutLegacyLifecyclesAndDerivedState;
          var didWarnAboutUndefinedDerivedState;
          var warnOnUndefinedDerivedState;
          var warnOnInvalidCallback;
          var didWarnAboutDirectlyAssigningPropsToState;
          var didWarnAboutContextTypeAndContextTypes;
          var didWarnAboutInvalidateContextType;
          {
            didWarnAboutStateAssignmentForComponent = /* @__PURE__ */ new Set();
            didWarnAboutUninitializedState = /* @__PURE__ */ new Set();
            didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate = /* @__PURE__ */ new Set();
            didWarnAboutLegacyLifecyclesAndDerivedState = /* @__PURE__ */ new Set();
            didWarnAboutDirectlyAssigningPropsToState = /* @__PURE__ */ new Set();
            didWarnAboutUndefinedDerivedState = /* @__PURE__ */ new Set();
            didWarnAboutContextTypeAndContextTypes = /* @__PURE__ */ new Set();
            didWarnAboutInvalidateContextType = /* @__PURE__ */ new Set();
            var didWarnOnInvalidCallback = /* @__PURE__ */ new Set();
            warnOnInvalidCallback = function(callback, callerName) {
              if (callback === null || typeof callback === "function") {
                return;
              }
              var key = callerName + "_" + callback;
              if (!didWarnOnInvalidCallback.has(key)) {
                didWarnOnInvalidCallback.add(key);
                error("%s(...): Expected the last optional `callback` argument to be a function. Instead received: %s.", callerName, callback);
              }
            };
            warnOnUndefinedDerivedState = function(type, partialState) {
              if (partialState === void 0) {
                var componentName = getComponentNameFromType(type) || "Component";
                if (!didWarnAboutUndefinedDerivedState.has(componentName)) {
                  didWarnAboutUndefinedDerivedState.add(componentName);
                  error("%s.getDerivedStateFromProps(): A valid state object (or null) must be returned. You have returned undefined.", componentName);
                }
              }
            };
            Object.defineProperty(fakeInternalInstance, "_processChildContext", {
              enumerable: false,
              value: function() {
                throw new Error("_processChildContext is not available in React 16+. This likely means you have multiple copies of React and are attempting to nest a React 15 tree inside a React 16 tree using unstable_renderSubtreeIntoContainer, which isn't supported. Try to make sure you have only one copy of React (and ideally, switch to ReactDOM.createPortal).");
              }
            });
            Object.freeze(fakeInternalInstance);
          }
          function applyDerivedStateFromProps(workInProgress2, ctor, getDerivedStateFromProps, nextProps) {
            var prevState = workInProgress2.memoizedState;
            var partialState = getDerivedStateFromProps(nextProps, prevState);
            {
              if (workInProgress2.mode & StrictLegacyMode) {
                setIsStrictModeForDevtools(true);
                try {
                  partialState = getDerivedStateFromProps(nextProps, prevState);
                } finally {
                  setIsStrictModeForDevtools(false);
                }
              }
              warnOnUndefinedDerivedState(ctor, partialState);
            }
            var memoizedState = partialState === null || partialState === void 0 ? prevState : assign({}, prevState, partialState);
            workInProgress2.memoizedState = memoizedState;
            if (workInProgress2.lanes === NoLanes) {
              var updateQueue = workInProgress2.updateQueue;
              updateQueue.baseState = memoizedState;
            }
          }
          var classComponentUpdater = {
            isMounted,
            enqueueSetState: function(inst, payload, callback) {
              var fiber = get(inst);
              var eventTime = requestEventTime();
              var lane = requestUpdateLane(fiber);
              var update = createUpdate(eventTime, lane);
              update.payload = payload;
              if (callback !== void 0 && callback !== null) {
                {
                  warnOnInvalidCallback(callback, "setState");
                }
                update.callback = callback;
              }
              enqueueUpdate(fiber, update);
              var root3 = scheduleUpdateOnFiber(fiber, lane, eventTime);
              if (root3 !== null) {
                entangleTransitions(root3, fiber, lane);
              }
              {
                markStateUpdateScheduled(fiber, lane);
              }
            },
            enqueueReplaceState: function(inst, payload, callback) {
              var fiber = get(inst);
              var eventTime = requestEventTime();
              var lane = requestUpdateLane(fiber);
              var update = createUpdate(eventTime, lane);
              update.tag = ReplaceState;
              update.payload = payload;
              if (callback !== void 0 && callback !== null) {
                {
                  warnOnInvalidCallback(callback, "replaceState");
                }
                update.callback = callback;
              }
              enqueueUpdate(fiber, update);
              var root3 = scheduleUpdateOnFiber(fiber, lane, eventTime);
              if (root3 !== null) {
                entangleTransitions(root3, fiber, lane);
              }
              {
                markStateUpdateScheduled(fiber, lane);
              }
            },
            enqueueForceUpdate: function(inst, callback) {
              var fiber = get(inst);
              var eventTime = requestEventTime();
              var lane = requestUpdateLane(fiber);
              var update = createUpdate(eventTime, lane);
              update.tag = ForceUpdate;
              if (callback !== void 0 && callback !== null) {
                {
                  warnOnInvalidCallback(callback, "forceUpdate");
                }
                update.callback = callback;
              }
              enqueueUpdate(fiber, update);
              var root3 = scheduleUpdateOnFiber(fiber, lane, eventTime);
              if (root3 !== null) {
                entangleTransitions(root3, fiber, lane);
              }
              {
                markForceUpdateScheduled(fiber, lane);
              }
            }
          };
          function checkShouldComponentUpdate(workInProgress2, ctor, oldProps, newProps, oldState, newState, nextContext) {
            var instance = workInProgress2.stateNode;
            if (typeof instance.shouldComponentUpdate === "function") {
              var shouldUpdate = instance.shouldComponentUpdate(newProps, newState, nextContext);
              {
                if (workInProgress2.mode & StrictLegacyMode) {
                  setIsStrictModeForDevtools(true);
                  try {
                    shouldUpdate = instance.shouldComponentUpdate(newProps, newState, nextContext);
                  } finally {
                    setIsStrictModeForDevtools(false);
                  }
                }
                if (shouldUpdate === void 0) {
                  error("%s.shouldComponentUpdate(): Returned undefined instead of a boolean value. Make sure to return true or false.", getComponentNameFromType(ctor) || "Component");
                }
              }
              return shouldUpdate;
            }
            if (ctor.prototype && ctor.prototype.isPureReactComponent) {
              return !shallowEqual(oldProps, newProps) || !shallowEqual(oldState, newState);
            }
            return true;
          }
          function checkClassInstance(workInProgress2, ctor, newProps) {
            var instance = workInProgress2.stateNode;
            {
              var name = getComponentNameFromType(ctor) || "Component";
              var renderPresent = instance.render;
              if (!renderPresent) {
                if (ctor.prototype && typeof ctor.prototype.render === "function") {
                  error("%s(...): No `render` method found on the returned component instance: did you accidentally return an object from the constructor?", name);
                } else {
                  error("%s(...): No `render` method found on the returned component instance: you may have forgotten to define `render`.", name);
                }
              }
              if (instance.getInitialState && !instance.getInitialState.isReactClassApproved && !instance.state) {
                error("getInitialState was defined on %s, a plain JavaScript class. This is only supported for classes created using React.createClass. Did you mean to define a state property instead?", name);
              }
              if (instance.getDefaultProps && !instance.getDefaultProps.isReactClassApproved) {
                error("getDefaultProps was defined on %s, a plain JavaScript class. This is only supported for classes created using React.createClass. Use a static property to define defaultProps instead.", name);
              }
              if (instance.propTypes) {
                error("propTypes was defined as an instance property on %s. Use a static property to define propTypes instead.", name);
              }
              if (instance.contextType) {
                error("contextType was defined as an instance property on %s. Use a static property to define contextType instead.", name);
              }
              {
                if (instance.contextTypes) {
                  error("contextTypes was defined as an instance property on %s. Use a static property to define contextTypes instead.", name);
                }
                if (ctor.contextType && ctor.contextTypes && !didWarnAboutContextTypeAndContextTypes.has(ctor)) {
                  didWarnAboutContextTypeAndContextTypes.add(ctor);
                  error("%s declares both contextTypes and contextType static properties. The legacy contextTypes property will be ignored.", name);
                }
              }
              if (typeof instance.componentShouldUpdate === "function") {
                error("%s has a method called componentShouldUpdate(). Did you mean shouldComponentUpdate()? The name is phrased as a question because the function is expected to return a value.", name);
              }
              if (ctor.prototype && ctor.prototype.isPureReactComponent && typeof instance.shouldComponentUpdate !== "undefined") {
                error("%s has a method called shouldComponentUpdate(). shouldComponentUpdate should not be used when extending React.PureComponent. Please extend React.Component if shouldComponentUpdate is used.", getComponentNameFromType(ctor) || "A pure component");
              }
              if (typeof instance.componentDidUnmount === "function") {
                error("%s has a method called componentDidUnmount(). But there is no such lifecycle method. Did you mean componentWillUnmount()?", name);
              }
              if (typeof instance.componentDidReceiveProps === "function") {
                error("%s has a method called componentDidReceiveProps(). But there is no such lifecycle method. If you meant to update the state in response to changing props, use componentWillReceiveProps(). If you meant to fetch data or run side-effects or mutations after React has updated the UI, use componentDidUpdate().", name);
              }
              if (typeof instance.componentWillRecieveProps === "function") {
                error("%s has a method called componentWillRecieveProps(). Did you mean componentWillReceiveProps()?", name);
              }
              if (typeof instance.UNSAFE_componentWillRecieveProps === "function") {
                error("%s has a method called UNSAFE_componentWillRecieveProps(). Did you mean UNSAFE_componentWillReceiveProps()?", name);
              }
              var hasMutatedProps = instance.props !== newProps;
              if (instance.props !== void 0 && hasMutatedProps) {
                error("%s(...): When calling super() in `%s`, make sure to pass up the same props that your component's constructor was passed.", name, name);
              }
              if (instance.defaultProps) {
                error("Setting defaultProps as an instance property on %s is not supported and will be ignored. Instead, define defaultProps as a static property on %s.", name, name);
              }
              if (typeof instance.getSnapshotBeforeUpdate === "function" && typeof instance.componentDidUpdate !== "function" && !didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate.has(ctor)) {
                didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate.add(ctor);
                error("%s: getSnapshotBeforeUpdate() should be used with componentDidUpdate(). This component defines getSnapshotBeforeUpdate() only.", getComponentNameFromType(ctor));
              }
              if (typeof instance.getDerivedStateFromProps === "function") {
                error("%s: getDerivedStateFromProps() is defined as an instance method and will be ignored. Instead, declare it as a static method.", name);
              }
              if (typeof instance.getDerivedStateFromError === "function") {
                error("%s: getDerivedStateFromError() is defined as an instance method and will be ignored. Instead, declare it as a static method.", name);
              }
              if (typeof ctor.getSnapshotBeforeUpdate === "function") {
                error("%s: getSnapshotBeforeUpdate() is defined as a static method and will be ignored. Instead, declare it as an instance method.", name);
              }
              var _state = instance.state;
              if (_state && (typeof _state !== "object" || isArray(_state))) {
                error("%s.state: must be set to an object or null", name);
              }
              if (typeof instance.getChildContext === "function" && typeof ctor.childContextTypes !== "object") {
                error("%s.getChildContext(): childContextTypes must be defined in order to use getChildContext().", name);
              }
            }
          }
          function adoptClassInstance(workInProgress2, instance) {
            instance.updater = classComponentUpdater;
            workInProgress2.stateNode = instance;
            set(instance, workInProgress2);
            {
              instance._reactInternalInstance = fakeInternalInstance;
            }
          }
          function constructClassInstance(workInProgress2, ctor, props) {
            var isLegacyContextConsumer = false;
            var unmaskedContext = emptyContextObject;
            var context = emptyContextObject;
            var contextType = ctor.contextType;
            {
              if ("contextType" in ctor) {
                var isValid = contextType === null || contextType !== void 0 && contextType.$$typeof === REACT_CONTEXT_TYPE && contextType._context === void 0;
                if (!isValid && !didWarnAboutInvalidateContextType.has(ctor)) {
                  didWarnAboutInvalidateContextType.add(ctor);
                  var addendum = "";
                  if (contextType === void 0) {
                    addendum = " However, it is set to undefined. This can be caused by a typo or by mixing up named and default imports. This can also happen due to a circular dependency, so try moving the createContext() call to a separate file.";
                  } else if (typeof contextType !== "object") {
                    addendum = " However, it is set to a " + typeof contextType + ".";
                  } else if (contextType.$$typeof === REACT_PROVIDER_TYPE) {
                    addendum = " Did you accidentally pass the Context.Provider instead?";
                  } else if (contextType._context !== void 0) {
                    addendum = " Did you accidentally pass the Context.Consumer instead?";
                  } else {
                    addendum = " However, it is set to an object with keys {" + Object.keys(contextType).join(", ") + "}.";
                  }
                  error("%s defines an invalid contextType. contextType should point to the Context object returned by React.createContext().%s", getComponentNameFromType(ctor) || "Component", addendum);
                }
              }
            }
            if (typeof contextType === "object" && contextType !== null) {
              context = readContext(contextType);
            } else {
              unmaskedContext = getUnmaskedContext(workInProgress2, ctor, true);
              var contextTypes = ctor.contextTypes;
              isLegacyContextConsumer = contextTypes !== null && contextTypes !== void 0;
              context = isLegacyContextConsumer ? getMaskedContext(workInProgress2, unmaskedContext) : emptyContextObject;
            }
            var instance = new ctor(props, context);
            {
              if (workInProgress2.mode & StrictLegacyMode) {
                setIsStrictModeForDevtools(true);
                try {
                  instance = new ctor(props, context);
                } finally {
                  setIsStrictModeForDevtools(false);
                }
              }
            }
            var state = workInProgress2.memoizedState = instance.state !== null && instance.state !== void 0 ? instance.state : null;
            adoptClassInstance(workInProgress2, instance);
            {
              if (typeof ctor.getDerivedStateFromProps === "function" && state === null) {
                var componentName = getComponentNameFromType(ctor) || "Component";
                if (!didWarnAboutUninitializedState.has(componentName)) {
                  didWarnAboutUninitializedState.add(componentName);
                  error("`%s` uses `getDerivedStateFromProps` but its initial state is %s. This is not recommended. Instead, define the initial state by assigning an object to `this.state` in the constructor of `%s`. This ensures that `getDerivedStateFromProps` arguments have a consistent shape.", componentName, instance.state === null ? "null" : "undefined", componentName);
                }
              }
              if (typeof ctor.getDerivedStateFromProps === "function" || typeof instance.getSnapshotBeforeUpdate === "function") {
                var foundWillMountName = null;
                var foundWillReceivePropsName = null;
                var foundWillUpdateName = null;
                if (typeof instance.componentWillMount === "function" && instance.componentWillMount.__suppressDeprecationWarning !== true) {
                  foundWillMountName = "componentWillMount";
                } else if (typeof instance.UNSAFE_componentWillMount === "function") {
                  foundWillMountName = "UNSAFE_componentWillMount";
                }
                if (typeof instance.componentWillReceiveProps === "function" && instance.componentWillReceiveProps.__suppressDeprecationWarning !== true) {
                  foundWillReceivePropsName = "componentWillReceiveProps";
                } else if (typeof instance.UNSAFE_componentWillReceiveProps === "function") {
                  foundWillReceivePropsName = "UNSAFE_componentWillReceiveProps";
                }
                if (typeof instance.componentWillUpdate === "function" && instance.componentWillUpdate.__suppressDeprecationWarning !== true) {
                  foundWillUpdateName = "componentWillUpdate";
                } else if (typeof instance.UNSAFE_componentWillUpdate === "function") {
                  foundWillUpdateName = "UNSAFE_componentWillUpdate";
                }
                if (foundWillMountName !== null || foundWillReceivePropsName !== null || foundWillUpdateName !== null) {
                  var _componentName = getComponentNameFromType(ctor) || "Component";
                  var newApiName = typeof ctor.getDerivedStateFromProps === "function" ? "getDerivedStateFromProps()" : "getSnapshotBeforeUpdate()";
                  if (!didWarnAboutLegacyLifecyclesAndDerivedState.has(_componentName)) {
                    didWarnAboutLegacyLifecyclesAndDerivedState.add(_componentName);
                    error("Unsafe legacy lifecycles will not be called for components using new component APIs.\n\n%s uses %s but also contains the following legacy lifecycles:%s%s%s\n\nThe above lifecycles should be removed. Learn more about this warning here:\nhttps://reactjs.org/link/unsafe-component-lifecycles", _componentName, newApiName, foundWillMountName !== null ? "\n  " + foundWillMountName : "", foundWillReceivePropsName !== null ? "\n  " + foundWillReceivePropsName : "", foundWillUpdateName !== null ? "\n  " + foundWillUpdateName : "");
                  }
                }
              }
            }
            if (isLegacyContextConsumer) {
              cacheContext(workInProgress2, unmaskedContext, context);
            }
            return instance;
          }
          function callComponentWillMount(workInProgress2, instance) {
            var oldState = instance.state;
            if (typeof instance.componentWillMount === "function") {
              instance.componentWillMount();
            }
            if (typeof instance.UNSAFE_componentWillMount === "function") {
              instance.UNSAFE_componentWillMount();
            }
            if (oldState !== instance.state) {
              {
                error("%s.componentWillMount(): Assigning directly to this.state is deprecated (except inside a component's constructor). Use setState instead.", getComponentNameFromFiber(workInProgress2) || "Component");
              }
              classComponentUpdater.enqueueReplaceState(instance, instance.state, null);
            }
          }
          function callComponentWillReceiveProps(workInProgress2, instance, newProps, nextContext) {
            var oldState = instance.state;
            if (typeof instance.componentWillReceiveProps === "function") {
              instance.componentWillReceiveProps(newProps, nextContext);
            }
            if (typeof instance.UNSAFE_componentWillReceiveProps === "function") {
              instance.UNSAFE_componentWillReceiveProps(newProps, nextContext);
            }
            if (instance.state !== oldState) {
              {
                var componentName = getComponentNameFromFiber(workInProgress2) || "Component";
                if (!didWarnAboutStateAssignmentForComponent.has(componentName)) {
                  didWarnAboutStateAssignmentForComponent.add(componentName);
                  error("%s.componentWillReceiveProps(): Assigning directly to this.state is deprecated (except inside a component's constructor). Use setState instead.", componentName);
                }
              }
              classComponentUpdater.enqueueReplaceState(instance, instance.state, null);
            }
          }
          function mountClassInstance(workInProgress2, ctor, newProps, renderLanes2) {
            {
              checkClassInstance(workInProgress2, ctor, newProps);
            }
            var instance = workInProgress2.stateNode;
            instance.props = newProps;
            instance.state = workInProgress2.memoizedState;
            instance.refs = emptyRefsObject;
            initializeUpdateQueue(workInProgress2);
            var contextType = ctor.contextType;
            if (typeof contextType === "object" && contextType !== null) {
              instance.context = readContext(contextType);
            } else {
              var unmaskedContext = getUnmaskedContext(workInProgress2, ctor, true);
              instance.context = getMaskedContext(workInProgress2, unmaskedContext);
            }
            {
              if (instance.state === newProps) {
                var componentName = getComponentNameFromType(ctor) || "Component";
                if (!didWarnAboutDirectlyAssigningPropsToState.has(componentName)) {
                  didWarnAboutDirectlyAssigningPropsToState.add(componentName);
                  error("%s: It is not recommended to assign props directly to state because updates to props won't be reflected in state. In most cases, it is better to use props directly.", componentName);
                }
              }
              if (workInProgress2.mode & StrictLegacyMode) {
                ReactStrictModeWarnings.recordLegacyContextWarning(workInProgress2, instance);
              }
              {
                ReactStrictModeWarnings.recordUnsafeLifecycleWarnings(workInProgress2, instance);
              }
            }
            instance.state = workInProgress2.memoizedState;
            var getDerivedStateFromProps = ctor.getDerivedStateFromProps;
            if (typeof getDerivedStateFromProps === "function") {
              applyDerivedStateFromProps(workInProgress2, ctor, getDerivedStateFromProps, newProps);
              instance.state = workInProgress2.memoizedState;
            }
            if (typeof ctor.getDerivedStateFromProps !== "function" && typeof instance.getSnapshotBeforeUpdate !== "function" && (typeof instance.UNSAFE_componentWillMount === "function" || typeof instance.componentWillMount === "function")) {
              callComponentWillMount(workInProgress2, instance);
              processUpdateQueue(workInProgress2, newProps, instance, renderLanes2);
              instance.state = workInProgress2.memoizedState;
            }
            if (typeof instance.componentDidMount === "function") {
              var fiberFlags = Update;
              {
                fiberFlags |= LayoutStatic;
              }
              if ((workInProgress2.mode & StrictEffectsMode) !== NoMode) {
                fiberFlags |= MountLayoutDev;
              }
              workInProgress2.flags |= fiberFlags;
            }
          }
          function resumeMountClassInstance(workInProgress2, ctor, newProps, renderLanes2) {
            var instance = workInProgress2.stateNode;
            var oldProps = workInProgress2.memoizedProps;
            instance.props = oldProps;
            var oldContext = instance.context;
            var contextType = ctor.contextType;
            var nextContext = emptyContextObject;
            if (typeof contextType === "object" && contextType !== null) {
              nextContext = readContext(contextType);
            } else {
              var nextLegacyUnmaskedContext = getUnmaskedContext(workInProgress2, ctor, true);
              nextContext = getMaskedContext(workInProgress2, nextLegacyUnmaskedContext);
            }
            var getDerivedStateFromProps = ctor.getDerivedStateFromProps;
            var hasNewLifecycles = typeof getDerivedStateFromProps === "function" || typeof instance.getSnapshotBeforeUpdate === "function";
            if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillReceiveProps === "function" || typeof instance.componentWillReceiveProps === "function")) {
              if (oldProps !== newProps || oldContext !== nextContext) {
                callComponentWillReceiveProps(workInProgress2, instance, newProps, nextContext);
              }
            }
            resetHasForceUpdateBeforeProcessing();
            var oldState = workInProgress2.memoizedState;
            var newState = instance.state = oldState;
            processUpdateQueue(workInProgress2, newProps, instance, renderLanes2);
            newState = workInProgress2.memoizedState;
            if (oldProps === newProps && oldState === newState && !hasContextChanged() && !checkHasForceUpdateAfterProcessing()) {
              if (typeof instance.componentDidMount === "function") {
                var fiberFlags = Update;
                {
                  fiberFlags |= LayoutStatic;
                }
                if ((workInProgress2.mode & StrictEffectsMode) !== NoMode) {
                  fiberFlags |= MountLayoutDev;
                }
                workInProgress2.flags |= fiberFlags;
              }
              return false;
            }
            if (typeof getDerivedStateFromProps === "function") {
              applyDerivedStateFromProps(workInProgress2, ctor, getDerivedStateFromProps, newProps);
              newState = workInProgress2.memoizedState;
            }
            var shouldUpdate = checkHasForceUpdateAfterProcessing() || checkShouldComponentUpdate(workInProgress2, ctor, oldProps, newProps, oldState, newState, nextContext);
            if (shouldUpdate) {
              if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillMount === "function" || typeof instance.componentWillMount === "function")) {
                if (typeof instance.componentWillMount === "function") {
                  instance.componentWillMount();
                }
                if (typeof instance.UNSAFE_componentWillMount === "function") {
                  instance.UNSAFE_componentWillMount();
                }
              }
              if (typeof instance.componentDidMount === "function") {
                var _fiberFlags = Update;
                {
                  _fiberFlags |= LayoutStatic;
                }
                if ((workInProgress2.mode & StrictEffectsMode) !== NoMode) {
                  _fiberFlags |= MountLayoutDev;
                }
                workInProgress2.flags |= _fiberFlags;
              }
            } else {
              if (typeof instance.componentDidMount === "function") {
                var _fiberFlags2 = Update;
                {
                  _fiberFlags2 |= LayoutStatic;
                }
                if ((workInProgress2.mode & StrictEffectsMode) !== NoMode) {
                  _fiberFlags2 |= MountLayoutDev;
                }
                workInProgress2.flags |= _fiberFlags2;
              }
              workInProgress2.memoizedProps = newProps;
              workInProgress2.memoizedState = newState;
            }
            instance.props = newProps;
            instance.state = newState;
            instance.context = nextContext;
            return shouldUpdate;
          }
          function updateClassInstance(current2, workInProgress2, ctor, newProps, renderLanes2) {
            var instance = workInProgress2.stateNode;
            cloneUpdateQueue(current2, workInProgress2);
            var unresolvedOldProps = workInProgress2.memoizedProps;
            var oldProps = workInProgress2.type === workInProgress2.elementType ? unresolvedOldProps : resolveDefaultProps(workInProgress2.type, unresolvedOldProps);
            instance.props = oldProps;
            var unresolvedNewProps = workInProgress2.pendingProps;
            var oldContext = instance.context;
            var contextType = ctor.contextType;
            var nextContext = emptyContextObject;
            if (typeof contextType === "object" && contextType !== null) {
              nextContext = readContext(contextType);
            } else {
              var nextUnmaskedContext = getUnmaskedContext(workInProgress2, ctor, true);
              nextContext = getMaskedContext(workInProgress2, nextUnmaskedContext);
            }
            var getDerivedStateFromProps = ctor.getDerivedStateFromProps;
            var hasNewLifecycles = typeof getDerivedStateFromProps === "function" || typeof instance.getSnapshotBeforeUpdate === "function";
            if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillReceiveProps === "function" || typeof instance.componentWillReceiveProps === "function")) {
              if (unresolvedOldProps !== unresolvedNewProps || oldContext !== nextContext) {
                callComponentWillReceiveProps(workInProgress2, instance, newProps, nextContext);
              }
            }
            resetHasForceUpdateBeforeProcessing();
            var oldState = workInProgress2.memoizedState;
            var newState = instance.state = oldState;
            processUpdateQueue(workInProgress2, newProps, instance, renderLanes2);
            newState = workInProgress2.memoizedState;
            if (unresolvedOldProps === unresolvedNewProps && oldState === newState && !hasContextChanged() && !checkHasForceUpdateAfterProcessing() && !enableLazyContextPropagation) {
              if (typeof instance.componentDidUpdate === "function") {
                if (unresolvedOldProps !== current2.memoizedProps || oldState !== current2.memoizedState) {
                  workInProgress2.flags |= Update;
                }
              }
              if (typeof instance.getSnapshotBeforeUpdate === "function") {
                if (unresolvedOldProps !== current2.memoizedProps || oldState !== current2.memoizedState) {
                  workInProgress2.flags |= Snapshot;
                }
              }
              return false;
            }
            if (typeof getDerivedStateFromProps === "function") {
              applyDerivedStateFromProps(workInProgress2, ctor, getDerivedStateFromProps, newProps);
              newState = workInProgress2.memoizedState;
            }
            var shouldUpdate = checkHasForceUpdateAfterProcessing() || checkShouldComponentUpdate(workInProgress2, ctor, oldProps, newProps, oldState, newState, nextContext) || enableLazyContextPropagation;
            if (shouldUpdate) {
              if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillUpdate === "function" || typeof instance.componentWillUpdate === "function")) {
                if (typeof instance.componentWillUpdate === "function") {
                  instance.componentWillUpdate(newProps, newState, nextContext);
                }
                if (typeof instance.UNSAFE_componentWillUpdate === "function") {
                  instance.UNSAFE_componentWillUpdate(newProps, newState, nextContext);
                }
              }
              if (typeof instance.componentDidUpdate === "function") {
                workInProgress2.flags |= Update;
              }
              if (typeof instance.getSnapshotBeforeUpdate === "function") {
                workInProgress2.flags |= Snapshot;
              }
            } else {
              if (typeof instance.componentDidUpdate === "function") {
                if (unresolvedOldProps !== current2.memoizedProps || oldState !== current2.memoizedState) {
                  workInProgress2.flags |= Update;
                }
              }
              if (typeof instance.getSnapshotBeforeUpdate === "function") {
                if (unresolvedOldProps !== current2.memoizedProps || oldState !== current2.memoizedState) {
                  workInProgress2.flags |= Snapshot;
                }
              }
              workInProgress2.memoizedProps = newProps;
              workInProgress2.memoizedState = newState;
            }
            instance.props = newProps;
            instance.state = newState;
            instance.context = nextContext;
            return shouldUpdate;
          }
          var forkStack = [];
          var forkStackIndex = 0;
          var treeForkProvider = null;
          var treeForkCount = 0;
          var idStack = [];
          var idStackIndex = 0;
          var treeContextProvider = null;
          var treeContextId = 1;
          var treeContextOverflow = "";
          function isForkedChild(workInProgress2) {
            warnIfNotHydrating();
            return (workInProgress2.flags & Forked) !== NoFlags;
          }
          function getForksAtLevel(workInProgress2) {
            warnIfNotHydrating();
            return treeForkCount;
          }
          function getTreeId() {
            var overflow = treeContextOverflow;
            var idWithLeadingBit = treeContextId;
            var id = idWithLeadingBit & ~getLeadingBit(idWithLeadingBit);
            return id.toString(32) + overflow;
          }
          function pushTreeFork(workInProgress2, totalChildren) {
            warnIfNotHydrating();
            forkStack[forkStackIndex++] = treeForkCount;
            forkStack[forkStackIndex++] = treeForkProvider;
            treeForkProvider = workInProgress2;
            treeForkCount = totalChildren;
          }
          function pushTreeId(workInProgress2, totalChildren, index2) {
            warnIfNotHydrating();
            idStack[idStackIndex++] = treeContextId;
            idStack[idStackIndex++] = treeContextOverflow;
            idStack[idStackIndex++] = treeContextProvider;
            treeContextProvider = workInProgress2;
            var baseIdWithLeadingBit = treeContextId;
            var baseOverflow = treeContextOverflow;
            var baseLength = getBitLength(baseIdWithLeadingBit) - 1;
            var baseId = baseIdWithLeadingBit & ~(1 << baseLength);
            var slot = index2 + 1;
            var length = getBitLength(totalChildren) + baseLength;
            if (length > 30) {
              var numberOfOverflowBits = baseLength - baseLength % 5;
              var newOverflowBits = (1 << numberOfOverflowBits) - 1;
              var newOverflow = (baseId & newOverflowBits).toString(32);
              var restOfBaseId = baseId >> numberOfOverflowBits;
              var restOfBaseLength = baseLength - numberOfOverflowBits;
              var restOfLength = getBitLength(totalChildren) + restOfBaseLength;
              var restOfNewBits = slot << restOfBaseLength;
              var id = restOfNewBits | restOfBaseId;
              var overflow = newOverflow + baseOverflow;
              treeContextId = 1 << restOfLength | id;
              treeContextOverflow = overflow;
            } else {
              var newBits = slot << baseLength;
              var _id = newBits | baseId;
              var _overflow = baseOverflow;
              treeContextId = 1 << length | _id;
              treeContextOverflow = _overflow;
            }
          }
          function pushMaterializedTreeId(workInProgress2) {
            warnIfNotHydrating();
            var returnFiber = workInProgress2.return;
            if (returnFiber !== null) {
              var numberOfForks = 1;
              var slotIndex = 0;
              pushTreeFork(workInProgress2, numberOfForks);
              pushTreeId(workInProgress2, numberOfForks, slotIndex);
            }
          }
          function getBitLength(number) {
            return 32 - clz32(number);
          }
          function getLeadingBit(id) {
            return 1 << getBitLength(id) - 1;
          }
          function popTreeContext(workInProgress2) {
            while (workInProgress2 === treeForkProvider) {
              treeForkProvider = forkStack[--forkStackIndex];
              forkStack[forkStackIndex] = null;
              treeForkCount = forkStack[--forkStackIndex];
              forkStack[forkStackIndex] = null;
            }
            while (workInProgress2 === treeContextProvider) {
              treeContextProvider = idStack[--idStackIndex];
              idStack[idStackIndex] = null;
              treeContextOverflow = idStack[--idStackIndex];
              idStack[idStackIndex] = null;
              treeContextId = idStack[--idStackIndex];
              idStack[idStackIndex] = null;
            }
          }
          function getSuspendedTreeContext() {
            warnIfNotHydrating();
            if (treeContextProvider !== null) {
              return {
                id: treeContextId,
                overflow: treeContextOverflow
              };
            } else {
              return null;
            }
          }
          function restoreSuspendedTreeContext(workInProgress2, suspendedContext) {
            warnIfNotHydrating();
            idStack[idStackIndex++] = treeContextId;
            idStack[idStackIndex++] = treeContextOverflow;
            idStack[idStackIndex++] = treeContextProvider;
            treeContextId = suspendedContext.id;
            treeContextOverflow = suspendedContext.overflow;
            treeContextProvider = workInProgress2;
          }
          function warnIfNotHydrating() {
            {
              if (!getIsHydrating()) {
                error("Expected to be hydrating. This is a bug in React. Please file an issue.");
              }
            }
          }
          var hydrationParentFiber = null;
          var nextHydratableInstance = null;
          var isHydrating = false;
          var didSuspend = false;
          var hydrationErrors = null;
          function warnIfHydrating() {
            {
              if (isHydrating) {
                error("We should not be hydrating here. This is a bug in React. Please file a bug.");
              }
            }
          }
          function markDidSuspendWhileHydratingDEV() {
            {
              didSuspend = true;
            }
          }
          function enterHydrationState(fiber) {
            var parentInstance = fiber.stateNode.containerInfo;
            nextHydratableInstance = getFirstHydratableChildWithinContainer(parentInstance);
            hydrationParentFiber = fiber;
            isHydrating = true;
            hydrationErrors = null;
            didSuspend = false;
            return true;
          }
          function reenterHydrationStateFromDehydratedSuspenseInstance(fiber, suspenseInstance, treeContext) {
            nextHydratableInstance = getFirstHydratableChildWithinSuspenseInstance(suspenseInstance);
            hydrationParentFiber = fiber;
            isHydrating = true;
            hydrationErrors = null;
            didSuspend = false;
            if (treeContext !== null) {
              restoreSuspendedTreeContext(fiber, treeContext);
            }
            return true;
          }
          function warnUnhydratedInstance(returnFiber, instance) {
            {
              switch (returnFiber.tag) {
                case HostRoot:
                  didNotHydrateInstanceWithinContainer(returnFiber.stateNode.containerInfo, instance);
                  break;
                case HostComponent:
                  didNotHydrateInstance(returnFiber.type, returnFiber.memoizedProps, returnFiber.stateNode, instance);
                  break;
                case SuspenseComponent:
                  var suspenseState = returnFiber.memoizedState;
                  if (suspenseState.dehydrated !== null)
                    didNotHydrateInstanceWithinSuspenseInstance(suspenseState.dehydrated, instance);
                  break;
              }
            }
          }
          function deleteHydratableInstance(returnFiber, instance) {
            warnUnhydratedInstance(returnFiber, instance);
            var childToDelete = createFiberFromHostInstanceForDeletion();
            childToDelete.stateNode = instance;
            childToDelete.return = returnFiber;
            var deletions = returnFiber.deletions;
            if (deletions === null) {
              returnFiber.deletions = [childToDelete];
              returnFiber.flags |= ChildDeletion;
            } else {
              deletions.push(childToDelete);
            }
          }
          function warnNonhydratedInstance(returnFiber, fiber) {
            {
              if (didSuspend) {
                return;
              }
              switch (returnFiber.tag) {
                case HostRoot: {
                  var parentContainer = returnFiber.stateNode.containerInfo;
                  switch (fiber.tag) {
                    case HostComponent:
                      var type = fiber.type;
                      var props = fiber.pendingProps;
                      didNotFindHydratableInstanceWithinContainer(parentContainer, type);
                      break;
                    case HostText:
                      var text = fiber.pendingProps;
                      didNotFindHydratableTextInstanceWithinContainer(parentContainer, text);
                      break;
                  }
                  break;
                }
                case HostComponent: {
                  var parentType = returnFiber.type;
                  var parentProps = returnFiber.memoizedProps;
                  var parentInstance = returnFiber.stateNode;
                  switch (fiber.tag) {
                    case HostComponent:
                      var _type = fiber.type;
                      var _props = fiber.pendingProps;
                      didNotFindHydratableInstance(parentType, parentProps, parentInstance, _type);
                      break;
                    case HostText:
                      var _text = fiber.pendingProps;
                      didNotFindHydratableTextInstance(parentType, parentProps, parentInstance, _text);
                      break;
                    case SuspenseComponent:
                      didNotFindHydratableSuspenseInstance(parentType, parentProps);
                      break;
                  }
                  break;
                }
                case SuspenseComponent: {
                  var suspenseState = returnFiber.memoizedState;
                  var _parentInstance = suspenseState.dehydrated;
                  if (_parentInstance !== null)
                    switch (fiber.tag) {
                      case HostComponent:
                        var _type2 = fiber.type;
                        var _props2 = fiber.pendingProps;
                        didNotFindHydratableInstanceWithinSuspenseInstance(_parentInstance, _type2);
                        break;
                      case HostText:
                        var _text2 = fiber.pendingProps;
                        didNotFindHydratableTextInstanceWithinSuspenseInstance(_parentInstance, _text2);
                        break;
                    }
                  break;
                }
                default:
                  return;
              }
            }
          }
          function insertNonHydratedInstance(returnFiber, fiber) {
            fiber.flags = fiber.flags & ~Hydrating | Placement;
            warnNonhydratedInstance(returnFiber, fiber);
          }
          function tryHydrate(fiber, nextInstance) {
            switch (fiber.tag) {
              case HostComponent: {
                var type = fiber.type;
                var props = fiber.pendingProps;
                var instance = canHydrateInstance(nextInstance, type);
                if (instance !== null) {
                  fiber.stateNode = instance;
                  hydrationParentFiber = fiber;
                  nextHydratableInstance = getFirstHydratableChild(instance);
                  return true;
                }
                return false;
              }
              case HostText: {
                var text = fiber.pendingProps;
                var textInstance = canHydrateTextInstance(nextInstance, text);
                if (textInstance !== null) {
                  fiber.stateNode = textInstance;
                  hydrationParentFiber = fiber;
                  nextHydratableInstance = null;
                  return true;
                }
                return false;
              }
              case SuspenseComponent: {
                {
                  var suspenseInstance = canHydrateSuspenseInstance(nextInstance);
                  if (suspenseInstance !== null) {
                    var suspenseState = {
                      dehydrated: suspenseInstance,
                      treeContext: getSuspendedTreeContext(),
                      retryLane: OffscreenLane
                    };
                    fiber.memoizedState = suspenseState;
                    var dehydratedFragment = createFiberFromDehydratedFragment(suspenseInstance);
                    dehydratedFragment.return = fiber;
                    fiber.child = dehydratedFragment;
                    hydrationParentFiber = fiber;
                    nextHydratableInstance = null;
                    return true;
                  }
                }
                return false;
              }
              default:
                return false;
            }
          }
          function shouldClientRenderOnMismatch(fiber) {
            return (fiber.mode & ConcurrentMode) !== NoMode && (fiber.flags & DidCapture) === NoFlags;
          }
          function throwOnHydrationMismatch(fiber) {
            throw new Error("Hydration failed because the initial UI does not match what was rendered on the server.");
          }
          function tryToClaimNextHydratableInstance(fiber) {
            if (!isHydrating) {
              return;
            }
            var nextInstance = nextHydratableInstance;
            if (!nextInstance) {
              if (shouldClientRenderOnMismatch(fiber)) {
                warnNonhydratedInstance(hydrationParentFiber, fiber);
                throwOnHydrationMismatch();
              }
              insertNonHydratedInstance(hydrationParentFiber, fiber);
              isHydrating = false;
              hydrationParentFiber = fiber;
              return;
            }
            var firstAttemptedInstance = nextInstance;
            if (!tryHydrate(fiber, nextInstance)) {
              if (shouldClientRenderOnMismatch(fiber)) {
                warnNonhydratedInstance(hydrationParentFiber, fiber);
                throwOnHydrationMismatch();
              }
              nextInstance = getNextHydratableSibling(firstAttemptedInstance);
              var prevHydrationParentFiber = hydrationParentFiber;
              if (!nextInstance || !tryHydrate(fiber, nextInstance)) {
                insertNonHydratedInstance(hydrationParentFiber, fiber);
                isHydrating = false;
                hydrationParentFiber = fiber;
                return;
              }
              deleteHydratableInstance(prevHydrationParentFiber, firstAttemptedInstance);
            }
          }
          function prepareToHydrateHostInstance(fiber, rootContainerInstance, hostContext) {
            var instance = fiber.stateNode;
            var shouldWarnIfMismatchDev = !didSuspend;
            var updatePayload = hydrateInstance(instance, fiber.type, fiber.memoizedProps, rootContainerInstance, hostContext, fiber, shouldWarnIfMismatchDev);
            fiber.updateQueue = updatePayload;
            if (updatePayload !== null) {
              return true;
            }
            return false;
          }
          function prepareToHydrateHostTextInstance(fiber) {
            var textInstance = fiber.stateNode;
            var textContent = fiber.memoizedProps;
            var shouldUpdate = hydrateTextInstance(textInstance, textContent, fiber);
            if (shouldUpdate) {
              var returnFiber = hydrationParentFiber;
              if (returnFiber !== null) {
                var isConcurrentMode = (returnFiber.mode & ConcurrentMode) !== NoMode;
                switch (returnFiber.tag) {
                  case HostRoot: {
                    var parentContainer = returnFiber.stateNode.containerInfo;
                    didNotMatchHydratedContainerTextInstance(parentContainer, textInstance, textContent, isConcurrentMode);
                    break;
                  }
                  case HostComponent: {
                    var parentType = returnFiber.type;
                    var parentProps = returnFiber.memoizedProps;
                    var parentInstance = returnFiber.stateNode;
                    didNotMatchHydratedTextInstance(parentType, parentProps, parentInstance, textInstance, textContent, isConcurrentMode);
                    break;
                  }
                }
              }
            }
            return shouldUpdate;
          }
          function prepareToHydrateHostSuspenseInstance(fiber) {
            var suspenseState = fiber.memoizedState;
            var suspenseInstance = suspenseState !== null ? suspenseState.dehydrated : null;
            if (!suspenseInstance) {
              throw new Error("Expected to have a hydrated suspense instance. This error is likely caused by a bug in React. Please file an issue.");
            }
            hydrateSuspenseInstance(suspenseInstance, fiber);
          }
          function skipPastDehydratedSuspenseInstance(fiber) {
            var suspenseState = fiber.memoizedState;
            var suspenseInstance = suspenseState !== null ? suspenseState.dehydrated : null;
            if (!suspenseInstance) {
              throw new Error("Expected to have a hydrated suspense instance. This error is likely caused by a bug in React. Please file an issue.");
            }
            return getNextHydratableInstanceAfterSuspenseInstance(suspenseInstance);
          }
          function popToNextHostParent(fiber) {
            var parent = fiber.return;
            while (parent !== null && parent.tag !== HostComponent && parent.tag !== HostRoot && parent.tag !== SuspenseComponent) {
              parent = parent.return;
            }
            hydrationParentFiber = parent;
          }
          function popHydrationState(fiber) {
            if (fiber !== hydrationParentFiber) {
              return false;
            }
            if (!isHydrating) {
              popToNextHostParent(fiber);
              isHydrating = true;
              return false;
            }
            if (fiber.tag !== HostRoot && (fiber.tag !== HostComponent || shouldDeleteUnhydratedTailInstances(fiber.type) && !shouldSetTextContent(fiber.type, fiber.memoizedProps))) {
              var nextInstance = nextHydratableInstance;
              if (nextInstance) {
                if (shouldClientRenderOnMismatch(fiber)) {
                  warnIfUnhydratedTailNodes(fiber);
                  throwOnHydrationMismatch();
                } else {
                  while (nextInstance) {
                    deleteHydratableInstance(fiber, nextInstance);
                    nextInstance = getNextHydratableSibling(nextInstance);
                  }
                }
              }
            }
            popToNextHostParent(fiber);
            if (fiber.tag === SuspenseComponent) {
              nextHydratableInstance = skipPastDehydratedSuspenseInstance(fiber);
            } else {
              nextHydratableInstance = hydrationParentFiber ? getNextHydratableSibling(fiber.stateNode) : null;
            }
            return true;
          }
          function hasUnhydratedTailNodes() {
            return isHydrating && nextHydratableInstance !== null;
          }
          function warnIfUnhydratedTailNodes(fiber) {
            var nextInstance = nextHydratableInstance;
            while (nextInstance) {
              warnUnhydratedInstance(fiber, nextInstance);
              nextInstance = getNextHydratableSibling(nextInstance);
            }
          }
          function resetHydrationState() {
            hydrationParentFiber = null;
            nextHydratableInstance = null;
            isHydrating = false;
            didSuspend = false;
          }
          function upgradeHydrationErrorsToRecoverable() {
            if (hydrationErrors !== null) {
              queueRecoverableErrors(hydrationErrors);
              hydrationErrors = null;
            }
          }
          function getIsHydrating() {
            return isHydrating;
          }
          function queueHydrationError(error2) {
            if (hydrationErrors === null) {
              hydrationErrors = [error2];
            } else {
              hydrationErrors.push(error2);
            }
          }
          var didWarnAboutMaps;
          var didWarnAboutGenerators;
          var didWarnAboutStringRefs;
          var ownerHasKeyUseWarning;
          var ownerHasFunctionTypeWarning;
          var warnForMissingKey = function(child, returnFiber) {
          };
          {
            didWarnAboutMaps = false;
            didWarnAboutGenerators = false;
            didWarnAboutStringRefs = {};
            ownerHasKeyUseWarning = {};
            ownerHasFunctionTypeWarning = {};
            warnForMissingKey = function(child, returnFiber) {
              if (child === null || typeof child !== "object") {
                return;
              }
              if (!child._store || child._store.validated || child.key != null) {
                return;
              }
              if (typeof child._store !== "object") {
                throw new Error("React Component in warnForMissingKey should have a _store. This error is likely caused by a bug in React. Please file an issue.");
              }
              child._store.validated = true;
              var componentName = getComponentNameFromFiber(returnFiber) || "Component";
              if (ownerHasKeyUseWarning[componentName]) {
                return;
              }
              ownerHasKeyUseWarning[componentName] = true;
              error('Each child in a list should have a unique "key" prop. See https://reactjs.org/link/warning-keys for more information.');
            };
          }
          function coerceRef(returnFiber, current2, element) {
            var mixedRef = element.ref;
            if (mixedRef !== null && typeof mixedRef !== "function" && typeof mixedRef !== "object") {
              {
                if ((returnFiber.mode & StrictLegacyMode || warnAboutStringRefs) && !(element._owner && element._self && element._owner.stateNode !== element._self)) {
                  var componentName = getComponentNameFromFiber(returnFiber) || "Component";
                  if (!didWarnAboutStringRefs[componentName]) {
                    {
                      error('A string ref, "%s", has been found within a strict mode tree. String refs are a source of potential bugs and should be avoided. We recommend using useRef() or createRef() instead. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-string-ref', mixedRef);
                    }
                    didWarnAboutStringRefs[componentName] = true;
                  }
                }
              }
              if (element._owner) {
                var owner = element._owner;
                var inst;
                if (owner) {
                  var ownerFiber = owner;
                  if (ownerFiber.tag !== ClassComponent) {
                    throw new Error("Function components cannot have string refs. We recommend using useRef() instead. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-string-ref");
                  }
                  inst = ownerFiber.stateNode;
                }
                if (!inst) {
                  throw new Error("Missing owner for string ref " + mixedRef + ". This error is likely caused by a bug in React. Please file an issue.");
                }
                var resolvedInst = inst;
                {
                  checkPropStringCoercion(mixedRef, "ref");
                }
                var stringRef = "" + mixedRef;
                if (current2 !== null && current2.ref !== null && typeof current2.ref === "function" && current2.ref._stringRef === stringRef) {
                  return current2.ref;
                }
                var ref = function(value) {
                  var refs = resolvedInst.refs;
                  if (refs === emptyRefsObject) {
                    refs = resolvedInst.refs = {};
                  }
                  if (value === null) {
                    delete refs[stringRef];
                  } else {
                    refs[stringRef] = value;
                  }
                };
                ref._stringRef = stringRef;
                return ref;
              } else {
                if (typeof mixedRef !== "string") {
                  throw new Error("Expected ref to be a function, a string, an object returned by React.createRef(), or null.");
                }
                if (!element._owner) {
                  throw new Error("Element ref was specified as a string (" + mixedRef + ") but no owner was set. This could happen for one of the following reasons:\n1. You may be adding a ref to a function component\n2. You may be adding a ref to a component that was not created inside a component's render method\n3. You have multiple copies of React loaded\nSee https://reactjs.org/link/refs-must-have-owner for more information.");
                }
              }
            }
            return mixedRef;
          }
          function throwOnInvalidObjectType(returnFiber, newChild) {
            var childString = Object.prototype.toString.call(newChild);
            throw new Error("Objects are not valid as a React child (found: " + (childString === "[object Object]" ? "object with keys {" + Object.keys(newChild).join(", ") + "}" : childString) + "). If you meant to render a collection of children, use an array instead.");
          }
          function warnOnFunctionType(returnFiber) {
            {
              var componentName = getComponentNameFromFiber(returnFiber) || "Component";
              if (ownerHasFunctionTypeWarning[componentName]) {
                return;
              }
              ownerHasFunctionTypeWarning[componentName] = true;
              error("Functions are not valid as a React child. This may happen if you return a Component instead of <Component /> from render. Or maybe you meant to call this function rather than return it.");
            }
          }
          function resolveLazy(lazyType) {
            var payload = lazyType._payload;
            var init = lazyType._init;
            return init(payload);
          }
          function ChildReconciler(shouldTrackSideEffects) {
            function deleteChild(returnFiber, childToDelete) {
              if (!shouldTrackSideEffects) {
                return;
              }
              var deletions = returnFiber.deletions;
              if (deletions === null) {
                returnFiber.deletions = [childToDelete];
                returnFiber.flags |= ChildDeletion;
              } else {
                deletions.push(childToDelete);
              }
            }
            function deleteRemainingChildren(returnFiber, currentFirstChild) {
              if (!shouldTrackSideEffects) {
                return null;
              }
              var childToDelete = currentFirstChild;
              while (childToDelete !== null) {
                deleteChild(returnFiber, childToDelete);
                childToDelete = childToDelete.sibling;
              }
              return null;
            }
            function mapRemainingChildren(returnFiber, currentFirstChild) {
              var existingChildren = /* @__PURE__ */ new Map();
              var existingChild = currentFirstChild;
              while (existingChild !== null) {
                if (existingChild.key !== null) {
                  existingChildren.set(existingChild.key, existingChild);
                } else {
                  existingChildren.set(existingChild.index, existingChild);
                }
                existingChild = existingChild.sibling;
              }
              return existingChildren;
            }
            function useFiber(fiber, pendingProps) {
              var clone = createWorkInProgress(fiber, pendingProps);
              clone.index = 0;
              clone.sibling = null;
              return clone;
            }
            function placeChild(newFiber, lastPlacedIndex, newIndex) {
              newFiber.index = newIndex;
              if (!shouldTrackSideEffects) {
                newFiber.flags |= Forked;
                return lastPlacedIndex;
              }
              var current2 = newFiber.alternate;
              if (current2 !== null) {
                var oldIndex = current2.index;
                if (oldIndex < lastPlacedIndex) {
                  newFiber.flags |= Placement;
                  return lastPlacedIndex;
                } else {
                  return oldIndex;
                }
              } else {
                newFiber.flags |= Placement;
                return lastPlacedIndex;
              }
            }
            function placeSingleChild(newFiber) {
              if (shouldTrackSideEffects && newFiber.alternate === null) {
                newFiber.flags |= Placement;
              }
              return newFiber;
            }
            function updateTextNode(returnFiber, current2, textContent, lanes) {
              if (current2 === null || current2.tag !== HostText) {
                var created = createFiberFromText(textContent, returnFiber.mode, lanes);
                created.return = returnFiber;
                return created;
              } else {
                var existing = useFiber(current2, textContent);
                existing.return = returnFiber;
                return existing;
              }
            }
            function updateElement(returnFiber, current2, element, lanes) {
              var elementType = element.type;
              if (elementType === REACT_FRAGMENT_TYPE) {
                return updateFragment2(returnFiber, current2, element.props.children, lanes, element.key);
              }
              if (current2 !== null) {
                if (current2.elementType === elementType || isCompatibleFamilyForHotReloading(current2, element) || typeof elementType === "object" && elementType !== null && elementType.$$typeof === REACT_LAZY_TYPE && resolveLazy(elementType) === current2.type) {
                  var existing = useFiber(current2, element.props);
                  existing.ref = coerceRef(returnFiber, current2, element);
                  existing.return = returnFiber;
                  {
                    existing._debugSource = element._source;
                    existing._debugOwner = element._owner;
                  }
                  return existing;
                }
              }
              var created = createFiberFromElement(element, returnFiber.mode, lanes);
              created.ref = coerceRef(returnFiber, current2, element);
              created.return = returnFiber;
              return created;
            }
            function updatePortal(returnFiber, current2, portal, lanes) {
              if (current2 === null || current2.tag !== HostPortal || current2.stateNode.containerInfo !== portal.containerInfo || current2.stateNode.implementation !== portal.implementation) {
                var created = createFiberFromPortal(portal, returnFiber.mode, lanes);
                created.return = returnFiber;
                return created;
              } else {
                var existing = useFiber(current2, portal.children || []);
                existing.return = returnFiber;
                return existing;
              }
            }
            function updateFragment2(returnFiber, current2, fragment, lanes, key) {
              if (current2 === null || current2.tag !== Fragment4) {
                var created = createFiberFromFragment(fragment, returnFiber.mode, lanes, key);
                created.return = returnFiber;
                return created;
              } else {
                var existing = useFiber(current2, fragment);
                existing.return = returnFiber;
                return existing;
              }
            }
            function createChild(returnFiber, newChild, lanes) {
              if (typeof newChild === "string" && newChild !== "" || typeof newChild === "number") {
                var created = createFiberFromText("" + newChild, returnFiber.mode, lanes);
                created.return = returnFiber;
                return created;
              }
              if (typeof newChild === "object" && newChild !== null) {
                switch (newChild.$$typeof) {
                  case REACT_ELEMENT_TYPE: {
                    var _created = createFiberFromElement(newChild, returnFiber.mode, lanes);
                    _created.ref = coerceRef(returnFiber, null, newChild);
                    _created.return = returnFiber;
                    return _created;
                  }
                  case REACT_PORTAL_TYPE: {
                    var _created2 = createFiberFromPortal(newChild, returnFiber.mode, lanes);
                    _created2.return = returnFiber;
                    return _created2;
                  }
                  case REACT_LAZY_TYPE: {
                    {
                      var payload = newChild._payload;
                      var init = newChild._init;
                      return createChild(returnFiber, init(payload), lanes);
                    }
                  }
                }
                if (isArray(newChild) || getIteratorFn(newChild)) {
                  var _created3 = createFiberFromFragment(newChild, returnFiber.mode, lanes, null);
                  _created3.return = returnFiber;
                  return _created3;
                }
                throwOnInvalidObjectType(returnFiber, newChild);
              }
              {
                if (typeof newChild === "function") {
                  warnOnFunctionType(returnFiber);
                }
              }
              return null;
            }
            function updateSlot(returnFiber, oldFiber, newChild, lanes) {
              var key = oldFiber !== null ? oldFiber.key : null;
              if (typeof newChild === "string" && newChild !== "" || typeof newChild === "number") {
                if (key !== null) {
                  return null;
                }
                return updateTextNode(returnFiber, oldFiber, "" + newChild, lanes);
              }
              if (typeof newChild === "object" && newChild !== null) {
                switch (newChild.$$typeof) {
                  case REACT_ELEMENT_TYPE: {
                    if (newChild.key === key) {
                      return updateElement(returnFiber, oldFiber, newChild, lanes);
                    } else {
                      return null;
                    }
                  }
                  case REACT_PORTAL_TYPE: {
                    if (newChild.key === key) {
                      return updatePortal(returnFiber, oldFiber, newChild, lanes);
                    } else {
                      return null;
                    }
                  }
                  case REACT_LAZY_TYPE: {
                    {
                      var payload = newChild._payload;
                      var init = newChild._init;
                      return updateSlot(returnFiber, oldFiber, init(payload), lanes);
                    }
                  }
                }
                if (isArray(newChild) || getIteratorFn(newChild)) {
                  if (key !== null) {
                    return null;
                  }
                  return updateFragment2(returnFiber, oldFiber, newChild, lanes, null);
                }
                throwOnInvalidObjectType(returnFiber, newChild);
              }
              {
                if (typeof newChild === "function") {
                  warnOnFunctionType(returnFiber);
                }
              }
              return null;
            }
            function updateFromMap(existingChildren, returnFiber, newIdx, newChild, lanes) {
              if (typeof newChild === "string" && newChild !== "" || typeof newChild === "number") {
                var matchedFiber = existingChildren.get(newIdx) || null;
                return updateTextNode(returnFiber, matchedFiber, "" + newChild, lanes);
              }
              if (typeof newChild === "object" && newChild !== null) {
                switch (newChild.$$typeof) {
                  case REACT_ELEMENT_TYPE: {
                    var _matchedFiber = existingChildren.get(newChild.key === null ? newIdx : newChild.key) || null;
                    return updateElement(returnFiber, _matchedFiber, newChild, lanes);
                  }
                  case REACT_PORTAL_TYPE: {
                    var _matchedFiber2 = existingChildren.get(newChild.key === null ? newIdx : newChild.key) || null;
                    return updatePortal(returnFiber, _matchedFiber2, newChild, lanes);
                  }
                  case REACT_LAZY_TYPE: {
                    var payload = newChild._payload;
                    var init = newChild._init;
                    return updateFromMap(existingChildren, returnFiber, newIdx, init(payload), lanes);
                  }
                }
                if (isArray(newChild) || getIteratorFn(newChild)) {
                  var _matchedFiber3 = existingChildren.get(newIdx) || null;
                  return updateFragment2(returnFiber, _matchedFiber3, newChild, lanes, null);
                }
                throwOnInvalidObjectType(returnFiber, newChild);
              }
              {
                if (typeof newChild === "function") {
                  warnOnFunctionType(returnFiber);
                }
              }
              return null;
            }
            function warnOnInvalidKey(child, knownKeys, returnFiber) {
              {
                if (typeof child !== "object" || child === null) {
                  return knownKeys;
                }
                switch (child.$$typeof) {
                  case REACT_ELEMENT_TYPE:
                  case REACT_PORTAL_TYPE:
                    warnForMissingKey(child, returnFiber);
                    var key = child.key;
                    if (typeof key !== "string") {
                      break;
                    }
                    if (knownKeys === null) {
                      knownKeys = /* @__PURE__ */ new Set();
                      knownKeys.add(key);
                      break;
                    }
                    if (!knownKeys.has(key)) {
                      knownKeys.add(key);
                      break;
                    }
                    error("Encountered two children with the same key, `%s`. Keys should be unique so that components maintain their identity across updates. Non-unique keys may cause children to be duplicated and/or omitted \u2014 the behavior is unsupported and could change in a future version.", key);
                    break;
                  case REACT_LAZY_TYPE: {
                    var payload = child._payload;
                    var init = child._init;
                    warnOnInvalidKey(init(payload), knownKeys, returnFiber);
                    break;
                  }
                }
              }
              return knownKeys;
            }
            function reconcileChildrenArray(returnFiber, currentFirstChild, newChildren, lanes) {
              {
                var knownKeys = null;
                for (var i3 = 0; i3 < newChildren.length; i3++) {
                  var child = newChildren[i3];
                  knownKeys = warnOnInvalidKey(child, knownKeys, returnFiber);
                }
              }
              var resultingFirstChild = null;
              var previousNewFiber = null;
              var oldFiber = currentFirstChild;
              var lastPlacedIndex = 0;
              var newIdx = 0;
              var nextOldFiber = null;
              for (; oldFiber !== null && newIdx < newChildren.length; newIdx++) {
                if (oldFiber.index > newIdx) {
                  nextOldFiber = oldFiber;
                  oldFiber = null;
                } else {
                  nextOldFiber = oldFiber.sibling;
                }
                var newFiber = updateSlot(returnFiber, oldFiber, newChildren[newIdx], lanes);
                if (newFiber === null) {
                  if (oldFiber === null) {
                    oldFiber = nextOldFiber;
                  }
                  break;
                }
                if (shouldTrackSideEffects) {
                  if (oldFiber && newFiber.alternate === null) {
                    deleteChild(returnFiber, oldFiber);
                  }
                }
                lastPlacedIndex = placeChild(newFiber, lastPlacedIndex, newIdx);
                if (previousNewFiber === null) {
                  resultingFirstChild = newFiber;
                } else {
                  previousNewFiber.sibling = newFiber;
                }
                previousNewFiber = newFiber;
                oldFiber = nextOldFiber;
              }
              if (newIdx === newChildren.length) {
                deleteRemainingChildren(returnFiber, oldFiber);
                if (getIsHydrating()) {
                  var numberOfForks = newIdx;
                  pushTreeFork(returnFiber, numberOfForks);
                }
                return resultingFirstChild;
              }
              if (oldFiber === null) {
                for (; newIdx < newChildren.length; newIdx++) {
                  var _newFiber = createChild(returnFiber, newChildren[newIdx], lanes);
                  if (_newFiber === null) {
                    continue;
                  }
                  lastPlacedIndex = placeChild(_newFiber, lastPlacedIndex, newIdx);
                  if (previousNewFiber === null) {
                    resultingFirstChild = _newFiber;
                  } else {
                    previousNewFiber.sibling = _newFiber;
                  }
                  previousNewFiber = _newFiber;
                }
                if (getIsHydrating()) {
                  var _numberOfForks = newIdx;
                  pushTreeFork(returnFiber, _numberOfForks);
                }
                return resultingFirstChild;
              }
              var existingChildren = mapRemainingChildren(returnFiber, oldFiber);
              for (; newIdx < newChildren.length; newIdx++) {
                var _newFiber2 = updateFromMap(existingChildren, returnFiber, newIdx, newChildren[newIdx], lanes);
                if (_newFiber2 !== null) {
                  if (shouldTrackSideEffects) {
                    if (_newFiber2.alternate !== null) {
                      existingChildren.delete(_newFiber2.key === null ? newIdx : _newFiber2.key);
                    }
                  }
                  lastPlacedIndex = placeChild(_newFiber2, lastPlacedIndex, newIdx);
                  if (previousNewFiber === null) {
                    resultingFirstChild = _newFiber2;
                  } else {
                    previousNewFiber.sibling = _newFiber2;
                  }
                  previousNewFiber = _newFiber2;
                }
              }
              if (shouldTrackSideEffects) {
                existingChildren.forEach(function(child2) {
                  return deleteChild(returnFiber, child2);
                });
              }
              if (getIsHydrating()) {
                var _numberOfForks2 = newIdx;
                pushTreeFork(returnFiber, _numberOfForks2);
              }
              return resultingFirstChild;
            }
            function reconcileChildrenIterator(returnFiber, currentFirstChild, newChildrenIterable, lanes) {
              var iteratorFn = getIteratorFn(newChildrenIterable);
              if (typeof iteratorFn !== "function") {
                throw new Error("An object is not an iterable. This error is likely caused by a bug in React. Please file an issue.");
              }
              {
                if (typeof Symbol === "function" && newChildrenIterable[Symbol.toStringTag] === "Generator") {
                  if (!didWarnAboutGenerators) {
                    error("Using Generators as children is unsupported and will likely yield unexpected results because enumerating a generator mutates it. You may convert it to an array with `Array.from()` or the `[...spread]` operator before rendering. Keep in mind you might need to polyfill these features for older browsers.");
                  }
                  didWarnAboutGenerators = true;
                }
                if (newChildrenIterable.entries === iteratorFn) {
                  if (!didWarnAboutMaps) {
                    error("Using Maps as children is not supported. Use an array of keyed ReactElements instead.");
                  }
                  didWarnAboutMaps = true;
                }
                var _newChildren = iteratorFn.call(newChildrenIterable);
                if (_newChildren) {
                  var knownKeys = null;
                  var _step = _newChildren.next();
                  for (; !_step.done; _step = _newChildren.next()) {
                    var child = _step.value;
                    knownKeys = warnOnInvalidKey(child, knownKeys, returnFiber);
                  }
                }
              }
              var newChildren = iteratorFn.call(newChildrenIterable);
              if (newChildren == null) {
                throw new Error("An iterable object provided no iterator.");
              }
              var resultingFirstChild = null;
              var previousNewFiber = null;
              var oldFiber = currentFirstChild;
              var lastPlacedIndex = 0;
              var newIdx = 0;
              var nextOldFiber = null;
              var step = newChildren.next();
              for (; oldFiber !== null && !step.done; newIdx++, step = newChildren.next()) {
                if (oldFiber.index > newIdx) {
                  nextOldFiber = oldFiber;
                  oldFiber = null;
                } else {
                  nextOldFiber = oldFiber.sibling;
                }
                var newFiber = updateSlot(returnFiber, oldFiber, step.value, lanes);
                if (newFiber === null) {
                  if (oldFiber === null) {
                    oldFiber = nextOldFiber;
                  }
                  break;
                }
                if (shouldTrackSideEffects) {
                  if (oldFiber && newFiber.alternate === null) {
                    deleteChild(returnFiber, oldFiber);
                  }
                }
                lastPlacedIndex = placeChild(newFiber, lastPlacedIndex, newIdx);
                if (previousNewFiber === null) {
                  resultingFirstChild = newFiber;
                } else {
                  previousNewFiber.sibling = newFiber;
                }
                previousNewFiber = newFiber;
                oldFiber = nextOldFiber;
              }
              if (step.done) {
                deleteRemainingChildren(returnFiber, oldFiber);
                if (getIsHydrating()) {
                  var numberOfForks = newIdx;
                  pushTreeFork(returnFiber, numberOfForks);
                }
                return resultingFirstChild;
              }
              if (oldFiber === null) {
                for (; !step.done; newIdx++, step = newChildren.next()) {
                  var _newFiber3 = createChild(returnFiber, step.value, lanes);
                  if (_newFiber3 === null) {
                    continue;
                  }
                  lastPlacedIndex = placeChild(_newFiber3, lastPlacedIndex, newIdx);
                  if (previousNewFiber === null) {
                    resultingFirstChild = _newFiber3;
                  } else {
                    previousNewFiber.sibling = _newFiber3;
                  }
                  previousNewFiber = _newFiber3;
                }
                if (getIsHydrating()) {
                  var _numberOfForks3 = newIdx;
                  pushTreeFork(returnFiber, _numberOfForks3);
                }
                return resultingFirstChild;
              }
              var existingChildren = mapRemainingChildren(returnFiber, oldFiber);
              for (; !step.done; newIdx++, step = newChildren.next()) {
                var _newFiber4 = updateFromMap(existingChildren, returnFiber, newIdx, step.value, lanes);
                if (_newFiber4 !== null) {
                  if (shouldTrackSideEffects) {
                    if (_newFiber4.alternate !== null) {
                      existingChildren.delete(_newFiber4.key === null ? newIdx : _newFiber4.key);
                    }
                  }
                  lastPlacedIndex = placeChild(_newFiber4, lastPlacedIndex, newIdx);
                  if (previousNewFiber === null) {
                    resultingFirstChild = _newFiber4;
                  } else {
                    previousNewFiber.sibling = _newFiber4;
                  }
                  previousNewFiber = _newFiber4;
                }
              }
              if (shouldTrackSideEffects) {
                existingChildren.forEach(function(child2) {
                  return deleteChild(returnFiber, child2);
                });
              }
              if (getIsHydrating()) {
                var _numberOfForks4 = newIdx;
                pushTreeFork(returnFiber, _numberOfForks4);
              }
              return resultingFirstChild;
            }
            function reconcileSingleTextNode(returnFiber, currentFirstChild, textContent, lanes) {
              if (currentFirstChild !== null && currentFirstChild.tag === HostText) {
                deleteRemainingChildren(returnFiber, currentFirstChild.sibling);
                var existing = useFiber(currentFirstChild, textContent);
                existing.return = returnFiber;
                return existing;
              }
              deleteRemainingChildren(returnFiber, currentFirstChild);
              var created = createFiberFromText(textContent, returnFiber.mode, lanes);
              created.return = returnFiber;
              return created;
            }
            function reconcileSingleElement(returnFiber, currentFirstChild, element, lanes) {
              var key = element.key;
              var child = currentFirstChild;
              while (child !== null) {
                if (child.key === key) {
                  var elementType = element.type;
                  if (elementType === REACT_FRAGMENT_TYPE) {
                    if (child.tag === Fragment4) {
                      deleteRemainingChildren(returnFiber, child.sibling);
                      var existing = useFiber(child, element.props.children);
                      existing.return = returnFiber;
                      {
                        existing._debugSource = element._source;
                        existing._debugOwner = element._owner;
                      }
                      return existing;
                    }
                  } else {
                    if (child.elementType === elementType || isCompatibleFamilyForHotReloading(child, element) || typeof elementType === "object" && elementType !== null && elementType.$$typeof === REACT_LAZY_TYPE && resolveLazy(elementType) === child.type) {
                      deleteRemainingChildren(returnFiber, child.sibling);
                      var _existing = useFiber(child, element.props);
                      _existing.ref = coerceRef(returnFiber, child, element);
                      _existing.return = returnFiber;
                      {
                        _existing._debugSource = element._source;
                        _existing._debugOwner = element._owner;
                      }
                      return _existing;
                    }
                  }
                  deleteRemainingChildren(returnFiber, child);
                  break;
                } else {
                  deleteChild(returnFiber, child);
                }
                child = child.sibling;
              }
              if (element.type === REACT_FRAGMENT_TYPE) {
                var created = createFiberFromFragment(element.props.children, returnFiber.mode, lanes, element.key);
                created.return = returnFiber;
                return created;
              } else {
                var _created4 = createFiberFromElement(element, returnFiber.mode, lanes);
                _created4.ref = coerceRef(returnFiber, currentFirstChild, element);
                _created4.return = returnFiber;
                return _created4;
              }
            }
            function reconcileSinglePortal(returnFiber, currentFirstChild, portal, lanes) {
              var key = portal.key;
              var child = currentFirstChild;
              while (child !== null) {
                if (child.key === key) {
                  if (child.tag === HostPortal && child.stateNode.containerInfo === portal.containerInfo && child.stateNode.implementation === portal.implementation) {
                    deleteRemainingChildren(returnFiber, child.sibling);
                    var existing = useFiber(child, portal.children || []);
                    existing.return = returnFiber;
                    return existing;
                  } else {
                    deleteRemainingChildren(returnFiber, child);
                    break;
                  }
                } else {
                  deleteChild(returnFiber, child);
                }
                child = child.sibling;
              }
              var created = createFiberFromPortal(portal, returnFiber.mode, lanes);
              created.return = returnFiber;
              return created;
            }
            function reconcileChildFibers2(returnFiber, currentFirstChild, newChild, lanes) {
              var isUnkeyedTopLevelFragment = typeof newChild === "object" && newChild !== null && newChild.type === REACT_FRAGMENT_TYPE && newChild.key === null;
              if (isUnkeyedTopLevelFragment) {
                newChild = newChild.props.children;
              }
              if (typeof newChild === "object" && newChild !== null) {
                switch (newChild.$$typeof) {
                  case REACT_ELEMENT_TYPE:
                    return placeSingleChild(reconcileSingleElement(returnFiber, currentFirstChild, newChild, lanes));
                  case REACT_PORTAL_TYPE:
                    return placeSingleChild(reconcileSinglePortal(returnFiber, currentFirstChild, newChild, lanes));
                  case REACT_LAZY_TYPE: {
                    var payload = newChild._payload;
                    var init = newChild._init;
                    return reconcileChildFibers2(returnFiber, currentFirstChild, init(payload), lanes);
                  }
                }
                if (isArray(newChild)) {
                  return reconcileChildrenArray(returnFiber, currentFirstChild, newChild, lanes);
                }
                if (getIteratorFn(newChild)) {
                  return reconcileChildrenIterator(returnFiber, currentFirstChild, newChild, lanes);
                }
                throwOnInvalidObjectType(returnFiber, newChild);
              }
              if (typeof newChild === "string" && newChild !== "" || typeof newChild === "number") {
                return placeSingleChild(reconcileSingleTextNode(returnFiber, currentFirstChild, "" + newChild, lanes));
              }
              {
                if (typeof newChild === "function") {
                  warnOnFunctionType(returnFiber);
                }
              }
              return deleteRemainingChildren(returnFiber, currentFirstChild);
            }
            return reconcileChildFibers2;
          }
          var reconcileChildFibers = ChildReconciler(true);
          var mountChildFibers = ChildReconciler(false);
          function cloneChildFibers(current2, workInProgress2) {
            if (current2 !== null && workInProgress2.child !== current2.child) {
              throw new Error("Resuming work not yet implemented.");
            }
            if (workInProgress2.child === null) {
              return;
            }
            var currentChild = workInProgress2.child;
            var newChild = createWorkInProgress(currentChild, currentChild.pendingProps);
            workInProgress2.child = newChild;
            newChild.return = workInProgress2;
            while (currentChild.sibling !== null) {
              currentChild = currentChild.sibling;
              newChild = newChild.sibling = createWorkInProgress(currentChild, currentChild.pendingProps);
              newChild.return = workInProgress2;
            }
            newChild.sibling = null;
          }
          function resetChildFibers(workInProgress2, lanes) {
            var child = workInProgress2.child;
            while (child !== null) {
              resetWorkInProgress(child, lanes);
              child = child.sibling;
            }
          }
          var NO_CONTEXT = {};
          var contextStackCursor$1 = createCursor(NO_CONTEXT);
          var contextFiberStackCursor = createCursor(NO_CONTEXT);
          var rootInstanceStackCursor = createCursor(NO_CONTEXT);
          function requiredContext(c4) {
            if (c4 === NO_CONTEXT) {
              throw new Error("Expected host context to exist. This error is likely caused by a bug in React. Please file an issue.");
            }
            return c4;
          }
          function getRootHostContainer() {
            var rootInstance = requiredContext(rootInstanceStackCursor.current);
            return rootInstance;
          }
          function pushHostContainer(fiber, nextRootInstance) {
            push(rootInstanceStackCursor, nextRootInstance, fiber);
            push(contextFiberStackCursor, fiber, fiber);
            push(contextStackCursor$1, NO_CONTEXT, fiber);
            var nextRootContext = getRootHostContext(nextRootInstance);
            pop(contextStackCursor$1, fiber);
            push(contextStackCursor$1, nextRootContext, fiber);
          }
          function popHostContainer(fiber) {
            pop(contextStackCursor$1, fiber);
            pop(contextFiberStackCursor, fiber);
            pop(rootInstanceStackCursor, fiber);
          }
          function getHostContext() {
            var context = requiredContext(contextStackCursor$1.current);
            return context;
          }
          function pushHostContext(fiber) {
            var rootInstance = requiredContext(rootInstanceStackCursor.current);
            var context = requiredContext(contextStackCursor$1.current);
            var nextContext = getChildHostContext(context, fiber.type);
            if (context === nextContext) {
              return;
            }
            push(contextFiberStackCursor, fiber, fiber);
            push(contextStackCursor$1, nextContext, fiber);
          }
          function popHostContext(fiber) {
            if (contextFiberStackCursor.current !== fiber) {
              return;
            }
            pop(contextStackCursor$1, fiber);
            pop(contextFiberStackCursor, fiber);
          }
          var DefaultSuspenseContext = 0;
          var SubtreeSuspenseContextMask = 1;
          var InvisibleParentSuspenseContext = 1;
          var ForceSuspenseFallback = 2;
          var suspenseStackCursor = createCursor(DefaultSuspenseContext);
          function hasSuspenseContext(parentContext, flag) {
            return (parentContext & flag) !== 0;
          }
          function setDefaultShallowSuspenseContext(parentContext) {
            return parentContext & SubtreeSuspenseContextMask;
          }
          function setShallowSuspenseContext(parentContext, shallowContext) {
            return parentContext & SubtreeSuspenseContextMask | shallowContext;
          }
          function addSubtreeSuspenseContext(parentContext, subtreeContext) {
            return parentContext | subtreeContext;
          }
          function pushSuspenseContext(fiber, newContext) {
            push(suspenseStackCursor, newContext, fiber);
          }
          function popSuspenseContext(fiber) {
            pop(suspenseStackCursor, fiber);
          }
          function shouldCaptureSuspense(workInProgress2, hasInvisibleParent) {
            var nextState = workInProgress2.memoizedState;
            if (nextState !== null) {
              if (nextState.dehydrated !== null) {
                return true;
              }
              return false;
            }
            var props = workInProgress2.memoizedProps;
            {
              return true;
            }
          }
          function findFirstSuspended(row) {
            var node = row;
            while (node !== null) {
              if (node.tag === SuspenseComponent) {
                var state = node.memoizedState;
                if (state !== null) {
                  var dehydrated = state.dehydrated;
                  if (dehydrated === null || isSuspenseInstancePending(dehydrated) || isSuspenseInstanceFallback(dehydrated)) {
                    return node;
                  }
                }
              } else if (node.tag === SuspenseListComponent && node.memoizedProps.revealOrder !== void 0) {
                var didSuspend2 = (node.flags & DidCapture) !== NoFlags;
                if (didSuspend2) {
                  return node;
                }
              } else if (node.child !== null) {
                node.child.return = node;
                node = node.child;
                continue;
              }
              if (node === row) {
                return null;
              }
              while (node.sibling === null) {
                if (node.return === null || node.return === row) {
                  return null;
                }
                node = node.return;
              }
              node.sibling.return = node.return;
              node = node.sibling;
            }
            return null;
          }
          var NoFlags$1 = 0;
          var HasEffect = 1;
          var Insertion = 2;
          var Layout = 4;
          var Passive$1 = 8;
          var workInProgressSources = [];
          function resetWorkInProgressVersions() {
            for (var i3 = 0; i3 < workInProgressSources.length; i3++) {
              var mutableSource = workInProgressSources[i3];
              {
                mutableSource._workInProgressVersionPrimary = null;
              }
            }
            workInProgressSources.length = 0;
          }
          function registerMutableSourceForHydration(root3, mutableSource) {
            var getVersion = mutableSource._getVersion;
            var version = getVersion(mutableSource._source);
            if (root3.mutableSourceEagerHydrationData == null) {
              root3.mutableSourceEagerHydrationData = [mutableSource, version];
            } else {
              root3.mutableSourceEagerHydrationData.push(mutableSource, version);
            }
          }
          var ReactCurrentDispatcher$1 = ReactSharedInternals.ReactCurrentDispatcher, ReactCurrentBatchConfig$2 = ReactSharedInternals.ReactCurrentBatchConfig;
          var didWarnAboutMismatchedHooksForComponent;
          var didWarnUncachedGetSnapshot;
          {
            didWarnAboutMismatchedHooksForComponent = /* @__PURE__ */ new Set();
          }
          var renderLanes = NoLanes;
          var currentlyRenderingFiber$1 = null;
          var currentHook = null;
          var workInProgressHook = null;
          var didScheduleRenderPhaseUpdate = false;
          var didScheduleRenderPhaseUpdateDuringThisPass = false;
          var localIdCounter = 0;
          var globalClientIdCounter = 0;
          var RE_RENDER_LIMIT = 25;
          var currentHookNameInDev = null;
          var hookTypesDev = null;
          var hookTypesUpdateIndexDev = -1;
          var ignorePreviousDependencies = false;
          function mountHookTypesDev() {
            {
              var hookName = currentHookNameInDev;
              if (hookTypesDev === null) {
                hookTypesDev = [hookName];
              } else {
                hookTypesDev.push(hookName);
              }
            }
          }
          function updateHookTypesDev() {
            {
              var hookName = currentHookNameInDev;
              if (hookTypesDev !== null) {
                hookTypesUpdateIndexDev++;
                if (hookTypesDev[hookTypesUpdateIndexDev] !== hookName) {
                  warnOnHookMismatchInDev(hookName);
                }
              }
            }
          }
          function checkDepsAreArrayDev(deps) {
            {
              if (deps !== void 0 && deps !== null && !isArray(deps)) {
                error("%s received a final argument that is not an array (instead, received `%s`). When specified, the final argument must be an array.", currentHookNameInDev, typeof deps);
              }
            }
          }
          function warnOnHookMismatchInDev(currentHookName) {
            {
              var componentName = getComponentNameFromFiber(currentlyRenderingFiber$1);
              if (!didWarnAboutMismatchedHooksForComponent.has(componentName)) {
                didWarnAboutMismatchedHooksForComponent.add(componentName);
                if (hookTypesDev !== null) {
                  var table = "";
                  var secondColumnStart = 30;
                  for (var i3 = 0; i3 <= hookTypesUpdateIndexDev; i3++) {
                    var oldHookName = hookTypesDev[i3];
                    var newHookName = i3 === hookTypesUpdateIndexDev ? currentHookName : oldHookName;
                    var row = i3 + 1 + ". " + oldHookName;
                    while (row.length < secondColumnStart) {
                      row += " ";
                    }
                    row += newHookName + "\n";
                    table += row;
                  }
                  error("React has detected a change in the order of Hooks called by %s. This will lead to bugs and errors if not fixed. For more information, read the Rules of Hooks: https://reactjs.org/link/rules-of-hooks\n\n   Previous render            Next render\n   ------------------------------------------------------\n%s   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n", componentName, table);
                }
              }
            }
          }
          function throwInvalidHookError() {
            throw new Error("Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for one of the following reasons:\n1. You might have mismatching versions of React and the renderer (such as React DOM)\n2. You might be breaking the Rules of Hooks\n3. You might have more than one copy of React in the same app\nSee https://reactjs.org/link/invalid-hook-call for tips about how to debug and fix this problem.");
          }
          function areHookInputsEqual(nextDeps, prevDeps) {
            {
              if (ignorePreviousDependencies) {
                return false;
              }
            }
            if (prevDeps === null) {
              {
                error("%s received a final argument during this render, but not during the previous render. Even though the final argument is optional, its type cannot change between renders.", currentHookNameInDev);
              }
              return false;
            }
            {
              if (nextDeps.length !== prevDeps.length) {
                error("The final argument passed to %s changed size between renders. The order and size of this array must remain constant.\n\nPrevious: %s\nIncoming: %s", currentHookNameInDev, "[" + prevDeps.join(", ") + "]", "[" + nextDeps.join(", ") + "]");
              }
            }
            for (var i3 = 0; i3 < prevDeps.length && i3 < nextDeps.length; i3++) {
              if (objectIs(nextDeps[i3], prevDeps[i3])) {
                continue;
              }
              return false;
            }
            return true;
          }
          function renderWithHooks(current2, workInProgress2, Component, props, secondArg, nextRenderLanes) {
            renderLanes = nextRenderLanes;
            currentlyRenderingFiber$1 = workInProgress2;
            {
              hookTypesDev = current2 !== null ? current2._debugHookTypes : null;
              hookTypesUpdateIndexDev = -1;
              ignorePreviousDependencies = current2 !== null && current2.type !== workInProgress2.type;
            }
            workInProgress2.memoizedState = null;
            workInProgress2.updateQueue = null;
            workInProgress2.lanes = NoLanes;
            {
              if (current2 !== null && current2.memoizedState !== null) {
                ReactCurrentDispatcher$1.current = HooksDispatcherOnUpdateInDEV;
              } else if (hookTypesDev !== null) {
                ReactCurrentDispatcher$1.current = HooksDispatcherOnMountWithHookTypesInDEV;
              } else {
                ReactCurrentDispatcher$1.current = HooksDispatcherOnMountInDEV;
              }
            }
            var children = Component(props, secondArg);
            if (didScheduleRenderPhaseUpdateDuringThisPass) {
              var numberOfReRenders = 0;
              do {
                didScheduleRenderPhaseUpdateDuringThisPass = false;
                localIdCounter = 0;
                if (numberOfReRenders >= RE_RENDER_LIMIT) {
                  throw new Error("Too many re-renders. React limits the number of renders to prevent an infinite loop.");
                }
                numberOfReRenders += 1;
                {
                  ignorePreviousDependencies = false;
                }
                currentHook = null;
                workInProgressHook = null;
                workInProgress2.updateQueue = null;
                {
                  hookTypesUpdateIndexDev = -1;
                }
                ReactCurrentDispatcher$1.current = HooksDispatcherOnRerenderInDEV;
                children = Component(props, secondArg);
              } while (didScheduleRenderPhaseUpdateDuringThisPass);
            }
            ReactCurrentDispatcher$1.current = ContextOnlyDispatcher;
            {
              workInProgress2._debugHookTypes = hookTypesDev;
            }
            var didRenderTooFewHooks = currentHook !== null && currentHook.next !== null;
            renderLanes = NoLanes;
            currentlyRenderingFiber$1 = null;
            currentHook = null;
            workInProgressHook = null;
            {
              currentHookNameInDev = null;
              hookTypesDev = null;
              hookTypesUpdateIndexDev = -1;
              if (current2 !== null && (current2.flags & StaticMask) !== (workInProgress2.flags & StaticMask) && (current2.mode & ConcurrentMode) !== NoMode) {
                error("Internal React error: Expected static flag was missing. Please notify the React team.");
              }
            }
            didScheduleRenderPhaseUpdate = false;
            if (didRenderTooFewHooks) {
              throw new Error("Rendered fewer hooks than expected. This may be caused by an accidental early return statement.");
            }
            return children;
          }
          function checkDidRenderIdHook() {
            var didRenderIdHook = localIdCounter !== 0;
            localIdCounter = 0;
            return didRenderIdHook;
          }
          function bailoutHooks(current2, workInProgress2, lanes) {
            workInProgress2.updateQueue = current2.updateQueue;
            if ((workInProgress2.mode & StrictEffectsMode) !== NoMode) {
              workInProgress2.flags &= ~(MountPassiveDev | MountLayoutDev | Passive | Update);
            } else {
              workInProgress2.flags &= ~(Passive | Update);
            }
            current2.lanes = removeLanes(current2.lanes, lanes);
          }
          function resetHooksAfterThrow() {
            ReactCurrentDispatcher$1.current = ContextOnlyDispatcher;
            if (didScheduleRenderPhaseUpdate) {
              var hook = currentlyRenderingFiber$1.memoizedState;
              while (hook !== null) {
                var queue = hook.queue;
                if (queue !== null) {
                  queue.pending = null;
                }
                hook = hook.next;
              }
              didScheduleRenderPhaseUpdate = false;
            }
            renderLanes = NoLanes;
            currentlyRenderingFiber$1 = null;
            currentHook = null;
            workInProgressHook = null;
            {
              hookTypesDev = null;
              hookTypesUpdateIndexDev = -1;
              currentHookNameInDev = null;
              isUpdatingOpaqueValueInRenderPhase = false;
            }
            didScheduleRenderPhaseUpdateDuringThisPass = false;
            localIdCounter = 0;
          }
          function mountWorkInProgressHook() {
            var hook = {
              memoizedState: null,
              baseState: null,
              baseQueue: null,
              queue: null,
              next: null
            };
            if (workInProgressHook === null) {
              currentlyRenderingFiber$1.memoizedState = workInProgressHook = hook;
            } else {
              workInProgressHook = workInProgressHook.next = hook;
            }
            return workInProgressHook;
          }
          function updateWorkInProgressHook() {
            var nextCurrentHook;
            if (currentHook === null) {
              var current2 = currentlyRenderingFiber$1.alternate;
              if (current2 !== null) {
                nextCurrentHook = current2.memoizedState;
              } else {
                nextCurrentHook = null;
              }
            } else {
              nextCurrentHook = currentHook.next;
            }
            var nextWorkInProgressHook;
            if (workInProgressHook === null) {
              nextWorkInProgressHook = currentlyRenderingFiber$1.memoizedState;
            } else {
              nextWorkInProgressHook = workInProgressHook.next;
            }
            if (nextWorkInProgressHook !== null) {
              workInProgressHook = nextWorkInProgressHook;
              nextWorkInProgressHook = workInProgressHook.next;
              currentHook = nextCurrentHook;
            } else {
              if (nextCurrentHook === null) {
                throw new Error("Rendered more hooks than during the previous render.");
              }
              currentHook = nextCurrentHook;
              var newHook = {
                memoizedState: currentHook.memoizedState,
                baseState: currentHook.baseState,
                baseQueue: currentHook.baseQueue,
                queue: currentHook.queue,
                next: null
              };
              if (workInProgressHook === null) {
                currentlyRenderingFiber$1.memoizedState = workInProgressHook = newHook;
              } else {
                workInProgressHook = workInProgressHook.next = newHook;
              }
            }
            return workInProgressHook;
          }
          function createFunctionComponentUpdateQueue() {
            return {
              lastEffect: null,
              stores: null
            };
          }
          function basicStateReducer(state, action) {
            return typeof action === "function" ? action(state) : action;
          }
          function mountReducer(reducer, initialArg, init) {
            var hook = mountWorkInProgressHook();
            var initialState;
            if (init !== void 0) {
              initialState = init(initialArg);
            } else {
              initialState = initialArg;
            }
            hook.memoizedState = hook.baseState = initialState;
            var queue = {
              pending: null,
              interleaved: null,
              lanes: NoLanes,
              dispatch: null,
              lastRenderedReducer: reducer,
              lastRenderedState: initialState
            };
            hook.queue = queue;
            var dispatch = queue.dispatch = dispatchReducerAction.bind(null, currentlyRenderingFiber$1, queue);
            return [hook.memoizedState, dispatch];
          }
          function updateReducer(reducer, initialArg, init) {
            var hook = updateWorkInProgressHook();
            var queue = hook.queue;
            if (queue === null) {
              throw new Error("Should have a queue. This is likely a bug in React. Please file an issue.");
            }
            queue.lastRenderedReducer = reducer;
            var current2 = currentHook;
            var baseQueue = current2.baseQueue;
            var pendingQueue = queue.pending;
            if (pendingQueue !== null) {
              if (baseQueue !== null) {
                var baseFirst = baseQueue.next;
                var pendingFirst = pendingQueue.next;
                baseQueue.next = pendingFirst;
                pendingQueue.next = baseFirst;
              }
              {
                if (current2.baseQueue !== baseQueue) {
                  error("Internal error: Expected work-in-progress queue to be a clone. This is a bug in React.");
                }
              }
              current2.baseQueue = baseQueue = pendingQueue;
              queue.pending = null;
            }
            if (baseQueue !== null) {
              var first = baseQueue.next;
              var newState = current2.baseState;
              var newBaseState = null;
              var newBaseQueueFirst = null;
              var newBaseQueueLast = null;
              var update = first;
              do {
                var updateLane = update.lane;
                if (!isSubsetOfLanes(renderLanes, updateLane)) {
                  var clone = {
                    lane: updateLane,
                    action: update.action,
                    hasEagerState: update.hasEagerState,
                    eagerState: update.eagerState,
                    next: null
                  };
                  if (newBaseQueueLast === null) {
                    newBaseQueueFirst = newBaseQueueLast = clone;
                    newBaseState = newState;
                  } else {
                    newBaseQueueLast = newBaseQueueLast.next = clone;
                  }
                  currentlyRenderingFiber$1.lanes = mergeLanes(currentlyRenderingFiber$1.lanes, updateLane);
                  markSkippedUpdateLanes(updateLane);
                } else {
                  if (newBaseQueueLast !== null) {
                    var _clone = {
                      lane: NoLane,
                      action: update.action,
                      hasEagerState: update.hasEagerState,
                      eagerState: update.eagerState,
                      next: null
                    };
                    newBaseQueueLast = newBaseQueueLast.next = _clone;
                  }
                  if (update.hasEagerState) {
                    newState = update.eagerState;
                  } else {
                    var action = update.action;
                    newState = reducer(newState, action);
                  }
                }
                update = update.next;
              } while (update !== null && update !== first);
              if (newBaseQueueLast === null) {
                newBaseState = newState;
              } else {
                newBaseQueueLast.next = newBaseQueueFirst;
              }
              if (!objectIs(newState, hook.memoizedState)) {
                markWorkInProgressReceivedUpdate();
              }
              hook.memoizedState = newState;
              hook.baseState = newBaseState;
              hook.baseQueue = newBaseQueueLast;
              queue.lastRenderedState = newState;
            }
            var lastInterleaved = queue.interleaved;
            if (lastInterleaved !== null) {
              var interleaved = lastInterleaved;
              do {
                var interleavedLane = interleaved.lane;
                currentlyRenderingFiber$1.lanes = mergeLanes(currentlyRenderingFiber$1.lanes, interleavedLane);
                markSkippedUpdateLanes(interleavedLane);
                interleaved = interleaved.next;
              } while (interleaved !== lastInterleaved);
            } else if (baseQueue === null) {
              queue.lanes = NoLanes;
            }
            var dispatch = queue.dispatch;
            return [hook.memoizedState, dispatch];
          }
          function rerenderReducer(reducer, initialArg, init) {
            var hook = updateWorkInProgressHook();
            var queue = hook.queue;
            if (queue === null) {
              throw new Error("Should have a queue. This is likely a bug in React. Please file an issue.");
            }
            queue.lastRenderedReducer = reducer;
            var dispatch = queue.dispatch;
            var lastRenderPhaseUpdate = queue.pending;
            var newState = hook.memoizedState;
            if (lastRenderPhaseUpdate !== null) {
              queue.pending = null;
              var firstRenderPhaseUpdate = lastRenderPhaseUpdate.next;
              var update = firstRenderPhaseUpdate;
              do {
                var action = update.action;
                newState = reducer(newState, action);
                update = update.next;
              } while (update !== firstRenderPhaseUpdate);
              if (!objectIs(newState, hook.memoizedState)) {
                markWorkInProgressReceivedUpdate();
              }
              hook.memoizedState = newState;
              if (hook.baseQueue === null) {
                hook.baseState = newState;
              }
              queue.lastRenderedState = newState;
            }
            return [newState, dispatch];
          }
          function mountMutableSource(source, getSnapshot, subscribe) {
            {
              return void 0;
            }
          }
          function updateMutableSource(source, getSnapshot, subscribe) {
            {
              return void 0;
            }
          }
          function mountSyncExternalStore(subscribe, getSnapshot, getServerSnapshot) {
            var fiber = currentlyRenderingFiber$1;
            var hook = mountWorkInProgressHook();
            var nextSnapshot;
            var isHydrating2 = getIsHydrating();
            if (isHydrating2) {
              if (getServerSnapshot === void 0) {
                throw new Error("Missing getServerSnapshot, which is required for server-rendered content. Will revert to client rendering.");
              }
              nextSnapshot = getServerSnapshot();
              {
                if (!didWarnUncachedGetSnapshot) {
                  if (nextSnapshot !== getServerSnapshot()) {
                    error("The result of getServerSnapshot should be cached to avoid an infinite loop");
                    didWarnUncachedGetSnapshot = true;
                  }
                }
              }
            } else {
              nextSnapshot = getSnapshot();
              {
                if (!didWarnUncachedGetSnapshot) {
                  var cachedSnapshot = getSnapshot();
                  if (!objectIs(nextSnapshot, cachedSnapshot)) {
                    error("The result of getSnapshot should be cached to avoid an infinite loop");
                    didWarnUncachedGetSnapshot = true;
                  }
                }
              }
              var root3 = getWorkInProgressRoot();
              if (root3 === null) {
                throw new Error("Expected a work-in-progress root. This is a bug in React. Please file an issue.");
              }
              if (!includesBlockingLane(root3, renderLanes)) {
                pushStoreConsistencyCheck(fiber, getSnapshot, nextSnapshot);
              }
            }
            hook.memoizedState = nextSnapshot;
            var inst = {
              value: nextSnapshot,
              getSnapshot
            };
            hook.queue = inst;
            mountEffect(subscribeToStore.bind(null, fiber, inst, subscribe), [subscribe]);
            fiber.flags |= Passive;
            pushEffect(HasEffect | Passive$1, updateStoreInstance.bind(null, fiber, inst, nextSnapshot, getSnapshot), void 0, null);
            return nextSnapshot;
          }
          function updateSyncExternalStore(subscribe, getSnapshot, getServerSnapshot) {
            var fiber = currentlyRenderingFiber$1;
            var hook = updateWorkInProgressHook();
            var nextSnapshot = getSnapshot();
            {
              if (!didWarnUncachedGetSnapshot) {
                var cachedSnapshot = getSnapshot();
                if (!objectIs(nextSnapshot, cachedSnapshot)) {
                  error("The result of getSnapshot should be cached to avoid an infinite loop");
                  didWarnUncachedGetSnapshot = true;
                }
              }
            }
            var prevSnapshot = hook.memoizedState;
            var snapshotChanged = !objectIs(prevSnapshot, nextSnapshot);
            if (snapshotChanged) {
              hook.memoizedState = nextSnapshot;
              markWorkInProgressReceivedUpdate();
            }
            var inst = hook.queue;
            updateEffect(subscribeToStore.bind(null, fiber, inst, subscribe), [subscribe]);
            if (inst.getSnapshot !== getSnapshot || snapshotChanged || workInProgressHook !== null && workInProgressHook.memoizedState.tag & HasEffect) {
              fiber.flags |= Passive;
              pushEffect(HasEffect | Passive$1, updateStoreInstance.bind(null, fiber, inst, nextSnapshot, getSnapshot), void 0, null);
              var root3 = getWorkInProgressRoot();
              if (root3 === null) {
                throw new Error("Expected a work-in-progress root. This is a bug in React. Please file an issue.");
              }
              if (!includesBlockingLane(root3, renderLanes)) {
                pushStoreConsistencyCheck(fiber, getSnapshot, nextSnapshot);
              }
            }
            return nextSnapshot;
          }
          function pushStoreConsistencyCheck(fiber, getSnapshot, renderedSnapshot) {
            fiber.flags |= StoreConsistency;
            var check = {
              getSnapshot,
              value: renderedSnapshot
            };
            var componentUpdateQueue = currentlyRenderingFiber$1.updateQueue;
            if (componentUpdateQueue === null) {
              componentUpdateQueue = createFunctionComponentUpdateQueue();
              currentlyRenderingFiber$1.updateQueue = componentUpdateQueue;
              componentUpdateQueue.stores = [check];
            } else {
              var stores = componentUpdateQueue.stores;
              if (stores === null) {
                componentUpdateQueue.stores = [check];
              } else {
                stores.push(check);
              }
            }
          }
          function updateStoreInstance(fiber, inst, nextSnapshot, getSnapshot) {
            inst.value = nextSnapshot;
            inst.getSnapshot = getSnapshot;
            if (checkIfSnapshotChanged(inst)) {
              forceStoreRerender(fiber);
            }
          }
          function subscribeToStore(fiber, inst, subscribe) {
            var handleStoreChange = function() {
              if (checkIfSnapshotChanged(inst)) {
                forceStoreRerender(fiber);
              }
            };
            return subscribe(handleStoreChange);
          }
          function checkIfSnapshotChanged(inst) {
            var latestGetSnapshot = inst.getSnapshot;
            var prevValue = inst.value;
            try {
              var nextValue = latestGetSnapshot();
              return !objectIs(prevValue, nextValue);
            } catch (error2) {
              return true;
            }
          }
          function forceStoreRerender(fiber) {
            scheduleUpdateOnFiber(fiber, SyncLane, NoTimestamp);
          }
          function mountState(initialState) {
            var hook = mountWorkInProgressHook();
            if (typeof initialState === "function") {
              initialState = initialState();
            }
            hook.memoizedState = hook.baseState = initialState;
            var queue = {
              pending: null,
              interleaved: null,
              lanes: NoLanes,
              dispatch: null,
              lastRenderedReducer: basicStateReducer,
              lastRenderedState: initialState
            };
            hook.queue = queue;
            var dispatch = queue.dispatch = dispatchSetState.bind(null, currentlyRenderingFiber$1, queue);
            return [hook.memoizedState, dispatch];
          }
          function updateState(initialState) {
            return updateReducer(basicStateReducer);
          }
          function rerenderState(initialState) {
            return rerenderReducer(basicStateReducer);
          }
          function pushEffect(tag, create, destroy, deps) {
            var effect = {
              tag,
              create,
              destroy,
              deps,
              next: null
            };
            var componentUpdateQueue = currentlyRenderingFiber$1.updateQueue;
            if (componentUpdateQueue === null) {
              componentUpdateQueue = createFunctionComponentUpdateQueue();
              currentlyRenderingFiber$1.updateQueue = componentUpdateQueue;
              componentUpdateQueue.lastEffect = effect.next = effect;
            } else {
              var lastEffect = componentUpdateQueue.lastEffect;
              if (lastEffect === null) {
                componentUpdateQueue.lastEffect = effect.next = effect;
              } else {
                var firstEffect = lastEffect.next;
                lastEffect.next = effect;
                effect.next = firstEffect;
                componentUpdateQueue.lastEffect = effect;
              }
            }
            return effect;
          }
          function mountRef(initialValue) {
            var hook = mountWorkInProgressHook();
            {
              var _ref2 = {
                current: initialValue
              };
              hook.memoizedState = _ref2;
              return _ref2;
            }
          }
          function updateRef(initialValue) {
            var hook = updateWorkInProgressHook();
            return hook.memoizedState;
          }
          function mountEffectImpl(fiberFlags, hookFlags, create, deps) {
            var hook = mountWorkInProgressHook();
            var nextDeps = deps === void 0 ? null : deps;
            currentlyRenderingFiber$1.flags |= fiberFlags;
            hook.memoizedState = pushEffect(HasEffect | hookFlags, create, void 0, nextDeps);
          }
          function updateEffectImpl(fiberFlags, hookFlags, create, deps) {
            var hook = updateWorkInProgressHook();
            var nextDeps = deps === void 0 ? null : deps;
            var destroy = void 0;
            if (currentHook !== null) {
              var prevEffect = currentHook.memoizedState;
              destroy = prevEffect.destroy;
              if (nextDeps !== null) {
                var prevDeps = prevEffect.deps;
                if (areHookInputsEqual(nextDeps, prevDeps)) {
                  hook.memoizedState = pushEffect(hookFlags, create, destroy, nextDeps);
                  return;
                }
              }
            }
            currentlyRenderingFiber$1.flags |= fiberFlags;
            hook.memoizedState = pushEffect(HasEffect | hookFlags, create, destroy, nextDeps);
          }
          function mountEffect(create, deps) {
            if ((currentlyRenderingFiber$1.mode & StrictEffectsMode) !== NoMode) {
              return mountEffectImpl(MountPassiveDev | Passive | PassiveStatic, Passive$1, create, deps);
            } else {
              return mountEffectImpl(Passive | PassiveStatic, Passive$1, create, deps);
            }
          }
          function updateEffect(create, deps) {
            return updateEffectImpl(Passive, Passive$1, create, deps);
          }
          function mountInsertionEffect(create, deps) {
            return mountEffectImpl(Update, Insertion, create, deps);
          }
          function updateInsertionEffect(create, deps) {
            return updateEffectImpl(Update, Insertion, create, deps);
          }
          function mountLayoutEffect(create, deps) {
            var fiberFlags = Update;
            {
              fiberFlags |= LayoutStatic;
            }
            if ((currentlyRenderingFiber$1.mode & StrictEffectsMode) !== NoMode) {
              fiberFlags |= MountLayoutDev;
            }
            return mountEffectImpl(fiberFlags, Layout, create, deps);
          }
          function updateLayoutEffect(create, deps) {
            return updateEffectImpl(Update, Layout, create, deps);
          }
          function imperativeHandleEffect(create, ref) {
            if (typeof ref === "function") {
              var refCallback = ref;
              var _inst = create();
              refCallback(_inst);
              return function() {
                refCallback(null);
              };
            } else if (ref !== null && ref !== void 0) {
              var refObject = ref;
              {
                if (!refObject.hasOwnProperty("current")) {
                  error("Expected useImperativeHandle() first argument to either be a ref callback or React.createRef() object. Instead received: %s.", "an object with keys {" + Object.keys(refObject).join(", ") + "}");
                }
              }
              var _inst2 = create();
              refObject.current = _inst2;
              return function() {
                refObject.current = null;
              };
            }
          }
          function mountImperativeHandle(ref, create, deps) {
            {
              if (typeof create !== "function") {
                error("Expected useImperativeHandle() second argument to be a function that creates a handle. Instead received: %s.", create !== null ? typeof create : "null");
              }
            }
            var effectDeps = deps !== null && deps !== void 0 ? deps.concat([ref]) : null;
            var fiberFlags = Update;
            {
              fiberFlags |= LayoutStatic;
            }
            if ((currentlyRenderingFiber$1.mode & StrictEffectsMode) !== NoMode) {
              fiberFlags |= MountLayoutDev;
            }
            return mountEffectImpl(fiberFlags, Layout, imperativeHandleEffect.bind(null, create, ref), effectDeps);
          }
          function updateImperativeHandle(ref, create, deps) {
            {
              if (typeof create !== "function") {
                error("Expected useImperativeHandle() second argument to be a function that creates a handle. Instead received: %s.", create !== null ? typeof create : "null");
              }
            }
            var effectDeps = deps !== null && deps !== void 0 ? deps.concat([ref]) : null;
            return updateEffectImpl(Update, Layout, imperativeHandleEffect.bind(null, create, ref), effectDeps);
          }
          function mountDebugValue(value, formatterFn) {
          }
          var updateDebugValue = mountDebugValue;
          function mountCallback(callback, deps) {
            var hook = mountWorkInProgressHook();
            var nextDeps = deps === void 0 ? null : deps;
            hook.memoizedState = [callback, nextDeps];
            return callback;
          }
          function updateCallback(callback, deps) {
            var hook = updateWorkInProgressHook();
            var nextDeps = deps === void 0 ? null : deps;
            var prevState = hook.memoizedState;
            if (prevState !== null) {
              if (nextDeps !== null) {
                var prevDeps = prevState[1];
                if (areHookInputsEqual(nextDeps, prevDeps)) {
                  return prevState[0];
                }
              }
            }
            hook.memoizedState = [callback, nextDeps];
            return callback;
          }
          function mountMemo(nextCreate, deps) {
            var hook = mountWorkInProgressHook();
            var nextDeps = deps === void 0 ? null : deps;
            var nextValue = nextCreate();
            hook.memoizedState = [nextValue, nextDeps];
            return nextValue;
          }
          function updateMemo(nextCreate, deps) {
            var hook = updateWorkInProgressHook();
            var nextDeps = deps === void 0 ? null : deps;
            var prevState = hook.memoizedState;
            if (prevState !== null) {
              if (nextDeps !== null) {
                var prevDeps = prevState[1];
                if (areHookInputsEqual(nextDeps, prevDeps)) {
                  return prevState[0];
                }
              }
            }
            var nextValue = nextCreate();
            hook.memoizedState = [nextValue, nextDeps];
            return nextValue;
          }
          function mountDeferredValue(value) {
            var _mountState = mountState(value), prevValue = _mountState[0], setValue = _mountState[1];
            mountEffect(function() {
              var prevTransition = ReactCurrentBatchConfig$2.transition;
              ReactCurrentBatchConfig$2.transition = {};
              try {
                setValue(value);
              } finally {
                ReactCurrentBatchConfig$2.transition = prevTransition;
              }
            }, [value]);
            return prevValue;
          }
          function updateDeferredValue(value) {
            var _updateState = updateState(), prevValue = _updateState[0], setValue = _updateState[1];
            updateEffect(function() {
              var prevTransition = ReactCurrentBatchConfig$2.transition;
              ReactCurrentBatchConfig$2.transition = {};
              try {
                setValue(value);
              } finally {
                ReactCurrentBatchConfig$2.transition = prevTransition;
              }
            }, [value]);
            return prevValue;
          }
          function rerenderDeferredValue(value) {
            var _rerenderState = rerenderState(), prevValue = _rerenderState[0], setValue = _rerenderState[1];
            updateEffect(function() {
              var prevTransition = ReactCurrentBatchConfig$2.transition;
              ReactCurrentBatchConfig$2.transition = {};
              try {
                setValue(value);
              } finally {
                ReactCurrentBatchConfig$2.transition = prevTransition;
              }
            }, [value]);
            return prevValue;
          }
          function startTransition(setPending, callback, options2) {
            var previousPriority = getCurrentUpdatePriority();
            setCurrentUpdatePriority(higherEventPriority(previousPriority, ContinuousEventPriority));
            setPending(true);
            var prevTransition = ReactCurrentBatchConfig$2.transition;
            ReactCurrentBatchConfig$2.transition = {};
            var currentTransition = ReactCurrentBatchConfig$2.transition;
            {
              ReactCurrentBatchConfig$2.transition._updatedFibers = /* @__PURE__ */ new Set();
            }
            try {
              setPending(false);
              callback();
            } finally {
              setCurrentUpdatePriority(previousPriority);
              ReactCurrentBatchConfig$2.transition = prevTransition;
              {
                if (prevTransition === null && currentTransition._updatedFibers) {
                  var updatedFibersCount = currentTransition._updatedFibers.size;
                  if (updatedFibersCount > 10) {
                    warn("Detected a large number of updates inside startTransition. If this is due to a subscription please re-write it to use React provided hooks. Otherwise concurrent mode guarantees are off the table.");
                  }
                  currentTransition._updatedFibers.clear();
                }
              }
            }
          }
          function mountTransition() {
            var _mountState2 = mountState(false), isPending = _mountState2[0], setPending = _mountState2[1];
            var start = startTransition.bind(null, setPending);
            var hook = mountWorkInProgressHook();
            hook.memoizedState = start;
            return [isPending, start];
          }
          function updateTransition() {
            var _updateState2 = updateState(), isPending = _updateState2[0];
            var hook = updateWorkInProgressHook();
            var start = hook.memoizedState;
            return [isPending, start];
          }
          function rerenderTransition() {
            var _rerenderState2 = rerenderState(), isPending = _rerenderState2[0];
            var hook = updateWorkInProgressHook();
            var start = hook.memoizedState;
            return [isPending, start];
          }
          var isUpdatingOpaqueValueInRenderPhase = false;
          function getIsUpdatingOpaqueValueInRenderPhaseInDEV() {
            {
              return isUpdatingOpaqueValueInRenderPhase;
            }
          }
          function mountId() {
            var hook = mountWorkInProgressHook();
            var root3 = getWorkInProgressRoot();
            var identifierPrefix = root3.identifierPrefix;
            var id;
            if (getIsHydrating()) {
              var treeId = getTreeId();
              id = ":" + identifierPrefix + "R" + treeId;
              var localId = localIdCounter++;
              if (localId > 0) {
                id += "H" + localId.toString(32);
              }
              id += ":";
            } else {
              var globalClientId = globalClientIdCounter++;
              id = ":" + identifierPrefix + "r" + globalClientId.toString(32) + ":";
            }
            hook.memoizedState = id;
            return id;
          }
          function updateId() {
            var hook = updateWorkInProgressHook();
            var id = hook.memoizedState;
            return id;
          }
          function dispatchReducerAction(fiber, queue, action) {
            {
              if (typeof arguments[3] === "function") {
                error("State updates from the useState() and useReducer() Hooks don't support the second callback argument. To execute a side effect after rendering, declare it in the component body with useEffect().");
              }
            }
            var lane = requestUpdateLane(fiber);
            var update = {
              lane,
              action,
              hasEagerState: false,
              eagerState: null,
              next: null
            };
            if (isRenderPhaseUpdate(fiber)) {
              enqueueRenderPhaseUpdate(queue, update);
            } else {
              enqueueUpdate$1(fiber, queue, update);
              var eventTime = requestEventTime();
              var root3 = scheduleUpdateOnFiber(fiber, lane, eventTime);
              if (root3 !== null) {
                entangleTransitionUpdate(root3, queue, lane);
              }
            }
            markUpdateInDevTools(fiber, lane);
          }
          function dispatchSetState(fiber, queue, action) {
            {
              if (typeof arguments[3] === "function") {
                error("State updates from the useState() and useReducer() Hooks don't support the second callback argument. To execute a side effect after rendering, declare it in the component body with useEffect().");
              }
            }
            var lane = requestUpdateLane(fiber);
            var update = {
              lane,
              action,
              hasEagerState: false,
              eagerState: null,
              next: null
            };
            if (isRenderPhaseUpdate(fiber)) {
              enqueueRenderPhaseUpdate(queue, update);
            } else {
              enqueueUpdate$1(fiber, queue, update);
              var alternate = fiber.alternate;
              if (fiber.lanes === NoLanes && (alternate === null || alternate.lanes === NoLanes)) {
                var lastRenderedReducer = queue.lastRenderedReducer;
                if (lastRenderedReducer !== null) {
                  var prevDispatcher;
                  {
                    prevDispatcher = ReactCurrentDispatcher$1.current;
                    ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                  }
                  try {
                    var currentState = queue.lastRenderedState;
                    var eagerState = lastRenderedReducer(currentState, action);
                    update.hasEagerState = true;
                    update.eagerState = eagerState;
                    if (objectIs(eagerState, currentState)) {
                      return;
                    }
                  } catch (error2) {
                  } finally {
                    {
                      ReactCurrentDispatcher$1.current = prevDispatcher;
                    }
                  }
                }
              }
              var eventTime = requestEventTime();
              var root3 = scheduleUpdateOnFiber(fiber, lane, eventTime);
              if (root3 !== null) {
                entangleTransitionUpdate(root3, queue, lane);
              }
            }
            markUpdateInDevTools(fiber, lane);
          }
          function isRenderPhaseUpdate(fiber) {
            var alternate = fiber.alternate;
            return fiber === currentlyRenderingFiber$1 || alternate !== null && alternate === currentlyRenderingFiber$1;
          }
          function enqueueRenderPhaseUpdate(queue, update) {
            didScheduleRenderPhaseUpdateDuringThisPass = didScheduleRenderPhaseUpdate = true;
            var pending = queue.pending;
            if (pending === null) {
              update.next = update;
            } else {
              update.next = pending.next;
              pending.next = update;
            }
            queue.pending = update;
          }
          function enqueueUpdate$1(fiber, queue, update, lane) {
            if (isInterleavedUpdate(fiber)) {
              var interleaved = queue.interleaved;
              if (interleaved === null) {
                update.next = update;
                pushInterleavedQueue(queue);
              } else {
                update.next = interleaved.next;
                interleaved.next = update;
              }
              queue.interleaved = update;
            } else {
              var pending = queue.pending;
              if (pending === null) {
                update.next = update;
              } else {
                update.next = pending.next;
                pending.next = update;
              }
              queue.pending = update;
            }
          }
          function entangleTransitionUpdate(root3, queue, lane) {
            if (isTransitionLane(lane)) {
              var queueLanes = queue.lanes;
              queueLanes = intersectLanes(queueLanes, root3.pendingLanes);
              var newQueueLanes = mergeLanes(queueLanes, lane);
              queue.lanes = newQueueLanes;
              markRootEntangled(root3, newQueueLanes);
            }
          }
          function markUpdateInDevTools(fiber, lane, action) {
            {
              markStateUpdateScheduled(fiber, lane);
            }
          }
          var ContextOnlyDispatcher = {
            readContext,
            useCallback: throwInvalidHookError,
            useContext: throwInvalidHookError,
            useEffect: throwInvalidHookError,
            useImperativeHandle: throwInvalidHookError,
            useInsertionEffect: throwInvalidHookError,
            useLayoutEffect: throwInvalidHookError,
            useMemo: throwInvalidHookError,
            useReducer: throwInvalidHookError,
            useRef: throwInvalidHookError,
            useState: throwInvalidHookError,
            useDebugValue: throwInvalidHookError,
            useDeferredValue: throwInvalidHookError,
            useTransition: throwInvalidHookError,
            useMutableSource: throwInvalidHookError,
            useSyncExternalStore: throwInvalidHookError,
            useId: throwInvalidHookError,
            unstable_isNewReconciler: enableNewReconciler
          };
          var HooksDispatcherOnMountInDEV = null;
          var HooksDispatcherOnMountWithHookTypesInDEV = null;
          var HooksDispatcherOnUpdateInDEV = null;
          var HooksDispatcherOnRerenderInDEV = null;
          var InvalidNestedHooksDispatcherOnMountInDEV = null;
          var InvalidNestedHooksDispatcherOnUpdateInDEV = null;
          var InvalidNestedHooksDispatcherOnRerenderInDEV = null;
          {
            var warnInvalidContextAccess = function() {
              error("Context can only be read while React is rendering. In classes, you can read it in the render method or getDerivedStateFromProps. In function components, you can read it directly in the function body, but not inside Hooks like useReducer() or useMemo().");
            };
            var warnInvalidHookAccess = function() {
              error("Do not call Hooks inside useEffect(...), useMemo(...), or other built-in Hooks. You can only call Hooks at the top level of your React function. For more information, see https://reactjs.org/link/rules-of-hooks");
            };
            HooksDispatcherOnMountInDEV = {
              readContext: function(context) {
                return readContext(context);
              },
              useCallback: function(callback, deps) {
                currentHookNameInDev = "useCallback";
                mountHookTypesDev();
                checkDepsAreArrayDev(deps);
                return mountCallback(callback, deps);
              },
              useContext: function(context) {
                currentHookNameInDev = "useContext";
                mountHookTypesDev();
                return readContext(context);
              },
              useEffect: function(create, deps) {
                currentHookNameInDev = "useEffect";
                mountHookTypesDev();
                checkDepsAreArrayDev(deps);
                return mountEffect(create, deps);
              },
              useImperativeHandle: function(ref, create, deps) {
                currentHookNameInDev = "useImperativeHandle";
                mountHookTypesDev();
                checkDepsAreArrayDev(deps);
                return mountImperativeHandle(ref, create, deps);
              },
              useInsertionEffect: function(create, deps) {
                currentHookNameInDev = "useInsertionEffect";
                mountHookTypesDev();
                checkDepsAreArrayDev(deps);
                return mountInsertionEffect(create, deps);
              },
              useLayoutEffect: function(create, deps) {
                currentHookNameInDev = "useLayoutEffect";
                mountHookTypesDev();
                checkDepsAreArrayDev(deps);
                return mountLayoutEffect(create, deps);
              },
              useMemo: function(create, deps) {
                currentHookNameInDev = "useMemo";
                mountHookTypesDev();
                checkDepsAreArrayDev(deps);
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
                try {
                  return mountMemo(create, deps);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useReducer: function(reducer, initialArg, init) {
                currentHookNameInDev = "useReducer";
                mountHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
                try {
                  return mountReducer(reducer, initialArg, init);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useRef: function(initialValue) {
                currentHookNameInDev = "useRef";
                mountHookTypesDev();
                return mountRef(initialValue);
              },
              useState: function(initialState) {
                currentHookNameInDev = "useState";
                mountHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
                try {
                  return mountState(initialState);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useDebugValue: function(value, formatterFn) {
                currentHookNameInDev = "useDebugValue";
                mountHookTypesDev();
                return mountDebugValue();
              },
              useDeferredValue: function(value) {
                currentHookNameInDev = "useDeferredValue";
                mountHookTypesDev();
                return mountDeferredValue(value);
              },
              useTransition: function() {
                currentHookNameInDev = "useTransition";
                mountHookTypesDev();
                return mountTransition();
              },
              useMutableSource: function(source, getSnapshot, subscribe) {
                currentHookNameInDev = "useMutableSource";
                mountHookTypesDev();
                return mountMutableSource();
              },
              useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {
                currentHookNameInDev = "useSyncExternalStore";
                mountHookTypesDev();
                return mountSyncExternalStore(subscribe, getSnapshot, getServerSnapshot);
              },
              useId: function() {
                currentHookNameInDev = "useId";
                mountHookTypesDev();
                return mountId();
              },
              unstable_isNewReconciler: enableNewReconciler
            };
            HooksDispatcherOnMountWithHookTypesInDEV = {
              readContext: function(context) {
                return readContext(context);
              },
              useCallback: function(callback, deps) {
                currentHookNameInDev = "useCallback";
                updateHookTypesDev();
                return mountCallback(callback, deps);
              },
              useContext: function(context) {
                currentHookNameInDev = "useContext";
                updateHookTypesDev();
                return readContext(context);
              },
              useEffect: function(create, deps) {
                currentHookNameInDev = "useEffect";
                updateHookTypesDev();
                return mountEffect(create, deps);
              },
              useImperativeHandle: function(ref, create, deps) {
                currentHookNameInDev = "useImperativeHandle";
                updateHookTypesDev();
                return mountImperativeHandle(ref, create, deps);
              },
              useInsertionEffect: function(create, deps) {
                currentHookNameInDev = "useInsertionEffect";
                updateHookTypesDev();
                return mountInsertionEffect(create, deps);
              },
              useLayoutEffect: function(create, deps) {
                currentHookNameInDev = "useLayoutEffect";
                updateHookTypesDev();
                return mountLayoutEffect(create, deps);
              },
              useMemo: function(create, deps) {
                currentHookNameInDev = "useMemo";
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
                try {
                  return mountMemo(create, deps);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useReducer: function(reducer, initialArg, init) {
                currentHookNameInDev = "useReducer";
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
                try {
                  return mountReducer(reducer, initialArg, init);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useRef: function(initialValue) {
                currentHookNameInDev = "useRef";
                updateHookTypesDev();
                return mountRef(initialValue);
              },
              useState: function(initialState) {
                currentHookNameInDev = "useState";
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
                try {
                  return mountState(initialState);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useDebugValue: function(value, formatterFn) {
                currentHookNameInDev = "useDebugValue";
                updateHookTypesDev();
                return mountDebugValue();
              },
              useDeferredValue: function(value) {
                currentHookNameInDev = "useDeferredValue";
                updateHookTypesDev();
                return mountDeferredValue(value);
              },
              useTransition: function() {
                currentHookNameInDev = "useTransition";
                updateHookTypesDev();
                return mountTransition();
              },
              useMutableSource: function(source, getSnapshot, subscribe) {
                currentHookNameInDev = "useMutableSource";
                updateHookTypesDev();
                return mountMutableSource();
              },
              useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {
                currentHookNameInDev = "useSyncExternalStore";
                updateHookTypesDev();
                return mountSyncExternalStore(subscribe, getSnapshot, getServerSnapshot);
              },
              useId: function() {
                currentHookNameInDev = "useId";
                updateHookTypesDev();
                return mountId();
              },
              unstable_isNewReconciler: enableNewReconciler
            };
            HooksDispatcherOnUpdateInDEV = {
              readContext: function(context) {
                return readContext(context);
              },
              useCallback: function(callback, deps) {
                currentHookNameInDev = "useCallback";
                updateHookTypesDev();
                return updateCallback(callback, deps);
              },
              useContext: function(context) {
                currentHookNameInDev = "useContext";
                updateHookTypesDev();
                return readContext(context);
              },
              useEffect: function(create, deps) {
                currentHookNameInDev = "useEffect";
                updateHookTypesDev();
                return updateEffect(create, deps);
              },
              useImperativeHandle: function(ref, create, deps) {
                currentHookNameInDev = "useImperativeHandle";
                updateHookTypesDev();
                return updateImperativeHandle(ref, create, deps);
              },
              useInsertionEffect: function(create, deps) {
                currentHookNameInDev = "useInsertionEffect";
                updateHookTypesDev();
                return updateInsertionEffect(create, deps);
              },
              useLayoutEffect: function(create, deps) {
                currentHookNameInDev = "useLayoutEffect";
                updateHookTypesDev();
                return updateLayoutEffect(create, deps);
              },
              useMemo: function(create, deps) {
                currentHookNameInDev = "useMemo";
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                try {
                  return updateMemo(create, deps);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useReducer: function(reducer, initialArg, init) {
                currentHookNameInDev = "useReducer";
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                try {
                  return updateReducer(reducer, initialArg, init);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useRef: function(initialValue) {
                currentHookNameInDev = "useRef";
                updateHookTypesDev();
                return updateRef();
              },
              useState: function(initialState) {
                currentHookNameInDev = "useState";
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                try {
                  return updateState(initialState);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useDebugValue: function(value, formatterFn) {
                currentHookNameInDev = "useDebugValue";
                updateHookTypesDev();
                return updateDebugValue();
              },
              useDeferredValue: function(value) {
                currentHookNameInDev = "useDeferredValue";
                updateHookTypesDev();
                return updateDeferredValue(value);
              },
              useTransition: function() {
                currentHookNameInDev = "useTransition";
                updateHookTypesDev();
                return updateTransition();
              },
              useMutableSource: function(source, getSnapshot, subscribe) {
                currentHookNameInDev = "useMutableSource";
                updateHookTypesDev();
                return updateMutableSource();
              },
              useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {
                currentHookNameInDev = "useSyncExternalStore";
                updateHookTypesDev();
                return updateSyncExternalStore(subscribe, getSnapshot);
              },
              useId: function() {
                currentHookNameInDev = "useId";
                updateHookTypesDev();
                return updateId();
              },
              unstable_isNewReconciler: enableNewReconciler
            };
            HooksDispatcherOnRerenderInDEV = {
              readContext: function(context) {
                return readContext(context);
              },
              useCallback: function(callback, deps) {
                currentHookNameInDev = "useCallback";
                updateHookTypesDev();
                return updateCallback(callback, deps);
              },
              useContext: function(context) {
                currentHookNameInDev = "useContext";
                updateHookTypesDev();
                return readContext(context);
              },
              useEffect: function(create, deps) {
                currentHookNameInDev = "useEffect";
                updateHookTypesDev();
                return updateEffect(create, deps);
              },
              useImperativeHandle: function(ref, create, deps) {
                currentHookNameInDev = "useImperativeHandle";
                updateHookTypesDev();
                return updateImperativeHandle(ref, create, deps);
              },
              useInsertionEffect: function(create, deps) {
                currentHookNameInDev = "useInsertionEffect";
                updateHookTypesDev();
                return updateInsertionEffect(create, deps);
              },
              useLayoutEffect: function(create, deps) {
                currentHookNameInDev = "useLayoutEffect";
                updateHookTypesDev();
                return updateLayoutEffect(create, deps);
              },
              useMemo: function(create, deps) {
                currentHookNameInDev = "useMemo";
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnRerenderInDEV;
                try {
                  return updateMemo(create, deps);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useReducer: function(reducer, initialArg, init) {
                currentHookNameInDev = "useReducer";
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnRerenderInDEV;
                try {
                  return rerenderReducer(reducer, initialArg, init);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useRef: function(initialValue) {
                currentHookNameInDev = "useRef";
                updateHookTypesDev();
                return updateRef();
              },
              useState: function(initialState) {
                currentHookNameInDev = "useState";
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnRerenderInDEV;
                try {
                  return rerenderState(initialState);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useDebugValue: function(value, formatterFn) {
                currentHookNameInDev = "useDebugValue";
                updateHookTypesDev();
                return updateDebugValue();
              },
              useDeferredValue: function(value) {
                currentHookNameInDev = "useDeferredValue";
                updateHookTypesDev();
                return rerenderDeferredValue(value);
              },
              useTransition: function() {
                currentHookNameInDev = "useTransition";
                updateHookTypesDev();
                return rerenderTransition();
              },
              useMutableSource: function(source, getSnapshot, subscribe) {
                currentHookNameInDev = "useMutableSource";
                updateHookTypesDev();
                return updateMutableSource();
              },
              useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {
                currentHookNameInDev = "useSyncExternalStore";
                updateHookTypesDev();
                return updateSyncExternalStore(subscribe, getSnapshot);
              },
              useId: function() {
                currentHookNameInDev = "useId";
                updateHookTypesDev();
                return updateId();
              },
              unstable_isNewReconciler: enableNewReconciler
            };
            InvalidNestedHooksDispatcherOnMountInDEV = {
              readContext: function(context) {
                warnInvalidContextAccess();
                return readContext(context);
              },
              useCallback: function(callback, deps) {
                currentHookNameInDev = "useCallback";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountCallback(callback, deps);
              },
              useContext: function(context) {
                currentHookNameInDev = "useContext";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return readContext(context);
              },
              useEffect: function(create, deps) {
                currentHookNameInDev = "useEffect";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountEffect(create, deps);
              },
              useImperativeHandle: function(ref, create, deps) {
                currentHookNameInDev = "useImperativeHandle";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountImperativeHandle(ref, create, deps);
              },
              useInsertionEffect: function(create, deps) {
                currentHookNameInDev = "useInsertionEffect";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountInsertionEffect(create, deps);
              },
              useLayoutEffect: function(create, deps) {
                currentHookNameInDev = "useLayoutEffect";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountLayoutEffect(create, deps);
              },
              useMemo: function(create, deps) {
                currentHookNameInDev = "useMemo";
                warnInvalidHookAccess();
                mountHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
                try {
                  return mountMemo(create, deps);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useReducer: function(reducer, initialArg, init) {
                currentHookNameInDev = "useReducer";
                warnInvalidHookAccess();
                mountHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
                try {
                  return mountReducer(reducer, initialArg, init);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useRef: function(initialValue) {
                currentHookNameInDev = "useRef";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountRef(initialValue);
              },
              useState: function(initialState) {
                currentHookNameInDev = "useState";
                warnInvalidHookAccess();
                mountHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
                try {
                  return mountState(initialState);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useDebugValue: function(value, formatterFn) {
                currentHookNameInDev = "useDebugValue";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountDebugValue();
              },
              useDeferredValue: function(value) {
                currentHookNameInDev = "useDeferredValue";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountDeferredValue(value);
              },
              useTransition: function() {
                currentHookNameInDev = "useTransition";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountTransition();
              },
              useMutableSource: function(source, getSnapshot, subscribe) {
                currentHookNameInDev = "useMutableSource";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountMutableSource();
              },
              useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {
                currentHookNameInDev = "useSyncExternalStore";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountSyncExternalStore(subscribe, getSnapshot, getServerSnapshot);
              },
              useId: function() {
                currentHookNameInDev = "useId";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountId();
              },
              unstable_isNewReconciler: enableNewReconciler
            };
            InvalidNestedHooksDispatcherOnUpdateInDEV = {
              readContext: function(context) {
                warnInvalidContextAccess();
                return readContext(context);
              },
              useCallback: function(callback, deps) {
                currentHookNameInDev = "useCallback";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateCallback(callback, deps);
              },
              useContext: function(context) {
                currentHookNameInDev = "useContext";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return readContext(context);
              },
              useEffect: function(create, deps) {
                currentHookNameInDev = "useEffect";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateEffect(create, deps);
              },
              useImperativeHandle: function(ref, create, deps) {
                currentHookNameInDev = "useImperativeHandle";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateImperativeHandle(ref, create, deps);
              },
              useInsertionEffect: function(create, deps) {
                currentHookNameInDev = "useInsertionEffect";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateInsertionEffect(create, deps);
              },
              useLayoutEffect: function(create, deps) {
                currentHookNameInDev = "useLayoutEffect";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateLayoutEffect(create, deps);
              },
              useMemo: function(create, deps) {
                currentHookNameInDev = "useMemo";
                warnInvalidHookAccess();
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                try {
                  return updateMemo(create, deps);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useReducer: function(reducer, initialArg, init) {
                currentHookNameInDev = "useReducer";
                warnInvalidHookAccess();
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                try {
                  return updateReducer(reducer, initialArg, init);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useRef: function(initialValue) {
                currentHookNameInDev = "useRef";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateRef();
              },
              useState: function(initialState) {
                currentHookNameInDev = "useState";
                warnInvalidHookAccess();
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                try {
                  return updateState(initialState);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useDebugValue: function(value, formatterFn) {
                currentHookNameInDev = "useDebugValue";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateDebugValue();
              },
              useDeferredValue: function(value) {
                currentHookNameInDev = "useDeferredValue";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateDeferredValue(value);
              },
              useTransition: function() {
                currentHookNameInDev = "useTransition";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateTransition();
              },
              useMutableSource: function(source, getSnapshot, subscribe) {
                currentHookNameInDev = "useMutableSource";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateMutableSource();
              },
              useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {
                currentHookNameInDev = "useSyncExternalStore";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateSyncExternalStore(subscribe, getSnapshot);
              },
              useId: function() {
                currentHookNameInDev = "useId";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateId();
              },
              unstable_isNewReconciler: enableNewReconciler
            };
            InvalidNestedHooksDispatcherOnRerenderInDEV = {
              readContext: function(context) {
                warnInvalidContextAccess();
                return readContext(context);
              },
              useCallback: function(callback, deps) {
                currentHookNameInDev = "useCallback";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateCallback(callback, deps);
              },
              useContext: function(context) {
                currentHookNameInDev = "useContext";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return readContext(context);
              },
              useEffect: function(create, deps) {
                currentHookNameInDev = "useEffect";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateEffect(create, deps);
              },
              useImperativeHandle: function(ref, create, deps) {
                currentHookNameInDev = "useImperativeHandle";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateImperativeHandle(ref, create, deps);
              },
              useInsertionEffect: function(create, deps) {
                currentHookNameInDev = "useInsertionEffect";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateInsertionEffect(create, deps);
              },
              useLayoutEffect: function(create, deps) {
                currentHookNameInDev = "useLayoutEffect";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateLayoutEffect(create, deps);
              },
              useMemo: function(create, deps) {
                currentHookNameInDev = "useMemo";
                warnInvalidHookAccess();
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                try {
                  return updateMemo(create, deps);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useReducer: function(reducer, initialArg, init) {
                currentHookNameInDev = "useReducer";
                warnInvalidHookAccess();
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                try {
                  return rerenderReducer(reducer, initialArg, init);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useRef: function(initialValue) {
                currentHookNameInDev = "useRef";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateRef();
              },
              useState: function(initialState) {
                currentHookNameInDev = "useState";
                warnInvalidHookAccess();
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                try {
                  return rerenderState(initialState);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useDebugValue: function(value, formatterFn) {
                currentHookNameInDev = "useDebugValue";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateDebugValue();
              },
              useDeferredValue: function(value) {
                currentHookNameInDev = "useDeferredValue";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return rerenderDeferredValue(value);
              },
              useTransition: function() {
                currentHookNameInDev = "useTransition";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return rerenderTransition();
              },
              useMutableSource: function(source, getSnapshot, subscribe) {
                currentHookNameInDev = "useMutableSource";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateMutableSource();
              },
              useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {
                currentHookNameInDev = "useSyncExternalStore";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateSyncExternalStore(subscribe, getSnapshot);
              },
              useId: function() {
                currentHookNameInDev = "useId";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateId();
              },
              unstable_isNewReconciler: enableNewReconciler
            };
          }
          var now$1 = Scheduler.unstable_now;
          var commitTime = 0;
          var layoutEffectStartTime = -1;
          var profilerStartTime = -1;
          var passiveEffectStartTime = -1;
          var currentUpdateIsNested = false;
          var nestedUpdateScheduled = false;
          function isCurrentUpdateNested() {
            return currentUpdateIsNested;
          }
          function markNestedUpdateScheduled() {
            {
              nestedUpdateScheduled = true;
            }
          }
          function resetNestedUpdateFlag() {
            {
              currentUpdateIsNested = false;
              nestedUpdateScheduled = false;
            }
          }
          function syncNestedUpdateFlag() {
            {
              currentUpdateIsNested = nestedUpdateScheduled;
              nestedUpdateScheduled = false;
            }
          }
          function getCommitTime() {
            return commitTime;
          }
          function recordCommitTime() {
            commitTime = now$1();
          }
          function startProfilerTimer(fiber) {
            profilerStartTime = now$1();
            if (fiber.actualStartTime < 0) {
              fiber.actualStartTime = now$1();
            }
          }
          function stopProfilerTimerIfRunning(fiber) {
            profilerStartTime = -1;
          }
          function stopProfilerTimerIfRunningAndRecordDelta(fiber, overrideBaseTime) {
            if (profilerStartTime >= 0) {
              var elapsedTime = now$1() - profilerStartTime;
              fiber.actualDuration += elapsedTime;
              if (overrideBaseTime) {
                fiber.selfBaseDuration = elapsedTime;
              }
              profilerStartTime = -1;
            }
          }
          function recordLayoutEffectDuration(fiber) {
            if (layoutEffectStartTime >= 0) {
              var elapsedTime = now$1() - layoutEffectStartTime;
              layoutEffectStartTime = -1;
              var parentFiber = fiber.return;
              while (parentFiber !== null) {
                switch (parentFiber.tag) {
                  case HostRoot:
                    var root3 = parentFiber.stateNode;
                    root3.effectDuration += elapsedTime;
                    return;
                  case Profiler:
                    var parentStateNode = parentFiber.stateNode;
                    parentStateNode.effectDuration += elapsedTime;
                    return;
                }
                parentFiber = parentFiber.return;
              }
            }
          }
          function recordPassiveEffectDuration(fiber) {
            if (passiveEffectStartTime >= 0) {
              var elapsedTime = now$1() - passiveEffectStartTime;
              passiveEffectStartTime = -1;
              var parentFiber = fiber.return;
              while (parentFiber !== null) {
                switch (parentFiber.tag) {
                  case HostRoot:
                    var root3 = parentFiber.stateNode;
                    if (root3 !== null) {
                      root3.passiveEffectDuration += elapsedTime;
                    }
                    return;
                  case Profiler:
                    var parentStateNode = parentFiber.stateNode;
                    if (parentStateNode !== null) {
                      parentStateNode.passiveEffectDuration += elapsedTime;
                    }
                    return;
                }
                parentFiber = parentFiber.return;
              }
            }
          }
          function startLayoutEffectTimer() {
            layoutEffectStartTime = now$1();
          }
          function startPassiveEffectTimer() {
            passiveEffectStartTime = now$1();
          }
          function transferActualDuration(fiber) {
            var child = fiber.child;
            while (child) {
              fiber.actualDuration += child.actualDuration;
              child = child.sibling;
            }
          }
          function createCapturedValue(value, source) {
            return {
              value,
              source,
              stack: getStackByFiberInDevAndProd(source)
            };
          }
          function showErrorDialog(boundary, errorInfo) {
            return true;
          }
          function logCapturedError(boundary, errorInfo) {
            try {
              var logError = showErrorDialog(boundary, errorInfo);
              if (logError === false) {
                return;
              }
              var error2 = errorInfo.value;
              if (true) {
                var source = errorInfo.source;
                var stack = errorInfo.stack;
                var componentStack = stack !== null ? stack : "";
                if (error2 != null && error2._suppressLogging) {
                  if (boundary.tag === ClassComponent) {
                    return;
                  }
                  console["error"](error2);
                }
                var componentName = source ? getComponentNameFromFiber(source) : null;
                var componentNameMessage = componentName ? "The above error occurred in the <" + componentName + "> component:" : "The above error occurred in one of your React components:";
                var errorBoundaryMessage;
                if (boundary.tag === HostRoot) {
                  errorBoundaryMessage = "Consider adding an error boundary to your tree to customize error handling behavior.\nVisit https://reactjs.org/link/error-boundaries to learn more about error boundaries.";
                } else {
                  var errorBoundaryName = getComponentNameFromFiber(boundary) || "Anonymous";
                  errorBoundaryMessage = "React will try to recreate this component tree from scratch " + ("using the error boundary you provided, " + errorBoundaryName + ".");
                }
                var combinedMessage = componentNameMessage + "\n" + componentStack + "\n\n" + ("" + errorBoundaryMessage);
                console["error"](combinedMessage);
              } else {
                console["error"](error2);
              }
            } catch (e4) {
              setTimeout(function() {
                throw e4;
              });
            }
          }
          var PossiblyWeakMap$1 = typeof WeakMap === "function" ? WeakMap : Map;
          function createRootErrorUpdate(fiber, errorInfo, lane) {
            var update = createUpdate(NoTimestamp, lane);
            update.tag = CaptureUpdate;
            update.payload = {
              element: null
            };
            var error2 = errorInfo.value;
            update.callback = function() {
              onUncaughtError(error2);
              logCapturedError(fiber, errorInfo);
            };
            return update;
          }
          function createClassErrorUpdate(fiber, errorInfo, lane) {
            var update = createUpdate(NoTimestamp, lane);
            update.tag = CaptureUpdate;
            var getDerivedStateFromError = fiber.type.getDerivedStateFromError;
            if (typeof getDerivedStateFromError === "function") {
              var error$1 = errorInfo.value;
              update.payload = function() {
                return getDerivedStateFromError(error$1);
              };
              update.callback = function() {
                {
                  markFailedErrorBoundaryForHotReloading(fiber);
                }
                logCapturedError(fiber, errorInfo);
              };
            }
            var inst = fiber.stateNode;
            if (inst !== null && typeof inst.componentDidCatch === "function") {
              update.callback = function callback() {
                {
                  markFailedErrorBoundaryForHotReloading(fiber);
                }
                logCapturedError(fiber, errorInfo);
                if (typeof getDerivedStateFromError !== "function") {
                  markLegacyErrorBoundaryAsFailed(this);
                }
                var error$12 = errorInfo.value;
                var stack = errorInfo.stack;
                this.componentDidCatch(error$12, {
                  componentStack: stack !== null ? stack : ""
                });
                {
                  if (typeof getDerivedStateFromError !== "function") {
                    if (!includesSomeLane(fiber.lanes, SyncLane)) {
                      error("%s: Error boundaries should implement getDerivedStateFromError(). In that method, return a state update to display an error message or fallback UI.", getComponentNameFromFiber(fiber) || "Unknown");
                    }
                  }
                }
              };
            }
            return update;
          }
          function attachPingListener(root3, wakeable, lanes) {
            var pingCache = root3.pingCache;
            var threadIDs;
            if (pingCache === null) {
              pingCache = root3.pingCache = new PossiblyWeakMap$1();
              threadIDs = /* @__PURE__ */ new Set();
              pingCache.set(wakeable, threadIDs);
            } else {
              threadIDs = pingCache.get(wakeable);
              if (threadIDs === void 0) {
                threadIDs = /* @__PURE__ */ new Set();
                pingCache.set(wakeable, threadIDs);
              }
            }
            if (!threadIDs.has(lanes)) {
              threadIDs.add(lanes);
              var ping = pingSuspendedRoot.bind(null, root3, wakeable, lanes);
              {
                if (isDevToolsPresent) {
                  restorePendingUpdaters(root3, lanes);
                }
              }
              wakeable.then(ping, ping);
            }
          }
          function attachRetryListener(suspenseBoundary, root3, wakeable, lanes) {
            var wakeables = suspenseBoundary.updateQueue;
            if (wakeables === null) {
              var updateQueue = /* @__PURE__ */ new Set();
              updateQueue.add(wakeable);
              suspenseBoundary.updateQueue = updateQueue;
            } else {
              wakeables.add(wakeable);
            }
          }
          function resetSuspendedComponent(sourceFiber, rootRenderLanes) {
            var tag = sourceFiber.tag;
            if ((sourceFiber.mode & ConcurrentMode) === NoMode && (tag === FunctionComponent || tag === ForwardRef || tag === SimpleMemoComponent)) {
              var currentSource = sourceFiber.alternate;
              if (currentSource) {
                sourceFiber.updateQueue = currentSource.updateQueue;
                sourceFiber.memoizedState = currentSource.memoizedState;
                sourceFiber.lanes = currentSource.lanes;
              } else {
                sourceFiber.updateQueue = null;
                sourceFiber.memoizedState = null;
              }
            }
          }
          function getNearestSuspenseBoundaryToCapture(returnFiber) {
            var node = returnFiber;
            do {
              if (node.tag === SuspenseComponent && shouldCaptureSuspense(node)) {
                return node;
              }
              node = node.return;
            } while (node !== null);
            return null;
          }
          function markSuspenseBoundaryShouldCapture(suspenseBoundary, returnFiber, sourceFiber, root3, rootRenderLanes) {
            if ((suspenseBoundary.mode & ConcurrentMode) === NoMode) {
              if (suspenseBoundary === returnFiber) {
                suspenseBoundary.flags |= ShouldCapture;
              } else {
                suspenseBoundary.flags |= DidCapture;
                sourceFiber.flags |= ForceUpdateForLegacySuspense;
                sourceFiber.flags &= ~(LifecycleEffectMask | Incomplete);
                if (sourceFiber.tag === ClassComponent) {
                  var currentSourceFiber = sourceFiber.alternate;
                  if (currentSourceFiber === null) {
                    sourceFiber.tag = IncompleteClassComponent;
                  } else {
                    var update = createUpdate(NoTimestamp, SyncLane);
                    update.tag = ForceUpdate;
                    enqueueUpdate(sourceFiber, update);
                  }
                }
                sourceFiber.lanes = mergeLanes(sourceFiber.lanes, SyncLane);
              }
              return suspenseBoundary;
            }
            suspenseBoundary.flags |= ShouldCapture;
            suspenseBoundary.lanes = rootRenderLanes;
            return suspenseBoundary;
          }
          function throwException(root3, returnFiber, sourceFiber, value, rootRenderLanes) {
            sourceFiber.flags |= Incomplete;
            {
              if (isDevToolsPresent) {
                restorePendingUpdaters(root3, rootRenderLanes);
              }
            }
            if (value !== null && typeof value === "object" && typeof value.then === "function") {
              var wakeable = value;
              resetSuspendedComponent(sourceFiber);
              var suspenseBoundary = getNearestSuspenseBoundaryToCapture(returnFiber);
              if (suspenseBoundary !== null) {
                suspenseBoundary.flags &= ~ForceClientRender;
                markSuspenseBoundaryShouldCapture(suspenseBoundary, returnFiber, sourceFiber, root3, rootRenderLanes);
                if (suspenseBoundary.mode & ConcurrentMode) {
                  attachPingListener(root3, wakeable, rootRenderLanes);
                }
                attachRetryListener(suspenseBoundary, root3, wakeable);
                return;
              } else {
                if (!includesSyncLane(rootRenderLanes)) {
                  attachPingListener(root3, wakeable, rootRenderLanes);
                  renderDidSuspendDelayIfPossible();
                  return;
                }
                var uncaughtSuspenseError = new Error("A component suspended while responding to synchronous input. This will cause the UI to be replaced with a loading indicator. To fix, updates that suspend should be wrapped with startTransition.");
                value = uncaughtSuspenseError;
              }
            } else {
              if (getIsHydrating() && sourceFiber.mode & ConcurrentMode) {
                markDidSuspendWhileHydratingDEV();
                var _suspenseBoundary = getNearestSuspenseBoundaryToCapture(returnFiber);
                if (_suspenseBoundary !== null) {
                  if ((_suspenseBoundary.flags & ShouldCapture) === NoFlags) {
                    _suspenseBoundary.flags |= ForceClientRender;
                  }
                  markSuspenseBoundaryShouldCapture(_suspenseBoundary, returnFiber, sourceFiber, root3, rootRenderLanes);
                  queueHydrationError(value);
                  return;
                }
              }
            }
            renderDidError(value);
            value = createCapturedValue(value, sourceFiber);
            var workInProgress2 = returnFiber;
            do {
              switch (workInProgress2.tag) {
                case HostRoot: {
                  var _errorInfo = value;
                  workInProgress2.flags |= ShouldCapture;
                  var lane = pickArbitraryLane(rootRenderLanes);
                  workInProgress2.lanes = mergeLanes(workInProgress2.lanes, lane);
                  var update = createRootErrorUpdate(workInProgress2, _errorInfo, lane);
                  enqueueCapturedUpdate(workInProgress2, update);
                  return;
                }
                case ClassComponent:
                  var errorInfo = value;
                  var ctor = workInProgress2.type;
                  var instance = workInProgress2.stateNode;
                  if ((workInProgress2.flags & DidCapture) === NoFlags && (typeof ctor.getDerivedStateFromError === "function" || instance !== null && typeof instance.componentDidCatch === "function" && !isAlreadyFailedLegacyErrorBoundary(instance))) {
                    workInProgress2.flags |= ShouldCapture;
                    var _lane = pickArbitraryLane(rootRenderLanes);
                    workInProgress2.lanes = mergeLanes(workInProgress2.lanes, _lane);
                    var _update = createClassErrorUpdate(workInProgress2, errorInfo, _lane);
                    enqueueCapturedUpdate(workInProgress2, _update);
                    return;
                  }
                  break;
              }
              workInProgress2 = workInProgress2.return;
            } while (workInProgress2 !== null);
          }
          function getSuspendedCache() {
            {
              return null;
            }
          }
          function markUpdate(workInProgress2) {
            workInProgress2.flags |= Update;
          }
          function markRef(workInProgress2) {
            workInProgress2.flags |= Ref;
            {
              workInProgress2.flags |= RefStatic;
            }
          }
          var appendAllChildren;
          var updateHostContainer;
          var updateHostComponent;
          var updateHostText;
          {
            appendAllChildren = function(parent, workInProgress2, needsVisibilityToggle, isHidden) {
              var node = workInProgress2.child;
              while (node !== null) {
                if (node.tag === HostComponent || node.tag === HostText) {
                  appendInitialChild(parent, node.stateNode);
                } else if (node.tag === HostPortal)
                  ;
                else if (node.child !== null) {
                  node.child.return = node;
                  node = node.child;
                  continue;
                }
                if (node === workInProgress2) {
                  return;
                }
                while (node.sibling === null) {
                  if (node.return === null || node.return === workInProgress2) {
                    return;
                  }
                  node = node.return;
                }
                node.sibling.return = node.return;
                node = node.sibling;
              }
            };
            updateHostContainer = function(current2, workInProgress2) {
            };
            updateHostComponent = function(current2, workInProgress2, type, newProps, rootContainerInstance) {
              var oldProps = current2.memoizedProps;
              if (oldProps === newProps) {
                return;
              }
              var instance = workInProgress2.stateNode;
              var currentHostContext = getHostContext();
              var updatePayload = prepareUpdate(instance, type, oldProps, newProps, rootContainerInstance, currentHostContext);
              workInProgress2.updateQueue = updatePayload;
              if (updatePayload) {
                markUpdate(workInProgress2);
              }
            };
            updateHostText = function(current2, workInProgress2, oldText, newText) {
              if (oldText !== newText) {
                markUpdate(workInProgress2);
              }
            };
          }
          function cutOffTailIfNeeded(renderState, hasRenderedATailFallback) {
            if (getIsHydrating()) {
              return;
            }
            switch (renderState.tailMode) {
              case "hidden": {
                var tailNode = renderState.tail;
                var lastTailNode = null;
                while (tailNode !== null) {
                  if (tailNode.alternate !== null) {
                    lastTailNode = tailNode;
                  }
                  tailNode = tailNode.sibling;
                }
                if (lastTailNode === null) {
                  renderState.tail = null;
                } else {
                  lastTailNode.sibling = null;
                }
                break;
              }
              case "collapsed": {
                var _tailNode = renderState.tail;
                var _lastTailNode = null;
                while (_tailNode !== null) {
                  if (_tailNode.alternate !== null) {
                    _lastTailNode = _tailNode;
                  }
                  _tailNode = _tailNode.sibling;
                }
                if (_lastTailNode === null) {
                  if (!hasRenderedATailFallback && renderState.tail !== null) {
                    renderState.tail.sibling = null;
                  } else {
                    renderState.tail = null;
                  }
                } else {
                  _lastTailNode.sibling = null;
                }
                break;
              }
            }
          }
          function bubbleProperties(completedWork) {
            var didBailout = completedWork.alternate !== null && completedWork.alternate.child === completedWork.child;
            var newChildLanes = NoLanes;
            var subtreeFlags = NoFlags;
            if (!didBailout) {
              if ((completedWork.mode & ProfileMode) !== NoMode) {
                var actualDuration = completedWork.actualDuration;
                var treeBaseDuration = completedWork.selfBaseDuration;
                var child = completedWork.child;
                while (child !== null) {
                  newChildLanes = mergeLanes(newChildLanes, mergeLanes(child.lanes, child.childLanes));
                  subtreeFlags |= child.subtreeFlags;
                  subtreeFlags |= child.flags;
                  actualDuration += child.actualDuration;
                  treeBaseDuration += child.treeBaseDuration;
                  child = child.sibling;
                }
                completedWork.actualDuration = actualDuration;
                completedWork.treeBaseDuration = treeBaseDuration;
              } else {
                var _child = completedWork.child;
                while (_child !== null) {
                  newChildLanes = mergeLanes(newChildLanes, mergeLanes(_child.lanes, _child.childLanes));
                  subtreeFlags |= _child.subtreeFlags;
                  subtreeFlags |= _child.flags;
                  _child.return = completedWork;
                  _child = _child.sibling;
                }
              }
              completedWork.subtreeFlags |= subtreeFlags;
            } else {
              if ((completedWork.mode & ProfileMode) !== NoMode) {
                var _treeBaseDuration = completedWork.selfBaseDuration;
                var _child2 = completedWork.child;
                while (_child2 !== null) {
                  newChildLanes = mergeLanes(newChildLanes, mergeLanes(_child2.lanes, _child2.childLanes));
                  subtreeFlags |= _child2.subtreeFlags & StaticMask;
                  subtreeFlags |= _child2.flags & StaticMask;
                  _treeBaseDuration += _child2.treeBaseDuration;
                  _child2 = _child2.sibling;
                }
                completedWork.treeBaseDuration = _treeBaseDuration;
              } else {
                var _child3 = completedWork.child;
                while (_child3 !== null) {
                  newChildLanes = mergeLanes(newChildLanes, mergeLanes(_child3.lanes, _child3.childLanes));
                  subtreeFlags |= _child3.subtreeFlags & StaticMask;
                  subtreeFlags |= _child3.flags & StaticMask;
                  _child3.return = completedWork;
                  _child3 = _child3.sibling;
                }
              }
              completedWork.subtreeFlags |= subtreeFlags;
            }
            completedWork.childLanes = newChildLanes;
            return didBailout;
          }
          function completeWork(current2, workInProgress2, renderLanes2) {
            var newProps = workInProgress2.pendingProps;
            popTreeContext(workInProgress2);
            switch (workInProgress2.tag) {
              case IndeterminateComponent:
              case LazyComponent:
              case SimpleMemoComponent:
              case FunctionComponent:
              case ForwardRef:
              case Fragment4:
              case Mode:
              case Profiler:
              case ContextConsumer:
              case MemoComponent:
                bubbleProperties(workInProgress2);
                return null;
              case ClassComponent: {
                var Component = workInProgress2.type;
                if (isContextProvider(Component)) {
                  popContext(workInProgress2);
                }
                bubbleProperties(workInProgress2);
                return null;
              }
              case HostRoot: {
                var fiberRoot = workInProgress2.stateNode;
                popHostContainer(workInProgress2);
                popTopLevelContextObject(workInProgress2);
                resetWorkInProgressVersions();
                if (fiberRoot.pendingContext) {
                  fiberRoot.context = fiberRoot.pendingContext;
                  fiberRoot.pendingContext = null;
                }
                if (current2 === null || current2.child === null) {
                  var wasHydrated = popHydrationState(workInProgress2);
                  if (wasHydrated) {
                    markUpdate(workInProgress2);
                  } else {
                    if (current2 !== null) {
                      var prevState = current2.memoizedState;
                      if (!prevState.isDehydrated || (workInProgress2.flags & ForceClientRender) !== NoFlags) {
                        workInProgress2.flags |= Snapshot;
                        upgradeHydrationErrorsToRecoverable();
                      }
                    }
                  }
                }
                updateHostContainer(current2, workInProgress2);
                bubbleProperties(workInProgress2);
                return null;
              }
              case HostComponent: {
                popHostContext(workInProgress2);
                var rootContainerInstance = getRootHostContainer();
                var type = workInProgress2.type;
                if (current2 !== null && workInProgress2.stateNode != null) {
                  updateHostComponent(current2, workInProgress2, type, newProps, rootContainerInstance);
                  if (current2.ref !== workInProgress2.ref) {
                    markRef(workInProgress2);
                  }
                } else {
                  if (!newProps) {
                    if (workInProgress2.stateNode === null) {
                      throw new Error("We must have new props for new mounts. This error is likely caused by a bug in React. Please file an issue.");
                    }
                    bubbleProperties(workInProgress2);
                    return null;
                  }
                  var currentHostContext = getHostContext();
                  var _wasHydrated = popHydrationState(workInProgress2);
                  if (_wasHydrated) {
                    if (prepareToHydrateHostInstance(workInProgress2, rootContainerInstance, currentHostContext)) {
                      markUpdate(workInProgress2);
                    }
                  } else {
                    var instance = createInstance(type, newProps, rootContainerInstance, currentHostContext, workInProgress2);
                    appendAllChildren(instance, workInProgress2, false, false);
                    workInProgress2.stateNode = instance;
                    if (finalizeInitialChildren(instance, type, newProps, rootContainerInstance)) {
                      markUpdate(workInProgress2);
                    }
                  }
                  if (workInProgress2.ref !== null) {
                    markRef(workInProgress2);
                  }
                }
                bubbleProperties(workInProgress2);
                return null;
              }
              case HostText: {
                var newText = newProps;
                if (current2 && workInProgress2.stateNode != null) {
                  var oldText = current2.memoizedProps;
                  updateHostText(current2, workInProgress2, oldText, newText);
                } else {
                  if (typeof newText !== "string") {
                    if (workInProgress2.stateNode === null) {
                      throw new Error("We must have new props for new mounts. This error is likely caused by a bug in React. Please file an issue.");
                    }
                  }
                  var _rootContainerInstance = getRootHostContainer();
                  var _currentHostContext = getHostContext();
                  var _wasHydrated2 = popHydrationState(workInProgress2);
                  if (_wasHydrated2) {
                    if (prepareToHydrateHostTextInstance(workInProgress2)) {
                      markUpdate(workInProgress2);
                    }
                  } else {
                    workInProgress2.stateNode = createTextInstance(newText, _rootContainerInstance, _currentHostContext, workInProgress2);
                  }
                }
                bubbleProperties(workInProgress2);
                return null;
              }
              case SuspenseComponent: {
                popSuspenseContext(workInProgress2);
                var nextState = workInProgress2.memoizedState;
                {
                  if (hasUnhydratedTailNodes() && (workInProgress2.mode & ConcurrentMode) !== NoMode && (workInProgress2.flags & DidCapture) === NoFlags) {
                    warnIfUnhydratedTailNodes(workInProgress2);
                    resetHydrationState();
                    workInProgress2.flags |= ForceClientRender | Incomplete | ShouldCapture;
                    return workInProgress2;
                  }
                  if (nextState !== null && nextState.dehydrated !== null) {
                    var _wasHydrated3 = popHydrationState(workInProgress2);
                    if (current2 === null) {
                      if (!_wasHydrated3) {
                        throw new Error("A dehydrated suspense component was completed without a hydrated node. This is probably a bug in React.");
                      }
                      prepareToHydrateHostSuspenseInstance(workInProgress2);
                      bubbleProperties(workInProgress2);
                      {
                        if ((workInProgress2.mode & ProfileMode) !== NoMode) {
                          var isTimedOutSuspense = nextState !== null;
                          if (isTimedOutSuspense) {
                            var primaryChildFragment = workInProgress2.child;
                            if (primaryChildFragment !== null) {
                              workInProgress2.treeBaseDuration -= primaryChildFragment.treeBaseDuration;
                            }
                          }
                        }
                      }
                      return null;
                    } else {
                      resetHydrationState();
                      if ((workInProgress2.flags & DidCapture) === NoFlags) {
                        workInProgress2.memoizedState = null;
                      }
                      workInProgress2.flags |= Update;
                      bubbleProperties(workInProgress2);
                      {
                        if ((workInProgress2.mode & ProfileMode) !== NoMode) {
                          var _isTimedOutSuspense = nextState !== null;
                          if (_isTimedOutSuspense) {
                            var _primaryChildFragment = workInProgress2.child;
                            if (_primaryChildFragment !== null) {
                              workInProgress2.treeBaseDuration -= _primaryChildFragment.treeBaseDuration;
                            }
                          }
                        }
                      }
                      return null;
                    }
                  }
                  upgradeHydrationErrorsToRecoverable();
                }
                if ((workInProgress2.flags & DidCapture) !== NoFlags) {
                  workInProgress2.lanes = renderLanes2;
                  if ((workInProgress2.mode & ProfileMode) !== NoMode) {
                    transferActualDuration(workInProgress2);
                  }
                  return workInProgress2;
                }
                var nextDidTimeout = nextState !== null;
                var prevDidTimeout = false;
                if (current2 === null) {
                  popHydrationState(workInProgress2);
                } else {
                  var _prevState = current2.memoizedState;
                  prevDidTimeout = _prevState !== null;
                }
                if (nextDidTimeout && !prevDidTimeout) {
                  var _offscreenFiber = workInProgress2.child;
                  _offscreenFiber.flags |= Visibility;
                  if ((workInProgress2.mode & ConcurrentMode) !== NoMode) {
                    var hasInvisibleChildContext = current2 === null && (workInProgress2.memoizedProps.unstable_avoidThisFallback !== true || !enableSuspenseAvoidThisFallback);
                    if (hasInvisibleChildContext || hasSuspenseContext(suspenseStackCursor.current, InvisibleParentSuspenseContext)) {
                      renderDidSuspend();
                    } else {
                      renderDidSuspendDelayIfPossible();
                    }
                  }
                }
                var wakeables = workInProgress2.updateQueue;
                if (wakeables !== null) {
                  workInProgress2.flags |= Update;
                }
                bubbleProperties(workInProgress2);
                {
                  if ((workInProgress2.mode & ProfileMode) !== NoMode) {
                    if (nextDidTimeout) {
                      var _primaryChildFragment2 = workInProgress2.child;
                      if (_primaryChildFragment2 !== null) {
                        workInProgress2.treeBaseDuration -= _primaryChildFragment2.treeBaseDuration;
                      }
                    }
                  }
                }
                return null;
              }
              case HostPortal:
                popHostContainer(workInProgress2);
                updateHostContainer(current2, workInProgress2);
                if (current2 === null) {
                  preparePortalMount(workInProgress2.stateNode.containerInfo);
                }
                bubbleProperties(workInProgress2);
                return null;
              case ContextProvider:
                var context = workInProgress2.type._context;
                popProvider(context, workInProgress2);
                bubbleProperties(workInProgress2);
                return null;
              case IncompleteClassComponent: {
                var _Component = workInProgress2.type;
                if (isContextProvider(_Component)) {
                  popContext(workInProgress2);
                }
                bubbleProperties(workInProgress2);
                return null;
              }
              case SuspenseListComponent: {
                popSuspenseContext(workInProgress2);
                var renderState = workInProgress2.memoizedState;
                if (renderState === null) {
                  bubbleProperties(workInProgress2);
                  return null;
                }
                var didSuspendAlready = (workInProgress2.flags & DidCapture) !== NoFlags;
                var renderedTail = renderState.rendering;
                if (renderedTail === null) {
                  if (!didSuspendAlready) {
                    var cannotBeSuspended = renderHasNotSuspendedYet() && (current2 === null || (current2.flags & DidCapture) === NoFlags);
                    if (!cannotBeSuspended) {
                      var row = workInProgress2.child;
                      while (row !== null) {
                        var suspended = findFirstSuspended(row);
                        if (suspended !== null) {
                          didSuspendAlready = true;
                          workInProgress2.flags |= DidCapture;
                          cutOffTailIfNeeded(renderState, false);
                          var newThenables = suspended.updateQueue;
                          if (newThenables !== null) {
                            workInProgress2.updateQueue = newThenables;
                            workInProgress2.flags |= Update;
                          }
                          workInProgress2.subtreeFlags = NoFlags;
                          resetChildFibers(workInProgress2, renderLanes2);
                          pushSuspenseContext(workInProgress2, setShallowSuspenseContext(suspenseStackCursor.current, ForceSuspenseFallback));
                          return workInProgress2.child;
                        }
                        row = row.sibling;
                      }
                    }
                    if (renderState.tail !== null && now() > getRenderTargetTime()) {
                      workInProgress2.flags |= DidCapture;
                      didSuspendAlready = true;
                      cutOffTailIfNeeded(renderState, false);
                      workInProgress2.lanes = SomeRetryLane;
                    }
                  } else {
                    cutOffTailIfNeeded(renderState, false);
                  }
                } else {
                  if (!didSuspendAlready) {
                    var _suspended = findFirstSuspended(renderedTail);
                    if (_suspended !== null) {
                      workInProgress2.flags |= DidCapture;
                      didSuspendAlready = true;
                      var _newThenables = _suspended.updateQueue;
                      if (_newThenables !== null) {
                        workInProgress2.updateQueue = _newThenables;
                        workInProgress2.flags |= Update;
                      }
                      cutOffTailIfNeeded(renderState, true);
                      if (renderState.tail === null && renderState.tailMode === "hidden" && !renderedTail.alternate && !getIsHydrating()) {
                        bubbleProperties(workInProgress2);
                        return null;
                      }
                    } else if (now() * 2 - renderState.renderingStartTime > getRenderTargetTime() && renderLanes2 !== OffscreenLane) {
                      workInProgress2.flags |= DidCapture;
                      didSuspendAlready = true;
                      cutOffTailIfNeeded(renderState, false);
                      workInProgress2.lanes = SomeRetryLane;
                    }
                  }
                  if (renderState.isBackwards) {
                    renderedTail.sibling = workInProgress2.child;
                    workInProgress2.child = renderedTail;
                  } else {
                    var previousSibling = renderState.last;
                    if (previousSibling !== null) {
                      previousSibling.sibling = renderedTail;
                    } else {
                      workInProgress2.child = renderedTail;
                    }
                    renderState.last = renderedTail;
                  }
                }
                if (renderState.tail !== null) {
                  var next = renderState.tail;
                  renderState.rendering = next;
                  renderState.tail = next.sibling;
                  renderState.renderingStartTime = now();
                  next.sibling = null;
                  var suspenseContext = suspenseStackCursor.current;
                  if (didSuspendAlready) {
                    suspenseContext = setShallowSuspenseContext(suspenseContext, ForceSuspenseFallback);
                  } else {
                    suspenseContext = setDefaultShallowSuspenseContext(suspenseContext);
                  }
                  pushSuspenseContext(workInProgress2, suspenseContext);
                  return next;
                }
                bubbleProperties(workInProgress2);
                return null;
              }
              case ScopeComponent: {
                break;
              }
              case OffscreenComponent:
              case LegacyHiddenComponent: {
                popRenderLanes(workInProgress2);
                var _nextState = workInProgress2.memoizedState;
                var nextIsHidden = _nextState !== null;
                if (current2 !== null) {
                  var _prevState2 = current2.memoizedState;
                  var prevIsHidden = _prevState2 !== null;
                  if (prevIsHidden !== nextIsHidden && !enableLegacyHidden) {
                    workInProgress2.flags |= Visibility;
                  }
                }
                if (!nextIsHidden || (workInProgress2.mode & ConcurrentMode) === NoMode) {
                  bubbleProperties(workInProgress2);
                } else {
                  if (includesSomeLane(subtreeRenderLanes, OffscreenLane)) {
                    bubbleProperties(workInProgress2);
                    {
                      if (workInProgress2.subtreeFlags & (Placement | Update)) {
                        workInProgress2.flags |= Visibility;
                      }
                    }
                  }
                }
                return null;
              }
              case CacheComponent: {
                return null;
              }
              case TracingMarkerComponent: {
                return null;
              }
            }
            throw new Error("Unknown unit of work tag (" + workInProgress2.tag + "). This error is likely caused by a bug in React. Please file an issue.");
          }
          var ReactCurrentOwner$1 = ReactSharedInternals.ReactCurrentOwner;
          var didReceiveUpdate = false;
          var didWarnAboutBadClass;
          var didWarnAboutModulePatternComponent;
          var didWarnAboutContextTypeOnFunctionComponent;
          var didWarnAboutGetDerivedStateOnFunctionComponent;
          var didWarnAboutFunctionRefs;
          var didWarnAboutReassigningProps;
          var didWarnAboutRevealOrder;
          var didWarnAboutTailOptions;
          {
            didWarnAboutBadClass = {};
            didWarnAboutModulePatternComponent = {};
            didWarnAboutContextTypeOnFunctionComponent = {};
            didWarnAboutGetDerivedStateOnFunctionComponent = {};
            didWarnAboutFunctionRefs = {};
            didWarnAboutReassigningProps = false;
            didWarnAboutRevealOrder = {};
            didWarnAboutTailOptions = {};
          }
          function reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2) {
            if (current2 === null) {
              workInProgress2.child = mountChildFibers(workInProgress2, null, nextChildren, renderLanes2);
            } else {
              workInProgress2.child = reconcileChildFibers(workInProgress2, current2.child, nextChildren, renderLanes2);
            }
          }
          function forceUnmountCurrentAndReconcile(current2, workInProgress2, nextChildren, renderLanes2) {
            workInProgress2.child = reconcileChildFibers(workInProgress2, current2.child, null, renderLanes2);
            workInProgress2.child = reconcileChildFibers(workInProgress2, null, nextChildren, renderLanes2);
          }
          function updateForwardRef(current2, workInProgress2, Component, nextProps, renderLanes2) {
            {
              if (workInProgress2.type !== workInProgress2.elementType) {
                var innerPropTypes = Component.propTypes;
                if (innerPropTypes) {
                  checkPropTypes(innerPropTypes, nextProps, "prop", getComponentNameFromType(Component));
                }
              }
            }
            var render2 = Component.render;
            var ref = workInProgress2.ref;
            var nextChildren;
            var hasId;
            prepareToReadContext(workInProgress2, renderLanes2);
            {
              markComponentRenderStarted(workInProgress2);
            }
            {
              ReactCurrentOwner$1.current = workInProgress2;
              setIsRendering(true);
              nextChildren = renderWithHooks(current2, workInProgress2, render2, nextProps, ref, renderLanes2);
              hasId = checkDidRenderIdHook();
              if (workInProgress2.mode & StrictLegacyMode) {
                setIsStrictModeForDevtools(true);
                try {
                  nextChildren = renderWithHooks(current2, workInProgress2, render2, nextProps, ref, renderLanes2);
                  hasId = checkDidRenderIdHook();
                } finally {
                  setIsStrictModeForDevtools(false);
                }
              }
              setIsRendering(false);
            }
            {
              markComponentRenderStopped();
            }
            if (current2 !== null && !didReceiveUpdate) {
              bailoutHooks(current2, workInProgress2, renderLanes2);
              return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
            }
            if (getIsHydrating() && hasId) {
              pushMaterializedTreeId(workInProgress2);
            }
            workInProgress2.flags |= PerformedWork;
            reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
            return workInProgress2.child;
          }
          function updateMemoComponent(current2, workInProgress2, Component, nextProps, renderLanes2) {
            if (current2 === null) {
              var type = Component.type;
              if (isSimpleFunctionComponent(type) && Component.compare === null && Component.defaultProps === void 0) {
                var resolvedType = type;
                {
                  resolvedType = resolveFunctionForHotReloading(type);
                }
                workInProgress2.tag = SimpleMemoComponent;
                workInProgress2.type = resolvedType;
                {
                  validateFunctionComponentInDev(workInProgress2, type);
                }
                return updateSimpleMemoComponent(current2, workInProgress2, resolvedType, nextProps, renderLanes2);
              }
              {
                var innerPropTypes = type.propTypes;
                if (innerPropTypes) {
                  checkPropTypes(innerPropTypes, nextProps, "prop", getComponentNameFromType(type));
                }
              }
              var child = createFiberFromTypeAndProps(Component.type, null, nextProps, workInProgress2, workInProgress2.mode, renderLanes2);
              child.ref = workInProgress2.ref;
              child.return = workInProgress2;
              workInProgress2.child = child;
              return child;
            }
            {
              var _type = Component.type;
              var _innerPropTypes = _type.propTypes;
              if (_innerPropTypes) {
                checkPropTypes(_innerPropTypes, nextProps, "prop", getComponentNameFromType(_type));
              }
            }
            var currentChild = current2.child;
            var hasScheduledUpdateOrContext = checkScheduledUpdateOrContext(current2, renderLanes2);
            if (!hasScheduledUpdateOrContext) {
              var prevProps = currentChild.memoizedProps;
              var compare = Component.compare;
              compare = compare !== null ? compare : shallowEqual;
              if (compare(prevProps, nextProps) && current2.ref === workInProgress2.ref) {
                return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
              }
            }
            workInProgress2.flags |= PerformedWork;
            var newChild = createWorkInProgress(currentChild, nextProps);
            newChild.ref = workInProgress2.ref;
            newChild.return = workInProgress2;
            workInProgress2.child = newChild;
            return newChild;
          }
          function updateSimpleMemoComponent(current2, workInProgress2, Component, nextProps, renderLanes2) {
            {
              if (workInProgress2.type !== workInProgress2.elementType) {
                var outerMemoType = workInProgress2.elementType;
                if (outerMemoType.$$typeof === REACT_LAZY_TYPE) {
                  var lazyComponent = outerMemoType;
                  var payload = lazyComponent._payload;
                  var init = lazyComponent._init;
                  try {
                    outerMemoType = init(payload);
                  } catch (x4) {
                    outerMemoType = null;
                  }
                  var outerPropTypes = outerMemoType && outerMemoType.propTypes;
                  if (outerPropTypes) {
                    checkPropTypes(outerPropTypes, nextProps, "prop", getComponentNameFromType(outerMemoType));
                  }
                }
              }
            }
            if (current2 !== null) {
              var prevProps = current2.memoizedProps;
              if (shallowEqual(prevProps, nextProps) && current2.ref === workInProgress2.ref && workInProgress2.type === current2.type) {
                didReceiveUpdate = false;
                if (!checkScheduledUpdateOrContext(current2, renderLanes2)) {
                  workInProgress2.lanes = current2.lanes;
                  return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
                } else if ((current2.flags & ForceUpdateForLegacySuspense) !== NoFlags) {
                  didReceiveUpdate = true;
                }
              }
            }
            return updateFunctionComponent(current2, workInProgress2, Component, nextProps, renderLanes2);
          }
          function updateOffscreenComponent(current2, workInProgress2, renderLanes2) {
            var nextProps = workInProgress2.pendingProps;
            var nextChildren = nextProps.children;
            var prevState = current2 !== null ? current2.memoizedState : null;
            if (nextProps.mode === "hidden" || enableLegacyHidden) {
              if ((workInProgress2.mode & ConcurrentMode) === NoMode) {
                var nextState = {
                  baseLanes: NoLanes,
                  cachePool: null
                };
                workInProgress2.memoizedState = nextState;
                pushRenderLanes(workInProgress2, renderLanes2);
              } else if (!includesSomeLane(renderLanes2, OffscreenLane)) {
                var spawnedCachePool = null;
                var nextBaseLanes;
                if (prevState !== null) {
                  var prevBaseLanes = prevState.baseLanes;
                  nextBaseLanes = mergeLanes(prevBaseLanes, renderLanes2);
                } else {
                  nextBaseLanes = renderLanes2;
                }
                workInProgress2.lanes = workInProgress2.childLanes = laneToLanes(OffscreenLane);
                var _nextState = {
                  baseLanes: nextBaseLanes,
                  cachePool: spawnedCachePool
                };
                workInProgress2.memoizedState = _nextState;
                workInProgress2.updateQueue = null;
                pushRenderLanes(workInProgress2, nextBaseLanes);
                return null;
              } else {
                var _nextState2 = {
                  baseLanes: NoLanes,
                  cachePool: null
                };
                workInProgress2.memoizedState = _nextState2;
                var subtreeRenderLanes2 = prevState !== null ? prevState.baseLanes : renderLanes2;
                pushRenderLanes(workInProgress2, subtreeRenderLanes2);
              }
            } else {
              var _subtreeRenderLanes;
              if (prevState !== null) {
                _subtreeRenderLanes = mergeLanes(prevState.baseLanes, renderLanes2);
                workInProgress2.memoizedState = null;
              } else {
                _subtreeRenderLanes = renderLanes2;
              }
              pushRenderLanes(workInProgress2, _subtreeRenderLanes);
            }
            {
              reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
              return workInProgress2.child;
            }
          }
          function updateFragment(current2, workInProgress2, renderLanes2) {
            var nextChildren = workInProgress2.pendingProps;
            reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
            return workInProgress2.child;
          }
          function updateMode(current2, workInProgress2, renderLanes2) {
            var nextChildren = workInProgress2.pendingProps.children;
            reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
            return workInProgress2.child;
          }
          function updateProfiler(current2, workInProgress2, renderLanes2) {
            {
              workInProgress2.flags |= Update;
              {
                var stateNode = workInProgress2.stateNode;
                stateNode.effectDuration = 0;
                stateNode.passiveEffectDuration = 0;
              }
            }
            var nextProps = workInProgress2.pendingProps;
            var nextChildren = nextProps.children;
            reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
            return workInProgress2.child;
          }
          function markRef$1(current2, workInProgress2) {
            var ref = workInProgress2.ref;
            if (current2 === null && ref !== null || current2 !== null && current2.ref !== ref) {
              workInProgress2.flags |= Ref;
              {
                workInProgress2.flags |= RefStatic;
              }
            }
          }
          function updateFunctionComponent(current2, workInProgress2, Component, nextProps, renderLanes2) {
            {
              if (workInProgress2.type !== workInProgress2.elementType) {
                var innerPropTypes = Component.propTypes;
                if (innerPropTypes) {
                  checkPropTypes(innerPropTypes, nextProps, "prop", getComponentNameFromType(Component));
                }
              }
            }
            var context;
            {
              var unmaskedContext = getUnmaskedContext(workInProgress2, Component, true);
              context = getMaskedContext(workInProgress2, unmaskedContext);
            }
            var nextChildren;
            var hasId;
            prepareToReadContext(workInProgress2, renderLanes2);
            {
              markComponentRenderStarted(workInProgress2);
            }
            {
              ReactCurrentOwner$1.current = workInProgress2;
              setIsRendering(true);
              nextChildren = renderWithHooks(current2, workInProgress2, Component, nextProps, context, renderLanes2);
              hasId = checkDidRenderIdHook();
              if (workInProgress2.mode & StrictLegacyMode) {
                setIsStrictModeForDevtools(true);
                try {
                  nextChildren = renderWithHooks(current2, workInProgress2, Component, nextProps, context, renderLanes2);
                  hasId = checkDidRenderIdHook();
                } finally {
                  setIsStrictModeForDevtools(false);
                }
              }
              setIsRendering(false);
            }
            {
              markComponentRenderStopped();
            }
            if (current2 !== null && !didReceiveUpdate) {
              bailoutHooks(current2, workInProgress2, renderLanes2);
              return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
            }
            if (getIsHydrating() && hasId) {
              pushMaterializedTreeId(workInProgress2);
            }
            workInProgress2.flags |= PerformedWork;
            reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
            return workInProgress2.child;
          }
          function updateClassComponent(current2, workInProgress2, Component, nextProps, renderLanes2) {
            {
              switch (shouldError(workInProgress2)) {
                case false: {
                  var _instance = workInProgress2.stateNode;
                  var ctor = workInProgress2.type;
                  var tempInstance = new ctor(workInProgress2.memoizedProps, _instance.context);
                  var state = tempInstance.state;
                  _instance.updater.enqueueSetState(_instance, state, null);
                  break;
                }
                case true: {
                  workInProgress2.flags |= DidCapture;
                  workInProgress2.flags |= ShouldCapture;
                  var error$1 = new Error("Simulated error coming from DevTools");
                  var lane = pickArbitraryLane(renderLanes2);
                  workInProgress2.lanes = mergeLanes(workInProgress2.lanes, lane);
                  var update = createClassErrorUpdate(workInProgress2, createCapturedValue(error$1, workInProgress2), lane);
                  enqueueCapturedUpdate(workInProgress2, update);
                  break;
                }
              }
              if (workInProgress2.type !== workInProgress2.elementType) {
                var innerPropTypes = Component.propTypes;
                if (innerPropTypes) {
                  checkPropTypes(innerPropTypes, nextProps, "prop", getComponentNameFromType(Component));
                }
              }
            }
            var hasContext;
            if (isContextProvider(Component)) {
              hasContext = true;
              pushContextProvider(workInProgress2);
            } else {
              hasContext = false;
            }
            prepareToReadContext(workInProgress2, renderLanes2);
            var instance = workInProgress2.stateNode;
            var shouldUpdate;
            if (instance === null) {
              if (current2 !== null) {
                current2.alternate = null;
                workInProgress2.alternate = null;
                workInProgress2.flags |= Placement;
              }
              constructClassInstance(workInProgress2, Component, nextProps);
              mountClassInstance(workInProgress2, Component, nextProps, renderLanes2);
              shouldUpdate = true;
            } else if (current2 === null) {
              shouldUpdate = resumeMountClassInstance(workInProgress2, Component, nextProps, renderLanes2);
            } else {
              shouldUpdate = updateClassInstance(current2, workInProgress2, Component, nextProps, renderLanes2);
            }
            var nextUnitOfWork = finishClassComponent(current2, workInProgress2, Component, shouldUpdate, hasContext, renderLanes2);
            {
              var inst = workInProgress2.stateNode;
              if (shouldUpdate && inst.props !== nextProps) {
                if (!didWarnAboutReassigningProps) {
                  error("It looks like %s is reassigning its own `this.props` while rendering. This is not supported and can lead to confusing bugs.", getComponentNameFromFiber(workInProgress2) || "a component");
                }
                didWarnAboutReassigningProps = true;
              }
            }
            return nextUnitOfWork;
          }
          function finishClassComponent(current2, workInProgress2, Component, shouldUpdate, hasContext, renderLanes2) {
            markRef$1(current2, workInProgress2);
            var didCaptureError = (workInProgress2.flags & DidCapture) !== NoFlags;
            if (!shouldUpdate && !didCaptureError) {
              if (hasContext) {
                invalidateContextProvider(workInProgress2, Component, false);
              }
              return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
            }
            var instance = workInProgress2.stateNode;
            ReactCurrentOwner$1.current = workInProgress2;
            var nextChildren;
            if (didCaptureError && typeof Component.getDerivedStateFromError !== "function") {
              nextChildren = null;
              {
                stopProfilerTimerIfRunning();
              }
            } else {
              {
                markComponentRenderStarted(workInProgress2);
              }
              {
                setIsRendering(true);
                nextChildren = instance.render();
                if (workInProgress2.mode & StrictLegacyMode) {
                  setIsStrictModeForDevtools(true);
                  try {
                    instance.render();
                  } finally {
                    setIsStrictModeForDevtools(false);
                  }
                }
                setIsRendering(false);
              }
              {
                markComponentRenderStopped();
              }
            }
            workInProgress2.flags |= PerformedWork;
            if (current2 !== null && didCaptureError) {
              forceUnmountCurrentAndReconcile(current2, workInProgress2, nextChildren, renderLanes2);
            } else {
              reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
            }
            workInProgress2.memoizedState = instance.state;
            if (hasContext) {
              invalidateContextProvider(workInProgress2, Component, true);
            }
            return workInProgress2.child;
          }
          function pushHostRootContext(workInProgress2) {
            var root3 = workInProgress2.stateNode;
            if (root3.pendingContext) {
              pushTopLevelContextObject(workInProgress2, root3.pendingContext, root3.pendingContext !== root3.context);
            } else if (root3.context) {
              pushTopLevelContextObject(workInProgress2, root3.context, false);
            }
            pushHostContainer(workInProgress2, root3.containerInfo);
          }
          function updateHostRoot(current2, workInProgress2, renderLanes2) {
            pushHostRootContext(workInProgress2);
            if (current2 === null) {
              throw new Error("Should have a current fiber. This is a bug in React.");
            }
            var nextProps = workInProgress2.pendingProps;
            var prevState = workInProgress2.memoizedState;
            var prevChildren = prevState.element;
            cloneUpdateQueue(current2, workInProgress2);
            processUpdateQueue(workInProgress2, nextProps, null, renderLanes2);
            var nextState = workInProgress2.memoizedState;
            var root3 = workInProgress2.stateNode;
            var nextChildren = nextState.element;
            if (prevState.isDehydrated) {
              var overrideState = {
                element: nextChildren,
                isDehydrated: false,
                cache: nextState.cache,
                transitions: nextState.transitions
              };
              var updateQueue = workInProgress2.updateQueue;
              updateQueue.baseState = overrideState;
              workInProgress2.memoizedState = overrideState;
              if (workInProgress2.flags & ForceClientRender) {
                var recoverableError = new Error("There was an error while hydrating. Because the error happened outside of a Suspense boundary, the entire root will switch to client rendering.");
                return mountHostRootWithoutHydrating(current2, workInProgress2, nextChildren, renderLanes2, recoverableError);
              } else if (nextChildren !== prevChildren) {
                var _recoverableError = new Error("This root received an early update, before anything was able hydrate. Switched the entire root to client rendering.");
                return mountHostRootWithoutHydrating(current2, workInProgress2, nextChildren, renderLanes2, _recoverableError);
              } else {
                enterHydrationState(workInProgress2);
                var child = mountChildFibers(workInProgress2, null, nextChildren, renderLanes2);
                workInProgress2.child = child;
                var node = child;
                while (node) {
                  node.flags = node.flags & ~Placement | Hydrating;
                  node = node.sibling;
                }
              }
            } else {
              resetHydrationState();
              if (nextChildren === prevChildren) {
                return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
              }
              reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
            }
            return workInProgress2.child;
          }
          function mountHostRootWithoutHydrating(current2, workInProgress2, nextChildren, renderLanes2, recoverableError) {
            resetHydrationState();
            queueHydrationError(recoverableError);
            workInProgress2.flags |= ForceClientRender;
            reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
            return workInProgress2.child;
          }
          function updateHostComponent$1(current2, workInProgress2, renderLanes2) {
            pushHostContext(workInProgress2);
            if (current2 === null) {
              tryToClaimNextHydratableInstance(workInProgress2);
            }
            var type = workInProgress2.type;
            var nextProps = workInProgress2.pendingProps;
            var prevProps = current2 !== null ? current2.memoizedProps : null;
            var nextChildren = nextProps.children;
            var isDirectTextChild = shouldSetTextContent(type, nextProps);
            if (isDirectTextChild) {
              nextChildren = null;
            } else if (prevProps !== null && shouldSetTextContent(type, prevProps)) {
              workInProgress2.flags |= ContentReset;
            }
            markRef$1(current2, workInProgress2);
            reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
            return workInProgress2.child;
          }
          function updateHostText$1(current2, workInProgress2) {
            if (current2 === null) {
              tryToClaimNextHydratableInstance(workInProgress2);
            }
            return null;
          }
          function mountLazyComponent(_current, workInProgress2, elementType, renderLanes2) {
            if (_current !== null) {
              _current.alternate = null;
              workInProgress2.alternate = null;
              workInProgress2.flags |= Placement;
            }
            var props = workInProgress2.pendingProps;
            var lazyComponent = elementType;
            var payload = lazyComponent._payload;
            var init = lazyComponent._init;
            var Component = init(payload);
            workInProgress2.type = Component;
            var resolvedTag = workInProgress2.tag = resolveLazyComponentTag(Component);
            var resolvedProps = resolveDefaultProps(Component, props);
            var child;
            switch (resolvedTag) {
              case FunctionComponent: {
                {
                  validateFunctionComponentInDev(workInProgress2, Component);
                  workInProgress2.type = Component = resolveFunctionForHotReloading(Component);
                }
                child = updateFunctionComponent(null, workInProgress2, Component, resolvedProps, renderLanes2);
                return child;
              }
              case ClassComponent: {
                {
                  workInProgress2.type = Component = resolveClassForHotReloading(Component);
                }
                child = updateClassComponent(null, workInProgress2, Component, resolvedProps, renderLanes2);
                return child;
              }
              case ForwardRef: {
                {
                  workInProgress2.type = Component = resolveForwardRefForHotReloading(Component);
                }
                child = updateForwardRef(null, workInProgress2, Component, resolvedProps, renderLanes2);
                return child;
              }
              case MemoComponent: {
                {
                  if (workInProgress2.type !== workInProgress2.elementType) {
                    var outerPropTypes = Component.propTypes;
                    if (outerPropTypes) {
                      checkPropTypes(outerPropTypes, resolvedProps, "prop", getComponentNameFromType(Component));
                    }
                  }
                }
                child = updateMemoComponent(null, workInProgress2, Component, resolveDefaultProps(Component.type, resolvedProps), renderLanes2);
                return child;
              }
            }
            var hint = "";
            {
              if (Component !== null && typeof Component === "object" && Component.$$typeof === REACT_LAZY_TYPE) {
                hint = " Did you wrap a component in React.lazy() more than once?";
              }
            }
            throw new Error("Element type is invalid. Received a promise that resolves to: " + Component + ". " + ("Lazy element type must resolve to a class or function." + hint));
          }
          function mountIncompleteClassComponent(_current, workInProgress2, Component, nextProps, renderLanes2) {
            if (_current !== null) {
              _current.alternate = null;
              workInProgress2.alternate = null;
              workInProgress2.flags |= Placement;
            }
            workInProgress2.tag = ClassComponent;
            var hasContext;
            if (isContextProvider(Component)) {
              hasContext = true;
              pushContextProvider(workInProgress2);
            } else {
              hasContext = false;
            }
            prepareToReadContext(workInProgress2, renderLanes2);
            constructClassInstance(workInProgress2, Component, nextProps);
            mountClassInstance(workInProgress2, Component, nextProps, renderLanes2);
            return finishClassComponent(null, workInProgress2, Component, true, hasContext, renderLanes2);
          }
          function mountIndeterminateComponent(_current, workInProgress2, Component, renderLanes2) {
            if (_current !== null) {
              _current.alternate = null;
              workInProgress2.alternate = null;
              workInProgress2.flags |= Placement;
            }
            var props = workInProgress2.pendingProps;
            var context;
            {
              var unmaskedContext = getUnmaskedContext(workInProgress2, Component, false);
              context = getMaskedContext(workInProgress2, unmaskedContext);
            }
            prepareToReadContext(workInProgress2, renderLanes2);
            var value;
            var hasId;
            {
              markComponentRenderStarted(workInProgress2);
            }
            {
              if (Component.prototype && typeof Component.prototype.render === "function") {
                var componentName = getComponentNameFromType(Component) || "Unknown";
                if (!didWarnAboutBadClass[componentName]) {
                  error("The <%s /> component appears to have a render method, but doesn't extend React.Component. This is likely to cause errors. Change %s to extend React.Component instead.", componentName, componentName);
                  didWarnAboutBadClass[componentName] = true;
                }
              }
              if (workInProgress2.mode & StrictLegacyMode) {
                ReactStrictModeWarnings.recordLegacyContextWarning(workInProgress2, null);
              }
              setIsRendering(true);
              ReactCurrentOwner$1.current = workInProgress2;
              value = renderWithHooks(null, workInProgress2, Component, props, context, renderLanes2);
              hasId = checkDidRenderIdHook();
              setIsRendering(false);
            }
            {
              markComponentRenderStopped();
            }
            workInProgress2.flags |= PerformedWork;
            {
              if (typeof value === "object" && value !== null && typeof value.render === "function" && value.$$typeof === void 0) {
                var _componentName = getComponentNameFromType(Component) || "Unknown";
                if (!didWarnAboutModulePatternComponent[_componentName]) {
                  error("The <%s /> component appears to be a function component that returns a class instance. Change %s to a class that extends React.Component instead. If you can't use a class try assigning the prototype on the function as a workaround. `%s.prototype = React.Component.prototype`. Don't use an arrow function since it cannot be called with `new` by React.", _componentName, _componentName, _componentName);
                  didWarnAboutModulePatternComponent[_componentName] = true;
                }
              }
            }
            if (typeof value === "object" && value !== null && typeof value.render === "function" && value.$$typeof === void 0) {
              {
                var _componentName2 = getComponentNameFromType(Component) || "Unknown";
                if (!didWarnAboutModulePatternComponent[_componentName2]) {
                  error("The <%s /> component appears to be a function component that returns a class instance. Change %s to a class that extends React.Component instead. If you can't use a class try assigning the prototype on the function as a workaround. `%s.prototype = React.Component.prototype`. Don't use an arrow function since it cannot be called with `new` by React.", _componentName2, _componentName2, _componentName2);
                  didWarnAboutModulePatternComponent[_componentName2] = true;
                }
              }
              workInProgress2.tag = ClassComponent;
              workInProgress2.memoizedState = null;
              workInProgress2.updateQueue = null;
              var hasContext = false;
              if (isContextProvider(Component)) {
                hasContext = true;
                pushContextProvider(workInProgress2);
              } else {
                hasContext = false;
              }
              workInProgress2.memoizedState = value.state !== null && value.state !== void 0 ? value.state : null;
              initializeUpdateQueue(workInProgress2);
              adoptClassInstance(workInProgress2, value);
              mountClassInstance(workInProgress2, Component, props, renderLanes2);
              return finishClassComponent(null, workInProgress2, Component, true, hasContext, renderLanes2);
            } else {
              workInProgress2.tag = FunctionComponent;
              {
                if (workInProgress2.mode & StrictLegacyMode) {
                  setIsStrictModeForDevtools(true);
                  try {
                    value = renderWithHooks(null, workInProgress2, Component, props, context, renderLanes2);
                    hasId = checkDidRenderIdHook();
                  } finally {
                    setIsStrictModeForDevtools(false);
                  }
                }
              }
              if (getIsHydrating() && hasId) {
                pushMaterializedTreeId(workInProgress2);
              }
              reconcileChildren(null, workInProgress2, value, renderLanes2);
              {
                validateFunctionComponentInDev(workInProgress2, Component);
              }
              return workInProgress2.child;
            }
          }
          function validateFunctionComponentInDev(workInProgress2, Component) {
            {
              if (Component) {
                if (Component.childContextTypes) {
                  error("%s(...): childContextTypes cannot be defined on a function component.", Component.displayName || Component.name || "Component");
                }
              }
              if (workInProgress2.ref !== null) {
                var info = "";
                var ownerName = getCurrentFiberOwnerNameInDevOrNull();
                if (ownerName) {
                  info += "\n\nCheck the render method of `" + ownerName + "`.";
                }
                var warningKey = ownerName || "";
                var debugSource = workInProgress2._debugSource;
                if (debugSource) {
                  warningKey = debugSource.fileName + ":" + debugSource.lineNumber;
                }
                if (!didWarnAboutFunctionRefs[warningKey]) {
                  didWarnAboutFunctionRefs[warningKey] = true;
                  error("Function components cannot be given refs. Attempts to access this ref will fail. Did you mean to use React.forwardRef()?%s", info);
                }
              }
              if (typeof Component.getDerivedStateFromProps === "function") {
                var _componentName3 = getComponentNameFromType(Component) || "Unknown";
                if (!didWarnAboutGetDerivedStateOnFunctionComponent[_componentName3]) {
                  error("%s: Function components do not support getDerivedStateFromProps.", _componentName3);
                  didWarnAboutGetDerivedStateOnFunctionComponent[_componentName3] = true;
                }
              }
              if (typeof Component.contextType === "object" && Component.contextType !== null) {
                var _componentName4 = getComponentNameFromType(Component) || "Unknown";
                if (!didWarnAboutContextTypeOnFunctionComponent[_componentName4]) {
                  error("%s: Function components do not support contextType.", _componentName4);
                  didWarnAboutContextTypeOnFunctionComponent[_componentName4] = true;
                }
              }
            }
          }
          var SUSPENDED_MARKER = {
            dehydrated: null,
            treeContext: null,
            retryLane: NoLane
          };
          function mountSuspenseOffscreenState(renderLanes2) {
            return {
              baseLanes: renderLanes2,
              cachePool: getSuspendedCache()
            };
          }
          function updateSuspenseOffscreenState(prevOffscreenState, renderLanes2) {
            var cachePool = null;
            return {
              baseLanes: mergeLanes(prevOffscreenState.baseLanes, renderLanes2),
              cachePool
            };
          }
          function shouldRemainOnFallback(suspenseContext, current2, workInProgress2, renderLanes2) {
            if (current2 !== null) {
              var suspenseState = current2.memoizedState;
              if (suspenseState === null) {
                return false;
              }
            }
            return hasSuspenseContext(suspenseContext, ForceSuspenseFallback);
          }
          function getRemainingWorkInPrimaryTree(current2, renderLanes2) {
            return removeLanes(current2.childLanes, renderLanes2);
          }
          function updateSuspenseComponent(current2, workInProgress2, renderLanes2) {
            var nextProps = workInProgress2.pendingProps;
            {
              if (shouldSuspend(workInProgress2)) {
                workInProgress2.flags |= DidCapture;
              }
            }
            var suspenseContext = suspenseStackCursor.current;
            var showFallback = false;
            var didSuspend2 = (workInProgress2.flags & DidCapture) !== NoFlags;
            if (didSuspend2 || shouldRemainOnFallback(suspenseContext, current2)) {
              showFallback = true;
              workInProgress2.flags &= ~DidCapture;
            } else {
              if (current2 === null || current2.memoizedState !== null) {
                {
                  suspenseContext = addSubtreeSuspenseContext(suspenseContext, InvisibleParentSuspenseContext);
                }
              }
            }
            suspenseContext = setDefaultShallowSuspenseContext(suspenseContext);
            pushSuspenseContext(workInProgress2, suspenseContext);
            if (current2 === null) {
              tryToClaimNextHydratableInstance(workInProgress2);
              {
                var suspenseState = workInProgress2.memoizedState;
                if (suspenseState !== null) {
                  var dehydrated = suspenseState.dehydrated;
                  if (dehydrated !== null) {
                    return mountDehydratedSuspenseComponent(workInProgress2, dehydrated);
                  }
                }
              }
              var nextPrimaryChildren = nextProps.children;
              var nextFallbackChildren = nextProps.fallback;
              if (showFallback) {
                var fallbackFragment = mountSuspenseFallbackChildren(workInProgress2, nextPrimaryChildren, nextFallbackChildren, renderLanes2);
                var primaryChildFragment = workInProgress2.child;
                primaryChildFragment.memoizedState = mountSuspenseOffscreenState(renderLanes2);
                workInProgress2.memoizedState = SUSPENDED_MARKER;
                return fallbackFragment;
              } else {
                return mountSuspensePrimaryChildren(workInProgress2, nextPrimaryChildren);
              }
            } else {
              var prevState = current2.memoizedState;
              if (prevState !== null) {
                {
                  var _dehydrated = prevState.dehydrated;
                  if (_dehydrated !== null) {
                    if (!didSuspend2) {
                      return updateDehydratedSuspenseComponent(current2, workInProgress2, _dehydrated, prevState, renderLanes2);
                    } else if (workInProgress2.flags & ForceClientRender) {
                      workInProgress2.flags &= ~ForceClientRender;
                      return retrySuspenseComponentWithoutHydrating(current2, workInProgress2, renderLanes2, new Error("There was an error while hydrating this Suspense boundary. Switched to client rendering."));
                    } else if (workInProgress2.memoizedState !== null) {
                      workInProgress2.child = current2.child;
                      workInProgress2.flags |= DidCapture;
                      return null;
                    } else {
                      var _nextPrimaryChildren = nextProps.children;
                      var _nextFallbackChildren = nextProps.fallback;
                      var fallbackChildFragment = mountSuspenseFallbackAfterRetryWithoutHydrating(current2, workInProgress2, _nextPrimaryChildren, _nextFallbackChildren, renderLanes2);
                      var _primaryChildFragment2 = workInProgress2.child;
                      _primaryChildFragment2.memoizedState = mountSuspenseOffscreenState(renderLanes2);
                      workInProgress2.memoizedState = SUSPENDED_MARKER;
                      return fallbackChildFragment;
                    }
                  }
                }
                if (showFallback) {
                  var _nextFallbackChildren2 = nextProps.fallback;
                  var _nextPrimaryChildren2 = nextProps.children;
                  var _fallbackChildFragment = updateSuspenseFallbackChildren(current2, workInProgress2, _nextPrimaryChildren2, _nextFallbackChildren2, renderLanes2);
                  var _primaryChildFragment3 = workInProgress2.child;
                  var prevOffscreenState = current2.child.memoizedState;
                  _primaryChildFragment3.memoizedState = prevOffscreenState === null ? mountSuspenseOffscreenState(renderLanes2) : updateSuspenseOffscreenState(prevOffscreenState, renderLanes2);
                  _primaryChildFragment3.childLanes = getRemainingWorkInPrimaryTree(current2, renderLanes2);
                  workInProgress2.memoizedState = SUSPENDED_MARKER;
                  return _fallbackChildFragment;
                } else {
                  var _nextPrimaryChildren3 = nextProps.children;
                  var _primaryChildFragment4 = updateSuspensePrimaryChildren(current2, workInProgress2, _nextPrimaryChildren3, renderLanes2);
                  workInProgress2.memoizedState = null;
                  return _primaryChildFragment4;
                }
              } else {
                if (showFallback) {
                  var _nextFallbackChildren3 = nextProps.fallback;
                  var _nextPrimaryChildren4 = nextProps.children;
                  var _fallbackChildFragment2 = updateSuspenseFallbackChildren(current2, workInProgress2, _nextPrimaryChildren4, _nextFallbackChildren3, renderLanes2);
                  var _primaryChildFragment5 = workInProgress2.child;
                  var _prevOffscreenState = current2.child.memoizedState;
                  _primaryChildFragment5.memoizedState = _prevOffscreenState === null ? mountSuspenseOffscreenState(renderLanes2) : updateSuspenseOffscreenState(_prevOffscreenState, renderLanes2);
                  _primaryChildFragment5.childLanes = getRemainingWorkInPrimaryTree(current2, renderLanes2);
                  workInProgress2.memoizedState = SUSPENDED_MARKER;
                  return _fallbackChildFragment2;
                } else {
                  var _nextPrimaryChildren5 = nextProps.children;
                  var _primaryChildFragment6 = updateSuspensePrimaryChildren(current2, workInProgress2, _nextPrimaryChildren5, renderLanes2);
                  workInProgress2.memoizedState = null;
                  return _primaryChildFragment6;
                }
              }
            }
          }
          function mountSuspensePrimaryChildren(workInProgress2, primaryChildren, renderLanes2) {
            var mode = workInProgress2.mode;
            var primaryChildProps = {
              mode: "visible",
              children: primaryChildren
            };
            var primaryChildFragment = mountWorkInProgressOffscreenFiber(primaryChildProps, mode);
            primaryChildFragment.return = workInProgress2;
            workInProgress2.child = primaryChildFragment;
            return primaryChildFragment;
          }
          function mountSuspenseFallbackChildren(workInProgress2, primaryChildren, fallbackChildren, renderLanes2) {
            var mode = workInProgress2.mode;
            var progressedPrimaryFragment = workInProgress2.child;
            var primaryChildProps = {
              mode: "hidden",
              children: primaryChildren
            };
            var primaryChildFragment;
            var fallbackChildFragment;
            if ((mode & ConcurrentMode) === NoMode && progressedPrimaryFragment !== null) {
              primaryChildFragment = progressedPrimaryFragment;
              primaryChildFragment.childLanes = NoLanes;
              primaryChildFragment.pendingProps = primaryChildProps;
              if (workInProgress2.mode & ProfileMode) {
                primaryChildFragment.actualDuration = 0;
                primaryChildFragment.actualStartTime = -1;
                primaryChildFragment.selfBaseDuration = 0;
                primaryChildFragment.treeBaseDuration = 0;
              }
              fallbackChildFragment = createFiberFromFragment(fallbackChildren, mode, renderLanes2, null);
            } else {
              primaryChildFragment = mountWorkInProgressOffscreenFiber(primaryChildProps, mode);
              fallbackChildFragment = createFiberFromFragment(fallbackChildren, mode, renderLanes2, null);
            }
            primaryChildFragment.return = workInProgress2;
            fallbackChildFragment.return = workInProgress2;
            primaryChildFragment.sibling = fallbackChildFragment;
            workInProgress2.child = primaryChildFragment;
            return fallbackChildFragment;
          }
          function mountWorkInProgressOffscreenFiber(offscreenProps, mode, renderLanes2) {
            return createFiberFromOffscreen(offscreenProps, mode, NoLanes, null);
          }
          function updateWorkInProgressOffscreenFiber(current2, offscreenProps) {
            return createWorkInProgress(current2, offscreenProps);
          }
          function updateSuspensePrimaryChildren(current2, workInProgress2, primaryChildren, renderLanes2) {
            var currentPrimaryChildFragment = current2.child;
            var currentFallbackChildFragment = currentPrimaryChildFragment.sibling;
            var primaryChildFragment = updateWorkInProgressOffscreenFiber(currentPrimaryChildFragment, {
              mode: "visible",
              children: primaryChildren
            });
            if ((workInProgress2.mode & ConcurrentMode) === NoMode) {
              primaryChildFragment.lanes = renderLanes2;
            }
            primaryChildFragment.return = workInProgress2;
            primaryChildFragment.sibling = null;
            if (currentFallbackChildFragment !== null) {
              var deletions = workInProgress2.deletions;
              if (deletions === null) {
                workInProgress2.deletions = [currentFallbackChildFragment];
                workInProgress2.flags |= ChildDeletion;
              } else {
                deletions.push(currentFallbackChildFragment);
              }
            }
            workInProgress2.child = primaryChildFragment;
            return primaryChildFragment;
          }
          function updateSuspenseFallbackChildren(current2, workInProgress2, primaryChildren, fallbackChildren, renderLanes2) {
            var mode = workInProgress2.mode;
            var currentPrimaryChildFragment = current2.child;
            var currentFallbackChildFragment = currentPrimaryChildFragment.sibling;
            var primaryChildProps = {
              mode: "hidden",
              children: primaryChildren
            };
            var primaryChildFragment;
            if ((mode & ConcurrentMode) === NoMode && workInProgress2.child !== currentPrimaryChildFragment) {
              var progressedPrimaryFragment = workInProgress2.child;
              primaryChildFragment = progressedPrimaryFragment;
              primaryChildFragment.childLanes = NoLanes;
              primaryChildFragment.pendingProps = primaryChildProps;
              if (workInProgress2.mode & ProfileMode) {
                primaryChildFragment.actualDuration = 0;
                primaryChildFragment.actualStartTime = -1;
                primaryChildFragment.selfBaseDuration = currentPrimaryChildFragment.selfBaseDuration;
                primaryChildFragment.treeBaseDuration = currentPrimaryChildFragment.treeBaseDuration;
              }
              workInProgress2.deletions = null;
            } else {
              primaryChildFragment = updateWorkInProgressOffscreenFiber(currentPrimaryChildFragment, primaryChildProps);
              primaryChildFragment.subtreeFlags = currentPrimaryChildFragment.subtreeFlags & StaticMask;
            }
            var fallbackChildFragment;
            if (currentFallbackChildFragment !== null) {
              fallbackChildFragment = createWorkInProgress(currentFallbackChildFragment, fallbackChildren);
            } else {
              fallbackChildFragment = createFiberFromFragment(fallbackChildren, mode, renderLanes2, null);
              fallbackChildFragment.flags |= Placement;
            }
            fallbackChildFragment.return = workInProgress2;
            primaryChildFragment.return = workInProgress2;
            primaryChildFragment.sibling = fallbackChildFragment;
            workInProgress2.child = primaryChildFragment;
            return fallbackChildFragment;
          }
          function retrySuspenseComponentWithoutHydrating(current2, workInProgress2, renderLanes2, recoverableError) {
            if (recoverableError !== null) {
              queueHydrationError(recoverableError);
            }
            reconcileChildFibers(workInProgress2, current2.child, null, renderLanes2);
            var nextProps = workInProgress2.pendingProps;
            var primaryChildren = nextProps.children;
            var primaryChildFragment = mountSuspensePrimaryChildren(workInProgress2, primaryChildren);
            primaryChildFragment.flags |= Placement;
            workInProgress2.memoizedState = null;
            return primaryChildFragment;
          }
          function mountSuspenseFallbackAfterRetryWithoutHydrating(current2, workInProgress2, primaryChildren, fallbackChildren, renderLanes2) {
            var fiberMode = workInProgress2.mode;
            var primaryChildProps = {
              mode: "visible",
              children: primaryChildren
            };
            var primaryChildFragment = mountWorkInProgressOffscreenFiber(primaryChildProps, fiberMode);
            var fallbackChildFragment = createFiberFromFragment(fallbackChildren, fiberMode, renderLanes2, null);
            fallbackChildFragment.flags |= Placement;
            primaryChildFragment.return = workInProgress2;
            fallbackChildFragment.return = workInProgress2;
            primaryChildFragment.sibling = fallbackChildFragment;
            workInProgress2.child = primaryChildFragment;
            if ((workInProgress2.mode & ConcurrentMode) !== NoMode) {
              reconcileChildFibers(workInProgress2, current2.child, null, renderLanes2);
            }
            return fallbackChildFragment;
          }
          function mountDehydratedSuspenseComponent(workInProgress2, suspenseInstance, renderLanes2) {
            if ((workInProgress2.mode & ConcurrentMode) === NoMode) {
              {
                error("Cannot hydrate Suspense in legacy mode. Switch from ReactDOM.hydrate(element, container) to ReactDOMClient.hydrateRoot(container, <App />).render(element) or remove the Suspense components from the server rendered components.");
              }
              workInProgress2.lanes = laneToLanes(SyncLane);
            } else if (isSuspenseInstanceFallback(suspenseInstance)) {
              workInProgress2.lanes = laneToLanes(DefaultHydrationLane);
            } else {
              workInProgress2.lanes = laneToLanes(OffscreenLane);
            }
            return null;
          }
          function updateDehydratedSuspenseComponent(current2, workInProgress2, suspenseInstance, suspenseState, renderLanes2) {
            warnIfHydrating();
            if ((workInProgress2.mode & ConcurrentMode) === NoMode) {
              return retrySuspenseComponentWithoutHydrating(current2, workInProgress2, renderLanes2, null);
            }
            if (isSuspenseInstanceFallback(suspenseInstance)) {
              return retrySuspenseComponentWithoutHydrating(current2, workInProgress2, renderLanes2, new Error("The server could not finish this Suspense boundary, likely due to an error during server rendering. Switched to client rendering."));
            }
            var hasContextChanged2 = includesSomeLane(renderLanes2, current2.childLanes);
            if (didReceiveUpdate || hasContextChanged2) {
              var root3 = getWorkInProgressRoot();
              if (root3 !== null) {
                var attemptHydrationAtLane = getBumpedLaneForHydration(root3, renderLanes2);
                if (attemptHydrationAtLane !== NoLane && attemptHydrationAtLane !== suspenseState.retryLane) {
                  suspenseState.retryLane = attemptHydrationAtLane;
                  var eventTime = NoTimestamp;
                  scheduleUpdateOnFiber(current2, attemptHydrationAtLane, eventTime);
                }
              }
              renderDidSuspendDelayIfPossible();
              return retrySuspenseComponentWithoutHydrating(current2, workInProgress2, renderLanes2, new Error("This Suspense boundary received an update before it finished hydrating. This caused the boundary to switch to client rendering. The usual way to fix this is to wrap the original update in startTransition."));
            } else if (isSuspenseInstancePending(suspenseInstance)) {
              workInProgress2.flags |= DidCapture;
              workInProgress2.child = current2.child;
              var retry = retryDehydratedSuspenseBoundary.bind(null, current2);
              registerSuspenseInstanceRetry(suspenseInstance, retry);
              return null;
            } else {
              reenterHydrationStateFromDehydratedSuspenseInstance(workInProgress2, suspenseInstance, suspenseState.treeContext);
              var nextProps = workInProgress2.pendingProps;
              var primaryChildren = nextProps.children;
              var primaryChildFragment = mountSuspensePrimaryChildren(workInProgress2, primaryChildren);
              primaryChildFragment.flags |= Hydrating;
              return primaryChildFragment;
            }
          }
          function scheduleSuspenseWorkOnFiber(fiber, renderLanes2, propagationRoot) {
            fiber.lanes = mergeLanes(fiber.lanes, renderLanes2);
            var alternate = fiber.alternate;
            if (alternate !== null) {
              alternate.lanes = mergeLanes(alternate.lanes, renderLanes2);
            }
            scheduleContextWorkOnParentPath(fiber.return, renderLanes2, propagationRoot);
          }
          function propagateSuspenseContextChange(workInProgress2, firstChild, renderLanes2) {
            var node = firstChild;
            while (node !== null) {
              if (node.tag === SuspenseComponent) {
                var state = node.memoizedState;
                if (state !== null) {
                  scheduleSuspenseWorkOnFiber(node, renderLanes2, workInProgress2);
                }
              } else if (node.tag === SuspenseListComponent) {
                scheduleSuspenseWorkOnFiber(node, renderLanes2, workInProgress2);
              } else if (node.child !== null) {
                node.child.return = node;
                node = node.child;
                continue;
              }
              if (node === workInProgress2) {
                return;
              }
              while (node.sibling === null) {
                if (node.return === null || node.return === workInProgress2) {
                  return;
                }
                node = node.return;
              }
              node.sibling.return = node.return;
              node = node.sibling;
            }
          }
          function findLastContentRow(firstChild) {
            var row = firstChild;
            var lastContentRow = null;
            while (row !== null) {
              var currentRow = row.alternate;
              if (currentRow !== null && findFirstSuspended(currentRow) === null) {
                lastContentRow = row;
              }
              row = row.sibling;
            }
            return lastContentRow;
          }
          function validateRevealOrder(revealOrder) {
            {
              if (revealOrder !== void 0 && revealOrder !== "forwards" && revealOrder !== "backwards" && revealOrder !== "together" && !didWarnAboutRevealOrder[revealOrder]) {
                didWarnAboutRevealOrder[revealOrder] = true;
                if (typeof revealOrder === "string") {
                  switch (revealOrder.toLowerCase()) {
                    case "together":
                    case "forwards":
                    case "backwards": {
                      error('"%s" is not a valid value for revealOrder on <SuspenseList />. Use lowercase "%s" instead.', revealOrder, revealOrder.toLowerCase());
                      break;
                    }
                    case "forward":
                    case "backward": {
                      error('"%s" is not a valid value for revealOrder on <SuspenseList />. React uses the -s suffix in the spelling. Use "%ss" instead.', revealOrder, revealOrder.toLowerCase());
                      break;
                    }
                    default:
                      error('"%s" is not a supported revealOrder on <SuspenseList />. Did you mean "together", "forwards" or "backwards"?', revealOrder);
                      break;
                  }
                } else {
                  error('%s is not a supported value for revealOrder on <SuspenseList />. Did you mean "together", "forwards" or "backwards"?', revealOrder);
                }
              }
            }
          }
          function validateTailOptions(tailMode, revealOrder) {
            {
              if (tailMode !== void 0 && !didWarnAboutTailOptions[tailMode]) {
                if (tailMode !== "collapsed" && tailMode !== "hidden") {
                  didWarnAboutTailOptions[tailMode] = true;
                  error('"%s" is not a supported value for tail on <SuspenseList />. Did you mean "collapsed" or "hidden"?', tailMode);
                } else if (revealOrder !== "forwards" && revealOrder !== "backwards") {
                  didWarnAboutTailOptions[tailMode] = true;
                  error('<SuspenseList tail="%s" /> is only valid if revealOrder is "forwards" or "backwards". Did you mean to specify revealOrder="forwards"?', tailMode);
                }
              }
            }
          }
          function validateSuspenseListNestedChild(childSlot, index2) {
            {
              var isAnArray = isArray(childSlot);
              var isIterable = !isAnArray && typeof getIteratorFn(childSlot) === "function";
              if (isAnArray || isIterable) {
                var type = isAnArray ? "array" : "iterable";
                error("A nested %s was passed to row #%s in <SuspenseList />. Wrap it in an additional SuspenseList to configure its revealOrder: <SuspenseList revealOrder=...> ... <SuspenseList revealOrder=...>{%s}</SuspenseList> ... </SuspenseList>", type, index2, type);
                return false;
              }
            }
            return true;
          }
          function validateSuspenseListChildren(children, revealOrder) {
            {
              if ((revealOrder === "forwards" || revealOrder === "backwards") && children !== void 0 && children !== null && children !== false) {
                if (isArray(children)) {
                  for (var i3 = 0; i3 < children.length; i3++) {
                    if (!validateSuspenseListNestedChild(children[i3], i3)) {
                      return;
                    }
                  }
                } else {
                  var iteratorFn = getIteratorFn(children);
                  if (typeof iteratorFn === "function") {
                    var childrenIterator = iteratorFn.call(children);
                    if (childrenIterator) {
                      var step = childrenIterator.next();
                      var _i = 0;
                      for (; !step.done; step = childrenIterator.next()) {
                        if (!validateSuspenseListNestedChild(step.value, _i)) {
                          return;
                        }
                        _i++;
                      }
                    }
                  } else {
                    error('A single row was passed to a <SuspenseList revealOrder="%s" />. This is not useful since it needs multiple rows. Did you mean to pass multiple children or an array?', revealOrder);
                  }
                }
              }
            }
          }
          function initSuspenseListRenderState(workInProgress2, isBackwards, tail, lastContentRow, tailMode) {
            var renderState = workInProgress2.memoizedState;
            if (renderState === null) {
              workInProgress2.memoizedState = {
                isBackwards,
                rendering: null,
                renderingStartTime: 0,
                last: lastContentRow,
                tail,
                tailMode
              };
            } else {
              renderState.isBackwards = isBackwards;
              renderState.rendering = null;
              renderState.renderingStartTime = 0;
              renderState.last = lastContentRow;
              renderState.tail = tail;
              renderState.tailMode = tailMode;
            }
          }
          function updateSuspenseListComponent(current2, workInProgress2, renderLanes2) {
            var nextProps = workInProgress2.pendingProps;
            var revealOrder = nextProps.revealOrder;
            var tailMode = nextProps.tail;
            var newChildren = nextProps.children;
            validateRevealOrder(revealOrder);
            validateTailOptions(tailMode, revealOrder);
            validateSuspenseListChildren(newChildren, revealOrder);
            reconcileChildren(current2, workInProgress2, newChildren, renderLanes2);
            var suspenseContext = suspenseStackCursor.current;
            var shouldForceFallback = hasSuspenseContext(suspenseContext, ForceSuspenseFallback);
            if (shouldForceFallback) {
              suspenseContext = setShallowSuspenseContext(suspenseContext, ForceSuspenseFallback);
              workInProgress2.flags |= DidCapture;
            } else {
              var didSuspendBefore = current2 !== null && (current2.flags & DidCapture) !== NoFlags;
              if (didSuspendBefore) {
                propagateSuspenseContextChange(workInProgress2, workInProgress2.child, renderLanes2);
              }
              suspenseContext = setDefaultShallowSuspenseContext(suspenseContext);
            }
            pushSuspenseContext(workInProgress2, suspenseContext);
            if ((workInProgress2.mode & ConcurrentMode) === NoMode) {
              workInProgress2.memoizedState = null;
            } else {
              switch (revealOrder) {
                case "forwards": {
                  var lastContentRow = findLastContentRow(workInProgress2.child);
                  var tail;
                  if (lastContentRow === null) {
                    tail = workInProgress2.child;
                    workInProgress2.child = null;
                  } else {
                    tail = lastContentRow.sibling;
                    lastContentRow.sibling = null;
                  }
                  initSuspenseListRenderState(workInProgress2, false, tail, lastContentRow, tailMode);
                  break;
                }
                case "backwards": {
                  var _tail = null;
                  var row = workInProgress2.child;
                  workInProgress2.child = null;
                  while (row !== null) {
                    var currentRow = row.alternate;
                    if (currentRow !== null && findFirstSuspended(currentRow) === null) {
                      workInProgress2.child = row;
                      break;
                    }
                    var nextRow = row.sibling;
                    row.sibling = _tail;
                    _tail = row;
                    row = nextRow;
                  }
                  initSuspenseListRenderState(workInProgress2, true, _tail, null, tailMode);
                  break;
                }
                case "together": {
                  initSuspenseListRenderState(workInProgress2, false, null, null, void 0);
                  break;
                }
                default: {
                  workInProgress2.memoizedState = null;
                }
              }
            }
            return workInProgress2.child;
          }
          function updatePortalComponent(current2, workInProgress2, renderLanes2) {
            pushHostContainer(workInProgress2, workInProgress2.stateNode.containerInfo);
            var nextChildren = workInProgress2.pendingProps;
            if (current2 === null) {
              workInProgress2.child = reconcileChildFibers(workInProgress2, null, nextChildren, renderLanes2);
            } else {
              reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
            }
            return workInProgress2.child;
          }
          var hasWarnedAboutUsingNoValuePropOnContextProvider = false;
          function updateContextProvider(current2, workInProgress2, renderLanes2) {
            var providerType = workInProgress2.type;
            var context = providerType._context;
            var newProps = workInProgress2.pendingProps;
            var oldProps = workInProgress2.memoizedProps;
            var newValue = newProps.value;
            {
              if (!("value" in newProps)) {
                if (!hasWarnedAboutUsingNoValuePropOnContextProvider) {
                  hasWarnedAboutUsingNoValuePropOnContextProvider = true;
                  error("The `value` prop is required for the `<Context.Provider>`. Did you misspell it or forget to pass it?");
                }
              }
              var providerPropTypes = workInProgress2.type.propTypes;
              if (providerPropTypes) {
                checkPropTypes(providerPropTypes, newProps, "prop", "Context.Provider");
              }
            }
            pushProvider(workInProgress2, context, newValue);
            {
              if (oldProps !== null) {
                var oldValue = oldProps.value;
                if (objectIs(oldValue, newValue)) {
                  if (oldProps.children === newProps.children && !hasContextChanged()) {
                    return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
                  }
                } else {
                  propagateContextChange(workInProgress2, context, renderLanes2);
                }
              }
            }
            var newChildren = newProps.children;
            reconcileChildren(current2, workInProgress2, newChildren, renderLanes2);
            return workInProgress2.child;
          }
          var hasWarnedAboutUsingContextAsConsumer = false;
          function updateContextConsumer(current2, workInProgress2, renderLanes2) {
            var context = workInProgress2.type;
            {
              if (context._context === void 0) {
                if (context !== context.Consumer) {
                  if (!hasWarnedAboutUsingContextAsConsumer) {
                    hasWarnedAboutUsingContextAsConsumer = true;
                    error("Rendering <Context> directly is not supported and will be removed in a future major release. Did you mean to render <Context.Consumer> instead?");
                  }
                }
              } else {
                context = context._context;
              }
            }
            var newProps = workInProgress2.pendingProps;
            var render2 = newProps.children;
            {
              if (typeof render2 !== "function") {
                error("A context consumer was rendered with multiple children, or a child that isn't a function. A context consumer expects a single child that is a function. If you did pass a function, make sure there is no trailing or leading whitespace around it.");
              }
            }
            prepareToReadContext(workInProgress2, renderLanes2);
            var newValue = readContext(context);
            {
              markComponentRenderStarted(workInProgress2);
            }
            var newChildren;
            {
              ReactCurrentOwner$1.current = workInProgress2;
              setIsRendering(true);
              newChildren = render2(newValue);
              setIsRendering(false);
            }
            {
              markComponentRenderStopped();
            }
            workInProgress2.flags |= PerformedWork;
            reconcileChildren(current2, workInProgress2, newChildren, renderLanes2);
            return workInProgress2.child;
          }
          function markWorkInProgressReceivedUpdate() {
            didReceiveUpdate = true;
          }
          function bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2) {
            if (current2 !== null) {
              workInProgress2.dependencies = current2.dependencies;
            }
            {
              stopProfilerTimerIfRunning();
            }
            markSkippedUpdateLanes(workInProgress2.lanes);
            if (!includesSomeLane(renderLanes2, workInProgress2.childLanes)) {
              {
                return null;
              }
            }
            cloneChildFibers(current2, workInProgress2);
            return workInProgress2.child;
          }
          function remountFiber(current2, oldWorkInProgress, newWorkInProgress) {
            {
              var returnFiber = oldWorkInProgress.return;
              if (returnFiber === null) {
                throw new Error("Cannot swap the root fiber.");
              }
              current2.alternate = null;
              oldWorkInProgress.alternate = null;
              newWorkInProgress.index = oldWorkInProgress.index;
              newWorkInProgress.sibling = oldWorkInProgress.sibling;
              newWorkInProgress.return = oldWorkInProgress.return;
              newWorkInProgress.ref = oldWorkInProgress.ref;
              if (oldWorkInProgress === returnFiber.child) {
                returnFiber.child = newWorkInProgress;
              } else {
                var prevSibling = returnFiber.child;
                if (prevSibling === null) {
                  throw new Error("Expected parent to have a child.");
                }
                while (prevSibling.sibling !== oldWorkInProgress) {
                  prevSibling = prevSibling.sibling;
                  if (prevSibling === null) {
                    throw new Error("Expected to find the previous sibling.");
                  }
                }
                prevSibling.sibling = newWorkInProgress;
              }
              var deletions = returnFiber.deletions;
              if (deletions === null) {
                returnFiber.deletions = [current2];
                returnFiber.flags |= ChildDeletion;
              } else {
                deletions.push(current2);
              }
              newWorkInProgress.flags |= Placement;
              return newWorkInProgress;
            }
          }
          function checkScheduledUpdateOrContext(current2, renderLanes2) {
            var updateLanes = current2.lanes;
            if (includesSomeLane(updateLanes, renderLanes2)) {
              return true;
            }
            return false;
          }
          function attemptEarlyBailoutIfNoScheduledUpdate(current2, workInProgress2, renderLanes2) {
            switch (workInProgress2.tag) {
              case HostRoot:
                pushHostRootContext(workInProgress2);
                var root3 = workInProgress2.stateNode;
                resetHydrationState();
                break;
              case HostComponent:
                pushHostContext(workInProgress2);
                break;
              case ClassComponent: {
                var Component = workInProgress2.type;
                if (isContextProvider(Component)) {
                  pushContextProvider(workInProgress2);
                }
                break;
              }
              case HostPortal:
                pushHostContainer(workInProgress2, workInProgress2.stateNode.containerInfo);
                break;
              case ContextProvider: {
                var newValue = workInProgress2.memoizedProps.value;
                var context = workInProgress2.type._context;
                pushProvider(workInProgress2, context, newValue);
                break;
              }
              case Profiler:
                {
                  var hasChildWork = includesSomeLane(renderLanes2, workInProgress2.childLanes);
                  if (hasChildWork) {
                    workInProgress2.flags |= Update;
                  }
                  {
                    var stateNode = workInProgress2.stateNode;
                    stateNode.effectDuration = 0;
                    stateNode.passiveEffectDuration = 0;
                  }
                }
                break;
              case SuspenseComponent: {
                var state = workInProgress2.memoizedState;
                if (state !== null) {
                  {
                    if (state.dehydrated !== null) {
                      pushSuspenseContext(workInProgress2, setDefaultShallowSuspenseContext(suspenseStackCursor.current));
                      workInProgress2.flags |= DidCapture;
                      return null;
                    }
                  }
                  var primaryChildFragment = workInProgress2.child;
                  var primaryChildLanes = primaryChildFragment.childLanes;
                  if (includesSomeLane(renderLanes2, primaryChildLanes)) {
                    return updateSuspenseComponent(current2, workInProgress2, renderLanes2);
                  } else {
                    pushSuspenseContext(workInProgress2, setDefaultShallowSuspenseContext(suspenseStackCursor.current));
                    var child = bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
                    if (child !== null) {
                      return child.sibling;
                    } else {
                      return null;
                    }
                  }
                } else {
                  pushSuspenseContext(workInProgress2, setDefaultShallowSuspenseContext(suspenseStackCursor.current));
                }
                break;
              }
              case SuspenseListComponent: {
                var didSuspendBefore = (current2.flags & DidCapture) !== NoFlags;
                var _hasChildWork = includesSomeLane(renderLanes2, workInProgress2.childLanes);
                if (didSuspendBefore) {
                  if (_hasChildWork) {
                    return updateSuspenseListComponent(current2, workInProgress2, renderLanes2);
                  }
                  workInProgress2.flags |= DidCapture;
                }
                var renderState = workInProgress2.memoizedState;
                if (renderState !== null) {
                  renderState.rendering = null;
                  renderState.tail = null;
                  renderState.lastEffect = null;
                }
                pushSuspenseContext(workInProgress2, suspenseStackCursor.current);
                if (_hasChildWork) {
                  break;
                } else {
                  return null;
                }
              }
              case OffscreenComponent:
              case LegacyHiddenComponent: {
                workInProgress2.lanes = NoLanes;
                return updateOffscreenComponent(current2, workInProgress2, renderLanes2);
              }
            }
            return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
          }
          function beginWork(current2, workInProgress2, renderLanes2) {
            {
              if (workInProgress2._debugNeedsRemount && current2 !== null) {
                return remountFiber(current2, workInProgress2, createFiberFromTypeAndProps(workInProgress2.type, workInProgress2.key, workInProgress2.pendingProps, workInProgress2._debugOwner || null, workInProgress2.mode, workInProgress2.lanes));
              }
            }
            if (current2 !== null) {
              var oldProps = current2.memoizedProps;
              var newProps = workInProgress2.pendingProps;
              if (oldProps !== newProps || hasContextChanged() || workInProgress2.type !== current2.type) {
                didReceiveUpdate = true;
              } else {
                var hasScheduledUpdateOrContext = checkScheduledUpdateOrContext(current2, renderLanes2);
                if (!hasScheduledUpdateOrContext && (workInProgress2.flags & DidCapture) === NoFlags) {
                  didReceiveUpdate = false;
                  return attemptEarlyBailoutIfNoScheduledUpdate(current2, workInProgress2, renderLanes2);
                }
                if ((current2.flags & ForceUpdateForLegacySuspense) !== NoFlags) {
                  didReceiveUpdate = true;
                } else {
                  didReceiveUpdate = false;
                }
              }
            } else {
              didReceiveUpdate = false;
              if (getIsHydrating() && isForkedChild(workInProgress2)) {
                var slotIndex = workInProgress2.index;
                var numberOfForks = getForksAtLevel();
                pushTreeId(workInProgress2, numberOfForks, slotIndex);
              }
            }
            workInProgress2.lanes = NoLanes;
            switch (workInProgress2.tag) {
              case IndeterminateComponent: {
                return mountIndeterminateComponent(current2, workInProgress2, workInProgress2.type, renderLanes2);
              }
              case LazyComponent: {
                var elementType = workInProgress2.elementType;
                return mountLazyComponent(current2, workInProgress2, elementType, renderLanes2);
              }
              case FunctionComponent: {
                var Component = workInProgress2.type;
                var unresolvedProps = workInProgress2.pendingProps;
                var resolvedProps = workInProgress2.elementType === Component ? unresolvedProps : resolveDefaultProps(Component, unresolvedProps);
                return updateFunctionComponent(current2, workInProgress2, Component, resolvedProps, renderLanes2);
              }
              case ClassComponent: {
                var _Component = workInProgress2.type;
                var _unresolvedProps = workInProgress2.pendingProps;
                var _resolvedProps = workInProgress2.elementType === _Component ? _unresolvedProps : resolveDefaultProps(_Component, _unresolvedProps);
                return updateClassComponent(current2, workInProgress2, _Component, _resolvedProps, renderLanes2);
              }
              case HostRoot:
                return updateHostRoot(current2, workInProgress2, renderLanes2);
              case HostComponent:
                return updateHostComponent$1(current2, workInProgress2, renderLanes2);
              case HostText:
                return updateHostText$1(current2, workInProgress2);
              case SuspenseComponent:
                return updateSuspenseComponent(current2, workInProgress2, renderLanes2);
              case HostPortal:
                return updatePortalComponent(current2, workInProgress2, renderLanes2);
              case ForwardRef: {
                var type = workInProgress2.type;
                var _unresolvedProps2 = workInProgress2.pendingProps;
                var _resolvedProps2 = workInProgress2.elementType === type ? _unresolvedProps2 : resolveDefaultProps(type, _unresolvedProps2);
                return updateForwardRef(current2, workInProgress2, type, _resolvedProps2, renderLanes2);
              }
              case Fragment4:
                return updateFragment(current2, workInProgress2, renderLanes2);
              case Mode:
                return updateMode(current2, workInProgress2, renderLanes2);
              case Profiler:
                return updateProfiler(current2, workInProgress2, renderLanes2);
              case ContextProvider:
                return updateContextProvider(current2, workInProgress2, renderLanes2);
              case ContextConsumer:
                return updateContextConsumer(current2, workInProgress2, renderLanes2);
              case MemoComponent: {
                var _type2 = workInProgress2.type;
                var _unresolvedProps3 = workInProgress2.pendingProps;
                var _resolvedProps3 = resolveDefaultProps(_type2, _unresolvedProps3);
                {
                  if (workInProgress2.type !== workInProgress2.elementType) {
                    var outerPropTypes = _type2.propTypes;
                    if (outerPropTypes) {
                      checkPropTypes(outerPropTypes, _resolvedProps3, "prop", getComponentNameFromType(_type2));
                    }
                  }
                }
                _resolvedProps3 = resolveDefaultProps(_type2.type, _resolvedProps3);
                return updateMemoComponent(current2, workInProgress2, _type2, _resolvedProps3, renderLanes2);
              }
              case SimpleMemoComponent: {
                return updateSimpleMemoComponent(current2, workInProgress2, workInProgress2.type, workInProgress2.pendingProps, renderLanes2);
              }
              case IncompleteClassComponent: {
                var _Component2 = workInProgress2.type;
                var _unresolvedProps4 = workInProgress2.pendingProps;
                var _resolvedProps4 = workInProgress2.elementType === _Component2 ? _unresolvedProps4 : resolveDefaultProps(_Component2, _unresolvedProps4);
                return mountIncompleteClassComponent(current2, workInProgress2, _Component2, _resolvedProps4, renderLanes2);
              }
              case SuspenseListComponent: {
                return updateSuspenseListComponent(current2, workInProgress2, renderLanes2);
              }
              case ScopeComponent: {
                break;
              }
              case OffscreenComponent: {
                return updateOffscreenComponent(current2, workInProgress2, renderLanes2);
              }
            }
            throw new Error("Unknown unit of work tag (" + workInProgress2.tag + "). This error is likely caused by a bug in React. Please file an issue.");
          }
          function unwindWork(current2, workInProgress2, renderLanes2) {
            popTreeContext(workInProgress2);
            switch (workInProgress2.tag) {
              case ClassComponent: {
                var Component = workInProgress2.type;
                if (isContextProvider(Component)) {
                  popContext(workInProgress2);
                }
                var flags = workInProgress2.flags;
                if (flags & ShouldCapture) {
                  workInProgress2.flags = flags & ~ShouldCapture | DidCapture;
                  if ((workInProgress2.mode & ProfileMode) !== NoMode) {
                    transferActualDuration(workInProgress2);
                  }
                  return workInProgress2;
                }
                return null;
              }
              case HostRoot: {
                popHostContainer(workInProgress2);
                popTopLevelContextObject(workInProgress2);
                resetWorkInProgressVersions();
                var _flags = workInProgress2.flags;
                if ((_flags & ShouldCapture) !== NoFlags && (_flags & DidCapture) === NoFlags) {
                  workInProgress2.flags = _flags & ~ShouldCapture | DidCapture;
                  return workInProgress2;
                }
                return null;
              }
              case HostComponent: {
                popHostContext(workInProgress2);
                return null;
              }
              case SuspenseComponent: {
                popSuspenseContext(workInProgress2);
                {
                  var suspenseState = workInProgress2.memoizedState;
                  if (suspenseState !== null && suspenseState.dehydrated !== null) {
                    if (workInProgress2.alternate === null) {
                      throw new Error("Threw in newly mounted dehydrated component. This is likely a bug in React. Please file an issue.");
                    }
                    resetHydrationState();
                  }
                }
                var _flags2 = workInProgress2.flags;
                if (_flags2 & ShouldCapture) {
                  workInProgress2.flags = _flags2 & ~ShouldCapture | DidCapture;
                  if ((workInProgress2.mode & ProfileMode) !== NoMode) {
                    transferActualDuration(workInProgress2);
                  }
                  return workInProgress2;
                }
                return null;
              }
              case SuspenseListComponent: {
                popSuspenseContext(workInProgress2);
                return null;
              }
              case HostPortal:
                popHostContainer(workInProgress2);
                return null;
              case ContextProvider:
                var context = workInProgress2.type._context;
                popProvider(context, workInProgress2);
                return null;
              case OffscreenComponent:
              case LegacyHiddenComponent:
                popRenderLanes(workInProgress2);
                return null;
              case CacheComponent:
                return null;
              default:
                return null;
            }
          }
          function unwindInterruptedWork(current2, interruptedWork, renderLanes2) {
            popTreeContext(interruptedWork);
            switch (interruptedWork.tag) {
              case ClassComponent: {
                var childContextTypes = interruptedWork.type.childContextTypes;
                if (childContextTypes !== null && childContextTypes !== void 0) {
                  popContext(interruptedWork);
                }
                break;
              }
              case HostRoot: {
                popHostContainer(interruptedWork);
                popTopLevelContextObject(interruptedWork);
                resetWorkInProgressVersions();
                break;
              }
              case HostComponent: {
                popHostContext(interruptedWork);
                break;
              }
              case HostPortal:
                popHostContainer(interruptedWork);
                break;
              case SuspenseComponent:
                popSuspenseContext(interruptedWork);
                break;
              case SuspenseListComponent:
                popSuspenseContext(interruptedWork);
                break;
              case ContextProvider:
                var context = interruptedWork.type._context;
                popProvider(context, interruptedWork);
                break;
              case OffscreenComponent:
              case LegacyHiddenComponent:
                popRenderLanes(interruptedWork);
                break;
            }
          }
          var didWarnAboutUndefinedSnapshotBeforeUpdate = null;
          {
            didWarnAboutUndefinedSnapshotBeforeUpdate = /* @__PURE__ */ new Set();
          }
          var offscreenSubtreeIsHidden = false;
          var offscreenSubtreeWasHidden = false;
          var PossiblyWeakSet = typeof WeakSet === "function" ? WeakSet : Set;
          var nextEffect = null;
          var inProgressLanes = null;
          var inProgressRoot = null;
          function reportUncaughtErrorInDEV(error2) {
            {
              invokeGuardedCallback(null, function() {
                throw error2;
              });
              clearCaughtError();
            }
          }
          var callComponentWillUnmountWithTimer = function(current2, instance) {
            instance.props = current2.memoizedProps;
            instance.state = current2.memoizedState;
            if (current2.mode & ProfileMode) {
              try {
                startLayoutEffectTimer();
                instance.componentWillUnmount();
              } finally {
                recordLayoutEffectDuration(current2);
              }
            } else {
              instance.componentWillUnmount();
            }
          };
          function safelyCallCommitHookLayoutEffectListMount(current2, nearestMountedAncestor) {
            try {
              commitHookEffectListMount(Layout, current2);
            } catch (error2) {
              reportUncaughtErrorInDEV(error2);
              captureCommitPhaseError(current2, nearestMountedAncestor, error2);
            }
          }
          function safelyCallComponentWillUnmount(current2, nearestMountedAncestor, instance) {
            try {
              callComponentWillUnmountWithTimer(current2, instance);
            } catch (error2) {
              reportUncaughtErrorInDEV(error2);
              captureCommitPhaseError(current2, nearestMountedAncestor, error2);
            }
          }
          function safelyCallComponentDidMount(current2, nearestMountedAncestor, instance) {
            try {
              instance.componentDidMount();
            } catch (error2) {
              reportUncaughtErrorInDEV(error2);
              captureCommitPhaseError(current2, nearestMountedAncestor, error2);
            }
          }
          function safelyAttachRef(current2, nearestMountedAncestor) {
            try {
              commitAttachRef(current2);
            } catch (error2) {
              reportUncaughtErrorInDEV(error2);
              captureCommitPhaseError(current2, nearestMountedAncestor, error2);
            }
          }
          function safelyDetachRef(current2, nearestMountedAncestor) {
            var ref = current2.ref;
            if (ref !== null) {
              if (typeof ref === "function") {
                var retVal;
                try {
                  if (enableProfilerTimer && enableProfilerCommitHooks && current2.mode & ProfileMode) {
                    try {
                      startLayoutEffectTimer();
                      retVal = ref(null);
                    } finally {
                      recordLayoutEffectDuration(current2);
                    }
                  } else {
                    retVal = ref(null);
                  }
                } catch (error2) {
                  reportUncaughtErrorInDEV(error2);
                  captureCommitPhaseError(current2, nearestMountedAncestor, error2);
                }
                {
                  if (typeof retVal === "function") {
                    error("Unexpected return value from a callback ref in %s. A callback ref should not return a function.", getComponentNameFromFiber(current2));
                  }
                }
              } else {
                ref.current = null;
              }
            }
          }
          function safelyCallDestroy(current2, nearestMountedAncestor, destroy) {
            try {
              destroy();
            } catch (error2) {
              reportUncaughtErrorInDEV(error2);
              captureCommitPhaseError(current2, nearestMountedAncestor, error2);
            }
          }
          var focusedInstanceHandle = null;
          var shouldFireAfterActiveInstanceBlur = false;
          function commitBeforeMutationEffects(root3, firstChild) {
            focusedInstanceHandle = prepareForCommit(root3.containerInfo);
            nextEffect = firstChild;
            commitBeforeMutationEffects_begin();
            var shouldFire = shouldFireAfterActiveInstanceBlur;
            shouldFireAfterActiveInstanceBlur = false;
            focusedInstanceHandle = null;
            return shouldFire;
          }
          function commitBeforeMutationEffects_begin() {
            while (nextEffect !== null) {
              var fiber = nextEffect;
              var child = fiber.child;
              if ((fiber.subtreeFlags & BeforeMutationMask) !== NoFlags && child !== null) {
                ensureCorrectReturnPointer(child, fiber);
                nextEffect = child;
              } else {
                commitBeforeMutationEffects_complete();
              }
            }
          }
          function commitBeforeMutationEffects_complete() {
            while (nextEffect !== null) {
              var fiber = nextEffect;
              setCurrentFiber(fiber);
              try {
                commitBeforeMutationEffectsOnFiber(fiber);
              } catch (error2) {
                reportUncaughtErrorInDEV(error2);
                captureCommitPhaseError(fiber, fiber.return, error2);
              }
              resetCurrentFiber();
              var sibling = fiber.sibling;
              if (sibling !== null) {
                ensureCorrectReturnPointer(sibling, fiber.return);
                nextEffect = sibling;
                return;
              }
              nextEffect = fiber.return;
            }
          }
          function commitBeforeMutationEffectsOnFiber(finishedWork) {
            var current2 = finishedWork.alternate;
            var flags = finishedWork.flags;
            if ((flags & Snapshot) !== NoFlags) {
              setCurrentFiber(finishedWork);
              switch (finishedWork.tag) {
                case FunctionComponent:
                case ForwardRef:
                case SimpleMemoComponent: {
                  break;
                }
                case ClassComponent: {
                  if (current2 !== null) {
                    var prevProps = current2.memoizedProps;
                    var prevState = current2.memoizedState;
                    var instance = finishedWork.stateNode;
                    {
                      if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
                        if (instance.props !== finishedWork.memoizedProps) {
                          error("Expected %s props to match memoized props before getSnapshotBeforeUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
                        }
                        if (instance.state !== finishedWork.memoizedState) {
                          error("Expected %s state to match memoized state before getSnapshotBeforeUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.state`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
                        }
                      }
                    }
                    var snapshot = instance.getSnapshotBeforeUpdate(finishedWork.elementType === finishedWork.type ? prevProps : resolveDefaultProps(finishedWork.type, prevProps), prevState);
                    {
                      var didWarnSet = didWarnAboutUndefinedSnapshotBeforeUpdate;
                      if (snapshot === void 0 && !didWarnSet.has(finishedWork.type)) {
                        didWarnSet.add(finishedWork.type);
                        error("%s.getSnapshotBeforeUpdate(): A snapshot value (or null) must be returned. You have returned undefined.", getComponentNameFromFiber(finishedWork));
                      }
                    }
                    instance.__reactInternalSnapshotBeforeUpdate = snapshot;
                  }
                  break;
                }
                case HostRoot: {
                  {
                    var root3 = finishedWork.stateNode;
                    clearContainer(root3.containerInfo);
                  }
                  break;
                }
                case HostComponent:
                case HostText:
                case HostPortal:
                case IncompleteClassComponent:
                  break;
                default: {
                  throw new Error("This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue.");
                }
              }
              resetCurrentFiber();
            }
          }
          function commitHookEffectListUnmount(flags, finishedWork, nearestMountedAncestor) {
            var updateQueue = finishedWork.updateQueue;
            var lastEffect = updateQueue !== null ? updateQueue.lastEffect : null;
            if (lastEffect !== null) {
              var firstEffect = lastEffect.next;
              var effect = firstEffect;
              do {
                if ((effect.tag & flags) === flags) {
                  var destroy = effect.destroy;
                  effect.destroy = void 0;
                  if (destroy !== void 0) {
                    {
                      if ((flags & Passive$1) !== NoFlags$1) {
                        markComponentPassiveEffectUnmountStarted(finishedWork);
                      } else if ((flags & Layout) !== NoFlags$1) {
                        markComponentLayoutEffectUnmountStarted(finishedWork);
                      }
                    }
                    safelyCallDestroy(finishedWork, nearestMountedAncestor, destroy);
                    {
                      if ((flags & Passive$1) !== NoFlags$1) {
                        markComponentPassiveEffectUnmountStopped();
                      } else if ((flags & Layout) !== NoFlags$1) {
                        markComponentLayoutEffectUnmountStopped();
                      }
                    }
                  }
                }
                effect = effect.next;
              } while (effect !== firstEffect);
            }
          }
          function commitHookEffectListMount(flags, finishedWork) {
            var updateQueue = finishedWork.updateQueue;
            var lastEffect = updateQueue !== null ? updateQueue.lastEffect : null;
            if (lastEffect !== null) {
              var firstEffect = lastEffect.next;
              var effect = firstEffect;
              do {
                if ((effect.tag & flags) === flags) {
                  {
                    if ((flags & Passive$1) !== NoFlags$1) {
                      markComponentPassiveEffectMountStarted(finishedWork);
                    } else if ((flags & Layout) !== NoFlags$1) {
                      markComponentLayoutEffectMountStarted(finishedWork);
                    }
                  }
                  var create = effect.create;
                  effect.destroy = create();
                  {
                    if ((flags & Passive$1) !== NoFlags$1) {
                      markComponentPassiveEffectMountStopped();
                    } else if ((flags & Layout) !== NoFlags$1) {
                      markComponentLayoutEffectMountStopped();
                    }
                  }
                  {
                    var destroy = effect.destroy;
                    if (destroy !== void 0 && typeof destroy !== "function") {
                      var hookName = void 0;
                      if ((effect.tag & Layout) !== NoFlags) {
                        hookName = "useLayoutEffect";
                      } else if ((effect.tag & Insertion) !== NoFlags) {
                        hookName = "useInsertionEffect";
                      } else {
                        hookName = "useEffect";
                      }
                      var addendum = void 0;
                      if (destroy === null) {
                        addendum = " You returned null. If your effect does not require clean up, return undefined (or nothing).";
                      } else if (typeof destroy.then === "function") {
                        addendum = "\n\nIt looks like you wrote " + hookName + "(async () => ...) or returned a Promise. Instead, write the async function inside your effect and call it immediately:\n\n" + hookName + "(() => {\n  async function fetchData() {\n    // You can await here\n    const response = await MyAPI.getData(someId);\n    // ...\n  }\n  fetchData();\n}, [someId]); // Or [] if effect doesn't need props or state\n\nLearn more about data fetching with Hooks: https://reactjs.org/link/hooks-data-fetching";
                      } else {
                        addendum = " You returned: " + destroy;
                      }
                      error("%s must not return anything besides a function, which is used for clean-up.%s", hookName, addendum);
                    }
                  }
                }
                effect = effect.next;
              } while (effect !== firstEffect);
            }
          }
          function commitPassiveEffectDurations(finishedRoot, finishedWork) {
            {
              if ((finishedWork.flags & Update) !== NoFlags) {
                switch (finishedWork.tag) {
                  case Profiler: {
                    var passiveEffectDuration = finishedWork.stateNode.passiveEffectDuration;
                    var _finishedWork$memoize = finishedWork.memoizedProps, id = _finishedWork$memoize.id, onPostCommit = _finishedWork$memoize.onPostCommit;
                    var commitTime2 = getCommitTime();
                    var phase = finishedWork.alternate === null ? "mount" : "update";
                    {
                      if (isCurrentUpdateNested()) {
                        phase = "nested-update";
                      }
                    }
                    if (typeof onPostCommit === "function") {
                      onPostCommit(id, phase, passiveEffectDuration, commitTime2);
                    }
                    var parentFiber = finishedWork.return;
                    outer:
                      while (parentFiber !== null) {
                        switch (parentFiber.tag) {
                          case HostRoot:
                            var root3 = parentFiber.stateNode;
                            root3.passiveEffectDuration += passiveEffectDuration;
                            break outer;
                          case Profiler:
                            var parentStateNode = parentFiber.stateNode;
                            parentStateNode.passiveEffectDuration += passiveEffectDuration;
                            break outer;
                        }
                        parentFiber = parentFiber.return;
                      }
                    break;
                  }
                }
              }
            }
          }
          function commitLayoutEffectOnFiber(finishedRoot, current2, finishedWork, committedLanes) {
            if ((finishedWork.flags & LayoutMask) !== NoFlags) {
              switch (finishedWork.tag) {
                case FunctionComponent:
                case ForwardRef:
                case SimpleMemoComponent: {
                  if (!offscreenSubtreeWasHidden) {
                    if (finishedWork.mode & ProfileMode) {
                      try {
                        startLayoutEffectTimer();
                        commitHookEffectListMount(Layout | HasEffect, finishedWork);
                      } finally {
                        recordLayoutEffectDuration(finishedWork);
                      }
                    } else {
                      commitHookEffectListMount(Layout | HasEffect, finishedWork);
                    }
                  }
                  break;
                }
                case ClassComponent: {
                  var instance = finishedWork.stateNode;
                  if (finishedWork.flags & Update) {
                    if (!offscreenSubtreeWasHidden) {
                      if (current2 === null) {
                        {
                          if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
                            if (instance.props !== finishedWork.memoizedProps) {
                              error("Expected %s props to match memoized props before componentDidMount. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
                            }
                            if (instance.state !== finishedWork.memoizedState) {
                              error("Expected %s state to match memoized state before componentDidMount. This might either be because of a bug in React, or because a component reassigns its own `this.state`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
                            }
                          }
                        }
                        if (finishedWork.mode & ProfileMode) {
                          try {
                            startLayoutEffectTimer();
                            instance.componentDidMount();
                          } finally {
                            recordLayoutEffectDuration(finishedWork);
                          }
                        } else {
                          instance.componentDidMount();
                        }
                      } else {
                        var prevProps = finishedWork.elementType === finishedWork.type ? current2.memoizedProps : resolveDefaultProps(finishedWork.type, current2.memoizedProps);
                        var prevState = current2.memoizedState;
                        {
                          if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
                            if (instance.props !== finishedWork.memoizedProps) {
                              error("Expected %s props to match memoized props before componentDidUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
                            }
                            if (instance.state !== finishedWork.memoizedState) {
                              error("Expected %s state to match memoized state before componentDidUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.state`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
                            }
                          }
                        }
                        if (finishedWork.mode & ProfileMode) {
                          try {
                            startLayoutEffectTimer();
                            instance.componentDidUpdate(prevProps, prevState, instance.__reactInternalSnapshotBeforeUpdate);
                          } finally {
                            recordLayoutEffectDuration(finishedWork);
                          }
                        } else {
                          instance.componentDidUpdate(prevProps, prevState, instance.__reactInternalSnapshotBeforeUpdate);
                        }
                      }
                    }
                  }
                  var updateQueue = finishedWork.updateQueue;
                  if (updateQueue !== null) {
                    {
                      if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
                        if (instance.props !== finishedWork.memoizedProps) {
                          error("Expected %s props to match memoized props before processing the update queue. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
                        }
                        if (instance.state !== finishedWork.memoizedState) {
                          error("Expected %s state to match memoized state before processing the update queue. This might either be because of a bug in React, or because a component reassigns its own `this.state`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
                        }
                      }
                    }
                    commitUpdateQueue(finishedWork, updateQueue, instance);
                  }
                  break;
                }
                case HostRoot: {
                  var _updateQueue = finishedWork.updateQueue;
                  if (_updateQueue !== null) {
                    var _instance = null;
                    if (finishedWork.child !== null) {
                      switch (finishedWork.child.tag) {
                        case HostComponent:
                          _instance = getPublicInstance(finishedWork.child.stateNode);
                          break;
                        case ClassComponent:
                          _instance = finishedWork.child.stateNode;
                          break;
                      }
                    }
                    commitUpdateQueue(finishedWork, _updateQueue, _instance);
                  }
                  break;
                }
                case HostComponent: {
                  var _instance2 = finishedWork.stateNode;
                  if (current2 === null && finishedWork.flags & Update) {
                    var type = finishedWork.type;
                    var props = finishedWork.memoizedProps;
                    commitMount(_instance2, type, props);
                  }
                  break;
                }
                case HostText: {
                  break;
                }
                case HostPortal: {
                  break;
                }
                case Profiler: {
                  {
                    var _finishedWork$memoize2 = finishedWork.memoizedProps, onCommit = _finishedWork$memoize2.onCommit, onRender = _finishedWork$memoize2.onRender;
                    var effectDuration = finishedWork.stateNode.effectDuration;
                    var commitTime2 = getCommitTime();
                    var phase = current2 === null ? "mount" : "update";
                    {
                      if (isCurrentUpdateNested()) {
                        phase = "nested-update";
                      }
                    }
                    if (typeof onRender === "function") {
                      onRender(finishedWork.memoizedProps.id, phase, finishedWork.actualDuration, finishedWork.treeBaseDuration, finishedWork.actualStartTime, commitTime2);
                    }
                    {
                      if (typeof onCommit === "function") {
                        onCommit(finishedWork.memoizedProps.id, phase, effectDuration, commitTime2);
                      }
                      enqueuePendingPassiveProfilerEffect(finishedWork);
                      var parentFiber = finishedWork.return;
                      outer:
                        while (parentFiber !== null) {
                          switch (parentFiber.tag) {
                            case HostRoot:
                              var root3 = parentFiber.stateNode;
                              root3.effectDuration += effectDuration;
                              break outer;
                            case Profiler:
                              var parentStateNode = parentFiber.stateNode;
                              parentStateNode.effectDuration += effectDuration;
                              break outer;
                          }
                          parentFiber = parentFiber.return;
                        }
                    }
                  }
                  break;
                }
                case SuspenseComponent: {
                  commitSuspenseHydrationCallbacks(finishedRoot, finishedWork);
                  break;
                }
                case SuspenseListComponent:
                case IncompleteClassComponent:
                case ScopeComponent:
                case OffscreenComponent:
                case LegacyHiddenComponent: {
                  break;
                }
                default:
                  throw new Error("This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue.");
              }
            }
            if (!offscreenSubtreeWasHidden) {
              {
                if (finishedWork.flags & Ref) {
                  commitAttachRef(finishedWork);
                }
              }
            }
          }
          function reappearLayoutEffectsOnFiber(node) {
            switch (node.tag) {
              case FunctionComponent:
              case ForwardRef:
              case SimpleMemoComponent: {
                if (node.mode & ProfileMode) {
                  try {
                    startLayoutEffectTimer();
                    safelyCallCommitHookLayoutEffectListMount(node, node.return);
                  } finally {
                    recordLayoutEffectDuration(node);
                  }
                } else {
                  safelyCallCommitHookLayoutEffectListMount(node, node.return);
                }
                break;
              }
              case ClassComponent: {
                var instance = node.stateNode;
                if (typeof instance.componentDidMount === "function") {
                  safelyCallComponentDidMount(node, node.return, instance);
                }
                safelyAttachRef(node, node.return);
                break;
              }
              case HostComponent: {
                safelyAttachRef(node, node.return);
                break;
              }
            }
          }
          function hideOrUnhideAllChildren(finishedWork, isHidden) {
            var hostSubtreeRoot = null;
            {
              var node = finishedWork;
              while (true) {
                if (node.tag === HostComponent) {
                  if (hostSubtreeRoot === null) {
                    hostSubtreeRoot = node;
                    var instance = node.stateNode;
                    if (isHidden) {
                      hideInstance(instance);
                    } else {
                      unhideInstance(node.stateNode, node.memoizedProps);
                    }
                  }
                } else if (node.tag === HostText) {
                  if (hostSubtreeRoot === null) {
                    var _instance3 = node.stateNode;
                    if (isHidden) {
                      hideTextInstance(_instance3);
                    } else {
                      unhideTextInstance(_instance3, node.memoizedProps);
                    }
                  }
                } else if ((node.tag === OffscreenComponent || node.tag === LegacyHiddenComponent) && node.memoizedState !== null && node !== finishedWork)
                  ;
                else if (node.child !== null) {
                  node.child.return = node;
                  node = node.child;
                  continue;
                }
                if (node === finishedWork) {
                  return;
                }
                while (node.sibling === null) {
                  if (node.return === null || node.return === finishedWork) {
                    return;
                  }
                  if (hostSubtreeRoot === node) {
                    hostSubtreeRoot = null;
                  }
                  node = node.return;
                }
                if (hostSubtreeRoot === node) {
                  hostSubtreeRoot = null;
                }
                node.sibling.return = node.return;
                node = node.sibling;
              }
            }
          }
          function commitAttachRef(finishedWork) {
            var ref = finishedWork.ref;
            if (ref !== null) {
              var instance = finishedWork.stateNode;
              var instanceToUse;
              switch (finishedWork.tag) {
                case HostComponent:
                  instanceToUse = getPublicInstance(instance);
                  break;
                default:
                  instanceToUse = instance;
              }
              if (typeof ref === "function") {
                var retVal;
                if (finishedWork.mode & ProfileMode) {
                  try {
                    startLayoutEffectTimer();
                    retVal = ref(instanceToUse);
                  } finally {
                    recordLayoutEffectDuration(finishedWork);
                  }
                } else {
                  retVal = ref(instanceToUse);
                }
                {
                  if (typeof retVal === "function") {
                    error("Unexpected return value from a callback ref in %s. A callback ref should not return a function.", getComponentNameFromFiber(finishedWork));
                  }
                }
              } else {
                {
                  if (!ref.hasOwnProperty("current")) {
                    error("Unexpected ref object provided for %s. Use either a ref-setter function or React.createRef().", getComponentNameFromFiber(finishedWork));
                  }
                }
                ref.current = instanceToUse;
              }
            }
          }
          function commitDetachRef(current2) {
            var currentRef = current2.ref;
            if (currentRef !== null) {
              if (typeof currentRef === "function") {
                if (current2.mode & ProfileMode) {
                  try {
                    startLayoutEffectTimer();
                    currentRef(null);
                  } finally {
                    recordLayoutEffectDuration(current2);
                  }
                } else {
                  currentRef(null);
                }
              } else {
                currentRef.current = null;
              }
            }
          }
          function commitUnmount(finishedRoot, current2, nearestMountedAncestor) {
            onCommitUnmount(current2);
            switch (current2.tag) {
              case FunctionComponent:
              case ForwardRef:
              case MemoComponent:
              case SimpleMemoComponent: {
                var updateQueue = current2.updateQueue;
                if (updateQueue !== null) {
                  var lastEffect = updateQueue.lastEffect;
                  if (lastEffect !== null) {
                    var firstEffect = lastEffect.next;
                    var effect = firstEffect;
                    do {
                      var _effect = effect, destroy = _effect.destroy, tag = _effect.tag;
                      if (destroy !== void 0) {
                        if ((tag & Insertion) !== NoFlags$1) {
                          safelyCallDestroy(current2, nearestMountedAncestor, destroy);
                        } else if ((tag & Layout) !== NoFlags$1) {
                          {
                            markComponentLayoutEffectUnmountStarted(current2);
                          }
                          if (current2.mode & ProfileMode) {
                            startLayoutEffectTimer();
                            safelyCallDestroy(current2, nearestMountedAncestor, destroy);
                            recordLayoutEffectDuration(current2);
                          } else {
                            safelyCallDestroy(current2, nearestMountedAncestor, destroy);
                          }
                          {
                            markComponentLayoutEffectUnmountStopped();
                          }
                        }
                      }
                      effect = effect.next;
                    } while (effect !== firstEffect);
                  }
                }
                return;
              }
              case ClassComponent: {
                safelyDetachRef(current2, nearestMountedAncestor);
                var instance = current2.stateNode;
                if (typeof instance.componentWillUnmount === "function") {
                  safelyCallComponentWillUnmount(current2, nearestMountedAncestor, instance);
                }
                return;
              }
              case HostComponent: {
                safelyDetachRef(current2, nearestMountedAncestor);
                return;
              }
              case HostPortal: {
                {
                  unmountHostComponents(finishedRoot, current2, nearestMountedAncestor);
                }
                return;
              }
              case DehydratedFragment: {
                return;
              }
              case ScopeComponent: {
                return;
              }
            }
          }
          function commitNestedUnmounts(finishedRoot, root3, nearestMountedAncestor) {
            var node = root3;
            while (true) {
              commitUnmount(finishedRoot, node, nearestMountedAncestor);
              if (node.child !== null && node.tag !== HostPortal) {
                node.child.return = node;
                node = node.child;
                continue;
              }
              if (node === root3) {
                return;
              }
              while (node.sibling === null) {
                if (node.return === null || node.return === root3) {
                  return;
                }
                node = node.return;
              }
              node.sibling.return = node.return;
              node = node.sibling;
            }
          }
          function detachFiberMutation(fiber) {
            var alternate = fiber.alternate;
            if (alternate !== null) {
              alternate.return = null;
            }
            fiber.return = null;
          }
          function detachFiberAfterEffects(fiber) {
            var alternate = fiber.alternate;
            if (alternate !== null) {
              fiber.alternate = null;
              detachFiberAfterEffects(alternate);
            }
            {
              fiber.child = null;
              fiber.deletions = null;
              fiber.sibling = null;
              if (fiber.tag === HostComponent) {
                var hostInstance = fiber.stateNode;
                if (hostInstance !== null) {
                  detachDeletedInstance(hostInstance);
                }
              }
              fiber.stateNode = null;
              {
                fiber._debugOwner = null;
              }
              {
                fiber.return = null;
                fiber.dependencies = null;
                fiber.memoizedProps = null;
                fiber.memoizedState = null;
                fiber.pendingProps = null;
                fiber.stateNode = null;
                fiber.updateQueue = null;
              }
            }
          }
          function getHostParentFiber(fiber) {
            var parent = fiber.return;
            while (parent !== null) {
              if (isHostParent(parent)) {
                return parent;
              }
              parent = parent.return;
            }
            throw new Error("Expected to find a host parent. This error is likely caused by a bug in React. Please file an issue.");
          }
          function isHostParent(fiber) {
            return fiber.tag === HostComponent || fiber.tag === HostRoot || fiber.tag === HostPortal;
          }
          function getHostSibling(fiber) {
            var node = fiber;
            siblings:
              while (true) {
                while (node.sibling === null) {
                  if (node.return === null || isHostParent(node.return)) {
                    return null;
                  }
                  node = node.return;
                }
                node.sibling.return = node.return;
                node = node.sibling;
                while (node.tag !== HostComponent && node.tag !== HostText && node.tag !== DehydratedFragment) {
                  if (node.flags & Placement) {
                    continue siblings;
                  }
                  if (node.child === null || node.tag === HostPortal) {
                    continue siblings;
                  } else {
                    node.child.return = node;
                    node = node.child;
                  }
                }
                if (!(node.flags & Placement)) {
                  return node.stateNode;
                }
              }
          }
          function commitPlacement(finishedWork) {
            var parentFiber = getHostParentFiber(finishedWork);
            switch (parentFiber.tag) {
              case HostComponent: {
                var parent = parentFiber.stateNode;
                if (parentFiber.flags & ContentReset) {
                  resetTextContent(parent);
                  parentFiber.flags &= ~ContentReset;
                }
                var before = getHostSibling(finishedWork);
                insertOrAppendPlacementNode(finishedWork, before, parent);
                break;
              }
              case HostRoot:
              case HostPortal: {
                var _parent = parentFiber.stateNode.containerInfo;
                var _before = getHostSibling(finishedWork);
                insertOrAppendPlacementNodeIntoContainer(finishedWork, _before, _parent);
                break;
              }
              default:
                throw new Error("Invalid host parent fiber. This error is likely caused by a bug in React. Please file an issue.");
            }
          }
          function insertOrAppendPlacementNodeIntoContainer(node, before, parent) {
            var tag = node.tag;
            var isHost = tag === HostComponent || tag === HostText;
            if (isHost) {
              var stateNode = node.stateNode;
              if (before) {
                insertInContainerBefore(parent, stateNode, before);
              } else {
                appendChildToContainer(parent, stateNode);
              }
            } else if (tag === HostPortal)
              ;
            else {
              var child = node.child;
              if (child !== null) {
                insertOrAppendPlacementNodeIntoContainer(child, before, parent);
                var sibling = child.sibling;
                while (sibling !== null) {
                  insertOrAppendPlacementNodeIntoContainer(sibling, before, parent);
                  sibling = sibling.sibling;
                }
              }
            }
          }
          function insertOrAppendPlacementNode(node, before, parent) {
            var tag = node.tag;
            var isHost = tag === HostComponent || tag === HostText;
            if (isHost) {
              var stateNode = node.stateNode;
              if (before) {
                insertBefore(parent, stateNode, before);
              } else {
                appendChild(parent, stateNode);
              }
            } else if (tag === HostPortal)
              ;
            else {
              var child = node.child;
              if (child !== null) {
                insertOrAppendPlacementNode(child, before, parent);
                var sibling = child.sibling;
                while (sibling !== null) {
                  insertOrAppendPlacementNode(sibling, before, parent);
                  sibling = sibling.sibling;
                }
              }
            }
          }
          function unmountHostComponents(finishedRoot, current2, nearestMountedAncestor) {
            var node = current2;
            var currentParentIsValid = false;
            var currentParent;
            var currentParentIsContainer;
            while (true) {
              if (!currentParentIsValid) {
                var parent = node.return;
                findParent:
                  while (true) {
                    if (parent === null) {
                      throw new Error("Expected to find a host parent. This error is likely caused by a bug in React. Please file an issue.");
                    }
                    var parentStateNode = parent.stateNode;
                    switch (parent.tag) {
                      case HostComponent:
                        currentParent = parentStateNode;
                        currentParentIsContainer = false;
                        break findParent;
                      case HostRoot:
                        currentParent = parentStateNode.containerInfo;
                        currentParentIsContainer = true;
                        break findParent;
                      case HostPortal:
                        currentParent = parentStateNode.containerInfo;
                        currentParentIsContainer = true;
                        break findParent;
                    }
                    parent = parent.return;
                  }
                currentParentIsValid = true;
              }
              if (node.tag === HostComponent || node.tag === HostText) {
                commitNestedUnmounts(finishedRoot, node, nearestMountedAncestor);
                if (currentParentIsContainer) {
                  removeChildFromContainer(currentParent, node.stateNode);
                } else {
                  removeChild(currentParent, node.stateNode);
                }
              } else if (node.tag === DehydratedFragment) {
                if (currentParentIsContainer) {
                  clearSuspenseBoundaryFromContainer(currentParent, node.stateNode);
                } else {
                  clearSuspenseBoundary(currentParent, node.stateNode);
                }
              } else if (node.tag === HostPortal) {
                if (node.child !== null) {
                  currentParent = node.stateNode.containerInfo;
                  currentParentIsContainer = true;
                  node.child.return = node;
                  node = node.child;
                  continue;
                }
              } else {
                commitUnmount(finishedRoot, node, nearestMountedAncestor);
                if (node.child !== null) {
                  node.child.return = node;
                  node = node.child;
                  continue;
                }
              }
              if (node === current2) {
                return;
              }
              while (node.sibling === null) {
                if (node.return === null || node.return === current2) {
                  return;
                }
                node = node.return;
                if (node.tag === HostPortal) {
                  currentParentIsValid = false;
                }
              }
              node.sibling.return = node.return;
              node = node.sibling;
            }
          }
          function commitDeletion(finishedRoot, current2, nearestMountedAncestor) {
            {
              unmountHostComponents(finishedRoot, current2, nearestMountedAncestor);
            }
            detachFiberMutation(current2);
          }
          function commitWork(current2, finishedWork) {
            switch (finishedWork.tag) {
              case FunctionComponent:
              case ForwardRef:
              case MemoComponent:
              case SimpleMemoComponent: {
                commitHookEffectListUnmount(Insertion | HasEffect, finishedWork, finishedWork.return);
                commitHookEffectListMount(Insertion | HasEffect, finishedWork);
                if (finishedWork.mode & ProfileMode) {
                  try {
                    startLayoutEffectTimer();
                    commitHookEffectListUnmount(Layout | HasEffect, finishedWork, finishedWork.return);
                  } finally {
                    recordLayoutEffectDuration(finishedWork);
                  }
                } else {
                  commitHookEffectListUnmount(Layout | HasEffect, finishedWork, finishedWork.return);
                }
                return;
              }
              case ClassComponent: {
                return;
              }
              case HostComponent: {
                var instance = finishedWork.stateNode;
                if (instance != null) {
                  var newProps = finishedWork.memoizedProps;
                  var oldProps = current2 !== null ? current2.memoizedProps : newProps;
                  var type = finishedWork.type;
                  var updatePayload = finishedWork.updateQueue;
                  finishedWork.updateQueue = null;
                  if (updatePayload !== null) {
                    commitUpdate(instance, updatePayload, type, oldProps, newProps);
                  }
                }
                return;
              }
              case HostText: {
                if (finishedWork.stateNode === null) {
                  throw new Error("This should have a text node initialized. This error is likely caused by a bug in React. Please file an issue.");
                }
                var textInstance = finishedWork.stateNode;
                var newText = finishedWork.memoizedProps;
                var oldText = current2 !== null ? current2.memoizedProps : newText;
                commitTextUpdate(textInstance, oldText, newText);
                return;
              }
              case HostRoot: {
                {
                  if (current2 !== null) {
                    var _prevRootState = current2.memoizedState;
                    if (_prevRootState.isDehydrated) {
                      var _root = finishedWork.stateNode;
                      commitHydratedContainer(_root.containerInfo);
                    }
                  }
                }
                return;
              }
              case Profiler: {
                return;
              }
              case SuspenseComponent: {
                commitSuspenseCallback(finishedWork);
                attachSuspenseRetryListeners(finishedWork);
                return;
              }
              case SuspenseListComponent: {
                attachSuspenseRetryListeners(finishedWork);
                return;
              }
              case IncompleteClassComponent: {
                return;
              }
            }
            throw new Error("This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue.");
          }
          function commitSuspenseCallback(finishedWork) {
            var newState = finishedWork.memoizedState;
          }
          function commitSuspenseHydrationCallbacks(finishedRoot, finishedWork) {
            var newState = finishedWork.memoizedState;
            if (newState === null) {
              var current2 = finishedWork.alternate;
              if (current2 !== null) {
                var prevState = current2.memoizedState;
                if (prevState !== null) {
                  var suspenseInstance = prevState.dehydrated;
                  if (suspenseInstance !== null) {
                    commitHydratedSuspenseInstance(suspenseInstance);
                  }
                }
              }
            }
          }
          function attachSuspenseRetryListeners(finishedWork) {
            var wakeables = finishedWork.updateQueue;
            if (wakeables !== null) {
              finishedWork.updateQueue = null;
              var retryCache = finishedWork.stateNode;
              if (retryCache === null) {
                retryCache = finishedWork.stateNode = new PossiblyWeakSet();
              }
              wakeables.forEach(function(wakeable) {
                var retry = resolveRetryWakeable.bind(null, finishedWork, wakeable);
                if (!retryCache.has(wakeable)) {
                  retryCache.add(wakeable);
                  {
                    if (isDevToolsPresent) {
                      if (inProgressLanes !== null && inProgressRoot !== null) {
                        restorePendingUpdaters(inProgressRoot, inProgressLanes);
                      } else {
                        throw Error("Expected finished root and lanes to be set. This is a bug in React.");
                      }
                    }
                  }
                  wakeable.then(retry, retry);
                }
              });
            }
          }
          function commitResetTextContent(current2) {
            resetTextContent(current2.stateNode);
          }
          function commitMutationEffects(root3, firstChild, committedLanes) {
            inProgressLanes = committedLanes;
            inProgressRoot = root3;
            nextEffect = firstChild;
            commitMutationEffects_begin(root3, committedLanes);
            inProgressLanes = null;
            inProgressRoot = null;
          }
          function commitMutationEffects_begin(root3, lanes) {
            while (nextEffect !== null) {
              var fiber = nextEffect;
              var deletions = fiber.deletions;
              if (deletions !== null) {
                for (var i3 = 0; i3 < deletions.length; i3++) {
                  var childToDelete = deletions[i3];
                  try {
                    commitDeletion(root3, childToDelete, fiber);
                  } catch (error2) {
                    reportUncaughtErrorInDEV(error2);
                    captureCommitPhaseError(childToDelete, fiber, error2);
                  }
                }
              }
              var child = fiber.child;
              if ((fiber.subtreeFlags & MutationMask) !== NoFlags && child !== null) {
                ensureCorrectReturnPointer(child, fiber);
                nextEffect = child;
              } else {
                commitMutationEffects_complete(root3, lanes);
              }
            }
          }
          function commitMutationEffects_complete(root3, lanes) {
            while (nextEffect !== null) {
              var fiber = nextEffect;
              setCurrentFiber(fiber);
              try {
                commitMutationEffectsOnFiber(fiber, root3, lanes);
              } catch (error2) {
                reportUncaughtErrorInDEV(error2);
                captureCommitPhaseError(fiber, fiber.return, error2);
              }
              resetCurrentFiber();
              var sibling = fiber.sibling;
              if (sibling !== null) {
                ensureCorrectReturnPointer(sibling, fiber.return);
                nextEffect = sibling;
                return;
              }
              nextEffect = fiber.return;
            }
          }
          function commitMutationEffectsOnFiber(finishedWork, root3, lanes) {
            var flags = finishedWork.flags;
            if (flags & ContentReset) {
              commitResetTextContent(finishedWork);
            }
            if (flags & Ref) {
              var current2 = finishedWork.alternate;
              if (current2 !== null) {
                commitDetachRef(current2);
              }
            }
            if (flags & Visibility) {
              switch (finishedWork.tag) {
                case SuspenseComponent: {
                  var newState = finishedWork.memoizedState;
                  var isHidden = newState !== null;
                  if (isHidden) {
                    var _current = finishedWork.alternate;
                    var wasHidden = _current !== null && _current.memoizedState !== null;
                    if (!wasHidden) {
                      markCommitTimeOfFallback();
                    }
                  }
                  break;
                }
                case OffscreenComponent: {
                  var _newState = finishedWork.memoizedState;
                  var _isHidden = _newState !== null;
                  var _current2 = finishedWork.alternate;
                  var _wasHidden = _current2 !== null && _current2.memoizedState !== null;
                  var offscreenBoundary = finishedWork;
                  {
                    hideOrUnhideAllChildren(offscreenBoundary, _isHidden);
                  }
                  {
                    if (_isHidden) {
                      if (!_wasHidden) {
                        if ((offscreenBoundary.mode & ConcurrentMode) !== NoMode) {
                          nextEffect = offscreenBoundary;
                          var offscreenChild = offscreenBoundary.child;
                          while (offscreenChild !== null) {
                            nextEffect = offscreenChild;
                            disappearLayoutEffects_begin(offscreenChild);
                            offscreenChild = offscreenChild.sibling;
                          }
                        }
                      }
                    }
                    break;
                  }
                }
              }
            }
            var primaryFlags = flags & (Placement | Update | Hydrating);
            switch (primaryFlags) {
              case Placement: {
                commitPlacement(finishedWork);
                finishedWork.flags &= ~Placement;
                break;
              }
              case PlacementAndUpdate: {
                commitPlacement(finishedWork);
                finishedWork.flags &= ~Placement;
                var _current3 = finishedWork.alternate;
                commitWork(_current3, finishedWork);
                break;
              }
              case Hydrating: {
                finishedWork.flags &= ~Hydrating;
                break;
              }
              case HydratingAndUpdate: {
                finishedWork.flags &= ~Hydrating;
                var _current4 = finishedWork.alternate;
                commitWork(_current4, finishedWork);
                break;
              }
              case Update: {
                var _current5 = finishedWork.alternate;
                commitWork(_current5, finishedWork);
                break;
              }
            }
          }
          function commitLayoutEffects(finishedWork, root3, committedLanes) {
            inProgressLanes = committedLanes;
            inProgressRoot = root3;
            nextEffect = finishedWork;
            commitLayoutEffects_begin(finishedWork, root3, committedLanes);
            inProgressLanes = null;
            inProgressRoot = null;
          }
          function commitLayoutEffects_begin(subtreeRoot, root3, committedLanes) {
            var isModernRoot = (subtreeRoot.mode & ConcurrentMode) !== NoMode;
            while (nextEffect !== null) {
              var fiber = nextEffect;
              var firstChild = fiber.child;
              if (fiber.tag === OffscreenComponent && isModernRoot) {
                var isHidden = fiber.memoizedState !== null;
                var newOffscreenSubtreeIsHidden = isHidden || offscreenSubtreeIsHidden;
                if (newOffscreenSubtreeIsHidden) {
                  commitLayoutMountEffects_complete(subtreeRoot, root3, committedLanes);
                  continue;
                } else {
                  var current2 = fiber.alternate;
                  var wasHidden = current2 !== null && current2.memoizedState !== null;
                  var newOffscreenSubtreeWasHidden = wasHidden || offscreenSubtreeWasHidden;
                  var prevOffscreenSubtreeIsHidden = offscreenSubtreeIsHidden;
                  var prevOffscreenSubtreeWasHidden = offscreenSubtreeWasHidden;
                  offscreenSubtreeIsHidden = newOffscreenSubtreeIsHidden;
                  offscreenSubtreeWasHidden = newOffscreenSubtreeWasHidden;
                  if (offscreenSubtreeWasHidden && !prevOffscreenSubtreeWasHidden) {
                    nextEffect = fiber;
                    reappearLayoutEffects_begin(fiber);
                  }
                  var child = firstChild;
                  while (child !== null) {
                    nextEffect = child;
                    commitLayoutEffects_begin(child, root3, committedLanes);
                    child = child.sibling;
                  }
                  nextEffect = fiber;
                  offscreenSubtreeIsHidden = prevOffscreenSubtreeIsHidden;
                  offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden;
                  commitLayoutMountEffects_complete(subtreeRoot, root3, committedLanes);
                  continue;
                }
              }
              if ((fiber.subtreeFlags & LayoutMask) !== NoFlags && firstChild !== null) {
                ensureCorrectReturnPointer(firstChild, fiber);
                nextEffect = firstChild;
              } else {
                commitLayoutMountEffects_complete(subtreeRoot, root3, committedLanes);
              }
            }
          }
          function commitLayoutMountEffects_complete(subtreeRoot, root3, committedLanes) {
            while (nextEffect !== null) {
              var fiber = nextEffect;
              if ((fiber.flags & LayoutMask) !== NoFlags) {
                var current2 = fiber.alternate;
                setCurrentFiber(fiber);
                try {
                  commitLayoutEffectOnFiber(root3, current2, fiber, committedLanes);
                } catch (error2) {
                  reportUncaughtErrorInDEV(error2);
                  captureCommitPhaseError(fiber, fiber.return, error2);
                }
                resetCurrentFiber();
              }
              if (fiber === subtreeRoot) {
                nextEffect = null;
                return;
              }
              var sibling = fiber.sibling;
              if (sibling !== null) {
                ensureCorrectReturnPointer(sibling, fiber.return);
                nextEffect = sibling;
                return;
              }
              nextEffect = fiber.return;
            }
          }
          function disappearLayoutEffects_begin(subtreeRoot) {
            while (nextEffect !== null) {
              var fiber = nextEffect;
              var firstChild = fiber.child;
              switch (fiber.tag) {
                case FunctionComponent:
                case ForwardRef:
                case MemoComponent:
                case SimpleMemoComponent: {
                  if (fiber.mode & ProfileMode) {
                    try {
                      startLayoutEffectTimer();
                      commitHookEffectListUnmount(Layout, fiber, fiber.return);
                    } finally {
                      recordLayoutEffectDuration(fiber);
                    }
                  } else {
                    commitHookEffectListUnmount(Layout, fiber, fiber.return);
                  }
                  break;
                }
                case ClassComponent: {
                  safelyDetachRef(fiber, fiber.return);
                  var instance = fiber.stateNode;
                  if (typeof instance.componentWillUnmount === "function") {
                    safelyCallComponentWillUnmount(fiber, fiber.return, instance);
                  }
                  break;
                }
                case HostComponent: {
                  safelyDetachRef(fiber, fiber.return);
                  break;
                }
                case OffscreenComponent: {
                  var isHidden = fiber.memoizedState !== null;
                  if (isHidden) {
                    disappearLayoutEffects_complete(subtreeRoot);
                    continue;
                  }
                  break;
                }
              }
              if (firstChild !== null) {
                firstChild.return = fiber;
                nextEffect = firstChild;
              } else {
                disappearLayoutEffects_complete(subtreeRoot);
              }
            }
          }
          function disappearLayoutEffects_complete(subtreeRoot) {
            while (nextEffect !== null) {
              var fiber = nextEffect;
              if (fiber === subtreeRoot) {
                nextEffect = null;
                return;
              }
              var sibling = fiber.sibling;
              if (sibling !== null) {
                sibling.return = fiber.return;
                nextEffect = sibling;
                return;
              }
              nextEffect = fiber.return;
            }
          }
          function reappearLayoutEffects_begin(subtreeRoot) {
            while (nextEffect !== null) {
              var fiber = nextEffect;
              var firstChild = fiber.child;
              if (fiber.tag === OffscreenComponent) {
                var isHidden = fiber.memoizedState !== null;
                if (isHidden) {
                  reappearLayoutEffects_complete(subtreeRoot);
                  continue;
                }
              }
              if (firstChild !== null) {
                firstChild.return = fiber;
                nextEffect = firstChild;
              } else {
                reappearLayoutEffects_complete(subtreeRoot);
              }
            }
          }
          function reappearLayoutEffects_complete(subtreeRoot) {
            while (nextEffect !== null) {
              var fiber = nextEffect;
              setCurrentFiber(fiber);
              try {
                reappearLayoutEffectsOnFiber(fiber);
              } catch (error2) {
                reportUncaughtErrorInDEV(error2);
                captureCommitPhaseError(fiber, fiber.return, error2);
              }
              resetCurrentFiber();
              if (fiber === subtreeRoot) {
                nextEffect = null;
                return;
              }
              var sibling = fiber.sibling;
              if (sibling !== null) {
                sibling.return = fiber.return;
                nextEffect = sibling;
                return;
              }
              nextEffect = fiber.return;
            }
          }
          function commitPassiveMountEffects(root3, finishedWork) {
            nextEffect = finishedWork;
            commitPassiveMountEffects_begin(finishedWork, root3);
          }
          function commitPassiveMountEffects_begin(subtreeRoot, root3) {
            while (nextEffect !== null) {
              var fiber = nextEffect;
              var firstChild = fiber.child;
              if ((fiber.subtreeFlags & PassiveMask) !== NoFlags && firstChild !== null) {
                ensureCorrectReturnPointer(firstChild, fiber);
                nextEffect = firstChild;
              } else {
                commitPassiveMountEffects_complete(subtreeRoot, root3);
              }
            }
          }
          function commitPassiveMountEffects_complete(subtreeRoot, root3) {
            while (nextEffect !== null) {
              var fiber = nextEffect;
              if ((fiber.flags & Passive) !== NoFlags) {
                setCurrentFiber(fiber);
                try {
                  commitPassiveMountOnFiber(root3, fiber);
                } catch (error2) {
                  reportUncaughtErrorInDEV(error2);
                  captureCommitPhaseError(fiber, fiber.return, error2);
                }
                resetCurrentFiber();
              }
              if (fiber === subtreeRoot) {
                nextEffect = null;
                return;
              }
              var sibling = fiber.sibling;
              if (sibling !== null) {
                ensureCorrectReturnPointer(sibling, fiber.return);
                nextEffect = sibling;
                return;
              }
              nextEffect = fiber.return;
            }
          }
          function commitPassiveMountOnFiber(finishedRoot, finishedWork) {
            switch (finishedWork.tag) {
              case FunctionComponent:
              case ForwardRef:
              case SimpleMemoComponent: {
                if (finishedWork.mode & ProfileMode) {
                  startPassiveEffectTimer();
                  try {
                    commitHookEffectListMount(Passive$1 | HasEffect, finishedWork);
                  } finally {
                    recordPassiveEffectDuration(finishedWork);
                  }
                } else {
                  commitHookEffectListMount(Passive$1 | HasEffect, finishedWork);
                }
                break;
              }
            }
          }
          function commitPassiveUnmountEffects(firstChild) {
            nextEffect = firstChild;
            commitPassiveUnmountEffects_begin();
          }
          function commitPassiveUnmountEffects_begin() {
            while (nextEffect !== null) {
              var fiber = nextEffect;
              var child = fiber.child;
              if ((nextEffect.flags & ChildDeletion) !== NoFlags) {
                var deletions = fiber.deletions;
                if (deletions !== null) {
                  for (var i3 = 0; i3 < deletions.length; i3++) {
                    var fiberToDelete = deletions[i3];
                    nextEffect = fiberToDelete;
                    commitPassiveUnmountEffectsInsideOfDeletedTree_begin(fiberToDelete, fiber);
                  }
                  {
                    var previousFiber = fiber.alternate;
                    if (previousFiber !== null) {
                      var detachedChild = previousFiber.child;
                      if (detachedChild !== null) {
                        previousFiber.child = null;
                        do {
                          var detachedSibling = detachedChild.sibling;
                          detachedChild.sibling = null;
                          detachedChild = detachedSibling;
                        } while (detachedChild !== null);
                      }
                    }
                  }
                  nextEffect = fiber;
                }
              }
              if ((fiber.subtreeFlags & PassiveMask) !== NoFlags && child !== null) {
                ensureCorrectReturnPointer(child, fiber);
                nextEffect = child;
              } else {
                commitPassiveUnmountEffects_complete();
              }
            }
          }
          function commitPassiveUnmountEffects_complete() {
            while (nextEffect !== null) {
              var fiber = nextEffect;
              if ((fiber.flags & Passive) !== NoFlags) {
                setCurrentFiber(fiber);
                commitPassiveUnmountOnFiber(fiber);
                resetCurrentFiber();
              }
              var sibling = fiber.sibling;
              if (sibling !== null) {
                ensureCorrectReturnPointer(sibling, fiber.return);
                nextEffect = sibling;
                return;
              }
              nextEffect = fiber.return;
            }
          }
          function commitPassiveUnmountOnFiber(finishedWork) {
            switch (finishedWork.tag) {
              case FunctionComponent:
              case ForwardRef:
              case SimpleMemoComponent: {
                if (finishedWork.mode & ProfileMode) {
                  startPassiveEffectTimer();
                  commitHookEffectListUnmount(Passive$1 | HasEffect, finishedWork, finishedWork.return);
                  recordPassiveEffectDuration(finishedWork);
                } else {
                  commitHookEffectListUnmount(Passive$1 | HasEffect, finishedWork, finishedWork.return);
                }
                break;
              }
            }
          }
          function commitPassiveUnmountEffectsInsideOfDeletedTree_begin(deletedSubtreeRoot, nearestMountedAncestor) {
            while (nextEffect !== null) {
              var fiber = nextEffect;
              setCurrentFiber(fiber);
              commitPassiveUnmountInsideDeletedTreeOnFiber(fiber, nearestMountedAncestor);
              resetCurrentFiber();
              var child = fiber.child;
              if (child !== null) {
                ensureCorrectReturnPointer(child, fiber);
                nextEffect = child;
              } else {
                commitPassiveUnmountEffectsInsideOfDeletedTree_complete(deletedSubtreeRoot);
              }
            }
          }
          function commitPassiveUnmountEffectsInsideOfDeletedTree_complete(deletedSubtreeRoot) {
            while (nextEffect !== null) {
              var fiber = nextEffect;
              var sibling = fiber.sibling;
              var returnFiber = fiber.return;
              {
                detachFiberAfterEffects(fiber);
                if (fiber === deletedSubtreeRoot) {
                  nextEffect = null;
                  return;
                }
              }
              if (sibling !== null) {
                ensureCorrectReturnPointer(sibling, returnFiber);
                nextEffect = sibling;
                return;
              }
              nextEffect = returnFiber;
            }
          }
          function commitPassiveUnmountInsideDeletedTreeOnFiber(current2, nearestMountedAncestor) {
            switch (current2.tag) {
              case FunctionComponent:
              case ForwardRef:
              case SimpleMemoComponent: {
                if (current2.mode & ProfileMode) {
                  startPassiveEffectTimer();
                  commitHookEffectListUnmount(Passive$1, current2, nearestMountedAncestor);
                  recordPassiveEffectDuration(current2);
                } else {
                  commitHookEffectListUnmount(Passive$1, current2, nearestMountedAncestor);
                }
                break;
              }
            }
          }
          var didWarnWrongReturnPointer = false;
          function ensureCorrectReturnPointer(fiber, expectedReturnFiber) {
            {
              if (!didWarnWrongReturnPointer && fiber.return !== expectedReturnFiber) {
                didWarnWrongReturnPointer = true;
                error("Internal React error: Return pointer is inconsistent with parent.");
              }
            }
            fiber.return = expectedReturnFiber;
          }
          function invokeLayoutEffectMountInDEV(fiber) {
            {
              switch (fiber.tag) {
                case FunctionComponent:
                case ForwardRef:
                case SimpleMemoComponent: {
                  try {
                    commitHookEffectListMount(Layout | HasEffect, fiber);
                  } catch (error2) {
                    reportUncaughtErrorInDEV(error2);
                    captureCommitPhaseError(fiber, fiber.return, error2);
                  }
                  break;
                }
                case ClassComponent: {
                  var instance = fiber.stateNode;
                  try {
                    instance.componentDidMount();
                  } catch (error2) {
                    reportUncaughtErrorInDEV(error2);
                    captureCommitPhaseError(fiber, fiber.return, error2);
                  }
                  break;
                }
              }
            }
          }
          function invokePassiveEffectMountInDEV(fiber) {
            {
              switch (fiber.tag) {
                case FunctionComponent:
                case ForwardRef:
                case SimpleMemoComponent: {
                  try {
                    commitHookEffectListMount(Passive$1 | HasEffect, fiber);
                  } catch (error2) {
                    reportUncaughtErrorInDEV(error2);
                    captureCommitPhaseError(fiber, fiber.return, error2);
                  }
                  break;
                }
              }
            }
          }
          function invokeLayoutEffectUnmountInDEV(fiber) {
            {
              switch (fiber.tag) {
                case FunctionComponent:
                case ForwardRef:
                case SimpleMemoComponent: {
                  try {
                    commitHookEffectListUnmount(Layout | HasEffect, fiber, fiber.return);
                  } catch (error2) {
                    reportUncaughtErrorInDEV(error2);
                    captureCommitPhaseError(fiber, fiber.return, error2);
                  }
                  break;
                }
                case ClassComponent: {
                  var instance = fiber.stateNode;
                  if (typeof instance.componentWillUnmount === "function") {
                    safelyCallComponentWillUnmount(fiber, fiber.return, instance);
                  }
                  break;
                }
              }
            }
          }
          function invokePassiveEffectUnmountInDEV(fiber) {
            {
              switch (fiber.tag) {
                case FunctionComponent:
                case ForwardRef:
                case SimpleMemoComponent: {
                  try {
                    commitHookEffectListUnmount(Passive$1 | HasEffect, fiber, fiber.return);
                  } catch (error2) {
                    reportUncaughtErrorInDEV(error2);
                    captureCommitPhaseError(fiber, fiber.return, error2);
                  }
                }
              }
            }
          }
          var COMPONENT_TYPE = 0;
          var HAS_PSEUDO_CLASS_TYPE = 1;
          var ROLE_TYPE = 2;
          var TEST_NAME_TYPE = 3;
          var TEXT_TYPE = 4;
          if (typeof Symbol === "function" && Symbol.for) {
            var symbolFor = Symbol.for;
            COMPONENT_TYPE = symbolFor("selector.component");
            HAS_PSEUDO_CLASS_TYPE = symbolFor("selector.has_pseudo_class");
            ROLE_TYPE = symbolFor("selector.role");
            TEST_NAME_TYPE = symbolFor("selector.test_id");
            TEXT_TYPE = symbolFor("selector.text");
          }
          var commitHooks = [];
          function onCommitRoot$1() {
            {
              commitHooks.forEach(function(commitHook) {
                return commitHook();
              });
            }
          }
          var ReactCurrentActQueue = ReactSharedInternals.ReactCurrentActQueue;
          function isLegacyActEnvironment(fiber) {
            {
              var isReactActEnvironmentGlobal = typeof IS_REACT_ACT_ENVIRONMENT !== "undefined" ? IS_REACT_ACT_ENVIRONMENT : void 0;
              var jestIsDefined = typeof jest !== "undefined";
              return jestIsDefined && isReactActEnvironmentGlobal !== false;
            }
          }
          function isConcurrentActEnvironment() {
            {
              var isReactActEnvironmentGlobal = typeof IS_REACT_ACT_ENVIRONMENT !== "undefined" ? IS_REACT_ACT_ENVIRONMENT : void 0;
              if (!isReactActEnvironmentGlobal && ReactCurrentActQueue.current !== null) {
                error("The current testing environment is not configured to support act(...)");
              }
              return isReactActEnvironmentGlobal;
            }
          }
          var ceil = Math.ceil;
          var ReactCurrentDispatcher$2 = ReactSharedInternals.ReactCurrentDispatcher, ReactCurrentOwner$2 = ReactSharedInternals.ReactCurrentOwner, ReactCurrentBatchConfig$3 = ReactSharedInternals.ReactCurrentBatchConfig, ReactCurrentActQueue$1 = ReactSharedInternals.ReactCurrentActQueue;
          var NoContext = 0;
          var BatchedContext = 1;
          var RenderContext = 2;
          var CommitContext = 4;
          var RootInProgress = 0;
          var RootFatalErrored = 1;
          var RootErrored = 2;
          var RootSuspended = 3;
          var RootSuspendedWithDelay = 4;
          var RootCompleted = 5;
          var RootDidNotComplete = 6;
          var executionContext = NoContext;
          var workInProgressRoot = null;
          var workInProgress = null;
          var workInProgressRootRenderLanes = NoLanes;
          var subtreeRenderLanes = NoLanes;
          var subtreeRenderLanesCursor = createCursor(NoLanes);
          var workInProgressRootExitStatus = RootInProgress;
          var workInProgressRootFatalError = null;
          var workInProgressRootIncludedLanes = NoLanes;
          var workInProgressRootSkippedLanes = NoLanes;
          var workInProgressRootInterleavedUpdatedLanes = NoLanes;
          var workInProgressRootPingedLanes = NoLanes;
          var workInProgressRootConcurrentErrors = null;
          var workInProgressRootRecoverableErrors = null;
          var globalMostRecentFallbackTime = 0;
          var FALLBACK_THROTTLE_MS = 500;
          var workInProgressRootRenderTargetTime = Infinity;
          var RENDER_TIMEOUT_MS = 500;
          function resetRenderTimer() {
            workInProgressRootRenderTargetTime = now() + RENDER_TIMEOUT_MS;
          }
          function getRenderTargetTime() {
            return workInProgressRootRenderTargetTime;
          }
          var hasUncaughtError = false;
          var firstUncaughtError = null;
          var legacyErrorBoundariesThatAlreadyFailed = null;
          var rootDoesHavePassiveEffects = false;
          var rootWithPendingPassiveEffects = null;
          var pendingPassiveEffectsLanes = NoLanes;
          var pendingPassiveProfilerEffects = [];
          var NESTED_UPDATE_LIMIT = 50;
          var nestedUpdateCount = 0;
          var rootWithNestedUpdates = null;
          var NESTED_PASSIVE_UPDATE_LIMIT = 50;
          var nestedPassiveUpdateCount = 0;
          var currentEventTime = NoTimestamp;
          var currentEventTransitionLane = NoLanes;
          function getWorkInProgressRoot() {
            return workInProgressRoot;
          }
          function requestEventTime() {
            if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {
              return now();
            }
            if (currentEventTime !== NoTimestamp) {
              return currentEventTime;
            }
            currentEventTime = now();
            return currentEventTime;
          }
          function requestUpdateLane(fiber) {
            var mode = fiber.mode;
            if ((mode & ConcurrentMode) === NoMode) {
              return SyncLane;
            } else if ((executionContext & RenderContext) !== NoContext && workInProgressRootRenderLanes !== NoLanes) {
              return pickArbitraryLane(workInProgressRootRenderLanes);
            }
            var isTransition = requestCurrentTransition() !== NoTransition;
            if (isTransition) {
              if (ReactCurrentBatchConfig$3.transition !== null) {
                var transition = ReactCurrentBatchConfig$3.transition;
                if (!transition._updatedFibers) {
                  transition._updatedFibers = /* @__PURE__ */ new Set();
                }
                transition._updatedFibers.add(fiber);
              }
              if (currentEventTransitionLane === NoLane) {
                currentEventTransitionLane = claimNextTransitionLane();
              }
              return currentEventTransitionLane;
            }
            var updateLane = getCurrentUpdatePriority();
            if (updateLane !== NoLane) {
              return updateLane;
            }
            var eventLane = getCurrentEventPriority();
            return eventLane;
          }
          function requestRetryLane(fiber) {
            var mode = fiber.mode;
            if ((mode & ConcurrentMode) === NoMode) {
              return SyncLane;
            }
            return claimNextRetryLane();
          }
          function scheduleUpdateOnFiber(fiber, lane, eventTime) {
            checkForNestedUpdates();
            var root3 = markUpdateLaneFromFiberToRoot(fiber, lane);
            if (root3 === null) {
              return null;
            }
            markRootUpdated(root3, lane, eventTime);
            if ((executionContext & RenderContext) !== NoLanes && root3 === workInProgressRoot) {
              warnAboutRenderPhaseUpdatesInDEV(fiber);
            } else {
              {
                if (isDevToolsPresent) {
                  addFiberToLanesMap(root3, fiber, lane);
                }
              }
              warnIfUpdatesNotWrappedWithActDEV(fiber);
              if (root3 === workInProgressRoot) {
                if ((executionContext & RenderContext) === NoContext) {
                  workInProgressRootInterleavedUpdatedLanes = mergeLanes(workInProgressRootInterleavedUpdatedLanes, lane);
                }
                if (workInProgressRootExitStatus === RootSuspendedWithDelay) {
                  markRootSuspended$1(root3, workInProgressRootRenderLanes);
                }
              }
              ensureRootIsScheduled(root3, eventTime);
              if (lane === SyncLane && executionContext === NoContext && (fiber.mode & ConcurrentMode) === NoMode && !ReactCurrentActQueue$1.isBatchingLegacy) {
                resetRenderTimer();
                flushSyncCallbacksOnlyInLegacyMode();
              }
            }
            return root3;
          }
          function scheduleInitialHydrationOnRoot(root3, lane, eventTime) {
            var current2 = root3.current;
            current2.lanes = lane;
            markRootUpdated(root3, lane, eventTime);
            ensureRootIsScheduled(root3, eventTime);
          }
          function markUpdateLaneFromFiberToRoot(sourceFiber, lane) {
            sourceFiber.lanes = mergeLanes(sourceFiber.lanes, lane);
            var alternate = sourceFiber.alternate;
            if (alternate !== null) {
              alternate.lanes = mergeLanes(alternate.lanes, lane);
            }
            {
              if (alternate === null && (sourceFiber.flags & (Placement | Hydrating)) !== NoFlags) {
                warnAboutUpdateOnNotYetMountedFiberInDEV(sourceFiber);
              }
            }
            var node = sourceFiber;
            var parent = sourceFiber.return;
            while (parent !== null) {
              parent.childLanes = mergeLanes(parent.childLanes, lane);
              alternate = parent.alternate;
              if (alternate !== null) {
                alternate.childLanes = mergeLanes(alternate.childLanes, lane);
              } else {
                {
                  if ((parent.flags & (Placement | Hydrating)) !== NoFlags) {
                    warnAboutUpdateOnNotYetMountedFiberInDEV(sourceFiber);
                  }
                }
              }
              node = parent;
              parent = parent.return;
            }
            if (node.tag === HostRoot) {
              var root3 = node.stateNode;
              return root3;
            } else {
              return null;
            }
          }
          function isInterleavedUpdate(fiber, lane) {
            return workInProgressRoot !== null && (fiber.mode & ConcurrentMode) !== NoMode && (executionContext & RenderContext) === NoContext;
          }
          function ensureRootIsScheduled(root3, currentTime) {
            var existingCallbackNode = root3.callbackNode;
            markStarvedLanesAsExpired(root3, currentTime);
            var nextLanes = getNextLanes(root3, root3 === workInProgressRoot ? workInProgressRootRenderLanes : NoLanes);
            if (nextLanes === NoLanes) {
              if (existingCallbackNode !== null) {
                cancelCallback$1(existingCallbackNode);
              }
              root3.callbackNode = null;
              root3.callbackPriority = NoLane;
              return;
            }
            var newCallbackPriority = getHighestPriorityLane(nextLanes);
            var existingCallbackPriority = root3.callbackPriority;
            if (existingCallbackPriority === newCallbackPriority && !(ReactCurrentActQueue$1.current !== null && existingCallbackNode !== fakeActCallbackNode)) {
              {
                if (existingCallbackNode == null && existingCallbackPriority !== SyncLane) {
                  error("Expected scheduled callback to exist. This error is likely caused by a bug in React. Please file an issue.");
                }
              }
              return;
            }
            if (existingCallbackNode != null) {
              cancelCallback$1(existingCallbackNode);
            }
            var newCallbackNode;
            if (newCallbackPriority === SyncLane) {
              if (root3.tag === LegacyRoot) {
                if (ReactCurrentActQueue$1.isBatchingLegacy !== null) {
                  ReactCurrentActQueue$1.didScheduleLegacyUpdate = true;
                }
                scheduleLegacySyncCallback(performSyncWorkOnRoot.bind(null, root3));
              } else {
                scheduleSyncCallback(performSyncWorkOnRoot.bind(null, root3));
              }
              {
                if (ReactCurrentActQueue$1.current !== null) {
                  ReactCurrentActQueue$1.current.push(flushSyncCallbacks);
                } else {
                  scheduleMicrotask(function() {
                    if (executionContext === NoContext) {
                      flushSyncCallbacks();
                    }
                  });
                }
              }
              newCallbackNode = null;
            } else {
              var schedulerPriorityLevel;
              switch (lanesToEventPriority(nextLanes)) {
                case DiscreteEventPriority:
                  schedulerPriorityLevel = ImmediatePriority;
                  break;
                case ContinuousEventPriority:
                  schedulerPriorityLevel = UserBlockingPriority;
                  break;
                case DefaultEventPriority:
                  schedulerPriorityLevel = NormalPriority;
                  break;
                case IdleEventPriority:
                  schedulerPriorityLevel = IdlePriority;
                  break;
                default:
                  schedulerPriorityLevel = NormalPriority;
                  break;
              }
              newCallbackNode = scheduleCallback$1(schedulerPriorityLevel, performConcurrentWorkOnRoot.bind(null, root3));
            }
            root3.callbackPriority = newCallbackPriority;
            root3.callbackNode = newCallbackNode;
          }
          function performConcurrentWorkOnRoot(root3, didTimeout) {
            {
              resetNestedUpdateFlag();
            }
            currentEventTime = NoTimestamp;
            currentEventTransitionLane = NoLanes;
            if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {
              throw new Error("Should not already be working.");
            }
            var originalCallbackNode = root3.callbackNode;
            var didFlushPassiveEffects = flushPassiveEffects();
            if (didFlushPassiveEffects) {
              if (root3.callbackNode !== originalCallbackNode) {
                return null;
              }
            }
            var lanes = getNextLanes(root3, root3 === workInProgressRoot ? workInProgressRootRenderLanes : NoLanes);
            if (lanes === NoLanes) {
              return null;
            }
            var shouldTimeSlice = !includesBlockingLane(root3, lanes) && !includesExpiredLane(root3, lanes) && !didTimeout;
            var exitStatus = shouldTimeSlice ? renderRootConcurrent(root3, lanes) : renderRootSync(root3, lanes);
            if (exitStatus !== RootInProgress) {
              if (exitStatus === RootErrored) {
                var errorRetryLanes = getLanesToRetrySynchronouslyOnError(root3);
                if (errorRetryLanes !== NoLanes) {
                  lanes = errorRetryLanes;
                  exitStatus = recoverFromConcurrentError(root3, errorRetryLanes);
                }
              }
              if (exitStatus === RootFatalErrored) {
                var fatalError = workInProgressRootFatalError;
                prepareFreshStack(root3, NoLanes);
                markRootSuspended$1(root3, lanes);
                ensureRootIsScheduled(root3, now());
                throw fatalError;
              }
              if (exitStatus === RootDidNotComplete) {
                markRootSuspended$1(root3, lanes);
              } else {
                var renderWasConcurrent = !includesBlockingLane(root3, lanes);
                var finishedWork = root3.current.alternate;
                if (renderWasConcurrent && !isRenderConsistentWithExternalStores(finishedWork)) {
                  exitStatus = renderRootSync(root3, lanes);
                  if (exitStatus === RootErrored) {
                    var _errorRetryLanes = getLanesToRetrySynchronouslyOnError(root3);
                    if (_errorRetryLanes !== NoLanes) {
                      lanes = _errorRetryLanes;
                      exitStatus = recoverFromConcurrentError(root3, _errorRetryLanes);
                    }
                  }
                  if (exitStatus === RootFatalErrored) {
                    var _fatalError = workInProgressRootFatalError;
                    prepareFreshStack(root3, NoLanes);
                    markRootSuspended$1(root3, lanes);
                    ensureRootIsScheduled(root3, now());
                    throw _fatalError;
                  }
                }
                root3.finishedWork = finishedWork;
                root3.finishedLanes = lanes;
                finishConcurrentRender(root3, exitStatus, lanes);
              }
            }
            ensureRootIsScheduled(root3, now());
            if (root3.callbackNode === originalCallbackNode) {
              return performConcurrentWorkOnRoot.bind(null, root3);
            }
            return null;
          }
          function recoverFromConcurrentError(root3, errorRetryLanes) {
            var errorsFromFirstAttempt = workInProgressRootConcurrentErrors;
            if (isRootDehydrated(root3)) {
              var rootWorkInProgress = prepareFreshStack(root3, errorRetryLanes);
              rootWorkInProgress.flags |= ForceClientRender;
              {
                errorHydratingContainer(root3.containerInfo);
              }
            }
            var exitStatus = renderRootSync(root3, errorRetryLanes);
            if (exitStatus !== RootErrored) {
              var errorsFromSecondAttempt = workInProgressRootRecoverableErrors;
              workInProgressRootRecoverableErrors = errorsFromFirstAttempt;
              if (errorsFromSecondAttempt !== null) {
                queueRecoverableErrors(errorsFromSecondAttempt);
              }
            }
            return exitStatus;
          }
          function queueRecoverableErrors(errors) {
            if (workInProgressRootRecoverableErrors === null) {
              workInProgressRootRecoverableErrors = errors;
            } else {
              workInProgressRootRecoverableErrors.push.apply(workInProgressRootRecoverableErrors, errors);
            }
          }
          function finishConcurrentRender(root3, exitStatus, lanes) {
            switch (exitStatus) {
              case RootInProgress:
              case RootFatalErrored: {
                throw new Error("Root did not complete. This is a bug in React.");
              }
              case RootErrored: {
                commitRoot(root3, workInProgressRootRecoverableErrors);
                break;
              }
              case RootSuspended: {
                markRootSuspended$1(root3, lanes);
                if (includesOnlyRetries(lanes) && !shouldForceFlushFallbacksInDEV()) {
                  var msUntilTimeout = globalMostRecentFallbackTime + FALLBACK_THROTTLE_MS - now();
                  if (msUntilTimeout > 10) {
                    var nextLanes = getNextLanes(root3, NoLanes);
                    if (nextLanes !== NoLanes) {
                      break;
                    }
                    var suspendedLanes = root3.suspendedLanes;
                    if (!isSubsetOfLanes(suspendedLanes, lanes)) {
                      var eventTime = requestEventTime();
                      markRootPinged(root3, suspendedLanes);
                      break;
                    }
                    root3.timeoutHandle = scheduleTimeout(commitRoot.bind(null, root3, workInProgressRootRecoverableErrors), msUntilTimeout);
                    break;
                  }
                }
                commitRoot(root3, workInProgressRootRecoverableErrors);
                break;
              }
              case RootSuspendedWithDelay: {
                markRootSuspended$1(root3, lanes);
                if (includesOnlyTransitions(lanes)) {
                  break;
                }
                if (!shouldForceFlushFallbacksInDEV()) {
                  var mostRecentEventTime = getMostRecentEventTime(root3, lanes);
                  var eventTimeMs = mostRecentEventTime;
                  var timeElapsedMs = now() - eventTimeMs;
                  var _msUntilTimeout = jnd(timeElapsedMs) - timeElapsedMs;
                  if (_msUntilTimeout > 10) {
                    root3.timeoutHandle = scheduleTimeout(commitRoot.bind(null, root3, workInProgressRootRecoverableErrors), _msUntilTimeout);
                    break;
                  }
                }
                commitRoot(root3, workInProgressRootRecoverableErrors);
                break;
              }
              case RootCompleted: {
                commitRoot(root3, workInProgressRootRecoverableErrors);
                break;
              }
              default: {
                throw new Error("Unknown root exit status.");
              }
            }
          }
          function isRenderConsistentWithExternalStores(finishedWork) {
            var node = finishedWork;
            while (true) {
              if (node.flags & StoreConsistency) {
                var updateQueue = node.updateQueue;
                if (updateQueue !== null) {
                  var checks = updateQueue.stores;
                  if (checks !== null) {
                    for (var i3 = 0; i3 < checks.length; i3++) {
                      var check = checks[i3];
                      var getSnapshot = check.getSnapshot;
                      var renderedValue = check.value;
                      try {
                        if (!objectIs(getSnapshot(), renderedValue)) {
                          return false;
                        }
                      } catch (error2) {
                        return false;
                      }
                    }
                  }
                }
              }
              var child = node.child;
              if (node.subtreeFlags & StoreConsistency && child !== null) {
                child.return = node;
                node = child;
                continue;
              }
              if (node === finishedWork) {
                return true;
              }
              while (node.sibling === null) {
                if (node.return === null || node.return === finishedWork) {
                  return true;
                }
                node = node.return;
              }
              node.sibling.return = node.return;
              node = node.sibling;
            }
            return true;
          }
          function markRootSuspended$1(root3, suspendedLanes) {
            suspendedLanes = removeLanes(suspendedLanes, workInProgressRootPingedLanes);
            suspendedLanes = removeLanes(suspendedLanes, workInProgressRootInterleavedUpdatedLanes);
            markRootSuspended(root3, suspendedLanes);
          }
          function performSyncWorkOnRoot(root3) {
            {
              syncNestedUpdateFlag();
            }
            if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {
              throw new Error("Should not already be working.");
            }
            flushPassiveEffects();
            var lanes = getNextLanes(root3, NoLanes);
            if (!includesSomeLane(lanes, SyncLane)) {
              ensureRootIsScheduled(root3, now());
              return null;
            }
            var exitStatus = renderRootSync(root3, lanes);
            if (root3.tag !== LegacyRoot && exitStatus === RootErrored) {
              var errorRetryLanes = getLanesToRetrySynchronouslyOnError(root3);
              if (errorRetryLanes !== NoLanes) {
                lanes = errorRetryLanes;
                exitStatus = recoverFromConcurrentError(root3, errorRetryLanes);
              }
            }
            if (exitStatus === RootFatalErrored) {
              var fatalError = workInProgressRootFatalError;
              prepareFreshStack(root3, NoLanes);
              markRootSuspended$1(root3, lanes);
              ensureRootIsScheduled(root3, now());
              throw fatalError;
            }
            if (exitStatus === RootDidNotComplete) {
              throw new Error("Root did not complete. This is a bug in React.");
            }
            var finishedWork = root3.current.alternate;
            root3.finishedWork = finishedWork;
            root3.finishedLanes = lanes;
            commitRoot(root3, workInProgressRootRecoverableErrors);
            ensureRootIsScheduled(root3, now());
            return null;
          }
          function flushRoot(root3, lanes) {
            if (lanes !== NoLanes) {
              markRootEntangled(root3, mergeLanes(lanes, SyncLane));
              ensureRootIsScheduled(root3, now());
              if ((executionContext & (RenderContext | CommitContext)) === NoContext) {
                resetRenderTimer();
                flushSyncCallbacks();
              }
            }
          }
          function batchedUpdates$1(fn, a3) {
            var prevExecutionContext = executionContext;
            executionContext |= BatchedContext;
            try {
              return fn(a3);
            } finally {
              executionContext = prevExecutionContext;
              if (executionContext === NoContext && !ReactCurrentActQueue$1.isBatchingLegacy) {
                resetRenderTimer();
                flushSyncCallbacksOnlyInLegacyMode();
              }
            }
          }
          function discreteUpdates(fn, a3, b3, c4, d3) {
            var previousPriority = getCurrentUpdatePriority();
            var prevTransition = ReactCurrentBatchConfig$3.transition;
            try {
              ReactCurrentBatchConfig$3.transition = null;
              setCurrentUpdatePriority(DiscreteEventPriority);
              return fn(a3, b3, c4, d3);
            } finally {
              setCurrentUpdatePriority(previousPriority);
              ReactCurrentBatchConfig$3.transition = prevTransition;
              if (executionContext === NoContext) {
                resetRenderTimer();
              }
            }
          }
          function flushSync(fn) {
            if (rootWithPendingPassiveEffects !== null && rootWithPendingPassiveEffects.tag === LegacyRoot && (executionContext & (RenderContext | CommitContext)) === NoContext) {
              flushPassiveEffects();
            }
            var prevExecutionContext = executionContext;
            executionContext |= BatchedContext;
            var prevTransition = ReactCurrentBatchConfig$3.transition;
            var previousPriority = getCurrentUpdatePriority();
            try {
              ReactCurrentBatchConfig$3.transition = null;
              setCurrentUpdatePriority(DiscreteEventPriority);
              if (fn) {
                return fn();
              } else {
                return void 0;
              }
            } finally {
              setCurrentUpdatePriority(previousPriority);
              ReactCurrentBatchConfig$3.transition = prevTransition;
              executionContext = prevExecutionContext;
              if ((executionContext & (RenderContext | CommitContext)) === NoContext) {
                flushSyncCallbacks();
              }
            }
          }
          function isAlreadyRendering() {
            return (executionContext & (RenderContext | CommitContext)) !== NoContext;
          }
          function pushRenderLanes(fiber, lanes) {
            push(subtreeRenderLanesCursor, subtreeRenderLanes, fiber);
            subtreeRenderLanes = mergeLanes(subtreeRenderLanes, lanes);
            workInProgressRootIncludedLanes = mergeLanes(workInProgressRootIncludedLanes, lanes);
          }
          function popRenderLanes(fiber) {
            subtreeRenderLanes = subtreeRenderLanesCursor.current;
            pop(subtreeRenderLanesCursor, fiber);
          }
          function prepareFreshStack(root3, lanes) {
            root3.finishedWork = null;
            root3.finishedLanes = NoLanes;
            var timeoutHandle = root3.timeoutHandle;
            if (timeoutHandle !== noTimeout) {
              root3.timeoutHandle = noTimeout;
              cancelTimeout(timeoutHandle);
            }
            if (workInProgress !== null) {
              var interruptedWork = workInProgress.return;
              while (interruptedWork !== null) {
                var current2 = interruptedWork.alternate;
                unwindInterruptedWork(current2, interruptedWork);
                interruptedWork = interruptedWork.return;
              }
            }
            workInProgressRoot = root3;
            var rootWorkInProgress = createWorkInProgress(root3.current, null);
            workInProgress = rootWorkInProgress;
            workInProgressRootRenderLanes = subtreeRenderLanes = workInProgressRootIncludedLanes = lanes;
            workInProgressRootExitStatus = RootInProgress;
            workInProgressRootFatalError = null;
            workInProgressRootSkippedLanes = NoLanes;
            workInProgressRootInterleavedUpdatedLanes = NoLanes;
            workInProgressRootPingedLanes = NoLanes;
            workInProgressRootConcurrentErrors = null;
            workInProgressRootRecoverableErrors = null;
            enqueueInterleavedUpdates();
            {
              ReactStrictModeWarnings.discardPendingWarnings();
            }
            return rootWorkInProgress;
          }
          function handleError(root3, thrownValue) {
            do {
              var erroredWork = workInProgress;
              try {
                resetContextDependencies();
                resetHooksAfterThrow();
                resetCurrentFiber();
                ReactCurrentOwner$2.current = null;
                if (erroredWork === null || erroredWork.return === null) {
                  workInProgressRootExitStatus = RootFatalErrored;
                  workInProgressRootFatalError = thrownValue;
                  workInProgress = null;
                  return;
                }
                if (enableProfilerTimer && erroredWork.mode & ProfileMode) {
                  stopProfilerTimerIfRunningAndRecordDelta(erroredWork, true);
                }
                if (enableSchedulingProfiler) {
                  markComponentRenderStopped();
                  if (thrownValue !== null && typeof thrownValue === "object" && typeof thrownValue.then === "function") {
                    var wakeable = thrownValue;
                    markComponentSuspended(erroredWork, wakeable, workInProgressRootRenderLanes);
                  } else {
                    markComponentErrored(erroredWork, thrownValue, workInProgressRootRenderLanes);
                  }
                }
                throwException(root3, erroredWork.return, erroredWork, thrownValue, workInProgressRootRenderLanes);
                completeUnitOfWork(erroredWork);
              } catch (yetAnotherThrownValue) {
                thrownValue = yetAnotherThrownValue;
                if (workInProgress === erroredWork && erroredWork !== null) {
                  erroredWork = erroredWork.return;
                  workInProgress = erroredWork;
                } else {
                  erroredWork = workInProgress;
                }
                continue;
              }
              return;
            } while (true);
          }
          function pushDispatcher() {
            var prevDispatcher = ReactCurrentDispatcher$2.current;
            ReactCurrentDispatcher$2.current = ContextOnlyDispatcher;
            if (prevDispatcher === null) {
              return ContextOnlyDispatcher;
            } else {
              return prevDispatcher;
            }
          }
          function popDispatcher(prevDispatcher) {
            ReactCurrentDispatcher$2.current = prevDispatcher;
          }
          function markCommitTimeOfFallback() {
            globalMostRecentFallbackTime = now();
          }
          function markSkippedUpdateLanes(lane) {
            workInProgressRootSkippedLanes = mergeLanes(lane, workInProgressRootSkippedLanes);
          }
          function renderDidSuspend() {
            if (workInProgressRootExitStatus === RootInProgress) {
              workInProgressRootExitStatus = RootSuspended;
            }
          }
          function renderDidSuspendDelayIfPossible() {
            if (workInProgressRootExitStatus === RootInProgress || workInProgressRootExitStatus === RootSuspended || workInProgressRootExitStatus === RootErrored) {
              workInProgressRootExitStatus = RootSuspendedWithDelay;
            }
            if (workInProgressRoot !== null && (includesNonIdleWork(workInProgressRootSkippedLanes) || includesNonIdleWork(workInProgressRootInterleavedUpdatedLanes))) {
              markRootSuspended$1(workInProgressRoot, workInProgressRootRenderLanes);
            }
          }
          function renderDidError(error2) {
            if (workInProgressRootExitStatus !== RootSuspendedWithDelay) {
              workInProgressRootExitStatus = RootErrored;
            }
            if (workInProgressRootConcurrentErrors === null) {
              workInProgressRootConcurrentErrors = [error2];
            } else {
              workInProgressRootConcurrentErrors.push(error2);
            }
          }
          function renderHasNotSuspendedYet() {
            return workInProgressRootExitStatus === RootInProgress;
          }
          function renderRootSync(root3, lanes) {
            var prevExecutionContext = executionContext;
            executionContext |= RenderContext;
            var prevDispatcher = pushDispatcher();
            if (workInProgressRoot !== root3 || workInProgressRootRenderLanes !== lanes) {
              {
                if (isDevToolsPresent) {
                  var memoizedUpdaters = root3.memoizedUpdaters;
                  if (memoizedUpdaters.size > 0) {
                    restorePendingUpdaters(root3, workInProgressRootRenderLanes);
                    memoizedUpdaters.clear();
                  }
                  movePendingFibersToMemoized(root3, lanes);
                }
              }
              prepareFreshStack(root3, lanes);
            }
            {
              markRenderStarted(lanes);
            }
            do {
              try {
                workLoopSync();
                break;
              } catch (thrownValue) {
                handleError(root3, thrownValue);
              }
            } while (true);
            resetContextDependencies();
            executionContext = prevExecutionContext;
            popDispatcher(prevDispatcher);
            if (workInProgress !== null) {
              throw new Error("Cannot commit an incomplete root. This error is likely caused by a bug in React. Please file an issue.");
            }
            {
              markRenderStopped();
            }
            workInProgressRoot = null;
            workInProgressRootRenderLanes = NoLanes;
            return workInProgressRootExitStatus;
          }
          function workLoopSync() {
            while (workInProgress !== null) {
              performUnitOfWork(workInProgress);
            }
          }
          function renderRootConcurrent(root3, lanes) {
            var prevExecutionContext = executionContext;
            executionContext |= RenderContext;
            var prevDispatcher = pushDispatcher();
            if (workInProgressRoot !== root3 || workInProgressRootRenderLanes !== lanes) {
              {
                if (isDevToolsPresent) {
                  var memoizedUpdaters = root3.memoizedUpdaters;
                  if (memoizedUpdaters.size > 0) {
                    restorePendingUpdaters(root3, workInProgressRootRenderLanes);
                    memoizedUpdaters.clear();
                  }
                  movePendingFibersToMemoized(root3, lanes);
                }
              }
              resetRenderTimer();
              prepareFreshStack(root3, lanes);
            }
            {
              markRenderStarted(lanes);
            }
            do {
              try {
                workLoopConcurrent();
                break;
              } catch (thrownValue) {
                handleError(root3, thrownValue);
              }
            } while (true);
            resetContextDependencies();
            popDispatcher(prevDispatcher);
            executionContext = prevExecutionContext;
            if (workInProgress !== null) {
              {
                markRenderYielded();
              }
              return RootInProgress;
            } else {
              {
                markRenderStopped();
              }
              workInProgressRoot = null;
              workInProgressRootRenderLanes = NoLanes;
              return workInProgressRootExitStatus;
            }
          }
          function workLoopConcurrent() {
            while (workInProgress !== null && !shouldYield()) {
              performUnitOfWork(workInProgress);
            }
          }
          function performUnitOfWork(unitOfWork) {
            var current2 = unitOfWork.alternate;
            setCurrentFiber(unitOfWork);
            var next;
            if ((unitOfWork.mode & ProfileMode) !== NoMode) {
              startProfilerTimer(unitOfWork);
              next = beginWork$1(current2, unitOfWork, subtreeRenderLanes);
              stopProfilerTimerIfRunningAndRecordDelta(unitOfWork, true);
            } else {
              next = beginWork$1(current2, unitOfWork, subtreeRenderLanes);
            }
            resetCurrentFiber();
            unitOfWork.memoizedProps = unitOfWork.pendingProps;
            if (next === null) {
              completeUnitOfWork(unitOfWork);
            } else {
              workInProgress = next;
            }
            ReactCurrentOwner$2.current = null;
          }
          function completeUnitOfWork(unitOfWork) {
            var completedWork = unitOfWork;
            do {
              var current2 = completedWork.alternate;
              var returnFiber = completedWork.return;
              if ((completedWork.flags & Incomplete) === NoFlags) {
                setCurrentFiber(completedWork);
                var next = void 0;
                if ((completedWork.mode & ProfileMode) === NoMode) {
                  next = completeWork(current2, completedWork, subtreeRenderLanes);
                } else {
                  startProfilerTimer(completedWork);
                  next = completeWork(current2, completedWork, subtreeRenderLanes);
                  stopProfilerTimerIfRunningAndRecordDelta(completedWork, false);
                }
                resetCurrentFiber();
                if (next !== null) {
                  workInProgress = next;
                  return;
                }
              } else {
                var _next = unwindWork(current2, completedWork);
                if (_next !== null) {
                  _next.flags &= HostEffectMask;
                  workInProgress = _next;
                  return;
                }
                if ((completedWork.mode & ProfileMode) !== NoMode) {
                  stopProfilerTimerIfRunningAndRecordDelta(completedWork, false);
                  var actualDuration = completedWork.actualDuration;
                  var child = completedWork.child;
                  while (child !== null) {
                    actualDuration += child.actualDuration;
                    child = child.sibling;
                  }
                  completedWork.actualDuration = actualDuration;
                }
                if (returnFiber !== null) {
                  returnFiber.flags |= Incomplete;
                  returnFiber.subtreeFlags = NoFlags;
                  returnFiber.deletions = null;
                } else {
                  workInProgressRootExitStatus = RootDidNotComplete;
                  workInProgress = null;
                  return;
                }
              }
              var siblingFiber = completedWork.sibling;
              if (siblingFiber !== null) {
                workInProgress = siblingFiber;
                return;
              }
              completedWork = returnFiber;
              workInProgress = completedWork;
            } while (completedWork !== null);
            if (workInProgressRootExitStatus === RootInProgress) {
              workInProgressRootExitStatus = RootCompleted;
            }
          }
          function commitRoot(root3, recoverableErrors) {
            var previousUpdateLanePriority = getCurrentUpdatePriority();
            var prevTransition = ReactCurrentBatchConfig$3.transition;
            try {
              ReactCurrentBatchConfig$3.transition = null;
              setCurrentUpdatePriority(DiscreteEventPriority);
              commitRootImpl(root3, recoverableErrors, previousUpdateLanePriority);
            } finally {
              ReactCurrentBatchConfig$3.transition = prevTransition;
              setCurrentUpdatePriority(previousUpdateLanePriority);
            }
            return null;
          }
          function commitRootImpl(root3, recoverableErrors, renderPriorityLevel) {
            do {
              flushPassiveEffects();
            } while (rootWithPendingPassiveEffects !== null);
            flushRenderPhaseStrictModeWarningsInDEV();
            if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {
              throw new Error("Should not already be working.");
            }
            var finishedWork = root3.finishedWork;
            var lanes = root3.finishedLanes;
            {
              markCommitStarted(lanes);
            }
            if (finishedWork === null) {
              {
                markCommitStopped();
              }
              return null;
            } else {
              {
                if (lanes === NoLanes) {
                  error("root.finishedLanes should not be empty during a commit. This is a bug in React.");
                }
              }
            }
            root3.finishedWork = null;
            root3.finishedLanes = NoLanes;
            if (finishedWork === root3.current) {
              throw new Error("Cannot commit the same tree as before. This error is likely caused by a bug in React. Please file an issue.");
            }
            root3.callbackNode = null;
            root3.callbackPriority = NoLane;
            var remainingLanes = mergeLanes(finishedWork.lanes, finishedWork.childLanes);
            markRootFinished(root3, remainingLanes);
            if (root3 === workInProgressRoot) {
              workInProgressRoot = null;
              workInProgress = null;
              workInProgressRootRenderLanes = NoLanes;
            }
            if ((finishedWork.subtreeFlags & PassiveMask) !== NoFlags || (finishedWork.flags & PassiveMask) !== NoFlags) {
              if (!rootDoesHavePassiveEffects) {
                rootDoesHavePassiveEffects = true;
                scheduleCallback$1(NormalPriority, function() {
                  flushPassiveEffects();
                  return null;
                });
              }
            }
            var subtreeHasEffects = (finishedWork.subtreeFlags & (BeforeMutationMask | MutationMask | LayoutMask | PassiveMask)) !== NoFlags;
            var rootHasEffect = (finishedWork.flags & (BeforeMutationMask | MutationMask | LayoutMask | PassiveMask)) !== NoFlags;
            if (subtreeHasEffects || rootHasEffect) {
              var prevTransition = ReactCurrentBatchConfig$3.transition;
              ReactCurrentBatchConfig$3.transition = null;
              var previousPriority = getCurrentUpdatePriority();
              setCurrentUpdatePriority(DiscreteEventPriority);
              var prevExecutionContext = executionContext;
              executionContext |= CommitContext;
              ReactCurrentOwner$2.current = null;
              var shouldFireAfterActiveInstanceBlur2 = commitBeforeMutationEffects(root3, finishedWork);
              {
                recordCommitTime();
              }
              commitMutationEffects(root3, finishedWork, lanes);
              resetAfterCommit(root3.containerInfo);
              root3.current = finishedWork;
              {
                markLayoutEffectsStarted(lanes);
              }
              commitLayoutEffects(finishedWork, root3, lanes);
              {
                markLayoutEffectsStopped();
              }
              requestPaint();
              executionContext = prevExecutionContext;
              setCurrentUpdatePriority(previousPriority);
              ReactCurrentBatchConfig$3.transition = prevTransition;
            } else {
              root3.current = finishedWork;
              {
                recordCommitTime();
              }
            }
            var rootDidHavePassiveEffects = rootDoesHavePassiveEffects;
            if (rootDoesHavePassiveEffects) {
              rootDoesHavePassiveEffects = false;
              rootWithPendingPassiveEffects = root3;
              pendingPassiveEffectsLanes = lanes;
            }
            remainingLanes = root3.pendingLanes;
            if (remainingLanes === NoLanes) {
              legacyErrorBoundariesThatAlreadyFailed = null;
            }
            {
              if (!rootDidHavePassiveEffects) {
                commitDoubleInvokeEffectsInDEV(root3.current, false);
              }
            }
            onCommitRoot(finishedWork.stateNode, renderPriorityLevel);
            {
              if (isDevToolsPresent) {
                root3.memoizedUpdaters.clear();
              }
            }
            {
              onCommitRoot$1();
            }
            ensureRootIsScheduled(root3, now());
            if (recoverableErrors !== null) {
              var onRecoverableError = root3.onRecoverableError;
              for (var i3 = 0; i3 < recoverableErrors.length; i3++) {
                var recoverableError = recoverableErrors[i3];
                onRecoverableError(recoverableError);
              }
            }
            if (hasUncaughtError) {
              hasUncaughtError = false;
              var error$1 = firstUncaughtError;
              firstUncaughtError = null;
              throw error$1;
            }
            if (includesSomeLane(pendingPassiveEffectsLanes, SyncLane) && root3.tag !== LegacyRoot) {
              flushPassiveEffects();
            }
            remainingLanes = root3.pendingLanes;
            if (includesSomeLane(remainingLanes, SyncLane)) {
              {
                markNestedUpdateScheduled();
              }
              if (root3 === rootWithNestedUpdates) {
                nestedUpdateCount++;
              } else {
                nestedUpdateCount = 0;
                rootWithNestedUpdates = root3;
              }
            } else {
              nestedUpdateCount = 0;
            }
            flushSyncCallbacks();
            {
              markCommitStopped();
            }
            return null;
          }
          function flushPassiveEffects() {
            if (rootWithPendingPassiveEffects !== null) {
              var renderPriority = lanesToEventPriority(pendingPassiveEffectsLanes);
              var priority = lowerEventPriority(DefaultEventPriority, renderPriority);
              var prevTransition = ReactCurrentBatchConfig$3.transition;
              var previousPriority = getCurrentUpdatePriority();
              try {
                ReactCurrentBatchConfig$3.transition = null;
                setCurrentUpdatePriority(priority);
                return flushPassiveEffectsImpl();
              } finally {
                setCurrentUpdatePriority(previousPriority);
                ReactCurrentBatchConfig$3.transition = prevTransition;
              }
            }
            return false;
          }
          function enqueuePendingPassiveProfilerEffect(fiber) {
            {
              pendingPassiveProfilerEffects.push(fiber);
              if (!rootDoesHavePassiveEffects) {
                rootDoesHavePassiveEffects = true;
                scheduleCallback$1(NormalPriority, function() {
                  flushPassiveEffects();
                  return null;
                });
              }
            }
          }
          function flushPassiveEffectsImpl() {
            if (rootWithPendingPassiveEffects === null) {
              return false;
            }
            var root3 = rootWithPendingPassiveEffects;
            var lanes = pendingPassiveEffectsLanes;
            rootWithPendingPassiveEffects = null;
            pendingPassiveEffectsLanes = NoLanes;
            if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {
              throw new Error("Cannot flush passive effects while already rendering.");
            }
            {
              markPassiveEffectsStarted(lanes);
            }
            var prevExecutionContext = executionContext;
            executionContext |= CommitContext;
            commitPassiveUnmountEffects(root3.current);
            commitPassiveMountEffects(root3, root3.current);
            {
              var profilerEffects = pendingPassiveProfilerEffects;
              pendingPassiveProfilerEffects = [];
              for (var i3 = 0; i3 < profilerEffects.length; i3++) {
                var _fiber = profilerEffects[i3];
                commitPassiveEffectDurations(root3, _fiber);
              }
            }
            {
              markPassiveEffectsStopped();
            }
            {
              commitDoubleInvokeEffectsInDEV(root3.current, true);
            }
            executionContext = prevExecutionContext;
            flushSyncCallbacks();
            nestedPassiveUpdateCount = rootWithPendingPassiveEffects === null ? 0 : nestedPassiveUpdateCount + 1;
            onPostCommitRoot(root3);
            {
              var stateNode = root3.current.stateNode;
              stateNode.effectDuration = 0;
              stateNode.passiveEffectDuration = 0;
            }
            return true;
          }
          function isAlreadyFailedLegacyErrorBoundary(instance) {
            return legacyErrorBoundariesThatAlreadyFailed !== null && legacyErrorBoundariesThatAlreadyFailed.has(instance);
          }
          function markLegacyErrorBoundaryAsFailed(instance) {
            if (legacyErrorBoundariesThatAlreadyFailed === null) {
              legacyErrorBoundariesThatAlreadyFailed = /* @__PURE__ */ new Set([instance]);
            } else {
              legacyErrorBoundariesThatAlreadyFailed.add(instance);
            }
          }
          function prepareToThrowUncaughtError(error2) {
            if (!hasUncaughtError) {
              hasUncaughtError = true;
              firstUncaughtError = error2;
            }
          }
          var onUncaughtError = prepareToThrowUncaughtError;
          function captureCommitPhaseErrorOnRoot(rootFiber, sourceFiber, error2) {
            var errorInfo = createCapturedValue(error2, sourceFiber);
            var update = createRootErrorUpdate(rootFiber, errorInfo, SyncLane);
            enqueueUpdate(rootFiber, update);
            var eventTime = requestEventTime();
            var root3 = markUpdateLaneFromFiberToRoot(rootFiber, SyncLane);
            if (root3 !== null) {
              markRootUpdated(root3, SyncLane, eventTime);
              ensureRootIsScheduled(root3, eventTime);
            }
          }
          function captureCommitPhaseError(sourceFiber, nearestMountedAncestor, error$1) {
            if (sourceFiber.tag === HostRoot) {
              captureCommitPhaseErrorOnRoot(sourceFiber, sourceFiber, error$1);
              return;
            }
            var fiber = null;
            {
              fiber = nearestMountedAncestor;
            }
            while (fiber !== null) {
              if (fiber.tag === HostRoot) {
                captureCommitPhaseErrorOnRoot(fiber, sourceFiber, error$1);
                return;
              } else if (fiber.tag === ClassComponent) {
                var ctor = fiber.type;
                var instance = fiber.stateNode;
                if (typeof ctor.getDerivedStateFromError === "function" || typeof instance.componentDidCatch === "function" && !isAlreadyFailedLegacyErrorBoundary(instance)) {
                  var errorInfo = createCapturedValue(error$1, sourceFiber);
                  var update = createClassErrorUpdate(fiber, errorInfo, SyncLane);
                  enqueueUpdate(fiber, update);
                  var eventTime = requestEventTime();
                  var root3 = markUpdateLaneFromFiberToRoot(fiber, SyncLane);
                  if (root3 !== null) {
                    markRootUpdated(root3, SyncLane, eventTime);
                    ensureRootIsScheduled(root3, eventTime);
                  }
                  return;
                }
              }
              fiber = fiber.return;
            }
            {
              error("Internal React error: Attempted to capture a commit phase error inside a detached tree. This indicates a bug in React. Likely causes include deleting the same fiber more than once, committing an already-finished tree, or an inconsistent return pointer.\n\nError message:\n\n%s", error$1);
            }
          }
          function pingSuspendedRoot(root3, wakeable, pingedLanes) {
            var pingCache = root3.pingCache;
            if (pingCache !== null) {
              pingCache.delete(wakeable);
            }
            var eventTime = requestEventTime();
            markRootPinged(root3, pingedLanes);
            warnIfSuspenseResolutionNotWrappedWithActDEV(root3);
            if (workInProgressRoot === root3 && isSubsetOfLanes(workInProgressRootRenderLanes, pingedLanes)) {
              if (workInProgressRootExitStatus === RootSuspendedWithDelay || workInProgressRootExitStatus === RootSuspended && includesOnlyRetries(workInProgressRootRenderLanes) && now() - globalMostRecentFallbackTime < FALLBACK_THROTTLE_MS) {
                prepareFreshStack(root3, NoLanes);
              } else {
                workInProgressRootPingedLanes = mergeLanes(workInProgressRootPingedLanes, pingedLanes);
              }
            }
            ensureRootIsScheduled(root3, eventTime);
          }
          function retryTimedOutBoundary(boundaryFiber, retryLane) {
            if (retryLane === NoLane) {
              retryLane = requestRetryLane(boundaryFiber);
            }
            var eventTime = requestEventTime();
            var root3 = markUpdateLaneFromFiberToRoot(boundaryFiber, retryLane);
            if (root3 !== null) {
              markRootUpdated(root3, retryLane, eventTime);
              ensureRootIsScheduled(root3, eventTime);
            }
          }
          function retryDehydratedSuspenseBoundary(boundaryFiber) {
            var suspenseState = boundaryFiber.memoizedState;
            var retryLane = NoLane;
            if (suspenseState !== null) {
              retryLane = suspenseState.retryLane;
            }
            retryTimedOutBoundary(boundaryFiber, retryLane);
          }
          function resolveRetryWakeable(boundaryFiber, wakeable) {
            var retryLane = NoLane;
            var retryCache;
            {
              switch (boundaryFiber.tag) {
                case SuspenseComponent:
                  retryCache = boundaryFiber.stateNode;
                  var suspenseState = boundaryFiber.memoizedState;
                  if (suspenseState !== null) {
                    retryLane = suspenseState.retryLane;
                  }
                  break;
                case SuspenseListComponent:
                  retryCache = boundaryFiber.stateNode;
                  break;
                default:
                  throw new Error("Pinged unknown suspense boundary type. This is probably a bug in React.");
              }
            }
            if (retryCache !== null) {
              retryCache.delete(wakeable);
            }
            retryTimedOutBoundary(boundaryFiber, retryLane);
          }
          function jnd(timeElapsed) {
            return timeElapsed < 120 ? 120 : timeElapsed < 480 ? 480 : timeElapsed < 1080 ? 1080 : timeElapsed < 1920 ? 1920 : timeElapsed < 3e3 ? 3e3 : timeElapsed < 4320 ? 4320 : ceil(timeElapsed / 1960) * 1960;
          }
          function checkForNestedUpdates() {
            if (nestedUpdateCount > NESTED_UPDATE_LIMIT) {
              nestedUpdateCount = 0;
              rootWithNestedUpdates = null;
              throw new Error("Maximum update depth exceeded. This can happen when a component repeatedly calls setState inside componentWillUpdate or componentDidUpdate. React limits the number of nested updates to prevent infinite loops.");
            }
            {
              if (nestedPassiveUpdateCount > NESTED_PASSIVE_UPDATE_LIMIT) {
                nestedPassiveUpdateCount = 0;
                error("Maximum update depth exceeded. This can happen when a component calls setState inside useEffect, but useEffect either doesn't have a dependency array, or one of the dependencies changes on every render.");
              }
            }
          }
          function flushRenderPhaseStrictModeWarningsInDEV() {
            {
              ReactStrictModeWarnings.flushLegacyContextWarning();
              {
                ReactStrictModeWarnings.flushPendingUnsafeLifecycleWarnings();
              }
            }
          }
          function commitDoubleInvokeEffectsInDEV(fiber, hasPassiveEffects) {
            {
              setCurrentFiber(fiber);
              invokeEffectsInDev(fiber, MountLayoutDev, invokeLayoutEffectUnmountInDEV);
              if (hasPassiveEffects) {
                invokeEffectsInDev(fiber, MountPassiveDev, invokePassiveEffectUnmountInDEV);
              }
              invokeEffectsInDev(fiber, MountLayoutDev, invokeLayoutEffectMountInDEV);
              if (hasPassiveEffects) {
                invokeEffectsInDev(fiber, MountPassiveDev, invokePassiveEffectMountInDEV);
              }
              resetCurrentFiber();
            }
          }
          function invokeEffectsInDev(firstChild, fiberFlags, invokeEffectFn) {
            {
              var current2 = firstChild;
              var subtreeRoot = null;
              while (current2 !== null) {
                var primarySubtreeFlag = current2.subtreeFlags & fiberFlags;
                if (current2 !== subtreeRoot && current2.child !== null && primarySubtreeFlag !== NoFlags) {
                  current2 = current2.child;
                } else {
                  if ((current2.flags & fiberFlags) !== NoFlags) {
                    invokeEffectFn(current2);
                  }
                  if (current2.sibling !== null) {
                    current2 = current2.sibling;
                  } else {
                    current2 = subtreeRoot = current2.return;
                  }
                }
              }
            }
          }
          var didWarnStateUpdateForNotYetMountedComponent = null;
          function warnAboutUpdateOnNotYetMountedFiberInDEV(fiber) {
            {
              if ((executionContext & RenderContext) !== NoContext) {
                return;
              }
              if (!(fiber.mode & ConcurrentMode)) {
                return;
              }
              var tag = fiber.tag;
              if (tag !== IndeterminateComponent && tag !== HostRoot && tag !== ClassComponent && tag !== FunctionComponent && tag !== ForwardRef && tag !== MemoComponent && tag !== SimpleMemoComponent) {
                return;
              }
              var componentName = getComponentNameFromFiber(fiber) || "ReactComponent";
              if (didWarnStateUpdateForNotYetMountedComponent !== null) {
                if (didWarnStateUpdateForNotYetMountedComponent.has(componentName)) {
                  return;
                }
                didWarnStateUpdateForNotYetMountedComponent.add(componentName);
              } else {
                didWarnStateUpdateForNotYetMountedComponent = /* @__PURE__ */ new Set([componentName]);
              }
              var previousFiber = current;
              try {
                setCurrentFiber(fiber);
                error("Can't perform a React state update on a component that hasn't mounted yet. This indicates that you have a side-effect in your render function that asynchronously later calls tries to update the component. Move this work to useEffect instead.");
              } finally {
                if (previousFiber) {
                  setCurrentFiber(fiber);
                } else {
                  resetCurrentFiber();
                }
              }
            }
          }
          var beginWork$1;
          {
            var dummyFiber = null;
            beginWork$1 = function(current2, unitOfWork, lanes) {
              var originalWorkInProgressCopy = assignFiberPropertiesInDEV(dummyFiber, unitOfWork);
              try {
                return beginWork(current2, unitOfWork, lanes);
              } catch (originalError) {
                if (originalError !== null && typeof originalError === "object" && typeof originalError.then === "function") {
                  throw originalError;
                }
                resetContextDependencies();
                resetHooksAfterThrow();
                unwindInterruptedWork(current2, unitOfWork);
                assignFiberPropertiesInDEV(unitOfWork, originalWorkInProgressCopy);
                if (unitOfWork.mode & ProfileMode) {
                  startProfilerTimer(unitOfWork);
                }
                invokeGuardedCallback(null, beginWork, null, current2, unitOfWork, lanes);
                if (hasCaughtError()) {
                  var replayError = clearCaughtError();
                  if (typeof replayError === "object" && replayError !== null && replayError._suppressLogging && typeof originalError === "object" && originalError !== null && !originalError._suppressLogging) {
                    originalError._suppressLogging = true;
                  }
                }
                throw originalError;
              }
            };
          }
          var didWarnAboutUpdateInRender = false;
          var didWarnAboutUpdateInRenderForAnotherComponent;
          {
            didWarnAboutUpdateInRenderForAnotherComponent = /* @__PURE__ */ new Set();
          }
          function warnAboutRenderPhaseUpdatesInDEV(fiber) {
            {
              if (isRendering && !getIsUpdatingOpaqueValueInRenderPhaseInDEV()) {
                switch (fiber.tag) {
                  case FunctionComponent:
                  case ForwardRef:
                  case SimpleMemoComponent: {
                    var renderingComponentName = workInProgress && getComponentNameFromFiber(workInProgress) || "Unknown";
                    var dedupeKey = renderingComponentName;
                    if (!didWarnAboutUpdateInRenderForAnotherComponent.has(dedupeKey)) {
                      didWarnAboutUpdateInRenderForAnotherComponent.add(dedupeKey);
                      var setStateComponentName = getComponentNameFromFiber(fiber) || "Unknown";
                      error("Cannot update a component (`%s`) while rendering a different component (`%s`). To locate the bad setState() call inside `%s`, follow the stack trace as described in https://reactjs.org/link/setstate-in-render", setStateComponentName, renderingComponentName, renderingComponentName);
                    }
                    break;
                  }
                  case ClassComponent: {
                    if (!didWarnAboutUpdateInRender) {
                      error("Cannot update during an existing state transition (such as within `render`). Render methods should be a pure function of props and state.");
                      didWarnAboutUpdateInRender = true;
                    }
                    break;
                  }
                }
              }
            }
          }
          function restorePendingUpdaters(root3, lanes) {
            {
              if (isDevToolsPresent) {
                var memoizedUpdaters = root3.memoizedUpdaters;
                memoizedUpdaters.forEach(function(schedulingFiber) {
                  addFiberToLanesMap(root3, schedulingFiber, lanes);
                });
              }
            }
          }
          var fakeActCallbackNode = {};
          function scheduleCallback$1(priorityLevel, callback) {
            {
              var actQueue = ReactCurrentActQueue$1.current;
              if (actQueue !== null) {
                actQueue.push(callback);
                return fakeActCallbackNode;
              } else {
                return scheduleCallback(priorityLevel, callback);
              }
            }
          }
          function cancelCallback$1(callbackNode) {
            if (callbackNode === fakeActCallbackNode) {
              return;
            }
            return cancelCallback(callbackNode);
          }
          function shouldForceFlushFallbacksInDEV() {
            return ReactCurrentActQueue$1.current !== null;
          }
          function warnIfUpdatesNotWrappedWithActDEV(fiber) {
            {
              if (fiber.mode & ConcurrentMode) {
                if (!isConcurrentActEnvironment()) {
                  return;
                }
              } else {
                if (!isLegacyActEnvironment()) {
                  return;
                }
                if (executionContext !== NoContext) {
                  return;
                }
                if (fiber.tag !== FunctionComponent && fiber.tag !== ForwardRef && fiber.tag !== SimpleMemoComponent) {
                  return;
                }
              }
              if (ReactCurrentActQueue$1.current === null) {
                var previousFiber = current;
                try {
                  setCurrentFiber(fiber);
                  error("An update to %s inside a test was not wrapped in act(...).\n\nWhen testing, code that causes React state updates should be wrapped into act(...):\n\nact(() => {\n  /* fire events that update state */\n});\n/* assert on the output */\n\nThis ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act", getComponentNameFromFiber(fiber));
                } finally {
                  if (previousFiber) {
                    setCurrentFiber(fiber);
                  } else {
                    resetCurrentFiber();
                  }
                }
              }
            }
          }
          function warnIfSuspenseResolutionNotWrappedWithActDEV(root3) {
            {
              if (root3.tag !== LegacyRoot && isConcurrentActEnvironment() && ReactCurrentActQueue$1.current === null) {
                error("A suspended resource finished loading inside a test, but the event was not wrapped in act(...).\n\nWhen testing, code that resolves suspended data should be wrapped into act(...):\n\nact(() => {\n  /* finish loading suspended data */\n});\n/* assert on the output */\n\nThis ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act");
              }
            }
          }
          var resolveFamily = null;
          var failedBoundaries = null;
          var setRefreshHandler = function(handler) {
            {
              resolveFamily = handler;
            }
          };
          function resolveFunctionForHotReloading(type) {
            {
              if (resolveFamily === null) {
                return type;
              }
              var family = resolveFamily(type);
              if (family === void 0) {
                return type;
              }
              return family.current;
            }
          }
          function resolveClassForHotReloading(type) {
            return resolveFunctionForHotReloading(type);
          }
          function resolveForwardRefForHotReloading(type) {
            {
              if (resolveFamily === null) {
                return type;
              }
              var family = resolveFamily(type);
              if (family === void 0) {
                if (type !== null && type !== void 0 && typeof type.render === "function") {
                  var currentRender = resolveFunctionForHotReloading(type.render);
                  if (type.render !== currentRender) {
                    var syntheticType = {
                      $$typeof: REACT_FORWARD_REF_TYPE,
                      render: currentRender
                    };
                    if (type.displayName !== void 0) {
                      syntheticType.displayName = type.displayName;
                    }
                    return syntheticType;
                  }
                }
                return type;
              }
              return family.current;
            }
          }
          function isCompatibleFamilyForHotReloading(fiber, element) {
            {
              if (resolveFamily === null) {
                return false;
              }
              var prevType = fiber.elementType;
              var nextType = element.type;
              var needsCompareFamilies = false;
              var $$typeofNextType = typeof nextType === "object" && nextType !== null ? nextType.$$typeof : null;
              switch (fiber.tag) {
                case ClassComponent: {
                  if (typeof nextType === "function") {
                    needsCompareFamilies = true;
                  }
                  break;
                }
                case FunctionComponent: {
                  if (typeof nextType === "function") {
                    needsCompareFamilies = true;
                  } else if ($$typeofNextType === REACT_LAZY_TYPE) {
                    needsCompareFamilies = true;
                  }
                  break;
                }
                case ForwardRef: {
                  if ($$typeofNextType === REACT_FORWARD_REF_TYPE) {
                    needsCompareFamilies = true;
                  } else if ($$typeofNextType === REACT_LAZY_TYPE) {
                    needsCompareFamilies = true;
                  }
                  break;
                }
                case MemoComponent:
                case SimpleMemoComponent: {
                  if ($$typeofNextType === REACT_MEMO_TYPE) {
                    needsCompareFamilies = true;
                  } else if ($$typeofNextType === REACT_LAZY_TYPE) {
                    needsCompareFamilies = true;
                  }
                  break;
                }
                default:
                  return false;
              }
              if (needsCompareFamilies) {
                var prevFamily = resolveFamily(prevType);
                if (prevFamily !== void 0 && prevFamily === resolveFamily(nextType)) {
                  return true;
                }
              }
              return false;
            }
          }
          function markFailedErrorBoundaryForHotReloading(fiber) {
            {
              if (resolveFamily === null) {
                return;
              }
              if (typeof WeakSet !== "function") {
                return;
              }
              if (failedBoundaries === null) {
                failedBoundaries = /* @__PURE__ */ new WeakSet();
              }
              failedBoundaries.add(fiber);
            }
          }
          var scheduleRefresh = function(root3, update) {
            {
              if (resolveFamily === null) {
                return;
              }
              var staleFamilies = update.staleFamilies, updatedFamilies = update.updatedFamilies;
              flushPassiveEffects();
              flushSync(function() {
                scheduleFibersWithFamiliesRecursively(root3.current, updatedFamilies, staleFamilies);
              });
            }
          };
          var scheduleRoot = function(root3, element) {
            {
              if (root3.context !== emptyContextObject) {
                return;
              }
              flushPassiveEffects();
              flushSync(function() {
                updateContainer(element, root3, null, null);
              });
            }
          };
          function scheduleFibersWithFamiliesRecursively(fiber, updatedFamilies, staleFamilies) {
            {
              var alternate = fiber.alternate, child = fiber.child, sibling = fiber.sibling, tag = fiber.tag, type = fiber.type;
              var candidateType = null;
              switch (tag) {
                case FunctionComponent:
                case SimpleMemoComponent:
                case ClassComponent:
                  candidateType = type;
                  break;
                case ForwardRef:
                  candidateType = type.render;
                  break;
              }
              if (resolveFamily === null) {
                throw new Error("Expected resolveFamily to be set during hot reload.");
              }
              var needsRender = false;
              var needsRemount = false;
              if (candidateType !== null) {
                var family = resolveFamily(candidateType);
                if (family !== void 0) {
                  if (staleFamilies.has(family)) {
                    needsRemount = true;
                  } else if (updatedFamilies.has(family)) {
                    if (tag === ClassComponent) {
                      needsRemount = true;
                    } else {
                      needsRender = true;
                    }
                  }
                }
              }
              if (failedBoundaries !== null) {
                if (failedBoundaries.has(fiber) || alternate !== null && failedBoundaries.has(alternate)) {
                  needsRemount = true;
                }
              }
              if (needsRemount) {
                fiber._debugNeedsRemount = true;
              }
              if (needsRemount || needsRender) {
                scheduleUpdateOnFiber(fiber, SyncLane, NoTimestamp);
              }
              if (child !== null && !needsRemount) {
                scheduleFibersWithFamiliesRecursively(child, updatedFamilies, staleFamilies);
              }
              if (sibling !== null) {
                scheduleFibersWithFamiliesRecursively(sibling, updatedFamilies, staleFamilies);
              }
            }
          }
          var findHostInstancesForRefresh = function(root3, families) {
            {
              var hostInstances = /* @__PURE__ */ new Set();
              var types = new Set(families.map(function(family) {
                return family.current;
              }));
              findHostInstancesForMatchingFibersRecursively(root3.current, types, hostInstances);
              return hostInstances;
            }
          };
          function findHostInstancesForMatchingFibersRecursively(fiber, types, hostInstances) {
            {
              var child = fiber.child, sibling = fiber.sibling, tag = fiber.tag, type = fiber.type;
              var candidateType = null;
              switch (tag) {
                case FunctionComponent:
                case SimpleMemoComponent:
                case ClassComponent:
                  candidateType = type;
                  break;
                case ForwardRef:
                  candidateType = type.render;
                  break;
              }
              var didMatch = false;
              if (candidateType !== null) {
                if (types.has(candidateType)) {
                  didMatch = true;
                }
              }
              if (didMatch) {
                findHostInstancesForFiberShallowly(fiber, hostInstances);
              } else {
                if (child !== null) {
                  findHostInstancesForMatchingFibersRecursively(child, types, hostInstances);
                }
              }
              if (sibling !== null) {
                findHostInstancesForMatchingFibersRecursively(sibling, types, hostInstances);
              }
            }
          }
          function findHostInstancesForFiberShallowly(fiber, hostInstances) {
            {
              var foundHostInstances = findChildHostInstancesForFiberShallowly(fiber, hostInstances);
              if (foundHostInstances) {
                return;
              }
              var node = fiber;
              while (true) {
                switch (node.tag) {
                  case HostComponent:
                    hostInstances.add(node.stateNode);
                    return;
                  case HostPortal:
                    hostInstances.add(node.stateNode.containerInfo);
                    return;
                  case HostRoot:
                    hostInstances.add(node.stateNode.containerInfo);
                    return;
                }
                if (node.return === null) {
                  throw new Error("Expected to reach root first.");
                }
                node = node.return;
              }
            }
          }
          function findChildHostInstancesForFiberShallowly(fiber, hostInstances) {
            {
              var node = fiber;
              var foundHostInstances = false;
              while (true) {
                if (node.tag === HostComponent) {
                  foundHostInstances = true;
                  hostInstances.add(node.stateNode);
                } else if (node.child !== null) {
                  node.child.return = node;
                  node = node.child;
                  continue;
                }
                if (node === fiber) {
                  return foundHostInstances;
                }
                while (node.sibling === null) {
                  if (node.return === null || node.return === fiber) {
                    return foundHostInstances;
                  }
                  node = node.return;
                }
                node.sibling.return = node.return;
                node = node.sibling;
              }
            }
            return false;
          }
          var hasBadMapPolyfill;
          {
            hasBadMapPolyfill = false;
            try {
              var nonExtensibleObject = Object.preventExtensions({});
              /* @__PURE__ */ new Map([[nonExtensibleObject, null]]);
              /* @__PURE__ */ new Set([nonExtensibleObject]);
            } catch (e4) {
              hasBadMapPolyfill = true;
            }
          }
          function FiberNode(tag, pendingProps, key, mode) {
            this.tag = tag;
            this.key = key;
            this.elementType = null;
            this.type = null;
            this.stateNode = null;
            this.return = null;
            this.child = null;
            this.sibling = null;
            this.index = 0;
            this.ref = null;
            this.pendingProps = pendingProps;
            this.memoizedProps = null;
            this.updateQueue = null;
            this.memoizedState = null;
            this.dependencies = null;
            this.mode = mode;
            this.flags = NoFlags;
            this.subtreeFlags = NoFlags;
            this.deletions = null;
            this.lanes = NoLanes;
            this.childLanes = NoLanes;
            this.alternate = null;
            {
              this.actualDuration = Number.NaN;
              this.actualStartTime = Number.NaN;
              this.selfBaseDuration = Number.NaN;
              this.treeBaseDuration = Number.NaN;
              this.actualDuration = 0;
              this.actualStartTime = -1;
              this.selfBaseDuration = 0;
              this.treeBaseDuration = 0;
            }
            {
              this._debugSource = null;
              this._debugOwner = null;
              this._debugNeedsRemount = false;
              this._debugHookTypes = null;
              if (!hasBadMapPolyfill && typeof Object.preventExtensions === "function") {
                Object.preventExtensions(this);
              }
            }
          }
          var createFiber = function(tag, pendingProps, key, mode) {
            return new FiberNode(tag, pendingProps, key, mode);
          };
          function shouldConstruct$1(Component) {
            var prototype = Component.prototype;
            return !!(prototype && prototype.isReactComponent);
          }
          function isSimpleFunctionComponent(type) {
            return typeof type === "function" && !shouldConstruct$1(type) && type.defaultProps === void 0;
          }
          function resolveLazyComponentTag(Component) {
            if (typeof Component === "function") {
              return shouldConstruct$1(Component) ? ClassComponent : FunctionComponent;
            } else if (Component !== void 0 && Component !== null) {
              var $$typeof = Component.$$typeof;
              if ($$typeof === REACT_FORWARD_REF_TYPE) {
                return ForwardRef;
              }
              if ($$typeof === REACT_MEMO_TYPE) {
                return MemoComponent;
              }
            }
            return IndeterminateComponent;
          }
          function createWorkInProgress(current2, pendingProps) {
            var workInProgress2 = current2.alternate;
            if (workInProgress2 === null) {
              workInProgress2 = createFiber(current2.tag, pendingProps, current2.key, current2.mode);
              workInProgress2.elementType = current2.elementType;
              workInProgress2.type = current2.type;
              workInProgress2.stateNode = current2.stateNode;
              {
                workInProgress2._debugSource = current2._debugSource;
                workInProgress2._debugOwner = current2._debugOwner;
                workInProgress2._debugHookTypes = current2._debugHookTypes;
              }
              workInProgress2.alternate = current2;
              current2.alternate = workInProgress2;
            } else {
              workInProgress2.pendingProps = pendingProps;
              workInProgress2.type = current2.type;
              workInProgress2.flags = NoFlags;
              workInProgress2.subtreeFlags = NoFlags;
              workInProgress2.deletions = null;
              {
                workInProgress2.actualDuration = 0;
                workInProgress2.actualStartTime = -1;
              }
            }
            workInProgress2.flags = current2.flags & StaticMask;
            workInProgress2.childLanes = current2.childLanes;
            workInProgress2.lanes = current2.lanes;
            workInProgress2.child = current2.child;
            workInProgress2.memoizedProps = current2.memoizedProps;
            workInProgress2.memoizedState = current2.memoizedState;
            workInProgress2.updateQueue = current2.updateQueue;
            var currentDependencies = current2.dependencies;
            workInProgress2.dependencies = currentDependencies === null ? null : {
              lanes: currentDependencies.lanes,
              firstContext: currentDependencies.firstContext
            };
            workInProgress2.sibling = current2.sibling;
            workInProgress2.index = current2.index;
            workInProgress2.ref = current2.ref;
            {
              workInProgress2.selfBaseDuration = current2.selfBaseDuration;
              workInProgress2.treeBaseDuration = current2.treeBaseDuration;
            }
            {
              workInProgress2._debugNeedsRemount = current2._debugNeedsRemount;
              switch (workInProgress2.tag) {
                case IndeterminateComponent:
                case FunctionComponent:
                case SimpleMemoComponent:
                  workInProgress2.type = resolveFunctionForHotReloading(current2.type);
                  break;
                case ClassComponent:
                  workInProgress2.type = resolveClassForHotReloading(current2.type);
                  break;
                case ForwardRef:
                  workInProgress2.type = resolveForwardRefForHotReloading(current2.type);
                  break;
              }
            }
            return workInProgress2;
          }
          function resetWorkInProgress(workInProgress2, renderLanes2) {
            workInProgress2.flags &= StaticMask | Placement;
            var current2 = workInProgress2.alternate;
            if (current2 === null) {
              workInProgress2.childLanes = NoLanes;
              workInProgress2.lanes = renderLanes2;
              workInProgress2.child = null;
              workInProgress2.subtreeFlags = NoFlags;
              workInProgress2.memoizedProps = null;
              workInProgress2.memoizedState = null;
              workInProgress2.updateQueue = null;
              workInProgress2.dependencies = null;
              workInProgress2.stateNode = null;
              {
                workInProgress2.selfBaseDuration = 0;
                workInProgress2.treeBaseDuration = 0;
              }
            } else {
              workInProgress2.childLanes = current2.childLanes;
              workInProgress2.lanes = current2.lanes;
              workInProgress2.child = current2.child;
              workInProgress2.subtreeFlags = NoFlags;
              workInProgress2.deletions = null;
              workInProgress2.memoizedProps = current2.memoizedProps;
              workInProgress2.memoizedState = current2.memoizedState;
              workInProgress2.updateQueue = current2.updateQueue;
              workInProgress2.type = current2.type;
              var currentDependencies = current2.dependencies;
              workInProgress2.dependencies = currentDependencies === null ? null : {
                lanes: currentDependencies.lanes,
                firstContext: currentDependencies.firstContext
              };
              {
                workInProgress2.selfBaseDuration = current2.selfBaseDuration;
                workInProgress2.treeBaseDuration = current2.treeBaseDuration;
              }
            }
            return workInProgress2;
          }
          function createHostRootFiber(tag, isStrictMode, concurrentUpdatesByDefaultOverride) {
            var mode;
            if (tag === ConcurrentRoot) {
              mode = ConcurrentMode;
              if (isStrictMode === true) {
                mode |= StrictLegacyMode;
                {
                  mode |= StrictEffectsMode;
                }
              }
            } else {
              mode = NoMode;
            }
            if (isDevToolsPresent) {
              mode |= ProfileMode;
            }
            return createFiber(HostRoot, null, null, mode);
          }
          function createFiberFromTypeAndProps(type, key, pendingProps, owner, mode, lanes) {
            var fiberTag = IndeterminateComponent;
            var resolvedType = type;
            if (typeof type === "function") {
              if (shouldConstruct$1(type)) {
                fiberTag = ClassComponent;
                {
                  resolvedType = resolveClassForHotReloading(resolvedType);
                }
              } else {
                {
                  resolvedType = resolveFunctionForHotReloading(resolvedType);
                }
              }
            } else if (typeof type === "string") {
              fiberTag = HostComponent;
            } else {
              getTag:
                switch (type) {
                  case REACT_FRAGMENT_TYPE:
                    return createFiberFromFragment(pendingProps.children, mode, lanes, key);
                  case REACT_STRICT_MODE_TYPE:
                    fiberTag = Mode;
                    mode |= StrictLegacyMode;
                    if ((mode & ConcurrentMode) !== NoMode) {
                      mode |= StrictEffectsMode;
                    }
                    break;
                  case REACT_PROFILER_TYPE:
                    return createFiberFromProfiler(pendingProps, mode, lanes, key);
                  case REACT_SUSPENSE_TYPE:
                    return createFiberFromSuspense(pendingProps, mode, lanes, key);
                  case REACT_SUSPENSE_LIST_TYPE:
                    return createFiberFromSuspenseList(pendingProps, mode, lanes, key);
                  case REACT_OFFSCREEN_TYPE:
                    return createFiberFromOffscreen(pendingProps, mode, lanes, key);
                  case REACT_LEGACY_HIDDEN_TYPE:
                  case REACT_SCOPE_TYPE:
                  case REACT_CACHE_TYPE:
                  case REACT_TRACING_MARKER_TYPE:
                  case REACT_DEBUG_TRACING_MODE_TYPE:
                  default: {
                    if (typeof type === "object" && type !== null) {
                      switch (type.$$typeof) {
                        case REACT_PROVIDER_TYPE:
                          fiberTag = ContextProvider;
                          break getTag;
                        case REACT_CONTEXT_TYPE:
                          fiberTag = ContextConsumer;
                          break getTag;
                        case REACT_FORWARD_REF_TYPE:
                          fiberTag = ForwardRef;
                          {
                            resolvedType = resolveForwardRefForHotReloading(resolvedType);
                          }
                          break getTag;
                        case REACT_MEMO_TYPE:
                          fiberTag = MemoComponent;
                          break getTag;
                        case REACT_LAZY_TYPE:
                          fiberTag = LazyComponent;
                          resolvedType = null;
                          break getTag;
                      }
                    }
                    var info = "";
                    {
                      if (type === void 0 || typeof type === "object" && type !== null && Object.keys(type).length === 0) {
                        info += " You likely forgot to export your component from the file it's defined in, or you might have mixed up default and named imports.";
                      }
                      var ownerName = owner ? getComponentNameFromFiber(owner) : null;
                      if (ownerName) {
                        info += "\n\nCheck the render method of `" + ownerName + "`.";
                      }
                    }
                    throw new Error("Element type is invalid: expected a string (for built-in components) or a class/function (for composite components) " + ("but got: " + (type == null ? type : typeof type) + "." + info));
                  }
                }
            }
            var fiber = createFiber(fiberTag, pendingProps, key, mode);
            fiber.elementType = type;
            fiber.type = resolvedType;
            fiber.lanes = lanes;
            {
              fiber._debugOwner = owner;
            }
            return fiber;
          }
          function createFiberFromElement(element, mode, lanes) {
            var owner = null;
            {
              owner = element._owner;
            }
            var type = element.type;
            var key = element.key;
            var pendingProps = element.props;
            var fiber = createFiberFromTypeAndProps(type, key, pendingProps, owner, mode, lanes);
            {
              fiber._debugSource = element._source;
              fiber._debugOwner = element._owner;
            }
            return fiber;
          }
          function createFiberFromFragment(elements, mode, lanes, key) {
            var fiber = createFiber(Fragment4, elements, key, mode);
            fiber.lanes = lanes;
            return fiber;
          }
          function createFiberFromProfiler(pendingProps, mode, lanes, key) {
            {
              if (typeof pendingProps.id !== "string") {
                error('Profiler must specify an "id" of type `string` as a prop. Received the type `%s` instead.', typeof pendingProps.id);
              }
            }
            var fiber = createFiber(Profiler, pendingProps, key, mode | ProfileMode);
            fiber.elementType = REACT_PROFILER_TYPE;
            fiber.lanes = lanes;
            {
              fiber.stateNode = {
                effectDuration: 0,
                passiveEffectDuration: 0
              };
            }
            return fiber;
          }
          function createFiberFromSuspense(pendingProps, mode, lanes, key) {
            var fiber = createFiber(SuspenseComponent, pendingProps, key, mode);
            fiber.elementType = REACT_SUSPENSE_TYPE;
            fiber.lanes = lanes;
            return fiber;
          }
          function createFiberFromSuspenseList(pendingProps, mode, lanes, key) {
            var fiber = createFiber(SuspenseListComponent, pendingProps, key, mode);
            fiber.elementType = REACT_SUSPENSE_LIST_TYPE;
            fiber.lanes = lanes;
            return fiber;
          }
          function createFiberFromOffscreen(pendingProps, mode, lanes, key) {
            var fiber = createFiber(OffscreenComponent, pendingProps, key, mode);
            fiber.elementType = REACT_OFFSCREEN_TYPE;
            fiber.lanes = lanes;
            var primaryChildInstance = {};
            fiber.stateNode = primaryChildInstance;
            return fiber;
          }
          function createFiberFromText(content, mode, lanes) {
            var fiber = createFiber(HostText, content, null, mode);
            fiber.lanes = lanes;
            return fiber;
          }
          function createFiberFromHostInstanceForDeletion() {
            var fiber = createFiber(HostComponent, null, null, NoMode);
            fiber.elementType = "DELETED";
            return fiber;
          }
          function createFiberFromDehydratedFragment(dehydratedNode) {
            var fiber = createFiber(DehydratedFragment, null, null, NoMode);
            fiber.stateNode = dehydratedNode;
            return fiber;
          }
          function createFiberFromPortal(portal, mode, lanes) {
            var pendingProps = portal.children !== null ? portal.children : [];
            var fiber = createFiber(HostPortal, pendingProps, portal.key, mode);
            fiber.lanes = lanes;
            fiber.stateNode = {
              containerInfo: portal.containerInfo,
              pendingChildren: null,
              implementation: portal.implementation
            };
            return fiber;
          }
          function assignFiberPropertiesInDEV(target, source) {
            if (target === null) {
              target = createFiber(IndeterminateComponent, null, null, NoMode);
            }
            target.tag = source.tag;
            target.key = source.key;
            target.elementType = source.elementType;
            target.type = source.type;
            target.stateNode = source.stateNode;
            target.return = source.return;
            target.child = source.child;
            target.sibling = source.sibling;
            target.index = source.index;
            target.ref = source.ref;
            target.pendingProps = source.pendingProps;
            target.memoizedProps = source.memoizedProps;
            target.updateQueue = source.updateQueue;
            target.memoizedState = source.memoizedState;
            target.dependencies = source.dependencies;
            target.mode = source.mode;
            target.flags = source.flags;
            target.subtreeFlags = source.subtreeFlags;
            target.deletions = source.deletions;
            target.lanes = source.lanes;
            target.childLanes = source.childLanes;
            target.alternate = source.alternate;
            {
              target.actualDuration = source.actualDuration;
              target.actualStartTime = source.actualStartTime;
              target.selfBaseDuration = source.selfBaseDuration;
              target.treeBaseDuration = source.treeBaseDuration;
            }
            target._debugSource = source._debugSource;
            target._debugOwner = source._debugOwner;
            target._debugNeedsRemount = source._debugNeedsRemount;
            target._debugHookTypes = source._debugHookTypes;
            return target;
          }
          function FiberRootNode(containerInfo, tag, hydrate2, identifierPrefix, onRecoverableError) {
            this.tag = tag;
            this.containerInfo = containerInfo;
            this.pendingChildren = null;
            this.current = null;
            this.pingCache = null;
            this.finishedWork = null;
            this.timeoutHandle = noTimeout;
            this.context = null;
            this.pendingContext = null;
            this.callbackNode = null;
            this.callbackPriority = NoLane;
            this.eventTimes = createLaneMap(NoLanes);
            this.expirationTimes = createLaneMap(NoTimestamp);
            this.pendingLanes = NoLanes;
            this.suspendedLanes = NoLanes;
            this.pingedLanes = NoLanes;
            this.expiredLanes = NoLanes;
            this.mutableReadLanes = NoLanes;
            this.finishedLanes = NoLanes;
            this.entangledLanes = NoLanes;
            this.entanglements = createLaneMap(NoLanes);
            this.identifierPrefix = identifierPrefix;
            this.onRecoverableError = onRecoverableError;
            {
              this.mutableSourceEagerHydrationData = null;
            }
            {
              this.effectDuration = 0;
              this.passiveEffectDuration = 0;
            }
            {
              this.memoizedUpdaters = /* @__PURE__ */ new Set();
              var pendingUpdatersLaneMap = this.pendingUpdatersLaneMap = [];
              for (var _i = 0; _i < TotalLanes; _i++) {
                pendingUpdatersLaneMap.push(/* @__PURE__ */ new Set());
              }
            }
            {
              switch (tag) {
                case ConcurrentRoot:
                  this._debugRootType = hydrate2 ? "hydrateRoot()" : "createRoot()";
                  break;
                case LegacyRoot:
                  this._debugRootType = hydrate2 ? "hydrate()" : "render()";
                  break;
              }
            }
          }
          function createFiberRoot(containerInfo, tag, hydrate2, initialChildren, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError, transitionCallbacks) {
            var root3 = new FiberRootNode(containerInfo, tag, hydrate2, identifierPrefix, onRecoverableError);
            var uninitializedFiber = createHostRootFiber(tag, isStrictMode);
            root3.current = uninitializedFiber;
            uninitializedFiber.stateNode = root3;
            {
              var _initialState = {
                element: initialChildren,
                isDehydrated: hydrate2,
                cache: null,
                transitions: null
              };
              uninitializedFiber.memoizedState = _initialState;
            }
            initializeUpdateQueue(uninitializedFiber);
            return root3;
          }
          var ReactVersion = "18.0.0-fc46dba67-20220329";
          function createPortal(children, containerInfo, implementation) {
            var key = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : null;
            {
              checkKeyStringCoercion(key);
            }
            return {
              $$typeof: REACT_PORTAL_TYPE,
              key: key == null ? null : "" + key,
              children,
              containerInfo,
              implementation
            };
          }
          var didWarnAboutNestedUpdates;
          var didWarnAboutFindNodeInStrictMode;
          {
            didWarnAboutNestedUpdates = false;
            didWarnAboutFindNodeInStrictMode = {};
          }
          function getContextForSubtree(parentComponent) {
            if (!parentComponent) {
              return emptyContextObject;
            }
            var fiber = get(parentComponent);
            var parentContext = findCurrentUnmaskedContext(fiber);
            if (fiber.tag === ClassComponent) {
              var Component = fiber.type;
              if (isContextProvider(Component)) {
                return processChildContext(fiber, Component, parentContext);
              }
            }
            return parentContext;
          }
          function findHostInstanceWithWarning(component, methodName) {
            {
              var fiber = get(component);
              if (fiber === void 0) {
                if (typeof component.render === "function") {
                  throw new Error("Unable to find node on an unmounted component.");
                } else {
                  var keys = Object.keys(component).join(",");
                  throw new Error("Argument appears to not be a ReactComponent. Keys: " + keys);
                }
              }
              var hostFiber = findCurrentHostFiber(fiber);
              if (hostFiber === null) {
                return null;
              }
              if (hostFiber.mode & StrictLegacyMode) {
                var componentName = getComponentNameFromFiber(fiber) || "Component";
                if (!didWarnAboutFindNodeInStrictMode[componentName]) {
                  didWarnAboutFindNodeInStrictMode[componentName] = true;
                  var previousFiber = current;
                  try {
                    setCurrentFiber(hostFiber);
                    if (fiber.mode & StrictLegacyMode) {
                      error("%s is deprecated in StrictMode. %s was passed an instance of %s which is inside StrictMode. Instead, add a ref directly to the element you want to reference. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-find-node", methodName, methodName, componentName);
                    } else {
                      error("%s is deprecated in StrictMode. %s was passed an instance of %s which renders StrictMode children. Instead, add a ref directly to the element you want to reference. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-find-node", methodName, methodName, componentName);
                    }
                  } finally {
                    if (previousFiber) {
                      setCurrentFiber(previousFiber);
                    } else {
                      resetCurrentFiber();
                    }
                  }
                }
              }
              return hostFiber.stateNode;
            }
          }
          function createContainer(containerInfo, tag, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError, transitionCallbacks) {
            var hydrate2 = false;
            var initialChildren = null;
            return createFiberRoot(containerInfo, tag, hydrate2, initialChildren, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError);
          }
          function createHydrationContainer(initialChildren, callback, containerInfo, tag, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError, transitionCallbacks) {
            var hydrate2 = true;
            var root3 = createFiberRoot(containerInfo, tag, hydrate2, initialChildren, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError);
            root3.context = getContextForSubtree(null);
            var current2 = root3.current;
            var eventTime = requestEventTime();
            var lane = requestUpdateLane(current2);
            var update = createUpdate(eventTime, lane);
            update.callback = callback !== void 0 && callback !== null ? callback : null;
            enqueueUpdate(current2, update);
            scheduleInitialHydrationOnRoot(root3, lane, eventTime);
            return root3;
          }
          function updateContainer(element, container2, parentComponent, callback) {
            {
              onScheduleRoot(container2, element);
            }
            var current$1 = container2.current;
            var eventTime = requestEventTime();
            var lane = requestUpdateLane(current$1);
            {
              markRenderScheduled(lane);
            }
            var context = getContextForSubtree(parentComponent);
            if (container2.context === null) {
              container2.context = context;
            } else {
              container2.pendingContext = context;
            }
            {
              if (isRendering && current !== null && !didWarnAboutNestedUpdates) {
                didWarnAboutNestedUpdates = true;
                error("Render methods should be a pure function of props and state; triggering nested component updates from render is not allowed. If necessary, trigger nested updates in componentDidUpdate.\n\nCheck the render method of %s.", getComponentNameFromFiber(current) || "Unknown");
              }
            }
            var update = createUpdate(eventTime, lane);
            update.payload = {
              element
            };
            callback = callback === void 0 ? null : callback;
            if (callback !== null) {
              {
                if (typeof callback !== "function") {
                  error("render(...): Expected the last optional `callback` argument to be a function. Instead received: %s.", callback);
                }
              }
              update.callback = callback;
            }
            enqueueUpdate(current$1, update);
            var root3 = scheduleUpdateOnFiber(current$1, lane, eventTime);
            if (root3 !== null) {
              entangleTransitions(root3, current$1, lane);
            }
            return lane;
          }
          function getPublicRootInstance(container2) {
            var containerFiber = container2.current;
            if (!containerFiber.child) {
              return null;
            }
            switch (containerFiber.child.tag) {
              case HostComponent:
                return getPublicInstance(containerFiber.child.stateNode);
              default:
                return containerFiber.child.stateNode;
            }
          }
          function attemptSynchronousHydration$1(fiber) {
            switch (fiber.tag) {
              case HostRoot:
                var root3 = fiber.stateNode;
                if (isRootDehydrated(root3)) {
                  var lanes = getHighestPriorityPendingLanes(root3);
                  flushRoot(root3, lanes);
                }
                break;
              case SuspenseComponent:
                var eventTime = requestEventTime();
                flushSync(function() {
                  return scheduleUpdateOnFiber(fiber, SyncLane, eventTime);
                });
                var retryLane = SyncLane;
                markRetryLaneIfNotHydrated(fiber, retryLane);
                break;
            }
          }
          function markRetryLaneImpl(fiber, retryLane) {
            var suspenseState = fiber.memoizedState;
            if (suspenseState !== null && suspenseState.dehydrated !== null) {
              suspenseState.retryLane = higherPriorityLane(suspenseState.retryLane, retryLane);
            }
          }
          function markRetryLaneIfNotHydrated(fiber, retryLane) {
            markRetryLaneImpl(fiber, retryLane);
            var alternate = fiber.alternate;
            if (alternate) {
              markRetryLaneImpl(alternate, retryLane);
            }
          }
          function attemptContinuousHydration$1(fiber) {
            if (fiber.tag !== SuspenseComponent) {
              return;
            }
            var eventTime = requestEventTime();
            var lane = SelectiveHydrationLane;
            scheduleUpdateOnFiber(fiber, lane, eventTime);
            markRetryLaneIfNotHydrated(fiber, lane);
          }
          function attemptHydrationAtCurrentPriority$1(fiber) {
            if (fiber.tag !== SuspenseComponent) {
              return;
            }
            var eventTime = requestEventTime();
            var lane = requestUpdateLane(fiber);
            scheduleUpdateOnFiber(fiber, lane, eventTime);
            markRetryLaneIfNotHydrated(fiber, lane);
          }
          function findHostInstanceWithNoPortals(fiber) {
            var hostFiber = findCurrentHostFiberWithNoPortals(fiber);
            if (hostFiber === null) {
              return null;
            }
            return hostFiber.stateNode;
          }
          var shouldErrorImpl = function(fiber) {
            return null;
          };
          function shouldError(fiber) {
            return shouldErrorImpl(fiber);
          }
          var shouldSuspendImpl = function(fiber) {
            return false;
          };
          function shouldSuspend(fiber) {
            return shouldSuspendImpl(fiber);
          }
          var overrideHookState = null;
          var overrideHookStateDeletePath = null;
          var overrideHookStateRenamePath = null;
          var overrideProps = null;
          var overridePropsDeletePath = null;
          var overridePropsRenamePath = null;
          var scheduleUpdate = null;
          var setErrorHandler = null;
          var setSuspenseHandler = null;
          {
            var copyWithDeleteImpl = function(obj, path, index2) {
              var key = path[index2];
              var updated = isArray(obj) ? obj.slice() : assign({}, obj);
              if (index2 + 1 === path.length) {
                if (isArray(updated)) {
                  updated.splice(key, 1);
                } else {
                  delete updated[key];
                }
                return updated;
              }
              updated[key] = copyWithDeleteImpl(obj[key], path, index2 + 1);
              return updated;
            };
            var copyWithDelete = function(obj, path) {
              return copyWithDeleteImpl(obj, path, 0);
            };
            var copyWithRenameImpl = function(obj, oldPath, newPath, index2) {
              var oldKey = oldPath[index2];
              var updated = isArray(obj) ? obj.slice() : assign({}, obj);
              if (index2 + 1 === oldPath.length) {
                var newKey = newPath[index2];
                updated[newKey] = updated[oldKey];
                if (isArray(updated)) {
                  updated.splice(oldKey, 1);
                } else {
                  delete updated[oldKey];
                }
              } else {
                updated[oldKey] = copyWithRenameImpl(obj[oldKey], oldPath, newPath, index2 + 1);
              }
              return updated;
            };
            var copyWithRename = function(obj, oldPath, newPath) {
              if (oldPath.length !== newPath.length) {
                warn("copyWithRename() expects paths of the same length");
                return;
              } else {
                for (var i3 = 0; i3 < newPath.length - 1; i3++) {
                  if (oldPath[i3] !== newPath[i3]) {
                    warn("copyWithRename() expects paths to be the same except for the deepest key");
                    return;
                  }
                }
              }
              return copyWithRenameImpl(obj, oldPath, newPath, 0);
            };
            var copyWithSetImpl = function(obj, path, index2, value) {
              if (index2 >= path.length) {
                return value;
              }
              var key = path[index2];
              var updated = isArray(obj) ? obj.slice() : assign({}, obj);
              updated[key] = copyWithSetImpl(obj[key], path, index2 + 1, value);
              return updated;
            };
            var copyWithSet = function(obj, path, value) {
              return copyWithSetImpl(obj, path, 0, value);
            };
            var findHook = function(fiber, id) {
              var currentHook2 = fiber.memoizedState;
              while (currentHook2 !== null && id > 0) {
                currentHook2 = currentHook2.next;
                id--;
              }
              return currentHook2;
            };
            overrideHookState = function(fiber, id, path, value) {
              var hook = findHook(fiber, id);
              if (hook !== null) {
                var newState = copyWithSet(hook.memoizedState, path, value);
                hook.memoizedState = newState;
                hook.baseState = newState;
                fiber.memoizedProps = assign({}, fiber.memoizedProps);
                scheduleUpdateOnFiber(fiber, SyncLane, NoTimestamp);
              }
            };
            overrideHookStateDeletePath = function(fiber, id, path) {
              var hook = findHook(fiber, id);
              if (hook !== null) {
                var newState = copyWithDelete(hook.memoizedState, path);
                hook.memoizedState = newState;
                hook.baseState = newState;
                fiber.memoizedProps = assign({}, fiber.memoizedProps);
                scheduleUpdateOnFiber(fiber, SyncLane, NoTimestamp);
              }
            };
            overrideHookStateRenamePath = function(fiber, id, oldPath, newPath) {
              var hook = findHook(fiber, id);
              if (hook !== null) {
                var newState = copyWithRename(hook.memoizedState, oldPath, newPath);
                hook.memoizedState = newState;
                hook.baseState = newState;
                fiber.memoizedProps = assign({}, fiber.memoizedProps);
                scheduleUpdateOnFiber(fiber, SyncLane, NoTimestamp);
              }
            };
            overrideProps = function(fiber, path, value) {
              fiber.pendingProps = copyWithSet(fiber.memoizedProps, path, value);
              if (fiber.alternate) {
                fiber.alternate.pendingProps = fiber.pendingProps;
              }
              scheduleUpdateOnFiber(fiber, SyncLane, NoTimestamp);
            };
            overridePropsDeletePath = function(fiber, path) {
              fiber.pendingProps = copyWithDelete(fiber.memoizedProps, path);
              if (fiber.alternate) {
                fiber.alternate.pendingProps = fiber.pendingProps;
              }
              scheduleUpdateOnFiber(fiber, SyncLane, NoTimestamp);
            };
            overridePropsRenamePath = function(fiber, oldPath, newPath) {
              fiber.pendingProps = copyWithRename(fiber.memoizedProps, oldPath, newPath);
              if (fiber.alternate) {
                fiber.alternate.pendingProps = fiber.pendingProps;
              }
              scheduleUpdateOnFiber(fiber, SyncLane, NoTimestamp);
            };
            scheduleUpdate = function(fiber) {
              scheduleUpdateOnFiber(fiber, SyncLane, NoTimestamp);
            };
            setErrorHandler = function(newShouldErrorImpl) {
              shouldErrorImpl = newShouldErrorImpl;
            };
            setSuspenseHandler = function(newShouldSuspendImpl) {
              shouldSuspendImpl = newShouldSuspendImpl;
            };
          }
          function findHostInstanceByFiber(fiber) {
            var hostFiber = findCurrentHostFiber(fiber);
            if (hostFiber === null) {
              return null;
            }
            return hostFiber.stateNode;
          }
          function emptyFindFiberByHostInstance(instance) {
            return null;
          }
          function getCurrentFiberForDevTools() {
            return current;
          }
          function injectIntoDevTools(devToolsConfig) {
            var findFiberByHostInstance = devToolsConfig.findFiberByHostInstance;
            var ReactCurrentDispatcher2 = ReactSharedInternals.ReactCurrentDispatcher;
            return injectInternals({
              bundleType: devToolsConfig.bundleType,
              version: devToolsConfig.version,
              rendererPackageName: devToolsConfig.rendererPackageName,
              rendererConfig: devToolsConfig.rendererConfig,
              overrideHookState,
              overrideHookStateDeletePath,
              overrideHookStateRenamePath,
              overrideProps,
              overridePropsDeletePath,
              overridePropsRenamePath,
              setErrorHandler,
              setSuspenseHandler,
              scheduleUpdate,
              currentDispatcherRef: ReactCurrentDispatcher2,
              findHostInstanceByFiber,
              findFiberByHostInstance: findFiberByHostInstance || emptyFindFiberByHostInstance,
              findHostInstancesForRefresh,
              scheduleRefresh,
              scheduleRoot,
              setRefreshHandler,
              getCurrentFiber: getCurrentFiberForDevTools,
              reconcilerVersion: ReactVersion
            });
          }
          var defaultOnRecoverableError = typeof reportError === "function" ? reportError : function(error2) {
            console["error"](error2);
          };
          function ReactDOMRoot(internalRoot) {
            this._internalRoot = internalRoot;
          }
          ReactDOMHydrationRoot.prototype.render = ReactDOMRoot.prototype.render = function(children) {
            var root3 = this._internalRoot;
            if (root3 === null) {
              throw new Error("Cannot update an unmounted root.");
            }
            {
              if (typeof arguments[1] === "function") {
                error("render(...): does not support the second callback argument. To execute a side effect after rendering, declare it in a component body with useEffect().");
              } else if (isValidContainer(arguments[1])) {
                error("You passed a container to the second argument of root.render(...). You don't need to pass it again since you already passed it to create the root.");
              } else if (typeof arguments[1] !== "undefined") {
                error("You passed a second argument to root.render(...) but it only accepts one argument.");
              }
              var container2 = root3.containerInfo;
              if (container2.nodeType !== COMMENT_NODE) {
                var hostInstance = findHostInstanceWithNoPortals(root3.current);
                if (hostInstance) {
                  if (hostInstance.parentNode !== container2) {
                    error("render(...): It looks like the React-rendered content of the root container was removed without using React. This is not supported and will cause errors. Instead, call root.unmount() to empty a root's container.");
                  }
                }
              }
            }
            updateContainer(children, root3, null, null);
          };
          ReactDOMHydrationRoot.prototype.unmount = ReactDOMRoot.prototype.unmount = function() {
            {
              if (typeof arguments[0] === "function") {
                error("unmount(...): does not support a callback argument. To execute a side effect after rendering, declare it in a component body with useEffect().");
              }
            }
            var root3 = this._internalRoot;
            if (root3 !== null) {
              this._internalRoot = null;
              var container2 = root3.containerInfo;
              {
                if (isAlreadyRendering()) {
                  error("Attempted to synchronously unmount a root while React was already rendering. React cannot finish unmounting the root until the current render has completed, which may lead to a race condition.");
                }
              }
              flushSync(function() {
                updateContainer(null, root3, null, null);
              });
              unmarkContainerAsRoot(container2);
            }
          };
          function createRoot2(container2, options2) {
            if (!isValidContainer(container2)) {
              throw new Error("createRoot(...): Target container is not a DOM element.");
            }
            warnIfReactDOMContainerInDEV(container2);
            var isStrictMode = false;
            var concurrentUpdatesByDefaultOverride = false;
            var identifierPrefix = "";
            var onRecoverableError = defaultOnRecoverableError;
            var transitionCallbacks = null;
            if (options2 !== null && options2 !== void 0) {
              {
                if (options2.hydrate) {
                  warn("hydrate through createRoot is deprecated. Use ReactDOMClient.hydrateRoot(container, <App />) instead.");
                } else {
                  if (typeof options2 === "object" && options2 !== null && options2.$$typeof === REACT_ELEMENT_TYPE) {
                    error("You passed a JSX element to createRoot. You probably meant to call root.render instead. Example usage:\n\n  let root = createRoot(domContainer);\n  root.render(<App />);");
                  }
                }
              }
              if (options2.unstable_strictMode === true) {
                isStrictMode = true;
              }
              if (options2.identifierPrefix !== void 0) {
                identifierPrefix = options2.identifierPrefix;
              }
              if (options2.onRecoverableError !== void 0) {
                onRecoverableError = options2.onRecoverableError;
              }
              if (options2.transitionCallbacks !== void 0) {
                transitionCallbacks = options2.transitionCallbacks;
              }
            }
            var root3 = createContainer(container2, ConcurrentRoot, null, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError);
            markContainerAsRoot(root3.current, container2);
            var rootContainerElement = container2.nodeType === COMMENT_NODE ? container2.parentNode : container2;
            listenToAllSupportedEvents(rootContainerElement);
            return new ReactDOMRoot(root3);
          }
          function ReactDOMHydrationRoot(internalRoot) {
            this._internalRoot = internalRoot;
          }
          function scheduleHydration(target) {
            if (target) {
              queueExplicitHydrationTarget(target);
            }
          }
          ReactDOMHydrationRoot.prototype.unstable_scheduleHydration = scheduleHydration;
          function hydrateRoot(container2, initialChildren, options2) {
            if (!isValidContainer(container2)) {
              throw new Error("hydrateRoot(...): Target container is not a DOM element.");
            }
            warnIfReactDOMContainerInDEV(container2);
            {
              if (initialChildren === void 0) {
                error("Must provide initial children as second argument to hydrateRoot. Example usage: hydrateRoot(domContainer, <App />)");
              }
            }
            var hydrationCallbacks = options2 != null ? options2 : null;
            var mutableSources = options2 != null && options2.hydratedSources || null;
            var isStrictMode = false;
            var concurrentUpdatesByDefaultOverride = false;
            var identifierPrefix = "";
            var onRecoverableError = defaultOnRecoverableError;
            if (options2 !== null && options2 !== void 0) {
              if (options2.unstable_strictMode === true) {
                isStrictMode = true;
              }
              if (options2.identifierPrefix !== void 0) {
                identifierPrefix = options2.identifierPrefix;
              }
              if (options2.onRecoverableError !== void 0) {
                onRecoverableError = options2.onRecoverableError;
              }
            }
            var root3 = createHydrationContainer(initialChildren, null, container2, ConcurrentRoot, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError);
            markContainerAsRoot(root3.current, container2);
            listenToAllSupportedEvents(container2);
            if (mutableSources) {
              for (var i3 = 0; i3 < mutableSources.length; i3++) {
                var mutableSource = mutableSources[i3];
                registerMutableSourceForHydration(root3, mutableSource);
              }
            }
            return new ReactDOMHydrationRoot(root3);
          }
          function isValidContainer(node) {
            return !!(node && (node.nodeType === ELEMENT_NODE || node.nodeType === DOCUMENT_NODE || node.nodeType === DOCUMENT_FRAGMENT_NODE || !disableCommentsAsDOMContainers));
          }
          function isValidContainerLegacy(node) {
            return !!(node && (node.nodeType === ELEMENT_NODE || node.nodeType === DOCUMENT_NODE || node.nodeType === DOCUMENT_FRAGMENT_NODE || node.nodeType === COMMENT_NODE && node.nodeValue === " react-mount-point-unstable "));
          }
          function warnIfReactDOMContainerInDEV(container2) {
            {
              if (container2.nodeType === ELEMENT_NODE && container2.tagName && container2.tagName.toUpperCase() === "BODY") {
                error("createRoot(): Creating roots directly with document.body is discouraged, since its children are often manipulated by third-party scripts and browser extensions. This may lead to subtle reconciliation issues. Try using a container element created for your app.");
              }
              if (isContainerMarkedAsRoot(container2)) {
                if (container2._reactRootContainer) {
                  error("You are calling ReactDOMClient.createRoot() on a container that was previously passed to ReactDOM.render(). This is not supported.");
                } else {
                  error("You are calling ReactDOMClient.createRoot() on a container that has already been passed to createRoot() before. Instead, call root.render() on the existing root instead if you want to update it.");
                }
              }
            }
          }
          var ReactCurrentOwner$3 = ReactSharedInternals.ReactCurrentOwner;
          var topLevelUpdateWarnings;
          {
            topLevelUpdateWarnings = function(container2) {
              if (container2._reactRootContainer && container2.nodeType !== COMMENT_NODE) {
                var hostInstance = findHostInstanceWithNoPortals(container2._reactRootContainer.current);
                if (hostInstance) {
                  if (hostInstance.parentNode !== container2) {
                    error("render(...): It looks like the React-rendered content of this container was removed without using React. This is not supported and will cause errors. Instead, call ReactDOM.unmountComponentAtNode to empty a container.");
                  }
                }
              }
              var isRootRenderedBySomeReact = !!container2._reactRootContainer;
              var rootEl = getReactRootElementInContainer(container2);
              var hasNonRootReactChild = !!(rootEl && getInstanceFromNode(rootEl));
              if (hasNonRootReactChild && !isRootRenderedBySomeReact) {
                error("render(...): Replacing React-rendered children with a new root component. If you intended to update the children of this node, you should instead have the existing children update their state and render the new components instead of calling ReactDOM.render.");
              }
              if (container2.nodeType === ELEMENT_NODE && container2.tagName && container2.tagName.toUpperCase() === "BODY") {
                error("render(): Rendering components directly into document.body is discouraged, since its children are often manipulated by third-party scripts and browser extensions. This may lead to subtle reconciliation issues. Try rendering into a container element created for your app.");
              }
            };
          }
          function getReactRootElementInContainer(container2) {
            if (!container2) {
              return null;
            }
            if (container2.nodeType === DOCUMENT_NODE) {
              return container2.documentElement;
            } else {
              return container2.firstChild;
            }
          }
          function noopOnRecoverableError() {
          }
          function legacyCreateRootFromDOMContainer(container2, initialChildren, parentComponent, callback, isHydrationContainer) {
            if (isHydrationContainer) {
              if (typeof callback === "function") {
                var originalCallback = callback;
                callback = function() {
                  var instance = getPublicRootInstance(root3);
                  originalCallback.call(instance);
                };
              }
              var root3 = createHydrationContainer(initialChildren, callback, container2, LegacyRoot, null, false, false, "", noopOnRecoverableError);
              container2._reactRootContainer = root3;
              markContainerAsRoot(root3.current, container2);
              var rootContainerElement = container2.nodeType === COMMENT_NODE ? container2.parentNode : container2;
              listenToAllSupportedEvents(rootContainerElement);
              flushSync();
              return root3;
            } else {
              var rootSibling;
              while (rootSibling = container2.lastChild) {
                container2.removeChild(rootSibling);
              }
              if (typeof callback === "function") {
                var _originalCallback = callback;
                callback = function() {
                  var instance = getPublicRootInstance(_root);
                  _originalCallback.call(instance);
                };
              }
              var _root = createContainer(container2, LegacyRoot, null, false, false, "", noopOnRecoverableError);
              container2._reactRootContainer = _root;
              markContainerAsRoot(_root.current, container2);
              var _rootContainerElement = container2.nodeType === COMMENT_NODE ? container2.parentNode : container2;
              listenToAllSupportedEvents(_rootContainerElement);
              flushSync(function() {
                updateContainer(initialChildren, _root, parentComponent, callback);
              });
              return _root;
            }
          }
          function warnOnInvalidCallback$1(callback, callerName) {
            {
              if (callback !== null && typeof callback !== "function") {
                error("%s(...): Expected the last optional `callback` argument to be a function. Instead received: %s.", callerName, callback);
              }
            }
          }
          function legacyRenderSubtreeIntoContainer(parentComponent, children, container2, forceHydrate, callback) {
            {
              topLevelUpdateWarnings(container2);
              warnOnInvalidCallback$1(callback === void 0 ? null : callback, "render");
            }
            var maybeRoot = container2._reactRootContainer;
            var root3;
            if (!maybeRoot) {
              root3 = legacyCreateRootFromDOMContainer(container2, children, parentComponent, callback, forceHydrate);
            } else {
              root3 = maybeRoot;
              if (typeof callback === "function") {
                var originalCallback = callback;
                callback = function() {
                  var instance = getPublicRootInstance(root3);
                  originalCallback.call(instance);
                };
              }
              updateContainer(children, root3, parentComponent, callback);
            }
            return getPublicRootInstance(root3);
          }
          function findDOMNode(componentOrElement) {
            {
              var owner = ReactCurrentOwner$3.current;
              if (owner !== null && owner.stateNode !== null) {
                var warnedAboutRefsInRender = owner.stateNode._warnedAboutRefsInRender;
                if (!warnedAboutRefsInRender) {
                  error("%s is accessing findDOMNode inside its render(). render() should be a pure function of props and state. It should never access something that requires stale data from the previous render, such as refs. Move this logic to componentDidMount and componentDidUpdate instead.", getComponentNameFromType(owner.type) || "A component");
                }
                owner.stateNode._warnedAboutRefsInRender = true;
              }
            }
            if (componentOrElement == null) {
              return null;
            }
            if (componentOrElement.nodeType === ELEMENT_NODE) {
              return componentOrElement;
            }
            {
              return findHostInstanceWithWarning(componentOrElement, "findDOMNode");
            }
          }
          function hydrate(element, container2, callback) {
            {
              error("ReactDOM.hydrate is no longer supported in React 18. Use hydrateRoot instead. Until you switch to the new API, your app will behave as if it's running React 17. Learn more: https://reactjs.org/link/switch-to-createroot");
            }
            if (!isValidContainerLegacy(container2)) {
              throw new Error("Target container is not a DOM element.");
            }
            {
              var isModernRoot = isContainerMarkedAsRoot(container2) && container2._reactRootContainer === void 0;
              if (isModernRoot) {
                error("You are calling ReactDOM.hydrate() on a container that was previously passed to ReactDOMClient.createRoot(). This is not supported. Did you mean to call hydrateRoot(container, element)?");
              }
            }
            return legacyRenderSubtreeIntoContainer(null, element, container2, true, callback);
          }
          function render(element, container2, callback) {
            {
              error("ReactDOM.render is no longer supported in React 18. Use createRoot instead. Until you switch to the new API, your app will behave as if it's running React 17. Learn more: https://reactjs.org/link/switch-to-createroot");
            }
            if (!isValidContainerLegacy(container2)) {
              throw new Error("Target container is not a DOM element.");
            }
            {
              var isModernRoot = isContainerMarkedAsRoot(container2) && container2._reactRootContainer === void 0;
              if (isModernRoot) {
                error("You are calling ReactDOM.render() on a container that was previously passed to ReactDOMClient.createRoot(). This is not supported. Did you mean to call root.render(element)?");
              }
            }
            return legacyRenderSubtreeIntoContainer(null, element, container2, false, callback);
          }
          function unstable_renderSubtreeIntoContainer(parentComponent, element, containerNode, callback) {
            {
              error("ReactDOM.unstable_renderSubtreeIntoContainer() is no longer supported in React 18. Consider using a portal instead. Until you switch to the createRoot API, your app will behave as if it's running React 17. Learn more: https://reactjs.org/link/switch-to-createroot");
            }
            if (!isValidContainerLegacy(containerNode)) {
              throw new Error("Target container is not a DOM element.");
            }
            if (parentComponent == null || !has(parentComponent)) {
              throw new Error("parentComponent must be a valid React Component");
            }
            return legacyRenderSubtreeIntoContainer(parentComponent, element, containerNode, false, callback);
          }
          function unmountComponentAtNode(container2) {
            if (!isValidContainerLegacy(container2)) {
              throw new Error("unmountComponentAtNode(...): Target container is not a DOM element.");
            }
            {
              var isModernRoot = isContainerMarkedAsRoot(container2) && container2._reactRootContainer === void 0;
              if (isModernRoot) {
                error("You are calling ReactDOM.unmountComponentAtNode() on a container that was previously passed to ReactDOMClient.createRoot(). This is not supported. Did you mean to call root.unmount()?");
              }
            }
            if (container2._reactRootContainer) {
              {
                var rootEl = getReactRootElementInContainer(container2);
                var renderedByDifferentReact = rootEl && !getInstanceFromNode(rootEl);
                if (renderedByDifferentReact) {
                  error("unmountComponentAtNode(): The node you're attempting to unmount was rendered by another copy of React.");
                }
              }
              flushSync(function() {
                legacyRenderSubtreeIntoContainer(null, null, container2, false, function() {
                  container2._reactRootContainer = null;
                  unmarkContainerAsRoot(container2);
                });
              });
              return true;
            } else {
              {
                var _rootEl = getReactRootElementInContainer(container2);
                var hasNonRootReactChild = !!(_rootEl && getInstanceFromNode(_rootEl));
                var isContainerReactRoot = container2.nodeType === ELEMENT_NODE && isValidContainerLegacy(container2.parentNode) && !!container2.parentNode._reactRootContainer;
                if (hasNonRootReactChild) {
                  error("unmountComponentAtNode(): The node you're attempting to unmount was rendered by React and is not a top-level container. %s", isContainerReactRoot ? "You may have accidentally passed in a React root node instead of its container." : "Instead, have the parent component update its state and rerender in order to remove this component.");
                }
              }
              return false;
            }
          }
          setAttemptSynchronousHydration(attemptSynchronousHydration$1);
          setAttemptContinuousHydration(attemptContinuousHydration$1);
          setAttemptHydrationAtCurrentPriority(attemptHydrationAtCurrentPriority$1);
          setGetCurrentUpdatePriority(getCurrentUpdatePriority);
          setAttemptHydrationAtPriority(runWithPriority);
          {
            if (typeof Map !== "function" || Map.prototype == null || typeof Map.prototype.forEach !== "function" || typeof Set !== "function" || Set.prototype == null || typeof Set.prototype.clear !== "function" || typeof Set.prototype.forEach !== "function") {
              error("React depends on Map and Set built-in types. Make sure that you load a polyfill in older browsers. https://reactjs.org/link/react-polyfills");
            }
          }
          setRestoreImplementation(restoreControlledState$3);
          setBatchingImplementation(batchedUpdates$1, discreteUpdates, flushSync);
          function createPortal$1(children, container2) {
            var key = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : null;
            if (!isValidContainer(container2)) {
              throw new Error("Target container is not a DOM element.");
            }
            return createPortal(children, container2, null, key);
          }
          function renderSubtreeIntoContainer(parentComponent, element, containerNode, callback) {
            return unstable_renderSubtreeIntoContainer(parentComponent, element, containerNode, callback);
          }
          var Internals = {
            usingClientEntryPoint: false,
            Events: [getInstanceFromNode, getNodeFromInstance, getFiberCurrentPropsFromNode, enqueueStateRestore, restoreStateIfNeeded, batchedUpdates$1]
          };
          function createRoot$1(container2, options2) {
            {
              if (!Internals.usingClientEntryPoint) {
                error('You are importing createRoot from "react-dom" which is not supported. You should instead import it from "react-dom/client".');
              }
            }
            return createRoot2(container2, options2);
          }
          function hydrateRoot$1(container2, initialChildren, options2) {
            {
              if (!Internals.usingClientEntryPoint) {
                error('You are importing hydrateRoot from "react-dom" which is not supported. You should instead import it from "react-dom/client".');
              }
            }
            return hydrateRoot(container2, initialChildren, options2);
          }
          function flushSync$1(fn) {
            {
              if (isAlreadyRendering()) {
                error("flushSync was called from inside a lifecycle method. React cannot flush when React is already rendering. Consider moving this call to a scheduler task or micro task.");
              }
            }
            return flushSync(fn);
          }
          var foundDevTools = injectIntoDevTools({
            findFiberByHostInstance: getClosestInstanceFromNode,
            bundleType: 1,
            version: ReactVersion,
            rendererPackageName: "react-dom"
          });
          {
            if (!foundDevTools && canUseDOM && window.top === window.self) {
              if (navigator.userAgent.indexOf("Chrome") > -1 && navigator.userAgent.indexOf("Edge") === -1 || navigator.userAgent.indexOf("Firefox") > -1) {
                var protocol = window.location.protocol;
                if (/^(https?|file):$/.test(protocol)) {
                  console.info("%cDownload the React DevTools for a better development experience: https://reactjs.org/link/react-devtools" + (protocol === "file:" ? "\nYou might need to use a local HTTP server (instead of file://): https://reactjs.org/link/react-devtools-faq" : ""), "font-weight:bold");
                }
              }
            }
          }
          exports.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = Internals;
          exports.createPortal = createPortal$1;
          exports.createRoot = createRoot$1;
          exports.findDOMNode = findDOMNode;
          exports.flushSync = flushSync$1;
          exports.hydrate = hydrate;
          exports.hydrateRoot = hydrateRoot$1;
          exports.render = render;
          exports.unmountComponentAtNode = unmountComponentAtNode;
          exports.unstable_batchedUpdates = batchedUpdates$1;
          exports.unstable_renderSubtreeIntoContainer = renderSubtreeIntoContainer;
          exports.version = ReactVersion;
          if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop === "function") {
            __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop(new Error());
          }
        })();
      }
    }
  });

  // node_modules/react-dom/index.js
  var require_react_dom = __commonJS({
    "node_modules/react-dom/index.js"(exports, module) {
      "use strict";
      if (false) {
        checkDCE();
        module.exports = null;
      } else {
        module.exports = require_react_dom_development();
      }
    }
  });

  // node_modules/react-remove-scroll/node_modules/tslib/tslib.js
  var require_tslib = __commonJS({
    "node_modules/react-remove-scroll/node_modules/tslib/tslib.js"(exports, module) {
      var __extends3;
      var __assign4;
      var __rest3;
      var __decorate3;
      var __param3;
      var __metadata3;
      var __awaiter3;
      var __generator3;
      var __exportStar3;
      var __values3;
      var __read3;
      var __spread3;
      var __spreadArrays3;
      var __spreadArray3;
      var __await3;
      var __asyncGenerator3;
      var __asyncDelegator3;
      var __asyncValues3;
      var __makeTemplateObject3;
      var __importStar3;
      var __importDefault3;
      var __classPrivateFieldGet3;
      var __classPrivateFieldSet3;
      var __classPrivateFieldIn3;
      var __createBinding3;
      (function(factory) {
        var root2 = typeof global === "object" ? global : typeof self === "object" ? self : typeof this === "object" ? this : {};
        if (typeof define === "function" && define.amd) {
          define("tslib", ["exports"], function(exports2) {
            factory(createExporter(root2, createExporter(exports2)));
          });
        } else if (typeof module === "object" && typeof module.exports === "object") {
          factory(createExporter(root2, createExporter(module.exports)));
        } else {
          factory(createExporter(root2));
        }
        function createExporter(exports2, previous) {
          if (exports2 !== root2) {
            if (typeof Object.create === "function") {
              Object.defineProperty(exports2, "__esModule", { value: true });
            } else {
              exports2.__esModule = true;
            }
          }
          return function(id, v5) {
            return exports2[id] = previous ? previous(id, v5) : v5;
          };
        }
      })(function(exporter) {
        var extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d3, b3) {
          d3.__proto__ = b3;
        } || function(d3, b3) {
          for (var p5 in b3)
            if (Object.prototype.hasOwnProperty.call(b3, p5))
              d3[p5] = b3[p5];
        };
        __extends3 = function(d3, b3) {
          if (typeof b3 !== "function" && b3 !== null)
            throw new TypeError("Class extends value " + String(b3) + " is not a constructor or null");
          extendStatics(d3, b3);
          function __() {
            this.constructor = d3;
          }
          d3.prototype = b3 === null ? Object.create(b3) : (__.prototype = b3.prototype, new __());
        };
        __assign4 = Object.assign || function(t4) {
          for (var s5, i3 = 1, n4 = arguments.length; i3 < n4; i3++) {
            s5 = arguments[i3];
            for (var p5 in s5)
              if (Object.prototype.hasOwnProperty.call(s5, p5))
                t4[p5] = s5[p5];
          }
          return t4;
        };
        __rest3 = function(s5, e4) {
          var t4 = {};
          for (var p5 in s5)
            if (Object.prototype.hasOwnProperty.call(s5, p5) && e4.indexOf(p5) < 0)
              t4[p5] = s5[p5];
          if (s5 != null && typeof Object.getOwnPropertySymbols === "function")
            for (var i3 = 0, p5 = Object.getOwnPropertySymbols(s5); i3 < p5.length; i3++) {
              if (e4.indexOf(p5[i3]) < 0 && Object.prototype.propertyIsEnumerable.call(s5, p5[i3]))
                t4[p5[i3]] = s5[p5[i3]];
            }
          return t4;
        };
        __decorate3 = function(decorators, target, key, desc) {
          var c4 = arguments.length, r3 = c4 < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d3;
          if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
            r3 = Reflect.decorate(decorators, target, key, desc);
          else
            for (var i3 = decorators.length - 1; i3 >= 0; i3--)
              if (d3 = decorators[i3])
                r3 = (c4 < 3 ? d3(r3) : c4 > 3 ? d3(target, key, r3) : d3(target, key)) || r3;
          return c4 > 3 && r3 && Object.defineProperty(target, key, r3), r3;
        };
        __param3 = function(paramIndex, decorator) {
          return function(target, key) {
            decorator(target, key, paramIndex);
          };
        };
        __metadata3 = function(metadataKey, metadataValue) {
          if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
            return Reflect.metadata(metadataKey, metadataValue);
        };
        __awaiter3 = function(thisArg, _arguments, P3, generator) {
          function adopt(value) {
            return value instanceof P3 ? value : new P3(function(resolve) {
              resolve(value);
            });
          }
          return new (P3 || (P3 = Promise))(function(resolve, reject) {
            function fulfilled(value) {
              try {
                step(generator.next(value));
              } catch (e4) {
                reject(e4);
              }
            }
            function rejected(value) {
              try {
                step(generator["throw"](value));
              } catch (e4) {
                reject(e4);
              }
            }
            function step(result) {
              result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
            }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
          });
        };
        __generator3 = function(thisArg, body) {
          var _3 = { label: 0, sent: function() {
            if (t4[0] & 1)
              throw t4[1];
            return t4[1];
          }, trys: [], ops: [] }, f3, y4, t4, g3;
          return g3 = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g3[Symbol.iterator] = function() {
            return this;
          }), g3;
          function verb(n4) {
            return function(v5) {
              return step([n4, v5]);
            };
          }
          function step(op) {
            if (f3)
              throw new TypeError("Generator is already executing.");
            while (_3)
              try {
                if (f3 = 1, y4 && (t4 = op[0] & 2 ? y4["return"] : op[0] ? y4["throw"] || ((t4 = y4["return"]) && t4.call(y4), 0) : y4.next) && !(t4 = t4.call(y4, op[1])).done)
                  return t4;
                if (y4 = 0, t4)
                  op = [op[0] & 2, t4.value];
                switch (op[0]) {
                  case 0:
                  case 1:
                    t4 = op;
                    break;
                  case 4:
                    _3.label++;
                    return { value: op[1], done: false };
                  case 5:
                    _3.label++;
                    y4 = op[1];
                    op = [0];
                    continue;
                  case 7:
                    op = _3.ops.pop();
                    _3.trys.pop();
                    continue;
                  default:
                    if (!(t4 = _3.trys, t4 = t4.length > 0 && t4[t4.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                      _3 = 0;
                      continue;
                    }
                    if (op[0] === 3 && (!t4 || op[1] > t4[0] && op[1] < t4[3])) {
                      _3.label = op[1];
                      break;
                    }
                    if (op[0] === 6 && _3.label < t4[1]) {
                      _3.label = t4[1];
                      t4 = op;
                      break;
                    }
                    if (t4 && _3.label < t4[2]) {
                      _3.label = t4[2];
                      _3.ops.push(op);
                      break;
                    }
                    if (t4[2])
                      _3.ops.pop();
                    _3.trys.pop();
                    continue;
                }
                op = body.call(thisArg, _3);
              } catch (e4) {
                op = [6, e4];
                y4 = 0;
              } finally {
                f3 = t4 = 0;
              }
            if (op[0] & 5)
              throw op[1];
            return { value: op[0] ? op[1] : void 0, done: true };
          }
        };
        __exportStar3 = function(m3, o3) {
          for (var p5 in m3)
            if (p5 !== "default" && !Object.prototype.hasOwnProperty.call(o3, p5))
              __createBinding3(o3, m3, p5);
        };
        __createBinding3 = Object.create ? function(o3, m3, k4, k22) {
          if (k22 === void 0)
            k22 = k4;
          var desc = Object.getOwnPropertyDescriptor(m3, k4);
          if (!desc || ("get" in desc ? !m3.__esModule : desc.writable || desc.configurable)) {
            desc = { enumerable: true, get: function() {
              return m3[k4];
            } };
          }
          Object.defineProperty(o3, k22, desc);
        } : function(o3, m3, k4, k22) {
          if (k22 === void 0)
            k22 = k4;
          o3[k22] = m3[k4];
        };
        __values3 = function(o3) {
          var s5 = typeof Symbol === "function" && Symbol.iterator, m3 = s5 && o3[s5], i3 = 0;
          if (m3)
            return m3.call(o3);
          if (o3 && typeof o3.length === "number")
            return {
              next: function() {
                if (o3 && i3 >= o3.length)
                  o3 = void 0;
                return { value: o3 && o3[i3++], done: !o3 };
              }
            };
          throw new TypeError(s5 ? "Object is not iterable." : "Symbol.iterator is not defined.");
        };
        __read3 = function(o3, n4) {
          var m3 = typeof Symbol === "function" && o3[Symbol.iterator];
          if (!m3)
            return o3;
          var i3 = m3.call(o3), r3, ar = [], e4;
          try {
            while ((n4 === void 0 || n4-- > 0) && !(r3 = i3.next()).done)
              ar.push(r3.value);
          } catch (error) {
            e4 = { error };
          } finally {
            try {
              if (r3 && !r3.done && (m3 = i3["return"]))
                m3.call(i3);
            } finally {
              if (e4)
                throw e4.error;
            }
          }
          return ar;
        };
        __spread3 = function() {
          for (var ar = [], i3 = 0; i3 < arguments.length; i3++)
            ar = ar.concat(__read3(arguments[i3]));
          return ar;
        };
        __spreadArrays3 = function() {
          for (var s5 = 0, i3 = 0, il = arguments.length; i3 < il; i3++)
            s5 += arguments[i3].length;
          for (var r3 = Array(s5), k4 = 0, i3 = 0; i3 < il; i3++)
            for (var a3 = arguments[i3], j3 = 0, jl = a3.length; j3 < jl; j3++, k4++)
              r3[k4] = a3[j3];
          return r3;
        };
        __spreadArray3 = function(to, from, pack) {
          if (pack || arguments.length === 2)
            for (var i3 = 0, l4 = from.length, ar; i3 < l4; i3++) {
              if (ar || !(i3 in from)) {
                if (!ar)
                  ar = Array.prototype.slice.call(from, 0, i3);
                ar[i3] = from[i3];
              }
            }
          return to.concat(ar || Array.prototype.slice.call(from));
        };
        __await3 = function(v5) {
          return this instanceof __await3 ? (this.v = v5, this) : new __await3(v5);
        };
        __asyncGenerator3 = function(thisArg, _arguments, generator) {
          if (!Symbol.asyncIterator)
            throw new TypeError("Symbol.asyncIterator is not defined.");
          var g3 = generator.apply(thisArg, _arguments || []), i3, q4 = [];
          return i3 = {}, verb("next"), verb("throw"), verb("return"), i3[Symbol.asyncIterator] = function() {
            return this;
          }, i3;
          function verb(n4) {
            if (g3[n4])
              i3[n4] = function(v5) {
                return new Promise(function(a3, b3) {
                  q4.push([n4, v5, a3, b3]) > 1 || resume(n4, v5);
                });
              };
          }
          function resume(n4, v5) {
            try {
              step(g3[n4](v5));
            } catch (e4) {
              settle(q4[0][3], e4);
            }
          }
          function step(r3) {
            r3.value instanceof __await3 ? Promise.resolve(r3.value.v).then(fulfill, reject) : settle(q4[0][2], r3);
          }
          function fulfill(value) {
            resume("next", value);
          }
          function reject(value) {
            resume("throw", value);
          }
          function settle(f3, v5) {
            if (f3(v5), q4.shift(), q4.length)
              resume(q4[0][0], q4[0][1]);
          }
        };
        __asyncDelegator3 = function(o3) {
          var i3, p5;
          return i3 = {}, verb("next"), verb("throw", function(e4) {
            throw e4;
          }), verb("return"), i3[Symbol.iterator] = function() {
            return this;
          }, i3;
          function verb(n4, f3) {
            i3[n4] = o3[n4] ? function(v5) {
              return (p5 = !p5) ? { value: __await3(o3[n4](v5)), done: n4 === "return" } : f3 ? f3(v5) : v5;
            } : f3;
          }
        };
        __asyncValues3 = function(o3) {
          if (!Symbol.asyncIterator)
            throw new TypeError("Symbol.asyncIterator is not defined.");
          var m3 = o3[Symbol.asyncIterator], i3;
          return m3 ? m3.call(o3) : (o3 = typeof __values3 === "function" ? __values3(o3) : o3[Symbol.iterator](), i3 = {}, verb("next"), verb("throw"), verb("return"), i3[Symbol.asyncIterator] = function() {
            return this;
          }, i3);
          function verb(n4) {
            i3[n4] = o3[n4] && function(v5) {
              return new Promise(function(resolve, reject) {
                v5 = o3[n4](v5), settle(resolve, reject, v5.done, v5.value);
              });
            };
          }
          function settle(resolve, reject, d3, v5) {
            Promise.resolve(v5).then(function(v6) {
              resolve({ value: v6, done: d3 });
            }, reject);
          }
        };
        __makeTemplateObject3 = function(cooked, raw) {
          if (Object.defineProperty) {
            Object.defineProperty(cooked, "raw", { value: raw });
          } else {
            cooked.raw = raw;
          }
          return cooked;
        };
        var __setModuleDefault = Object.create ? function(o3, v5) {
          Object.defineProperty(o3, "default", { enumerable: true, value: v5 });
        } : function(o3, v5) {
          o3["default"] = v5;
        };
        __importStar3 = function(mod) {
          if (mod && mod.__esModule)
            return mod;
          var result = {};
          if (mod != null) {
            for (var k4 in mod)
              if (k4 !== "default" && Object.prototype.hasOwnProperty.call(mod, k4))
                __createBinding3(result, mod, k4);
          }
          __setModuleDefault(result, mod);
          return result;
        };
        __importDefault3 = function(mod) {
          return mod && mod.__esModule ? mod : { "default": mod };
        };
        __classPrivateFieldGet3 = function(receiver, state, kind, f3) {
          if (kind === "a" && !f3)
            throw new TypeError("Private accessor was defined without a getter");
          if (typeof state === "function" ? receiver !== state || !f3 : !state.has(receiver))
            throw new TypeError("Cannot read private member from an object whose class did not declare it");
          return kind === "m" ? f3 : kind === "a" ? f3.call(receiver) : f3 ? f3.value : state.get(receiver);
        };
        __classPrivateFieldSet3 = function(receiver, state, value, kind, f3) {
          if (kind === "m")
            throw new TypeError("Private method is not writable");
          if (kind === "a" && !f3)
            throw new TypeError("Private accessor was defined without a setter");
          if (typeof state === "function" ? receiver !== state || !f3 : !state.has(receiver))
            throw new TypeError("Cannot write private member to an object whose class did not declare it");
          return kind === "a" ? f3.call(receiver, value) : f3 ? f3.value = value : state.set(receiver, value), value;
        };
        __classPrivateFieldIn3 = function(state, receiver) {
          if (receiver === null || typeof receiver !== "object" && typeof receiver !== "function")
            throw new TypeError("Cannot use 'in' operator on non-object");
          return typeof state === "function" ? receiver === state : state.has(receiver);
        };
        exporter("__extends", __extends3);
        exporter("__assign", __assign4);
        exporter("__rest", __rest3);
        exporter("__decorate", __decorate3);
        exporter("__param", __param3);
        exporter("__metadata", __metadata3);
        exporter("__awaiter", __awaiter3);
        exporter("__generator", __generator3);
        exporter("__exportStar", __exportStar3);
        exporter("__createBinding", __createBinding3);
        exporter("__values", __values3);
        exporter("__read", __read3);
        exporter("__spread", __spread3);
        exporter("__spreadArrays", __spreadArrays3);
        exporter("__spreadArray", __spreadArray3);
        exporter("__await", __await3);
        exporter("__asyncGenerator", __asyncGenerator3);
        exporter("__asyncDelegator", __asyncDelegator3);
        exporter("__asyncValues", __asyncValues3);
        exporter("__makeTemplateObject", __makeTemplateObject3);
        exporter("__importStar", __importStar3);
        exporter("__importDefault", __importDefault3);
        exporter("__classPrivateFieldGet", __classPrivateFieldGet3);
        exporter("__classPrivateFieldSet", __classPrivateFieldSet3);
        exporter("__classPrivateFieldIn", __classPrivateFieldIn3);
      });
    }
  });

  // node_modules/use-sidecar/node_modules/tslib/tslib.js
  var require_tslib2 = __commonJS({
    "node_modules/use-sidecar/node_modules/tslib/tslib.js"(exports, module) {
      var __extends3;
      var __assign4;
      var __rest3;
      var __decorate3;
      var __param3;
      var __metadata3;
      var __awaiter3;
      var __generator3;
      var __exportStar3;
      var __values3;
      var __read3;
      var __spread3;
      var __spreadArrays3;
      var __spreadArray3;
      var __await3;
      var __asyncGenerator3;
      var __asyncDelegator3;
      var __asyncValues3;
      var __makeTemplateObject3;
      var __importStar3;
      var __importDefault3;
      var __classPrivateFieldGet3;
      var __classPrivateFieldSet3;
      var __classPrivateFieldIn3;
      var __createBinding3;
      (function(factory) {
        var root2 = typeof global === "object" ? global : typeof self === "object" ? self : typeof this === "object" ? this : {};
        if (typeof define === "function" && define.amd) {
          define("tslib", ["exports"], function(exports2) {
            factory(createExporter(root2, createExporter(exports2)));
          });
        } else if (typeof module === "object" && typeof module.exports === "object") {
          factory(createExporter(root2, createExporter(module.exports)));
        } else {
          factory(createExporter(root2));
        }
        function createExporter(exports2, previous) {
          if (exports2 !== root2) {
            if (typeof Object.create === "function") {
              Object.defineProperty(exports2, "__esModule", { value: true });
            } else {
              exports2.__esModule = true;
            }
          }
          return function(id, v5) {
            return exports2[id] = previous ? previous(id, v5) : v5;
          };
        }
      })(function(exporter) {
        var extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d3, b3) {
          d3.__proto__ = b3;
        } || function(d3, b3) {
          for (var p5 in b3)
            if (Object.prototype.hasOwnProperty.call(b3, p5))
              d3[p5] = b3[p5];
        };
        __extends3 = function(d3, b3) {
          if (typeof b3 !== "function" && b3 !== null)
            throw new TypeError("Class extends value " + String(b3) + " is not a constructor or null");
          extendStatics(d3, b3);
          function __() {
            this.constructor = d3;
          }
          d3.prototype = b3 === null ? Object.create(b3) : (__.prototype = b3.prototype, new __());
        };
        __assign4 = Object.assign || function(t4) {
          for (var s5, i3 = 1, n4 = arguments.length; i3 < n4; i3++) {
            s5 = arguments[i3];
            for (var p5 in s5)
              if (Object.prototype.hasOwnProperty.call(s5, p5))
                t4[p5] = s5[p5];
          }
          return t4;
        };
        __rest3 = function(s5, e4) {
          var t4 = {};
          for (var p5 in s5)
            if (Object.prototype.hasOwnProperty.call(s5, p5) && e4.indexOf(p5) < 0)
              t4[p5] = s5[p5];
          if (s5 != null && typeof Object.getOwnPropertySymbols === "function")
            for (var i3 = 0, p5 = Object.getOwnPropertySymbols(s5); i3 < p5.length; i3++) {
              if (e4.indexOf(p5[i3]) < 0 && Object.prototype.propertyIsEnumerable.call(s5, p5[i3]))
                t4[p5[i3]] = s5[p5[i3]];
            }
          return t4;
        };
        __decorate3 = function(decorators, target, key, desc) {
          var c4 = arguments.length, r3 = c4 < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d3;
          if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
            r3 = Reflect.decorate(decorators, target, key, desc);
          else
            for (var i3 = decorators.length - 1; i3 >= 0; i3--)
              if (d3 = decorators[i3])
                r3 = (c4 < 3 ? d3(r3) : c4 > 3 ? d3(target, key, r3) : d3(target, key)) || r3;
          return c4 > 3 && r3 && Object.defineProperty(target, key, r3), r3;
        };
        __param3 = function(paramIndex, decorator) {
          return function(target, key) {
            decorator(target, key, paramIndex);
          };
        };
        __metadata3 = function(metadataKey, metadataValue) {
          if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
            return Reflect.metadata(metadataKey, metadataValue);
        };
        __awaiter3 = function(thisArg, _arguments, P3, generator) {
          function adopt(value) {
            return value instanceof P3 ? value : new P3(function(resolve) {
              resolve(value);
            });
          }
          return new (P3 || (P3 = Promise))(function(resolve, reject) {
            function fulfilled(value) {
              try {
                step(generator.next(value));
              } catch (e4) {
                reject(e4);
              }
            }
            function rejected(value) {
              try {
                step(generator["throw"](value));
              } catch (e4) {
                reject(e4);
              }
            }
            function step(result) {
              result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
            }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
          });
        };
        __generator3 = function(thisArg, body) {
          var _3 = { label: 0, sent: function() {
            if (t4[0] & 1)
              throw t4[1];
            return t4[1];
          }, trys: [], ops: [] }, f3, y4, t4, g3;
          return g3 = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g3[Symbol.iterator] = function() {
            return this;
          }), g3;
          function verb(n4) {
            return function(v5) {
              return step([n4, v5]);
            };
          }
          function step(op) {
            if (f3)
              throw new TypeError("Generator is already executing.");
            while (_3)
              try {
                if (f3 = 1, y4 && (t4 = op[0] & 2 ? y4["return"] : op[0] ? y4["throw"] || ((t4 = y4["return"]) && t4.call(y4), 0) : y4.next) && !(t4 = t4.call(y4, op[1])).done)
                  return t4;
                if (y4 = 0, t4)
                  op = [op[0] & 2, t4.value];
                switch (op[0]) {
                  case 0:
                  case 1:
                    t4 = op;
                    break;
                  case 4:
                    _3.label++;
                    return { value: op[1], done: false };
                  case 5:
                    _3.label++;
                    y4 = op[1];
                    op = [0];
                    continue;
                  case 7:
                    op = _3.ops.pop();
                    _3.trys.pop();
                    continue;
                  default:
                    if (!(t4 = _3.trys, t4 = t4.length > 0 && t4[t4.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                      _3 = 0;
                      continue;
                    }
                    if (op[0] === 3 && (!t4 || op[1] > t4[0] && op[1] < t4[3])) {
                      _3.label = op[1];
                      break;
                    }
                    if (op[0] === 6 && _3.label < t4[1]) {
                      _3.label = t4[1];
                      t4 = op;
                      break;
                    }
                    if (t4 && _3.label < t4[2]) {
                      _3.label = t4[2];
                      _3.ops.push(op);
                      break;
                    }
                    if (t4[2])
                      _3.ops.pop();
                    _3.trys.pop();
                    continue;
                }
                op = body.call(thisArg, _3);
              } catch (e4) {
                op = [6, e4];
                y4 = 0;
              } finally {
                f3 = t4 = 0;
              }
            if (op[0] & 5)
              throw op[1];
            return { value: op[0] ? op[1] : void 0, done: true };
          }
        };
        __exportStar3 = function(m3, o3) {
          for (var p5 in m3)
            if (p5 !== "default" && !Object.prototype.hasOwnProperty.call(o3, p5))
              __createBinding3(o3, m3, p5);
        };
        __createBinding3 = Object.create ? function(o3, m3, k4, k22) {
          if (k22 === void 0)
            k22 = k4;
          var desc = Object.getOwnPropertyDescriptor(m3, k4);
          if (!desc || ("get" in desc ? !m3.__esModule : desc.writable || desc.configurable)) {
            desc = { enumerable: true, get: function() {
              return m3[k4];
            } };
          }
          Object.defineProperty(o3, k22, desc);
        } : function(o3, m3, k4, k22) {
          if (k22 === void 0)
            k22 = k4;
          o3[k22] = m3[k4];
        };
        __values3 = function(o3) {
          var s5 = typeof Symbol === "function" && Symbol.iterator, m3 = s5 && o3[s5], i3 = 0;
          if (m3)
            return m3.call(o3);
          if (o3 && typeof o3.length === "number")
            return {
              next: function() {
                if (o3 && i3 >= o3.length)
                  o3 = void 0;
                return { value: o3 && o3[i3++], done: !o3 };
              }
            };
          throw new TypeError(s5 ? "Object is not iterable." : "Symbol.iterator is not defined.");
        };
        __read3 = function(o3, n4) {
          var m3 = typeof Symbol === "function" && o3[Symbol.iterator];
          if (!m3)
            return o3;
          var i3 = m3.call(o3), r3, ar = [], e4;
          try {
            while ((n4 === void 0 || n4-- > 0) && !(r3 = i3.next()).done)
              ar.push(r3.value);
          } catch (error) {
            e4 = { error };
          } finally {
            try {
              if (r3 && !r3.done && (m3 = i3["return"]))
                m3.call(i3);
            } finally {
              if (e4)
                throw e4.error;
            }
          }
          return ar;
        };
        __spread3 = function() {
          for (var ar = [], i3 = 0; i3 < arguments.length; i3++)
            ar = ar.concat(__read3(arguments[i3]));
          return ar;
        };
        __spreadArrays3 = function() {
          for (var s5 = 0, i3 = 0, il = arguments.length; i3 < il; i3++)
            s5 += arguments[i3].length;
          for (var r3 = Array(s5), k4 = 0, i3 = 0; i3 < il; i3++)
            for (var a3 = arguments[i3], j3 = 0, jl = a3.length; j3 < jl; j3++, k4++)
              r3[k4] = a3[j3];
          return r3;
        };
        __spreadArray3 = function(to, from, pack) {
          if (pack || arguments.length === 2)
            for (var i3 = 0, l4 = from.length, ar; i3 < l4; i3++) {
              if (ar || !(i3 in from)) {
                if (!ar)
                  ar = Array.prototype.slice.call(from, 0, i3);
                ar[i3] = from[i3];
              }
            }
          return to.concat(ar || Array.prototype.slice.call(from));
        };
        __await3 = function(v5) {
          return this instanceof __await3 ? (this.v = v5, this) : new __await3(v5);
        };
        __asyncGenerator3 = function(thisArg, _arguments, generator) {
          if (!Symbol.asyncIterator)
            throw new TypeError("Symbol.asyncIterator is not defined.");
          var g3 = generator.apply(thisArg, _arguments || []), i3, q4 = [];
          return i3 = {}, verb("next"), verb("throw"), verb("return"), i3[Symbol.asyncIterator] = function() {
            return this;
          }, i3;
          function verb(n4) {
            if (g3[n4])
              i3[n4] = function(v5) {
                return new Promise(function(a3, b3) {
                  q4.push([n4, v5, a3, b3]) > 1 || resume(n4, v5);
                });
              };
          }
          function resume(n4, v5) {
            try {
              step(g3[n4](v5));
            } catch (e4) {
              settle(q4[0][3], e4);
            }
          }
          function step(r3) {
            r3.value instanceof __await3 ? Promise.resolve(r3.value.v).then(fulfill, reject) : settle(q4[0][2], r3);
          }
          function fulfill(value) {
            resume("next", value);
          }
          function reject(value) {
            resume("throw", value);
          }
          function settle(f3, v5) {
            if (f3(v5), q4.shift(), q4.length)
              resume(q4[0][0], q4[0][1]);
          }
        };
        __asyncDelegator3 = function(o3) {
          var i3, p5;
          return i3 = {}, verb("next"), verb("throw", function(e4) {
            throw e4;
          }), verb("return"), i3[Symbol.iterator] = function() {
            return this;
          }, i3;
          function verb(n4, f3) {
            i3[n4] = o3[n4] ? function(v5) {
              return (p5 = !p5) ? { value: __await3(o3[n4](v5)), done: n4 === "return" } : f3 ? f3(v5) : v5;
            } : f3;
          }
        };
        __asyncValues3 = function(o3) {
          if (!Symbol.asyncIterator)
            throw new TypeError("Symbol.asyncIterator is not defined.");
          var m3 = o3[Symbol.asyncIterator], i3;
          return m3 ? m3.call(o3) : (o3 = typeof __values3 === "function" ? __values3(o3) : o3[Symbol.iterator](), i3 = {}, verb("next"), verb("throw"), verb("return"), i3[Symbol.asyncIterator] = function() {
            return this;
          }, i3);
          function verb(n4) {
            i3[n4] = o3[n4] && function(v5) {
              return new Promise(function(resolve, reject) {
                v5 = o3[n4](v5), settle(resolve, reject, v5.done, v5.value);
              });
            };
          }
          function settle(resolve, reject, d3, v5) {
            Promise.resolve(v5).then(function(v6) {
              resolve({ value: v6, done: d3 });
            }, reject);
          }
        };
        __makeTemplateObject3 = function(cooked, raw) {
          if (Object.defineProperty) {
            Object.defineProperty(cooked, "raw", { value: raw });
          } else {
            cooked.raw = raw;
          }
          return cooked;
        };
        var __setModuleDefault = Object.create ? function(o3, v5) {
          Object.defineProperty(o3, "default", { enumerable: true, value: v5 });
        } : function(o3, v5) {
          o3["default"] = v5;
        };
        __importStar3 = function(mod) {
          if (mod && mod.__esModule)
            return mod;
          var result = {};
          if (mod != null) {
            for (var k4 in mod)
              if (k4 !== "default" && Object.prototype.hasOwnProperty.call(mod, k4))
                __createBinding3(result, mod, k4);
          }
          __setModuleDefault(result, mod);
          return result;
        };
        __importDefault3 = function(mod) {
          return mod && mod.__esModule ? mod : { "default": mod };
        };
        __classPrivateFieldGet3 = function(receiver, state, kind, f3) {
          if (kind === "a" && !f3)
            throw new TypeError("Private accessor was defined without a getter");
          if (typeof state === "function" ? receiver !== state || !f3 : !state.has(receiver))
            throw new TypeError("Cannot read private member from an object whose class did not declare it");
          return kind === "m" ? f3 : kind === "a" ? f3.call(receiver) : f3 ? f3.value : state.get(receiver);
        };
        __classPrivateFieldSet3 = function(receiver, state, value, kind, f3) {
          if (kind === "m")
            throw new TypeError("Private method is not writable");
          if (kind === "a" && !f3)
            throw new TypeError("Private accessor was defined without a setter");
          if (typeof state === "function" ? receiver !== state || !f3 : !state.has(receiver))
            throw new TypeError("Cannot write private member to an object whose class did not declare it");
          return kind === "a" ? f3.call(receiver, value) : f3 ? f3.value = value : state.set(receiver, value), value;
        };
        __classPrivateFieldIn3 = function(state, receiver) {
          if (receiver === null || typeof receiver !== "object" && typeof receiver !== "function")
            throw new TypeError("Cannot use 'in' operator on non-object");
          return typeof state === "function" ? receiver === state : state.has(receiver);
        };
        exporter("__extends", __extends3);
        exporter("__assign", __assign4);
        exporter("__rest", __rest3);
        exporter("__decorate", __decorate3);
        exporter("__param", __param3);
        exporter("__metadata", __metadata3);
        exporter("__awaiter", __awaiter3);
        exporter("__generator", __generator3);
        exporter("__exportStar", __exportStar3);
        exporter("__createBinding", __createBinding3);
        exporter("__values", __values3);
        exporter("__read", __read3);
        exporter("__spread", __spread3);
        exporter("__spreadArrays", __spreadArrays3);
        exporter("__spreadArray", __spreadArray3);
        exporter("__await", __await3);
        exporter("__asyncGenerator", __asyncGenerator3);
        exporter("__asyncDelegator", __asyncDelegator3);
        exporter("__asyncValues", __asyncValues3);
        exporter("__makeTemplateObject", __makeTemplateObject3);
        exporter("__importStar", __importStar3);
        exporter("__importDefault", __importDefault3);
        exporter("__classPrivateFieldGet", __classPrivateFieldGet3);
        exporter("__classPrivateFieldSet", __classPrivateFieldSet3);
        exporter("__classPrivateFieldIn", __classPrivateFieldIn3);
      });
    }
  });

  // node_modules/hls.js/dist/hls.js
  var require_hls = __commonJS({
    "node_modules/hls.js/dist/hls.js"(exports, module) {
      typeof window !== "undefined" && function webpackUniversalModuleDefinition(root2, factory) {
        if (typeof exports === "object" && typeof module === "object")
          module.exports = factory();
        else if (typeof define === "function" && define.amd)
          define([], factory);
        else if (typeof exports === "object")
          exports["Hls"] = factory();
        else
          root2["Hls"] = factory();
      }(exports, function() {
        return function(modules) {
          var installedModules = {};
          function __webpack_require__(moduleId) {
            if (installedModules[moduleId]) {
              return installedModules[moduleId].exports;
            }
            var module2 = installedModules[moduleId] = {
              i: moduleId,
              l: false,
              exports: {}
            };
            modules[moduleId].call(module2.exports, module2, module2.exports, __webpack_require__);
            module2.l = true;
            return module2.exports;
          }
          __webpack_require__.m = modules;
          __webpack_require__.c = installedModules;
          __webpack_require__.d = function(exports2, name, getter) {
            if (!__webpack_require__.o(exports2, name)) {
              Object.defineProperty(exports2, name, { enumerable: true, get: getter });
            }
          };
          __webpack_require__.r = function(exports2) {
            if (typeof Symbol !== "undefined" && Symbol.toStringTag) {
              Object.defineProperty(exports2, Symbol.toStringTag, { value: "Module" });
            }
            Object.defineProperty(exports2, "__esModule", { value: true });
          };
          __webpack_require__.t = function(value, mode) {
            if (mode & 1)
              value = __webpack_require__(value);
            if (mode & 8)
              return value;
            if (mode & 4 && typeof value === "object" && value && value.__esModule)
              return value;
            var ns = /* @__PURE__ */ Object.create(null);
            __webpack_require__.r(ns);
            Object.defineProperty(ns, "default", { enumerable: true, value });
            if (mode & 2 && typeof value != "string")
              for (var key in value)
                __webpack_require__.d(ns, key, function(key2) {
                  return value[key2];
                }.bind(null, key));
            return ns;
          };
          __webpack_require__.n = function(module2) {
            var getter = module2 && module2.__esModule ? function getDefault() {
              return module2["default"];
            } : function getModuleExports() {
              return module2;
            };
            __webpack_require__.d(getter, "a", getter);
            return getter;
          };
          __webpack_require__.o = function(object, property) {
            return Object.prototype.hasOwnProperty.call(object, property);
          };
          __webpack_require__.p = "/dist/";
          return __webpack_require__(__webpack_require__.s = "./src/hls.ts");
        }({
          "./node_modules/eventemitter3/index.js": function(module2, exports2, __webpack_require__) {
            "use strict";
            var has = Object.prototype.hasOwnProperty, prefix = "~";
            function Events() {
            }
            if (Object.create) {
              Events.prototype = /* @__PURE__ */ Object.create(null);
              if (!new Events().__proto__)
                prefix = false;
            }
            function EE(fn, context, once) {
              this.fn = fn;
              this.context = context;
              this.once = once || false;
            }
            function addListener(emitter, event, fn, context, once) {
              if (typeof fn !== "function") {
                throw new TypeError("The listener must be a function");
              }
              var listener = new EE(fn, context || emitter, once), evt = prefix ? prefix + event : event;
              if (!emitter._events[evt])
                emitter._events[evt] = listener, emitter._eventsCount++;
              else if (!emitter._events[evt].fn)
                emitter._events[evt].push(listener);
              else
                emitter._events[evt] = [emitter._events[evt], listener];
              return emitter;
            }
            function clearEvent(emitter, evt) {
              if (--emitter._eventsCount === 0)
                emitter._events = new Events();
              else
                delete emitter._events[evt];
            }
            function EventEmitter() {
              this._events = new Events();
              this._eventsCount = 0;
            }
            EventEmitter.prototype.eventNames = function eventNames() {
              var names = [], events, name;
              if (this._eventsCount === 0)
                return names;
              for (name in events = this._events) {
                if (has.call(events, name))
                  names.push(prefix ? name.slice(1) : name);
              }
              if (Object.getOwnPropertySymbols) {
                return names.concat(Object.getOwnPropertySymbols(events));
              }
              return names;
            };
            EventEmitter.prototype.listeners = function listeners(event) {
              var evt = prefix ? prefix + event : event, handlers = this._events[evt];
              if (!handlers)
                return [];
              if (handlers.fn)
                return [handlers.fn];
              for (var i3 = 0, l4 = handlers.length, ee2 = new Array(l4); i3 < l4; i3++) {
                ee2[i3] = handlers[i3].fn;
              }
              return ee2;
            };
            EventEmitter.prototype.listenerCount = function listenerCount(event) {
              var evt = prefix ? prefix + event : event, listeners = this._events[evt];
              if (!listeners)
                return 0;
              if (listeners.fn)
                return 1;
              return listeners.length;
            };
            EventEmitter.prototype.emit = function emit(event, a1, a22, a3, a4, a5) {
              var evt = prefix ? prefix + event : event;
              if (!this._events[evt])
                return false;
              var listeners = this._events[evt], len = arguments.length, args, i3;
              if (listeners.fn) {
                if (listeners.once)
                  this.removeListener(event, listeners.fn, void 0, true);
                switch (len) {
                  case 1:
                    return listeners.fn.call(listeners.context), true;
                  case 2:
                    return listeners.fn.call(listeners.context, a1), true;
                  case 3:
                    return listeners.fn.call(listeners.context, a1, a22), true;
                  case 4:
                    return listeners.fn.call(listeners.context, a1, a22, a3), true;
                  case 5:
                    return listeners.fn.call(listeners.context, a1, a22, a3, a4), true;
                  case 6:
                    return listeners.fn.call(listeners.context, a1, a22, a3, a4, a5), true;
                }
                for (i3 = 1, args = new Array(len - 1); i3 < len; i3++) {
                  args[i3 - 1] = arguments[i3];
                }
                listeners.fn.apply(listeners.context, args);
              } else {
                var length = listeners.length, j3;
                for (i3 = 0; i3 < length; i3++) {
                  if (listeners[i3].once)
                    this.removeListener(event, listeners[i3].fn, void 0, true);
                  switch (len) {
                    case 1:
                      listeners[i3].fn.call(listeners[i3].context);
                      break;
                    case 2:
                      listeners[i3].fn.call(listeners[i3].context, a1);
                      break;
                    case 3:
                      listeners[i3].fn.call(listeners[i3].context, a1, a22);
                      break;
                    case 4:
                      listeners[i3].fn.call(listeners[i3].context, a1, a22, a3);
                      break;
                    default:
                      if (!args)
                        for (j3 = 1, args = new Array(len - 1); j3 < len; j3++) {
                          args[j3 - 1] = arguments[j3];
                        }
                      listeners[i3].fn.apply(listeners[i3].context, args);
                  }
                }
              }
              return true;
            };
            EventEmitter.prototype.on = function on(event, fn, context) {
              return addListener(this, event, fn, context, false);
            };
            EventEmitter.prototype.once = function once(event, fn, context) {
              return addListener(this, event, fn, context, true);
            };
            EventEmitter.prototype.removeListener = function removeListener(event, fn, context, once) {
              var evt = prefix ? prefix + event : event;
              if (!this._events[evt])
                return this;
              if (!fn) {
                clearEvent(this, evt);
                return this;
              }
              var listeners = this._events[evt];
              if (listeners.fn) {
                if (listeners.fn === fn && (!once || listeners.once) && (!context || listeners.context === context)) {
                  clearEvent(this, evt);
                }
              } else {
                for (var i3 = 0, events = [], length = listeners.length; i3 < length; i3++) {
                  if (listeners[i3].fn !== fn || once && !listeners[i3].once || context && listeners[i3].context !== context) {
                    events.push(listeners[i3]);
                  }
                }
                if (events.length)
                  this._events[evt] = events.length === 1 ? events[0] : events;
                else
                  clearEvent(this, evt);
              }
              return this;
            };
            EventEmitter.prototype.removeAllListeners = function removeAllListeners(event) {
              var evt;
              if (event) {
                evt = prefix ? prefix + event : event;
                if (this._events[evt])
                  clearEvent(this, evt);
              } else {
                this._events = new Events();
                this._eventsCount = 0;
              }
              return this;
            };
            EventEmitter.prototype.off = EventEmitter.prototype.removeListener;
            EventEmitter.prototype.addListener = EventEmitter.prototype.on;
            EventEmitter.prefixed = prefix;
            EventEmitter.EventEmitter = EventEmitter;
            if (true) {
              module2.exports = EventEmitter;
            }
          },
          "./node_modules/url-toolkit/src/url-toolkit.js": function(module2, exports2, __webpack_require__) {
            (function(root2) {
              var URL_REGEX = /^((?:[a-zA-Z0-9+\-.]+:)?)(\/\/[^\/?#]*)?((?:[^\/?#]*\/)*[^;?#]*)?(;[^?#]*)?(\?[^#]*)?(#[^]*)?$/;
              var FIRST_SEGMENT_REGEX = /^([^\/?#]*)([^]*)$/;
              var SLASH_DOT_REGEX = /(?:\/|^)\.(?=\/)/g;
              var SLASH_DOT_DOT_REGEX = /(?:\/|^)\.\.\/(?!\.\.\/)[^\/]*(?=\/)/g;
              var URLToolkit = {
                buildAbsoluteURL: function(baseURL, relativeURL, opts) {
                  opts = opts || {};
                  baseURL = baseURL.trim();
                  relativeURL = relativeURL.trim();
                  if (!relativeURL) {
                    if (!opts.alwaysNormalize) {
                      return baseURL;
                    }
                    var basePartsForNormalise = URLToolkit.parseURL(baseURL);
                    if (!basePartsForNormalise) {
                      throw new Error("Error trying to parse base URL.");
                    }
                    basePartsForNormalise.path = URLToolkit.normalizePath(basePartsForNormalise.path);
                    return URLToolkit.buildURLFromParts(basePartsForNormalise);
                  }
                  var relativeParts = URLToolkit.parseURL(relativeURL);
                  if (!relativeParts) {
                    throw new Error("Error trying to parse relative URL.");
                  }
                  if (relativeParts.scheme) {
                    if (!opts.alwaysNormalize) {
                      return relativeURL;
                    }
                    relativeParts.path = URLToolkit.normalizePath(relativeParts.path);
                    return URLToolkit.buildURLFromParts(relativeParts);
                  }
                  var baseParts = URLToolkit.parseURL(baseURL);
                  if (!baseParts) {
                    throw new Error("Error trying to parse base URL.");
                  }
                  if (!baseParts.netLoc && baseParts.path && baseParts.path[0] !== "/") {
                    var pathParts = FIRST_SEGMENT_REGEX.exec(baseParts.path);
                    baseParts.netLoc = pathParts[1];
                    baseParts.path = pathParts[2];
                  }
                  if (baseParts.netLoc && !baseParts.path) {
                    baseParts.path = "/";
                  }
                  var builtParts = {
                    scheme: baseParts.scheme,
                    netLoc: relativeParts.netLoc,
                    path: null,
                    params: relativeParts.params,
                    query: relativeParts.query,
                    fragment: relativeParts.fragment
                  };
                  if (!relativeParts.netLoc) {
                    builtParts.netLoc = baseParts.netLoc;
                    if (relativeParts.path[0] !== "/") {
                      if (!relativeParts.path) {
                        builtParts.path = baseParts.path;
                        if (!relativeParts.params) {
                          builtParts.params = baseParts.params;
                          if (!relativeParts.query) {
                            builtParts.query = baseParts.query;
                          }
                        }
                      } else {
                        var baseURLPath = baseParts.path;
                        var newPath = baseURLPath.substring(0, baseURLPath.lastIndexOf("/") + 1) + relativeParts.path;
                        builtParts.path = URLToolkit.normalizePath(newPath);
                      }
                    }
                  }
                  if (builtParts.path === null) {
                    builtParts.path = opts.alwaysNormalize ? URLToolkit.normalizePath(relativeParts.path) : relativeParts.path;
                  }
                  return URLToolkit.buildURLFromParts(builtParts);
                },
                parseURL: function(url) {
                  var parts = URL_REGEX.exec(url);
                  if (!parts) {
                    return null;
                  }
                  return {
                    scheme: parts[1] || "",
                    netLoc: parts[2] || "",
                    path: parts[3] || "",
                    params: parts[4] || "",
                    query: parts[5] || "",
                    fragment: parts[6] || ""
                  };
                },
                normalizePath: function(path) {
                  path = path.split("").reverse().join("").replace(SLASH_DOT_REGEX, "");
                  while (path.length !== (path = path.replace(SLASH_DOT_DOT_REGEX, "")).length) {
                  }
                  return path.split("").reverse().join("");
                },
                buildURLFromParts: function(parts) {
                  return parts.scheme + parts.netLoc + parts.path + parts.params + parts.query + parts.fragment;
                }
              };
              if (true)
                module2.exports = URLToolkit;
              else {
              }
            })(this);
          },
          "./node_modules/webworkify-webpack/index.js": function(module2, exports2, __webpack_require__) {
            function webpackBootstrapFunc(modules) {
              var installedModules = {};
              function __webpack_require__2(moduleId) {
                if (installedModules[moduleId])
                  return installedModules[moduleId].exports;
                var module3 = installedModules[moduleId] = {
                  i: moduleId,
                  l: false,
                  exports: {}
                };
                modules[moduleId].call(module3.exports, module3, module3.exports, __webpack_require__2);
                module3.l = true;
                return module3.exports;
              }
              __webpack_require__2.m = modules;
              __webpack_require__2.c = installedModules;
              __webpack_require__2.i = function(value) {
                return value;
              };
              __webpack_require__2.d = function(exports3, name, getter) {
                if (!__webpack_require__2.o(exports3, name)) {
                  Object.defineProperty(exports3, name, {
                    configurable: false,
                    enumerable: true,
                    get: getter
                  });
                }
              };
              __webpack_require__2.r = function(exports3) {
                Object.defineProperty(exports3, "__esModule", { value: true });
              };
              __webpack_require__2.n = function(module3) {
                var getter = module3 && module3.__esModule ? function getDefault() {
                  return module3["default"];
                } : function getModuleExports() {
                  return module3;
                };
                __webpack_require__2.d(getter, "a", getter);
                return getter;
              };
              __webpack_require__2.o = function(object, property) {
                return Object.prototype.hasOwnProperty.call(object, property);
              };
              __webpack_require__2.p = "/";
              __webpack_require__2.oe = function(err) {
                console.error(err);
                throw err;
              };
              var f3 = __webpack_require__2(__webpack_require__2.s = ENTRY_MODULE);
              return f3.default || f3;
            }
            var moduleNameReqExp = "[\\.|\\-|\\+|\\w|/|@]+";
            var dependencyRegExp = "\\(\\s*(/\\*.*?\\*/)?\\s*.*?(" + moduleNameReqExp + ").*?\\)";
            function quoteRegExp(str) {
              return (str + "").replace(/[.?*+^$[\]\\(){}|-]/g, "\\$&");
            }
            function isNumeric(n4) {
              return !isNaN(1 * n4);
            }
            function getModuleDependencies(sources, module3, queueName) {
              var retval = {};
              retval[queueName] = [];
              var fnString = module3.toString();
              var wrapperSignature = fnString.match(/^function\s?\w*\(\w+,\s*\w+,\s*(\w+)\)/);
              if (!wrapperSignature)
                return retval;
              var webpackRequireName = wrapperSignature[1];
              var re3 = new RegExp("(\\\\n|\\W)" + quoteRegExp(webpackRequireName) + dependencyRegExp, "g");
              var match;
              while (match = re3.exec(fnString)) {
                if (match[3] === "dll-reference")
                  continue;
                retval[queueName].push(match[3]);
              }
              re3 = new RegExp("\\(" + quoteRegExp(webpackRequireName) + '\\("(dll-reference\\s(' + moduleNameReqExp + '))"\\)\\)' + dependencyRegExp, "g");
              while (match = re3.exec(fnString)) {
                if (!sources[match[2]]) {
                  retval[queueName].push(match[1]);
                  sources[match[2]] = __webpack_require__(match[1]).m;
                }
                retval[match[2]] = retval[match[2]] || [];
                retval[match[2]].push(match[4]);
              }
              var keys = Object.keys(retval);
              for (var i3 = 0; i3 < keys.length; i3++) {
                for (var j3 = 0; j3 < retval[keys[i3]].length; j3++) {
                  if (isNumeric(retval[keys[i3]][j3])) {
                    retval[keys[i3]][j3] = 1 * retval[keys[i3]][j3];
                  }
                }
              }
              return retval;
            }
            function hasValuesInQueues(queues) {
              var keys = Object.keys(queues);
              return keys.reduce(function(hasValues, key) {
                return hasValues || queues[key].length > 0;
              }, false);
            }
            function getRequiredModules(sources, moduleId) {
              var modulesQueue = {
                main: [moduleId]
              };
              var requiredModules = {
                main: []
              };
              var seenModules = {
                main: {}
              };
              while (hasValuesInQueues(modulesQueue)) {
                var queues = Object.keys(modulesQueue);
                for (var i3 = 0; i3 < queues.length; i3++) {
                  var queueName = queues[i3];
                  var queue = modulesQueue[queueName];
                  var moduleToCheck = queue.pop();
                  seenModules[queueName] = seenModules[queueName] || {};
                  if (seenModules[queueName][moduleToCheck] || !sources[queueName][moduleToCheck])
                    continue;
                  seenModules[queueName][moduleToCheck] = true;
                  requiredModules[queueName] = requiredModules[queueName] || [];
                  requiredModules[queueName].push(moduleToCheck);
                  var newModules = getModuleDependencies(sources, sources[queueName][moduleToCheck], queueName);
                  var newModulesKeys = Object.keys(newModules);
                  for (var j3 = 0; j3 < newModulesKeys.length; j3++) {
                    modulesQueue[newModulesKeys[j3]] = modulesQueue[newModulesKeys[j3]] || [];
                    modulesQueue[newModulesKeys[j3]] = modulesQueue[newModulesKeys[j3]].concat(newModules[newModulesKeys[j3]]);
                  }
                }
              }
              return requiredModules;
            }
            module2.exports = function(moduleId, options) {
              options = options || {};
              var sources = {
                main: __webpack_require__.m
              };
              var requiredModules = options.all ? { main: Object.keys(sources.main) } : getRequiredModules(sources, moduleId);
              var src = "";
              Object.keys(requiredModules).filter(function(m3) {
                return m3 !== "main";
              }).forEach(function(module3) {
                var entryModule = 0;
                while (requiredModules[module3][entryModule]) {
                  entryModule++;
                }
                requiredModules[module3].push(entryModule);
                sources[module3][entryModule] = "(function(module, exports, __webpack_require__) { module.exports = __webpack_require__; })";
                src = src + "var " + module3 + " = (" + webpackBootstrapFunc.toString().replace("ENTRY_MODULE", JSON.stringify(entryModule)) + ")({" + requiredModules[module3].map(function(id) {
                  return "" + JSON.stringify(id) + ": " + sources[module3][id].toString();
                }).join(",") + "});\n";
              });
              src = src + "new ((" + webpackBootstrapFunc.toString().replace("ENTRY_MODULE", JSON.stringify(moduleId)) + ")({" + requiredModules.main.map(function(id) {
                return "" + JSON.stringify(id) + ": " + sources.main[id].toString();
              }).join(",") + "}))(self);";
              var blob = new window.Blob([src], { type: "text/javascript" });
              if (options.bare) {
                return blob;
              }
              var URL2 = window.URL || window.webkitURL || window.mozURL || window.msURL;
              var workerUrl = URL2.createObjectURL(blob);
              var worker = new window.Worker(workerUrl);
              worker.objectURL = workerUrl;
              return worker;
            };
          },
          "./src/config.ts": function(module2, __webpack_exports__, __webpack_require__) {
            "use strict";
            __webpack_require__.r(__webpack_exports__);
            __webpack_require__.d(__webpack_exports__, "hlsDefaultConfig", function() {
              return hlsDefaultConfig;
            });
            __webpack_require__.d(__webpack_exports__, "mergeConfig", function() {
              return mergeConfig;
            });
            __webpack_require__.d(__webpack_exports__, "enableStreamingMode", function() {
              return enableStreamingMode;
            });
            var _controller_abr_controller__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("./src/controller/abr-controller.ts");
            var _controller_audio_stream_controller__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("./src/controller/audio-stream-controller.ts");
            var _controller_audio_track_controller__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__("./src/controller/audio-track-controller.ts");
            var _controller_subtitle_stream_controller__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__("./src/controller/subtitle-stream-controller.ts");
            var _controller_subtitle_track_controller__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__("./src/controller/subtitle-track-controller.ts");
            var _controller_buffer_controller__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__("./src/controller/buffer-controller.ts");
            var _controller_timeline_controller__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__("./src/controller/timeline-controller.ts");
            var _controller_cap_level_controller__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__("./src/controller/cap-level-controller.ts");
            var _controller_fps_controller__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__("./src/controller/fps-controller.ts");
            var _controller_eme_controller__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__("./src/controller/eme-controller.ts");
            var _controller_cmcd_controller__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__("./src/controller/cmcd-controller.ts");
            var _utils_xhr_loader__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__("./src/utils/xhr-loader.ts");
            var _utils_fetch_loader__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__("./src/utils/fetch-loader.ts");
            var _utils_cues__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__("./src/utils/cues.ts");
            var _utils_mediakeys_helper__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__("./src/utils/mediakeys-helper.ts");
            var _utils_logger__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__("./src/utils/logger.ts");
            function _extends2() {
              _extends2 = Object.assign || function(target) {
                for (var i3 = 1; i3 < arguments.length; i3++) {
                  var source = arguments[i3];
                  for (var key in source) {
                    if (Object.prototype.hasOwnProperty.call(source, key)) {
                      target[key] = source[key];
                    }
                  }
                }
                return target;
              };
              return _extends2.apply(this, arguments);
            }
            function ownKeys2(object, enumerableOnly) {
              var keys = Object.keys(object);
              if (Object.getOwnPropertySymbols) {
                var symbols = Object.getOwnPropertySymbols(object);
                if (enumerableOnly) {
                  symbols = symbols.filter(function(sym) {
                    return Object.getOwnPropertyDescriptor(object, sym).enumerable;
                  });
                }
                keys.push.apply(keys, symbols);
              }
              return keys;
            }
            function _objectSpread(target) {
              for (var i3 = 1; i3 < arguments.length; i3++) {
                var source = arguments[i3] != null ? arguments[i3] : {};
                if (i3 % 2) {
                  ownKeys2(Object(source), true).forEach(function(key) {
                    _defineProperty2(target, key, source[key]);
                  });
                } else if (Object.getOwnPropertyDescriptors) {
                  Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
                } else {
                  ownKeys2(Object(source)).forEach(function(key) {
                    Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
                  });
                }
              }
              return target;
            }
            function _defineProperty2(obj, key, value) {
              if (key in obj) {
                Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
              } else {
                obj[key] = value;
              }
              return obj;
            }
            var hlsDefaultConfig = _objectSpread(_objectSpread({
              autoStartLoad: true,
              startPosition: -1,
              defaultAudioCodec: void 0,
              debug: false,
              capLevelOnFPSDrop: false,
              capLevelToPlayerSize: false,
              initialLiveManifestSize: 1,
              maxBufferLength: 30,
              backBufferLength: Infinity,
              maxBufferSize: 60 * 1e3 * 1e3,
              maxBufferHole: 0.1,
              highBufferWatchdogPeriod: 2,
              nudgeOffset: 0.1,
              nudgeMaxRetry: 3,
              maxFragLookUpTolerance: 0.25,
              liveSyncDurationCount: 3,
              liveMaxLatencyDurationCount: Infinity,
              liveSyncDuration: void 0,
              liveMaxLatencyDuration: void 0,
              maxLiveSyncPlaybackRate: 1,
              liveDurationInfinity: false,
              liveBackBufferLength: null,
              maxMaxBufferLength: 600,
              enableWorker: true,
              enableSoftwareAES: true,
              manifestLoadingTimeOut: 1e4,
              manifestLoadingMaxRetry: 1,
              manifestLoadingRetryDelay: 1e3,
              manifestLoadingMaxRetryTimeout: 64e3,
              startLevel: void 0,
              levelLoadingTimeOut: 1e4,
              levelLoadingMaxRetry: 4,
              levelLoadingRetryDelay: 1e3,
              levelLoadingMaxRetryTimeout: 64e3,
              fragLoadingTimeOut: 2e4,
              fragLoadingMaxRetry: 6,
              fragLoadingRetryDelay: 1e3,
              fragLoadingMaxRetryTimeout: 64e3,
              startFragPrefetch: false,
              fpsDroppedMonitoringPeriod: 5e3,
              fpsDroppedMonitoringThreshold: 0.2,
              appendErrorMaxRetry: 3,
              loader: _utils_xhr_loader__WEBPACK_IMPORTED_MODULE_11__["default"],
              fLoader: void 0,
              pLoader: void 0,
              xhrSetup: void 0,
              licenseXhrSetup: void 0,
              licenseResponseCallback: void 0,
              abrController: _controller_abr_controller__WEBPACK_IMPORTED_MODULE_0__["default"],
              bufferController: _controller_buffer_controller__WEBPACK_IMPORTED_MODULE_5__["default"],
              capLevelController: _controller_cap_level_controller__WEBPACK_IMPORTED_MODULE_7__["default"],
              fpsController: _controller_fps_controller__WEBPACK_IMPORTED_MODULE_8__["default"],
              stretchShortVideoTrack: false,
              maxAudioFramesDrift: 1,
              forceKeyFrameOnDiscontinuity: true,
              abrEwmaFastLive: 3,
              abrEwmaSlowLive: 9,
              abrEwmaFastVoD: 3,
              abrEwmaSlowVoD: 9,
              abrEwmaDefaultEstimate: 5e5,
              abrBandWidthFactor: 0.95,
              abrBandWidthUpFactor: 0.7,
              abrMaxWithRealBitrate: false,
              maxStarvationDelay: 4,
              maxLoadingDelay: 4,
              minAutoBitrate: 0,
              emeEnabled: false,
              widevineLicenseUrl: void 0,
              drmSystemOptions: {},
              requestMediaKeySystemAccessFunc: _utils_mediakeys_helper__WEBPACK_IMPORTED_MODULE_14__["requestMediaKeySystemAccess"],
              testBandwidth: true,
              progressive: false,
              lowLatencyMode: true,
              cmcd: void 0
            }, timelineConfig()), {}, {
              subtitleStreamController: true ? _controller_subtitle_stream_controller__WEBPACK_IMPORTED_MODULE_3__["SubtitleStreamController"] : void 0,
              subtitleTrackController: true ? _controller_subtitle_track_controller__WEBPACK_IMPORTED_MODULE_4__["default"] : void 0,
              timelineController: true ? _controller_timeline_controller__WEBPACK_IMPORTED_MODULE_6__["TimelineController"] : void 0,
              audioStreamController: true ? _controller_audio_stream_controller__WEBPACK_IMPORTED_MODULE_1__["default"] : void 0,
              audioTrackController: true ? _controller_audio_track_controller__WEBPACK_IMPORTED_MODULE_2__["default"] : void 0,
              emeController: true ? _controller_eme_controller__WEBPACK_IMPORTED_MODULE_9__["default"] : void 0,
              cmcdController: true ? _controller_cmcd_controller__WEBPACK_IMPORTED_MODULE_10__["default"] : void 0
            });
            function timelineConfig() {
              return {
                cueHandler: _utils_cues__WEBPACK_IMPORTED_MODULE_13__["default"],
                enableCEA708Captions: true,
                enableWebVTT: true,
                enableIMSC1: true,
                captionsTextTrack1Label: "English",
                captionsTextTrack1LanguageCode: "en",
                captionsTextTrack2Label: "Spanish",
                captionsTextTrack2LanguageCode: "es",
                captionsTextTrack3Label: "Unknown CC",
                captionsTextTrack3LanguageCode: "",
                captionsTextTrack4Label: "Unknown CC",
                captionsTextTrack4LanguageCode: "",
                renderTextTracksNatively: true
              };
            }
            function mergeConfig(defaultConfig, userConfig) {
              if ((userConfig.liveSyncDurationCount || userConfig.liveMaxLatencyDurationCount) && (userConfig.liveSyncDuration || userConfig.liveMaxLatencyDuration)) {
                throw new Error("Illegal hls.js config: don't mix up liveSyncDurationCount/liveMaxLatencyDurationCount and liveSyncDuration/liveMaxLatencyDuration");
              }
              if (userConfig.liveMaxLatencyDurationCount !== void 0 && (userConfig.liveSyncDurationCount === void 0 || userConfig.liveMaxLatencyDurationCount <= userConfig.liveSyncDurationCount)) {
                throw new Error('Illegal hls.js config: "liveMaxLatencyDurationCount" must be greater than "liveSyncDurationCount"');
              }
              if (userConfig.liveMaxLatencyDuration !== void 0 && (userConfig.liveSyncDuration === void 0 || userConfig.liveMaxLatencyDuration <= userConfig.liveSyncDuration)) {
                throw new Error('Illegal hls.js config: "liveMaxLatencyDuration" must be greater than "liveSyncDuration"');
              }
              return _extends2({}, defaultConfig, userConfig);
            }
            function enableStreamingMode(config2) {
              var currentLoader = config2.loader;
              if (currentLoader !== _utils_fetch_loader__WEBPACK_IMPORTED_MODULE_12__["default"] && currentLoader !== _utils_xhr_loader__WEBPACK_IMPORTED_MODULE_11__["default"]) {
                _utils_logger__WEBPACK_IMPORTED_MODULE_15__["logger"].log("[config]: Custom loader detected, cannot enable progressive streaming");
                config2.progressive = false;
              } else {
                var canStreamProgressively = Object(_utils_fetch_loader__WEBPACK_IMPORTED_MODULE_12__["fetchSupported"])();
                if (canStreamProgressively) {
                  config2.loader = _utils_fetch_loader__WEBPACK_IMPORTED_MODULE_12__["default"];
                  config2.progressive = true;
                  config2.enableSoftwareAES = true;
                  _utils_logger__WEBPACK_IMPORTED_MODULE_15__["logger"].log("[config]: Progressive streaming enabled, using FetchLoader");
                }
              }
            }
          },
          "./src/controller/abr-controller.ts": function(module2, __webpack_exports__, __webpack_require__) {
            "use strict";
            __webpack_require__.r(__webpack_exports__);
            var _home_runner_work_hls_js_hls_js_src_polyfills_number__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("./src/polyfills/number.ts");
            var _utils_ewma_bandwidth_estimator__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("./src/utils/ewma-bandwidth-estimator.ts");
            var _events__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__("./src/events.ts");
            var _utils_buffer_helper__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__("./src/utils/buffer-helper.ts");
            var _errors__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__("./src/errors.ts");
            var _types_loader__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__("./src/types/loader.ts");
            var _utils_logger__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__("./src/utils/logger.ts");
            function _defineProperties(target, props) {
              for (var i3 = 0; i3 < props.length; i3++) {
                var descriptor = props[i3];
                descriptor.enumerable = descriptor.enumerable || false;
                descriptor.configurable = true;
                if ("value" in descriptor)
                  descriptor.writable = true;
                Object.defineProperty(target, descriptor.key, descriptor);
              }
            }
            function _createClass(Constructor, protoProps, staticProps) {
              if (protoProps)
                _defineProperties(Constructor.prototype, protoProps);
              if (staticProps)
                _defineProperties(Constructor, staticProps);
              return Constructor;
            }
            var AbrController = /* @__PURE__ */ function() {
              function AbrController2(hls) {
                this.hls = void 0;
                this.lastLoadedFragLevel = 0;
                this._nextAutoLevel = -1;
                this.timer = void 0;
                this.onCheck = this._abandonRulesCheck.bind(this);
                this.fragCurrent = null;
                this.partCurrent = null;
                this.bitrateTestDelay = 0;
                this.bwEstimator = void 0;
                this.hls = hls;
                var config2 = hls.config;
                this.bwEstimator = new _utils_ewma_bandwidth_estimator__WEBPACK_IMPORTED_MODULE_1__["default"](config2.abrEwmaSlowVoD, config2.abrEwmaFastVoD, config2.abrEwmaDefaultEstimate);
                this.registerListeners();
              }
              var _proto = AbrController2.prototype;
              _proto.registerListeners = function registerListeners() {
                var hls = this.hls;
                hls.on(_events__WEBPACK_IMPORTED_MODULE_2__["Events"].FRAG_LOADING, this.onFragLoading, this);
                hls.on(_events__WEBPACK_IMPORTED_MODULE_2__["Events"].FRAG_LOADED, this.onFragLoaded, this);
                hls.on(_events__WEBPACK_IMPORTED_MODULE_2__["Events"].FRAG_BUFFERED, this.onFragBuffered, this);
                hls.on(_events__WEBPACK_IMPORTED_MODULE_2__["Events"].LEVEL_LOADED, this.onLevelLoaded, this);
                hls.on(_events__WEBPACK_IMPORTED_MODULE_2__["Events"].ERROR, this.onError, this);
              };
              _proto.unregisterListeners = function unregisterListeners() {
                var hls = this.hls;
                hls.off(_events__WEBPACK_IMPORTED_MODULE_2__["Events"].FRAG_LOADING, this.onFragLoading, this);
                hls.off(_events__WEBPACK_IMPORTED_MODULE_2__["Events"].FRAG_LOADED, this.onFragLoaded, this);
                hls.off(_events__WEBPACK_IMPORTED_MODULE_2__["Events"].FRAG_BUFFERED, this.onFragBuffered, this);
                hls.off(_events__WEBPACK_IMPORTED_MODULE_2__["Events"].LEVEL_LOADED, this.onLevelLoaded, this);
                hls.off(_events__WEBPACK_IMPORTED_MODULE_2__["Events"].ERROR, this.onError, this);
              };
              _proto.destroy = function destroy() {
                this.unregisterListeners();
                this.clearTimer();
                this.hls = this.onCheck = null;
                this.fragCurrent = this.partCurrent = null;
              };
              _proto.onFragLoading = function onFragLoading(event, data) {
                var frag = data.frag;
                if (frag.type === _types_loader__WEBPACK_IMPORTED_MODULE_5__["PlaylistLevelType"].MAIN) {
                  if (!this.timer) {
                    var _data$part;
                    this.fragCurrent = frag;
                    this.partCurrent = (_data$part = data.part) != null ? _data$part : null;
                    this.timer = self.setInterval(this.onCheck, 100);
                  }
                }
              };
              _proto.onLevelLoaded = function onLevelLoaded(event, data) {
                var config2 = this.hls.config;
                if (data.details.live) {
                  this.bwEstimator.update(config2.abrEwmaSlowLive, config2.abrEwmaFastLive);
                } else {
                  this.bwEstimator.update(config2.abrEwmaSlowVoD, config2.abrEwmaFastVoD);
                }
              };
              _proto._abandonRulesCheck = function _abandonRulesCheck() {
                var frag = this.fragCurrent, part = this.partCurrent, hls = this.hls;
                var autoLevelEnabled = hls.autoLevelEnabled, config2 = hls.config, media2 = hls.media;
                if (!frag || !media2) {
                  return;
                }
                var stats = part ? part.stats : frag.stats;
                var duration = part ? part.duration : frag.duration;
                if (stats.aborted) {
                  _utils_logger__WEBPACK_IMPORTED_MODULE_6__["logger"].warn("frag loader destroy or aborted, disarm abandonRules");
                  this.clearTimer();
                  this._nextAutoLevel = -1;
                  return;
                }
                if (!autoLevelEnabled || media2.paused || !media2.playbackRate || !media2.readyState) {
                  return;
                }
                var requestDelay = performance.now() - stats.loading.start;
                var playbackRate = Math.abs(media2.playbackRate);
                if (requestDelay <= 500 * duration / playbackRate) {
                  return;
                }
                var levels = hls.levels, minAutoLevel = hls.minAutoLevel;
                var level = levels[frag.level];
                var expectedLen = stats.total || Math.max(stats.loaded, Math.round(duration * level.maxBitrate / 8));
                var loadRate = Math.max(1, stats.bwEstimate ? stats.bwEstimate / 8 : stats.loaded * 1e3 / requestDelay);
                var fragLoadedDelay = (expectedLen - stats.loaded) / loadRate;
                var pos = media2.currentTime;
                var bufferStarvationDelay = (_utils_buffer_helper__WEBPACK_IMPORTED_MODULE_3__["BufferHelper"].bufferInfo(media2, pos, config2.maxBufferHole).end - pos) / playbackRate;
                if (bufferStarvationDelay >= 2 * duration / playbackRate || fragLoadedDelay <= bufferStarvationDelay) {
                  return;
                }
                var fragLevelNextLoadedDelay = Number.POSITIVE_INFINITY;
                var nextLoadLevel;
                for (nextLoadLevel = frag.level - 1; nextLoadLevel > minAutoLevel; nextLoadLevel--) {
                  var levelNextBitrate = levels[nextLoadLevel].maxBitrate;
                  fragLevelNextLoadedDelay = duration * levelNextBitrate / (8 * 0.8 * loadRate);
                  if (fragLevelNextLoadedDelay < bufferStarvationDelay) {
                    break;
                  }
                }
                if (fragLevelNextLoadedDelay >= fragLoadedDelay) {
                  return;
                }
                var bwEstimate = this.bwEstimator.getEstimate();
                _utils_logger__WEBPACK_IMPORTED_MODULE_6__["logger"].warn("Fragment " + frag.sn + (part ? " part " + part.index : "") + " of level " + frag.level + " is loading too slowly and will cause an underbuffer; aborting and switching to level " + nextLoadLevel + "\n      Current BW estimate: " + (Object(_home_runner_work_hls_js_hls_js_src_polyfills_number__WEBPACK_IMPORTED_MODULE_0__["isFiniteNumber"])(bwEstimate) ? (bwEstimate / 1024).toFixed(3) : "Unknown") + " Kb/s\n      Estimated load time for current fragment: " + fragLoadedDelay.toFixed(3) + " s\n      Estimated load time for the next fragment: " + fragLevelNextLoadedDelay.toFixed(3) + " s\n      Time to underbuffer: " + bufferStarvationDelay.toFixed(3) + " s");
                hls.nextLoadLevel = nextLoadLevel;
                this.bwEstimator.sample(requestDelay, stats.loaded);
                this.clearTimer();
                if (frag.loader) {
                  this.fragCurrent = this.partCurrent = null;
                  frag.loader.abort();
                }
                hls.trigger(_events__WEBPACK_IMPORTED_MODULE_2__["Events"].FRAG_LOAD_EMERGENCY_ABORTED, {
                  frag,
                  part,
                  stats
                });
              };
              _proto.onFragLoaded = function onFragLoaded(event, _ref) {
                var frag = _ref.frag, part = _ref.part;
                if (frag.type === _types_loader__WEBPACK_IMPORTED_MODULE_5__["PlaylistLevelType"].MAIN && Object(_home_runner_work_hls_js_hls_js_src_polyfills_number__WEBPACK_IMPORTED_MODULE_0__["isFiniteNumber"])(frag.sn)) {
                  var stats = part ? part.stats : frag.stats;
                  var duration = part ? part.duration : frag.duration;
                  this.clearTimer();
                  this.lastLoadedFragLevel = frag.level;
                  this._nextAutoLevel = -1;
                  if (this.hls.config.abrMaxWithRealBitrate) {
                    var level = this.hls.levels[frag.level];
                    var loadedBytes = (level.loaded ? level.loaded.bytes : 0) + stats.loaded;
                    var loadedDuration = (level.loaded ? level.loaded.duration : 0) + duration;
                    level.loaded = {
                      bytes: loadedBytes,
                      duration: loadedDuration
                    };
                    level.realBitrate = Math.round(8 * loadedBytes / loadedDuration);
                  }
                  if (frag.bitrateTest) {
                    var fragBufferedData = {
                      stats,
                      frag,
                      part,
                      id: frag.type
                    };
                    this.onFragBuffered(_events__WEBPACK_IMPORTED_MODULE_2__["Events"].FRAG_BUFFERED, fragBufferedData);
                    frag.bitrateTest = false;
                  }
                }
              };
              _proto.onFragBuffered = function onFragBuffered(event, data) {
                var frag = data.frag, part = data.part;
                var stats = part ? part.stats : frag.stats;
                if (stats.aborted) {
                  return;
                }
                if (frag.type !== _types_loader__WEBPACK_IMPORTED_MODULE_5__["PlaylistLevelType"].MAIN || frag.sn === "initSegment") {
                  return;
                }
                var processingMs = stats.parsing.end - stats.loading.start;
                this.bwEstimator.sample(processingMs, stats.loaded);
                stats.bwEstimate = this.bwEstimator.getEstimate();
                if (frag.bitrateTest) {
                  this.bitrateTestDelay = processingMs / 1e3;
                } else {
                  this.bitrateTestDelay = 0;
                }
              };
              _proto.onError = function onError(event, data) {
                switch (data.details) {
                  case _errors__WEBPACK_IMPORTED_MODULE_4__["ErrorDetails"].FRAG_LOAD_ERROR:
                  case _errors__WEBPACK_IMPORTED_MODULE_4__["ErrorDetails"].FRAG_LOAD_TIMEOUT:
                    this.clearTimer();
                    break;
                  default:
                    break;
                }
              };
              _proto.clearTimer = function clearTimer() {
                self.clearInterval(this.timer);
                this.timer = void 0;
              };
              _proto.getNextABRAutoLevel = function getNextABRAutoLevel() {
                var fragCurrent = this.fragCurrent, partCurrent = this.partCurrent, hls = this.hls;
                var maxAutoLevel = hls.maxAutoLevel, config2 = hls.config, minAutoLevel = hls.minAutoLevel, media2 = hls.media;
                var currentFragDuration = partCurrent ? partCurrent.duration : fragCurrent ? fragCurrent.duration : 0;
                var pos = media2 ? media2.currentTime : 0;
                var playbackRate = media2 && media2.playbackRate !== 0 ? Math.abs(media2.playbackRate) : 1;
                var avgbw = this.bwEstimator ? this.bwEstimator.getEstimate() : config2.abrEwmaDefaultEstimate;
                var bufferStarvationDelay = (_utils_buffer_helper__WEBPACK_IMPORTED_MODULE_3__["BufferHelper"].bufferInfo(media2, pos, config2.maxBufferHole).end - pos) / playbackRate;
                var bestLevel = this.findBestLevel(avgbw, minAutoLevel, maxAutoLevel, bufferStarvationDelay, config2.abrBandWidthFactor, config2.abrBandWidthUpFactor);
                if (bestLevel >= 0) {
                  return bestLevel;
                }
                _utils_logger__WEBPACK_IMPORTED_MODULE_6__["logger"].trace((bufferStarvationDelay ? "rebuffering expected" : "buffer is empty") + ", finding optimal quality level");
                var maxStarvationDelay = currentFragDuration ? Math.min(currentFragDuration, config2.maxStarvationDelay) : config2.maxStarvationDelay;
                var bwFactor = config2.abrBandWidthFactor;
                var bwUpFactor = config2.abrBandWidthUpFactor;
                if (!bufferStarvationDelay) {
                  var bitrateTestDelay = this.bitrateTestDelay;
                  if (bitrateTestDelay) {
                    var maxLoadingDelay = currentFragDuration ? Math.min(currentFragDuration, config2.maxLoadingDelay) : config2.maxLoadingDelay;
                    maxStarvationDelay = maxLoadingDelay - bitrateTestDelay;
                    _utils_logger__WEBPACK_IMPORTED_MODULE_6__["logger"].trace("bitrate test took " + Math.round(1e3 * bitrateTestDelay) + "ms, set first fragment max fetchDuration to " + Math.round(1e3 * maxStarvationDelay) + " ms");
                    bwFactor = bwUpFactor = 1;
                  }
                }
                bestLevel = this.findBestLevel(avgbw, minAutoLevel, maxAutoLevel, bufferStarvationDelay + maxStarvationDelay, bwFactor, bwUpFactor);
                return Math.max(bestLevel, 0);
              };
              _proto.findBestLevel = function findBestLevel(currentBw, minAutoLevel, maxAutoLevel, maxFetchDuration, bwFactor, bwUpFactor) {
                var _level$details;
                var fragCurrent = this.fragCurrent, partCurrent = this.partCurrent, currentLevel = this.lastLoadedFragLevel;
                var levels = this.hls.levels;
                var level = levels[currentLevel];
                var live = !!(level !== null && level !== void 0 && (_level$details = level.details) !== null && _level$details !== void 0 && _level$details.live);
                var currentCodecSet = level === null || level === void 0 ? void 0 : level.codecSet;
                var currentFragDuration = partCurrent ? partCurrent.duration : fragCurrent ? fragCurrent.duration : 0;
                for (var i3 = maxAutoLevel; i3 >= minAutoLevel; i3--) {
                  var levelInfo = levels[i3];
                  if (!levelInfo || currentCodecSet && levelInfo.codecSet !== currentCodecSet) {
                    continue;
                  }
                  var levelDetails = levelInfo.details;
                  var avgDuration = (partCurrent ? levelDetails === null || levelDetails === void 0 ? void 0 : levelDetails.partTarget : levelDetails === null || levelDetails === void 0 ? void 0 : levelDetails.averagetargetduration) || currentFragDuration;
                  var adjustedbw = void 0;
                  if (i3 <= currentLevel) {
                    adjustedbw = bwFactor * currentBw;
                  } else {
                    adjustedbw = bwUpFactor * currentBw;
                  }
                  var bitrate = levels[i3].maxBitrate;
                  var fetchDuration = bitrate * avgDuration / adjustedbw;
                  _utils_logger__WEBPACK_IMPORTED_MODULE_6__["logger"].trace("level/adjustedbw/bitrate/avgDuration/maxFetchDuration/fetchDuration: " + i3 + "/" + Math.round(adjustedbw) + "/" + bitrate + "/" + avgDuration + "/" + maxFetchDuration + "/" + fetchDuration);
                  if (adjustedbw > bitrate && (!fetchDuration || live && !this.bitrateTestDelay || fetchDuration < maxFetchDuration)) {
                    return i3;
                  }
                }
                return -1;
              };
              _createClass(AbrController2, [{
                key: "nextAutoLevel",
                get: function get() {
                  var forcedAutoLevel = this._nextAutoLevel;
                  var bwEstimator = this.bwEstimator;
                  if (forcedAutoLevel !== -1 && (!bwEstimator || !bwEstimator.canEstimate())) {
                    return forcedAutoLevel;
                  }
                  var nextABRAutoLevel = this.getNextABRAutoLevel();
                  if (forcedAutoLevel !== -1) {
                    nextABRAutoLevel = Math.min(forcedAutoLevel, nextABRAutoLevel);
                  }
                  return nextABRAutoLevel;
                },
                set: function set(nextLevel) {
                  this._nextAutoLevel = nextLevel;
                }
              }]);
              return AbrController2;
            }();
            __webpack_exports__["default"] = AbrController;
          },
          "./src/controller/audio-stream-controller.ts": function(module2, __webpack_exports__, __webpack_require__) {
            "use strict";
            __webpack_require__.r(__webpack_exports__);
            var _home_runner_work_hls_js_hls_js_src_polyfills_number__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("./src/polyfills/number.ts");
            var _base_stream_controller__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("./src/controller/base-stream-controller.ts");
            var _events__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__("./src/events.ts");
            var _utils_buffer_helper__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__("./src/utils/buffer-helper.ts");
            var _fragment_tracker__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__("./src/controller/fragment-tracker.ts");
            var _types_level__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__("./src/types/level.ts");
            var _types_loader__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__("./src/types/loader.ts");
            var _loader_fragment__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__("./src/loader/fragment.ts");
            var _demux_chunk_cache__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__("./src/demux/chunk-cache.ts");
            var _demux_transmuxer_interface__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__("./src/demux/transmuxer-interface.ts");
            var _types_transmuxer__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__("./src/types/transmuxer.ts");
            var _fragment_finders__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__("./src/controller/fragment-finders.ts");
            var _utils_discontinuities__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__("./src/utils/discontinuities.ts");
            var _errors__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__("./src/errors.ts");
            var _utils_logger__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__("./src/utils/logger.ts");
            function _extends2() {
              _extends2 = Object.assign || function(target) {
                for (var i3 = 1; i3 < arguments.length; i3++) {
                  var source = arguments[i3];
                  for (var key in source) {
                    if (Object.prototype.hasOwnProperty.call(source, key)) {
                      target[key] = source[key];
                    }
                  }
                }
                return target;
              };
              return _extends2.apply(this, arguments);
            }
            function _inheritsLoose(subClass, superClass) {
              subClass.prototype = Object.create(superClass.prototype);
              subClass.prototype.constructor = subClass;
              _setPrototypeOf(subClass, superClass);
            }
            function _setPrototypeOf(o3, p5) {
              _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf2(o4, p6) {
                o4.__proto__ = p6;
                return o4;
              };
              return _setPrototypeOf(o3, p5);
            }
            var TICK_INTERVAL = 100;
            var AudioStreamController = /* @__PURE__ */ function(_BaseStreamController) {
              _inheritsLoose(AudioStreamController2, _BaseStreamController);
              function AudioStreamController2(hls, fragmentTracker) {
                var _this;
                _this = _BaseStreamController.call(this, hls, fragmentTracker, "[audio-stream-controller]") || this;
                _this.videoBuffer = null;
                _this.videoTrackCC = -1;
                _this.waitingVideoCC = -1;
                _this.audioSwitch = false;
                _this.trackId = -1;
                _this.waitingData = null;
                _this.mainDetails = null;
                _this.bufferFlushed = false;
                _this._registerListeners();
                return _this;
              }
              var _proto = AudioStreamController2.prototype;
              _proto.onHandlerDestroying = function onHandlerDestroying() {
                this._unregisterListeners();
                this.mainDetails = null;
              };
              _proto._registerListeners = function _registerListeners() {
                var hls = this.hls;
                hls.on(_events__WEBPACK_IMPORTED_MODULE_2__["Events"].MEDIA_ATTACHED, this.onMediaAttached, this);
                hls.on(_events__WEBPACK_IMPORTED_MODULE_2__["Events"].MEDIA_DETACHING, this.onMediaDetaching, this);
                hls.on(_events__WEBPACK_IMPORTED_MODULE_2__["Events"].MANIFEST_LOADING, this.onManifestLoading, this);
                hls.on(_events__WEBPACK_IMPORTED_MODULE_2__["Events"].LEVEL_LOADED, this.onLevelLoaded, this);
                hls.on(_events__WEBPACK_IMPORTED_MODULE_2__["Events"].AUDIO_TRACKS_UPDATED, this.onAudioTracksUpdated, this);
                hls.on(_events__WEBPACK_IMPORTED_MODULE_2__["Events"].AUDIO_TRACK_SWITCHING, this.onAudioTrackSwitching, this);
                hls.on(_events__WEBPACK_IMPORTED_MODULE_2__["Events"].AUDIO_TRACK_LOADED, this.onAudioTrackLoaded, this);
                hls.on(_events__WEBPACK_IMPORTED_MODULE_2__["Events"].ERROR, this.onError, this);
                hls.on(_events__WEBPACK_IMPORTED_MODULE_2__["Events"].BUFFER_RESET, this.onBufferReset, this);
                hls.on(_events__WEBPACK_IMPORTED_MODULE_2__["Events"].BUFFER_CREATED, this.onBufferCreated, this);
                hls.on(_events__WEBPACK_IMPORTED_MODULE_2__["Events"].BUFFER_FLUSHED, this.onBufferFlushed, this);
                hls.on(_events__WEBPACK_IMPORTED_MODULE_2__["Events"].INIT_PTS_FOUND, this.onInitPtsFound, this);
                hls.on(_events__WEBPACK_IMPORTED_MODULE_2__["Events"].FRAG_BUFFERED, this.onFragBuffered, this);
              };
              _proto._unregisterListeners = function _unregisterListeners() {
                var hls = this.hls;
                hls.off(_events__WEBPACK_IMPORTED_MODULE_2__["Events"].MEDIA_ATTACHED, this.onMediaAttached, this);
                hls.off(_events__WEBPACK_IMPORTED_MODULE_2__["Events"].MEDIA_DETACHING, this.onMediaDetaching, this);
                hls.off(_events__WEBPACK_IMPORTED_MODULE_2__["Events"].MANIFEST_LOADING, this.onManifestLoading, this);
                hls.off(_events__WEBPACK_IMPORTED_MODULE_2__["Events"].LEVEL_LOADED, this.onLevelLoaded, this);
                hls.off(_events__WEBPACK_IMPORTED_MODULE_2__["Events"].AUDIO_TRACKS_UPDATED, this.onAudioTracksUpdated, this);
                hls.off(_events__WEBPACK_IMPORTED_MODULE_2__["Events"].AUDIO_TRACK_SWITCHING, this.onAudioTrackSwitching, this);
                hls.off(_events__WEBPACK_IMPORTED_MODULE_2__["Events"].AUDIO_TRACK_LOADED, this.onAudioTrackLoaded, this);
                hls.off(_events__WEBPACK_IMPORTED_MODULE_2__["Events"].ERROR, this.onError, this);
                hls.off(_events__WEBPACK_IMPORTED_MODULE_2__["Events"].BUFFER_RESET, this.onBufferReset, this);
                hls.off(_events__WEBPACK_IMPORTED_MODULE_2__["Events"].BUFFER_CREATED, this.onBufferCreated, this);
                hls.off(_events__WEBPACK_IMPORTED_MODULE_2__["Events"].BUFFER_FLUSHED, this.onBufferFlushed, this);
                hls.off(_events__WEBPACK_IMPORTED_MODULE_2__["Events"].INIT_PTS_FOUND, this.onInitPtsFound, this);
                hls.off(_events__WEBPACK_IMPORTED_MODULE_2__["Events"].FRAG_BUFFERED, this.onFragBuffered, this);
              };
              _proto.onInitPtsFound = function onInitPtsFound(event, _ref) {
                var frag = _ref.frag, id = _ref.id, initPTS = _ref.initPTS;
                if (id === "main") {
                  var cc = frag.cc;
                  this.initPTS[frag.cc] = initPTS;
                  this.log("InitPTS for cc: " + cc + " found from main: " + initPTS);
                  this.videoTrackCC = cc;
                  if (this.state === _base_stream_controller__WEBPACK_IMPORTED_MODULE_1__["State"].WAITING_INIT_PTS) {
                    this.tick();
                  }
                }
              };
              _proto.startLoad = function startLoad(startPosition) {
                if (!this.levels) {
                  this.startPosition = startPosition;
                  this.state = _base_stream_controller__WEBPACK_IMPORTED_MODULE_1__["State"].STOPPED;
                  return;
                }
                var lastCurrentTime = this.lastCurrentTime;
                this.stopLoad();
                this.setInterval(TICK_INTERVAL);
                this.fragLoadError = 0;
                if (lastCurrentTime > 0 && startPosition === -1) {
                  this.log("Override startPosition with lastCurrentTime @" + lastCurrentTime.toFixed(3));
                  this.state = _base_stream_controller__WEBPACK_IMPORTED_MODULE_1__["State"].IDLE;
                } else {
                  this.loadedmetadata = false;
                  this.state = _base_stream_controller__WEBPACK_IMPORTED_MODULE_1__["State"].WAITING_TRACK;
                }
                this.nextLoadPosition = this.startPosition = this.lastCurrentTime = startPosition;
                this.tick();
              };
              _proto.doTick = function doTick() {
                switch (this.state) {
                  case _base_stream_controller__WEBPACK_IMPORTED_MODULE_1__["State"].IDLE:
                    this.doTickIdle();
                    break;
                  case _base_stream_controller__WEBPACK_IMPORTED_MODULE_1__["State"].WAITING_TRACK: {
                    var _levels$trackId;
                    var levels = this.levels, trackId = this.trackId;
                    var details = levels === null || levels === void 0 ? void 0 : (_levels$trackId = levels[trackId]) === null || _levels$trackId === void 0 ? void 0 : _levels$trackId.details;
                    if (details) {
                      if (this.waitForCdnTuneIn(details)) {
                        break;
                      }
                      this.state = _base_stream_controller__WEBPACK_IMPORTED_MODULE_1__["State"].WAITING_INIT_PTS;
                    }
                    break;
                  }
                  case _base_stream_controller__WEBPACK_IMPORTED_MODULE_1__["State"].FRAG_LOADING_WAITING_RETRY: {
                    var _this$media;
                    var now = performance.now();
                    var retryDate = this.retryDate;
                    if (!retryDate || now >= retryDate || (_this$media = this.media) !== null && _this$media !== void 0 && _this$media.seeking) {
                      this.log("RetryDate reached, switch back to IDLE state");
                      this.state = _base_stream_controller__WEBPACK_IMPORTED_MODULE_1__["State"].IDLE;
                    }
                    break;
                  }
                  case _base_stream_controller__WEBPACK_IMPORTED_MODULE_1__["State"].WAITING_INIT_PTS: {
                    var waitingData = this.waitingData;
                    if (waitingData) {
                      var frag = waitingData.frag, part = waitingData.part, cache = waitingData.cache, complete = waitingData.complete;
                      if (this.initPTS[frag.cc] !== void 0) {
                        this.waitingData = null;
                        this.waitingVideoCC = -1;
                        this.state = _base_stream_controller__WEBPACK_IMPORTED_MODULE_1__["State"].FRAG_LOADING;
                        var payload = cache.flush();
                        var data = {
                          frag,
                          part,
                          payload,
                          networkDetails: null
                        };
                        this._handleFragmentLoadProgress(data);
                        if (complete) {
                          _BaseStreamController.prototype._handleFragmentLoadComplete.call(this, data);
                        }
                      } else if (this.videoTrackCC !== this.waitingVideoCC) {
                        _utils_logger__WEBPACK_IMPORTED_MODULE_14__["logger"].log("Waiting fragment cc (" + frag.cc + ") cancelled because video is at cc " + this.videoTrackCC);
                        this.clearWaitingFragment();
                      } else {
                        var pos = this.getLoadPosition();
                        var bufferInfo = _utils_buffer_helper__WEBPACK_IMPORTED_MODULE_3__["BufferHelper"].bufferInfo(this.mediaBuffer, pos, this.config.maxBufferHole);
                        var waitingFragmentAtPosition = Object(_fragment_finders__WEBPACK_IMPORTED_MODULE_11__["fragmentWithinToleranceTest"])(bufferInfo.end, this.config.maxFragLookUpTolerance, frag);
                        if (waitingFragmentAtPosition < 0) {
                          _utils_logger__WEBPACK_IMPORTED_MODULE_14__["logger"].log("Waiting fragment cc (" + frag.cc + ") @ " + frag.start + " cancelled because another fragment at " + bufferInfo.end + " is needed");
                          this.clearWaitingFragment();
                        }
                      }
                    } else {
                      this.state = _base_stream_controller__WEBPACK_IMPORTED_MODULE_1__["State"].IDLE;
                    }
                  }
                }
                this.onTickEnd();
              };
              _proto.clearWaitingFragment = function clearWaitingFragment() {
                var waitingData = this.waitingData;
                if (waitingData) {
                  this.fragmentTracker.removeFragment(waitingData.frag);
                  this.waitingData = null;
                  this.waitingVideoCC = -1;
                  this.state = _base_stream_controller__WEBPACK_IMPORTED_MODULE_1__["State"].IDLE;
                }
              };
              _proto.onTickEnd = function onTickEnd() {
                var media2 = this.media;
                if (!media2 || !media2.readyState) {
                  return;
                }
                var mediaBuffer = this.mediaBuffer ? this.mediaBuffer : media2;
                var buffered = mediaBuffer.buffered;
                if (!this.loadedmetadata && buffered.length) {
                  this.loadedmetadata = true;
                }
                this.lastCurrentTime = media2.currentTime;
              };
              _proto.doTickIdle = function doTickIdle() {
                var _frag$decryptdata, _frag$decryptdata2;
                var hls = this.hls, levels = this.levels, media2 = this.media, trackId = this.trackId;
                var config2 = hls.config;
                if (!levels || !levels[trackId]) {
                  return;
                }
                if (!media2 && (this.startFragRequested || !config2.startFragPrefetch)) {
                  return;
                }
                var levelInfo = levels[trackId];
                var trackDetails = levelInfo.details;
                if (!trackDetails || trackDetails.live && this.levelLastLoaded !== trackId || this.waitForCdnTuneIn(trackDetails)) {
                  this.state = _base_stream_controller__WEBPACK_IMPORTED_MODULE_1__["State"].WAITING_TRACK;
                  return;
                }
                if (this.bufferFlushed) {
                  this.bufferFlushed = false;
                  this.afterBufferFlushed(this.mediaBuffer ? this.mediaBuffer : this.media, _loader_fragment__WEBPACK_IMPORTED_MODULE_7__["ElementaryStreamTypes"].AUDIO, _types_loader__WEBPACK_IMPORTED_MODULE_6__["PlaylistLevelType"].AUDIO);
                }
                var bufferInfo = this.getFwdBufferInfo(this.mediaBuffer ? this.mediaBuffer : this.media, _types_loader__WEBPACK_IMPORTED_MODULE_6__["PlaylistLevelType"].AUDIO);
                if (bufferInfo === null) {
                  return;
                }
                var bufferLen = bufferInfo.len;
                var maxBufLen = this.getMaxBufferLength();
                var audioSwitch = this.audioSwitch;
                if (bufferLen >= maxBufLen && !audioSwitch) {
                  return;
                }
                if (!audioSwitch && this._streamEnded(bufferInfo, trackDetails)) {
                  hls.trigger(_events__WEBPACK_IMPORTED_MODULE_2__["Events"].BUFFER_EOS, {
                    type: "audio"
                  });
                  this.state = _base_stream_controller__WEBPACK_IMPORTED_MODULE_1__["State"].ENDED;
                  return;
                }
                var fragments = trackDetails.fragments;
                var start = fragments[0].start;
                var targetBufferTime = bufferInfo.end;
                if (audioSwitch) {
                  var pos = this.getLoadPosition();
                  targetBufferTime = pos;
                  if (trackDetails.PTSKnown && pos < start) {
                    if (bufferInfo.end > start || bufferInfo.nextStart) {
                      this.log("Alt audio track ahead of main track, seek to start of alt audio track");
                      media2.currentTime = start + 0.05;
                    }
                  }
                }
                var frag = this.getNextFragment(targetBufferTime, trackDetails);
                if (!frag) {
                  this.bufferFlushed = true;
                  return;
                }
                if (((_frag$decryptdata = frag.decryptdata) === null || _frag$decryptdata === void 0 ? void 0 : _frag$decryptdata.keyFormat) === "identity" && !((_frag$decryptdata2 = frag.decryptdata) !== null && _frag$decryptdata2 !== void 0 && _frag$decryptdata2.key)) {
                  this.loadKey(frag, trackDetails);
                } else {
                  this.loadFragment(frag, trackDetails, targetBufferTime);
                }
              };
              _proto.getMaxBufferLength = function getMaxBufferLength() {
                var maxConfigBuffer = _BaseStreamController.prototype.getMaxBufferLength.call(this);
                var mainBufferInfo = this.getFwdBufferInfo(this.videoBuffer ? this.videoBuffer : this.media, _types_loader__WEBPACK_IMPORTED_MODULE_6__["PlaylistLevelType"].MAIN);
                if (mainBufferInfo === null) {
                  return maxConfigBuffer;
                }
                return Math.max(maxConfigBuffer, mainBufferInfo.len);
              };
              _proto.onMediaDetaching = function onMediaDetaching() {
                this.videoBuffer = null;
                _BaseStreamController.prototype.onMediaDetaching.call(this);
              };
              _proto.onAudioTracksUpdated = function onAudioTracksUpdated(event, _ref2) {
                var audioTracks = _ref2.audioTracks;
                this.resetTransmuxer();
                this.levels = audioTracks.map(function(mediaPlaylist) {
                  return new _types_level__WEBPACK_IMPORTED_MODULE_5__["Level"](mediaPlaylist);
                });
              };
              _proto.onAudioTrackSwitching = function onAudioTrackSwitching(event, data) {
                var altAudio = !!data.url;
                this.trackId = data.id;
                var fragCurrent = this.fragCurrent;
                if (fragCurrent !== null && fragCurrent !== void 0 && fragCurrent.loader) {
                  fragCurrent.loader.abort();
                }
                this.fragCurrent = null;
                this.clearWaitingFragment();
                if (!altAudio) {
                  this.resetTransmuxer();
                } else {
                  this.setInterval(TICK_INTERVAL);
                }
                if (altAudio) {
                  this.audioSwitch = true;
                  this.state = _base_stream_controller__WEBPACK_IMPORTED_MODULE_1__["State"].IDLE;
                } else {
                  this.state = _base_stream_controller__WEBPACK_IMPORTED_MODULE_1__["State"].STOPPED;
                }
                this.tick();
              };
              _proto.onManifestLoading = function onManifestLoading() {
                this.mainDetails = null;
                this.fragmentTracker.removeAllFragments();
                this.startPosition = this.lastCurrentTime = 0;
                this.bufferFlushed = false;
              };
              _proto.onLevelLoaded = function onLevelLoaded(event, data) {
                this.mainDetails = data.details;
              };
              _proto.onAudioTrackLoaded = function onAudioTrackLoaded(event, data) {
                var _track$details;
                var levels = this.levels;
                var newDetails = data.details, trackId = data.id;
                if (!levels) {
                  this.warn("Audio tracks were reset while loading level " + trackId);
                  return;
                }
                this.log("Track " + trackId + " loaded [" + newDetails.startSN + "," + newDetails.endSN + "],duration:" + newDetails.totalduration);
                var track = levels[trackId];
                var sliding = 0;
                if (newDetails.live || (_track$details = track.details) !== null && _track$details !== void 0 && _track$details.live) {
                  var mainDetails = this.mainDetails;
                  if (!newDetails.fragments[0]) {
                    newDetails.deltaUpdateFailed = true;
                  }
                  if (newDetails.deltaUpdateFailed || !mainDetails) {
                    return;
                  }
                  if (!track.details && newDetails.hasProgramDateTime && mainDetails.hasProgramDateTime) {
                    Object(_utils_discontinuities__WEBPACK_IMPORTED_MODULE_12__["alignMediaPlaylistByPDT"])(newDetails, mainDetails);
                    sliding = newDetails.fragments[0].start;
                  } else {
                    sliding = this.alignPlaylists(newDetails, track.details);
                  }
                }
                track.details = newDetails;
                this.levelLastLoaded = trackId;
                if (!this.startFragRequested && (this.mainDetails || !newDetails.live)) {
                  this.setStartPosition(track.details, sliding);
                }
                if (this.state === _base_stream_controller__WEBPACK_IMPORTED_MODULE_1__["State"].WAITING_TRACK && !this.waitForCdnTuneIn(newDetails)) {
                  this.state = _base_stream_controller__WEBPACK_IMPORTED_MODULE_1__["State"].IDLE;
                }
                this.tick();
              };
              _proto._handleFragmentLoadProgress = function _handleFragmentLoadProgress(data) {
                var _frag$initSegment;
                var frag = data.frag, part = data.part, payload = data.payload;
                var config2 = this.config, trackId = this.trackId, levels = this.levels;
                if (!levels) {
                  this.warn("Audio tracks were reset while fragment load was in progress. Fragment " + frag.sn + " of level " + frag.level + " will not be buffered");
                  return;
                }
                var track = levels[trackId];
                console.assert(track, "Audio track is defined on fragment load progress");
                var details = track.details;
                console.assert(details, "Audio track details are defined on fragment load progress");
                var audioCodec = config2.defaultAudioCodec || track.audioCodec || "mp4a.40.2";
                var transmuxer = this.transmuxer;
                if (!transmuxer) {
                  transmuxer = this.transmuxer = new _demux_transmuxer_interface__WEBPACK_IMPORTED_MODULE_9__["default"](this.hls, _types_loader__WEBPACK_IMPORTED_MODULE_6__["PlaylistLevelType"].AUDIO, this._handleTransmuxComplete.bind(this), this._handleTransmuxerFlush.bind(this));
                }
                var initPTS = this.initPTS[frag.cc];
                var initSegmentData = (_frag$initSegment = frag.initSegment) === null || _frag$initSegment === void 0 ? void 0 : _frag$initSegment.data;
                if (initPTS !== void 0) {
                  var accurateTimeOffset = false;
                  var partIndex = part ? part.index : -1;
                  var partial = partIndex !== -1;
                  var chunkMeta = new _types_transmuxer__WEBPACK_IMPORTED_MODULE_10__["ChunkMetadata"](frag.level, frag.sn, frag.stats.chunkCount, payload.byteLength, partIndex, partial);
                  transmuxer.push(payload, initSegmentData, audioCodec, "", frag, part, details.totalduration, accurateTimeOffset, chunkMeta, initPTS);
                } else {
                  _utils_logger__WEBPACK_IMPORTED_MODULE_14__["logger"].log("Unknown video PTS for cc " + frag.cc + ", waiting for video PTS before demuxing audio frag " + frag.sn + " of [" + details.startSN + " ," + details.endSN + "],track " + trackId);
                  var _this$waitingData = this.waitingData = this.waitingData || {
                    frag,
                    part,
                    cache: new _demux_chunk_cache__WEBPACK_IMPORTED_MODULE_8__["default"](),
                    complete: false
                  }, cache = _this$waitingData.cache;
                  cache.push(new Uint8Array(payload));
                  this.waitingVideoCC = this.videoTrackCC;
                  this.state = _base_stream_controller__WEBPACK_IMPORTED_MODULE_1__["State"].WAITING_INIT_PTS;
                }
              };
              _proto._handleFragmentLoadComplete = function _handleFragmentLoadComplete(fragLoadedData) {
                if (this.waitingData) {
                  this.waitingData.complete = true;
                  return;
                }
                _BaseStreamController.prototype._handleFragmentLoadComplete.call(this, fragLoadedData);
              };
              _proto.onBufferReset = function onBufferReset() {
                this.mediaBuffer = this.videoBuffer = null;
                this.loadedmetadata = false;
              };
              _proto.onBufferCreated = function onBufferCreated(event, data) {
                var audioTrack = data.tracks.audio;
                if (audioTrack) {
                  this.mediaBuffer = audioTrack.buffer;
                }
                if (data.tracks.video) {
                  this.videoBuffer = data.tracks.video.buffer;
                }
              };
              _proto.onFragBuffered = function onFragBuffered(event, data) {
                var frag = data.frag, part = data.part;
                if (frag.type !== _types_loader__WEBPACK_IMPORTED_MODULE_6__["PlaylistLevelType"].AUDIO) {
                  return;
                }
                if (this.fragContextChanged(frag)) {
                  this.warn("Fragment " + frag.sn + (part ? " p: " + part.index : "") + " of level " + frag.level + " finished buffering, but was aborted. state: " + this.state + ", audioSwitch: " + this.audioSwitch);
                  return;
                }
                if (frag.sn !== "initSegment") {
                  this.fragPrevious = frag;
                  if (this.audioSwitch) {
                    this.audioSwitch = false;
                    this.hls.trigger(_events__WEBPACK_IMPORTED_MODULE_2__["Events"].AUDIO_TRACK_SWITCHED, {
                      id: this.trackId
                    });
                  }
                }
                this.fragBufferedComplete(frag, part);
              };
              _proto.onError = function onError(event, data) {
                switch (data.details) {
                  case _errors__WEBPACK_IMPORTED_MODULE_13__["ErrorDetails"].FRAG_LOAD_ERROR:
                  case _errors__WEBPACK_IMPORTED_MODULE_13__["ErrorDetails"].FRAG_LOAD_TIMEOUT:
                  case _errors__WEBPACK_IMPORTED_MODULE_13__["ErrorDetails"].KEY_LOAD_ERROR:
                  case _errors__WEBPACK_IMPORTED_MODULE_13__["ErrorDetails"].KEY_LOAD_TIMEOUT:
                    this.onFragmentOrKeyLoadError(_types_loader__WEBPACK_IMPORTED_MODULE_6__["PlaylistLevelType"].AUDIO, data);
                    break;
                  case _errors__WEBPACK_IMPORTED_MODULE_13__["ErrorDetails"].AUDIO_TRACK_LOAD_ERROR:
                  case _errors__WEBPACK_IMPORTED_MODULE_13__["ErrorDetails"].AUDIO_TRACK_LOAD_TIMEOUT:
                    if (this.state !== _base_stream_controller__WEBPACK_IMPORTED_MODULE_1__["State"].ERROR && this.state !== _base_stream_controller__WEBPACK_IMPORTED_MODULE_1__["State"].STOPPED) {
                      this.state = data.fatal ? _base_stream_controller__WEBPACK_IMPORTED_MODULE_1__["State"].ERROR : _base_stream_controller__WEBPACK_IMPORTED_MODULE_1__["State"].IDLE;
                      this.warn(data.details + " while loading frag, switching to " + this.state + " state");
                    }
                    break;
                  case _errors__WEBPACK_IMPORTED_MODULE_13__["ErrorDetails"].BUFFER_FULL_ERROR:
                    if (data.parent === "audio" && (this.state === _base_stream_controller__WEBPACK_IMPORTED_MODULE_1__["State"].PARSING || this.state === _base_stream_controller__WEBPACK_IMPORTED_MODULE_1__["State"].PARSED)) {
                      var flushBuffer = true;
                      var bufferedInfo = this.getFwdBufferInfo(this.mediaBuffer, _types_loader__WEBPACK_IMPORTED_MODULE_6__["PlaylistLevelType"].AUDIO);
                      if (bufferedInfo && bufferedInfo.len > 0.5) {
                        flushBuffer = !this.reduceMaxBufferLength(bufferedInfo.len);
                      }
                      if (flushBuffer) {
                        this.warn("Buffer full error also media.currentTime is not buffered, flush audio buffer");
                        this.fragCurrent = null;
                        _BaseStreamController.prototype.flushMainBuffer.call(this, 0, Number.POSITIVE_INFINITY, "audio");
                      }
                      this.resetLoadingState();
                    }
                    break;
                  default:
                    break;
                }
              };
              _proto.onBufferFlushed = function onBufferFlushed(event, _ref3) {
                var type = _ref3.type;
                if (type === _loader_fragment__WEBPACK_IMPORTED_MODULE_7__["ElementaryStreamTypes"].AUDIO) {
                  this.bufferFlushed = true;
                }
              };
              _proto._handleTransmuxComplete = function _handleTransmuxComplete(transmuxResult) {
                var _id3$samples;
                var id = "audio";
                var hls = this.hls;
                var remuxResult = transmuxResult.remuxResult, chunkMeta = transmuxResult.chunkMeta;
                var context = this.getCurrentContext(chunkMeta);
                if (!context) {
                  this.warn("The loading context changed while buffering fragment " + chunkMeta.sn + " of level " + chunkMeta.level + ". This chunk will not be buffered.");
                  this.resetLiveStartWhenNotLoaded(chunkMeta.level);
                  return;
                }
                var frag = context.frag, part = context.part;
                var audio = remuxResult.audio, text = remuxResult.text, id3 = remuxResult.id3, initSegment = remuxResult.initSegment;
                if (this.fragContextChanged(frag)) {
                  return;
                }
                this.state = _base_stream_controller__WEBPACK_IMPORTED_MODULE_1__["State"].PARSING;
                if (this.audioSwitch && audio) {
                  this.completeAudioSwitch();
                }
                if (initSegment !== null && initSegment !== void 0 && initSegment.tracks) {
                  this._bufferInitSegment(initSegment.tracks, frag, chunkMeta);
                  hls.trigger(_events__WEBPACK_IMPORTED_MODULE_2__["Events"].FRAG_PARSING_INIT_SEGMENT, {
                    frag,
                    id,
                    tracks: initSegment.tracks
                  });
                }
                if (audio) {
                  var startPTS = audio.startPTS, endPTS = audio.endPTS, startDTS = audio.startDTS, endDTS = audio.endDTS;
                  if (part) {
                    part.elementaryStreams[_loader_fragment__WEBPACK_IMPORTED_MODULE_7__["ElementaryStreamTypes"].AUDIO] = {
                      startPTS,
                      endPTS,
                      startDTS,
                      endDTS
                    };
                  }
                  frag.setElementaryStreamInfo(_loader_fragment__WEBPACK_IMPORTED_MODULE_7__["ElementaryStreamTypes"].AUDIO, startPTS, endPTS, startDTS, endDTS);
                  this.bufferFragmentData(audio, frag, part, chunkMeta);
                }
                if (id3 !== null && id3 !== void 0 && (_id3$samples = id3.samples) !== null && _id3$samples !== void 0 && _id3$samples.length) {
                  var emittedID3 = _extends2({
                    frag,
                    id
                  }, id3);
                  hls.trigger(_events__WEBPACK_IMPORTED_MODULE_2__["Events"].FRAG_PARSING_METADATA, emittedID3);
                }
                if (text) {
                  var emittedText = _extends2({
                    frag,
                    id
                  }, text);
                  hls.trigger(_events__WEBPACK_IMPORTED_MODULE_2__["Events"].FRAG_PARSING_USERDATA, emittedText);
                }
              };
              _proto._bufferInitSegment = function _bufferInitSegment(tracks, frag, chunkMeta) {
                if (this.state !== _base_stream_controller__WEBPACK_IMPORTED_MODULE_1__["State"].PARSING) {
                  return;
                }
                if (tracks.video) {
                  delete tracks.video;
                }
                var track = tracks.audio;
                if (!track) {
                  return;
                }
                track.levelCodec = track.codec;
                track.id = "audio";
                this.log("Init audio buffer, container:" + track.container + ", codecs[parsed]=[" + track.codec + "]");
                this.hls.trigger(_events__WEBPACK_IMPORTED_MODULE_2__["Events"].BUFFER_CODECS, tracks);
                var initSegment = track.initSegment;
                if (initSegment !== null && initSegment !== void 0 && initSegment.byteLength) {
                  var segment = {
                    type: "audio",
                    frag,
                    part: null,
                    chunkMeta,
                    parent: frag.type,
                    data: initSegment
                  };
                  this.hls.trigger(_events__WEBPACK_IMPORTED_MODULE_2__["Events"].BUFFER_APPENDING, segment);
                }
                this.tick();
              };
              _proto.loadFragment = function loadFragment(frag, trackDetails, targetBufferTime) {
                var fragState = this.fragmentTracker.getState(frag);
                this.fragCurrent = frag;
                if (this.audioSwitch || fragState === _fragment_tracker__WEBPACK_IMPORTED_MODULE_4__["FragmentState"].NOT_LOADED || fragState === _fragment_tracker__WEBPACK_IMPORTED_MODULE_4__["FragmentState"].PARTIAL) {
                  if (frag.sn === "initSegment") {
                    this._loadInitSegment(frag);
                  } else if (trackDetails.live && !Object(_home_runner_work_hls_js_hls_js_src_polyfills_number__WEBPACK_IMPORTED_MODULE_0__["isFiniteNumber"])(this.initPTS[frag.cc])) {
                    this.log("Waiting for video PTS in continuity counter " + frag.cc + " of live stream before loading audio fragment " + frag.sn + " of level " + this.trackId);
                    this.state = _base_stream_controller__WEBPACK_IMPORTED_MODULE_1__["State"].WAITING_INIT_PTS;
                  } else {
                    this.startFragRequested = true;
                    _BaseStreamController.prototype.loadFragment.call(this, frag, trackDetails, targetBufferTime);
                  }
                }
              };
              _proto.completeAudioSwitch = function completeAudioSwitch() {
                var hls = this.hls, media2 = this.media, trackId = this.trackId;
                if (media2) {
                  this.log("Switching audio track : flushing all audio");
                  _BaseStreamController.prototype.flushMainBuffer.call(this, 0, Number.POSITIVE_INFINITY, "audio");
                }
                this.audioSwitch = false;
                hls.trigger(_events__WEBPACK_IMPORTED_MODULE_2__["Events"].AUDIO_TRACK_SWITCHED, {
                  id: trackId
                });
              };
              return AudioStreamController2;
            }(_base_stream_controller__WEBPACK_IMPORTED_MODULE_1__["default"]);
            __webpack_exports__["default"] = AudioStreamController;
          },
          "./src/controller/audio-track-controller.ts": function(module2, __webpack_exports__, __webpack_require__) {
            "use strict";
            __webpack_require__.r(__webpack_exports__);
            var _events__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("./src/events.ts");
            var _errors__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("./src/errors.ts");
            var _base_playlist_controller__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__("./src/controller/base-playlist-controller.ts");
            var _types_loader__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__("./src/types/loader.ts");
            function _defineProperties(target, props) {
              for (var i3 = 0; i3 < props.length; i3++) {
                var descriptor = props[i3];
                descriptor.enumerable = descriptor.enumerable || false;
                descriptor.configurable = true;
                if ("value" in descriptor)
                  descriptor.writable = true;
                Object.defineProperty(target, descriptor.key, descriptor);
              }
            }
            function _createClass(Constructor, protoProps, staticProps) {
              if (protoProps)
                _defineProperties(Constructor.prototype, protoProps);
              if (staticProps)
                _defineProperties(Constructor, staticProps);
              return Constructor;
            }
            function _inheritsLoose(subClass, superClass) {
              subClass.prototype = Object.create(superClass.prototype);
              subClass.prototype.constructor = subClass;
              _setPrototypeOf(subClass, superClass);
            }
            function _setPrototypeOf(o3, p5) {
              _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf2(o4, p6) {
                o4.__proto__ = p6;
                return o4;
              };
              return _setPrototypeOf(o3, p5);
            }
            var AudioTrackController = /* @__PURE__ */ function(_BasePlaylistControll) {
              _inheritsLoose(AudioTrackController2, _BasePlaylistControll);
              function AudioTrackController2(hls) {
                var _this;
                _this = _BasePlaylistControll.call(this, hls, "[audio-track-controller]") || this;
                _this.tracks = [];
                _this.groupId = null;
                _this.tracksInGroup = [];
                _this.trackId = -1;
                _this.trackName = "";
                _this.selectDefaultTrack = true;
                _this.registerListeners();
                return _this;
              }
              var _proto = AudioTrackController2.prototype;
              _proto.registerListeners = function registerListeners() {
                var hls = this.hls;
                hls.on(_events__WEBPACK_IMPORTED_MODULE_0__["Events"].MANIFEST_LOADING, this.onManifestLoading, this);
                hls.on(_events__WEBPACK_IMPORTED_MODULE_0__["Events"].MANIFEST_PARSED, this.onManifestParsed, this);
                hls.on(_events__WEBPACK_IMPORTED_MODULE_0__["Events"].LEVEL_LOADING, this.onLevelLoading, this);
                hls.on(_events__WEBPACK_IMPORTED_MODULE_0__["Events"].LEVEL_SWITCHING, this.onLevelSwitching, this);
                hls.on(_events__WEBPACK_IMPORTED_MODULE_0__["Events"].AUDIO_TRACK_LOADED, this.onAudioTrackLoaded, this);
                hls.on(_events__WEBPACK_IMPORTED_MODULE_0__["Events"].ERROR, this.onError, this);
              };
              _proto.unregisterListeners = function unregisterListeners() {
                var hls = this.hls;
                hls.off(_events__WEBPACK_IMPORTED_MODULE_0__["Events"].MANIFEST_LOADING, this.onManifestLoading, this);
                hls.off(_events__WEBPACK_IMPORTED_MODULE_0__["Events"].MANIFEST_PARSED, this.onManifestParsed, this);
                hls.off(_events__WEBPACK_IMPORTED_MODULE_0__["Events"].LEVEL_LOADING, this.onLevelLoading, this);
                hls.off(_events__WEBPACK_IMPORTED_MODULE_0__["Events"].LEVEL_SWITCHING, this.onLevelSwitching, this);
                hls.off(_events__WEBPACK_IMPORTED_MODULE_0__["Events"].AUDIO_TRACK_LOADED, this.onAudioTrackLoaded, this);
                hls.off(_events__WEBPACK_IMPORTED_MODULE_0__["Events"].ERROR, this.onError, this);
              };
              _proto.destroy = function destroy() {
                this.unregisterListeners();
                this.tracks.length = 0;
                this.tracksInGroup.length = 0;
                _BasePlaylistControll.prototype.destroy.call(this);
              };
              _proto.onManifestLoading = function onManifestLoading() {
                this.tracks = [];
                this.groupId = null;
                this.tracksInGroup = [];
                this.trackId = -1;
                this.trackName = "";
                this.selectDefaultTrack = true;
              };
              _proto.onManifestParsed = function onManifestParsed(event, data) {
                this.tracks = data.audioTracks || [];
              };
              _proto.onAudioTrackLoaded = function onAudioTrackLoaded(event, data) {
                var id = data.id, details = data.details;
                var currentTrack = this.tracksInGroup[id];
                if (!currentTrack) {
                  this.warn("Invalid audio track id " + id);
                  return;
                }
                var curDetails = currentTrack.details;
                currentTrack.details = data.details;
                this.log("audioTrack " + id + " loaded [" + details.startSN + "-" + details.endSN + "]");
                if (id === this.trackId) {
                  this.retryCount = 0;
                  this.playlistLoaded(id, data, curDetails);
                }
              };
              _proto.onLevelLoading = function onLevelLoading(event, data) {
                this.switchLevel(data.level);
              };
              _proto.onLevelSwitching = function onLevelSwitching(event, data) {
                this.switchLevel(data.level);
              };
              _proto.switchLevel = function switchLevel(levelIndex) {
                var levelInfo = this.hls.levels[levelIndex];
                if (!(levelInfo !== null && levelInfo !== void 0 && levelInfo.audioGroupIds)) {
                  return;
                }
                var audioGroupId = levelInfo.audioGroupIds[levelInfo.urlId];
                if (this.groupId !== audioGroupId) {
                  this.groupId = audioGroupId;
                  var audioTracks = this.tracks.filter(function(track) {
                    return !audioGroupId || track.groupId === audioGroupId;
                  });
                  if (this.selectDefaultTrack && !audioTracks.some(function(track) {
                    return track.default;
                  })) {
                    this.selectDefaultTrack = false;
                  }
                  this.tracksInGroup = audioTracks;
                  var audioTracksUpdated = {
                    audioTracks
                  };
                  this.log("Updating audio tracks, " + audioTracks.length + ' track(s) found in "' + audioGroupId + '" group-id');
                  this.hls.trigger(_events__WEBPACK_IMPORTED_MODULE_0__["Events"].AUDIO_TRACKS_UPDATED, audioTracksUpdated);
                  this.selectInitialTrack();
                }
              };
              _proto.onError = function onError(event, data) {
                _BasePlaylistControll.prototype.onError.call(this, event, data);
                if (data.fatal || !data.context) {
                  return;
                }
                if (data.context.type === _types_loader__WEBPACK_IMPORTED_MODULE_3__["PlaylistContextType"].AUDIO_TRACK && data.context.id === this.trackId && data.context.groupId === this.groupId) {
                  this.retryLoadingOrFail(data);
                }
              };
              _proto.setAudioTrack = function setAudioTrack(newId) {
                var tracks = this.tracksInGroup;
                if (newId < 0 || newId >= tracks.length) {
                  this.warn("Invalid id passed to audio-track controller");
                  return;
                }
                this.clearTimer();
                var lastTrack = tracks[this.trackId];
                this.log("Now switching to audio-track index " + newId);
                var track = tracks[newId];
                var id = track.id, _track$groupId = track.groupId, groupId = _track$groupId === void 0 ? "" : _track$groupId, name = track.name, type = track.type, url = track.url;
                this.trackId = newId;
                this.trackName = name;
                this.selectDefaultTrack = false;
                this.hls.trigger(_events__WEBPACK_IMPORTED_MODULE_0__["Events"].AUDIO_TRACK_SWITCHING, {
                  id,
                  groupId,
                  name,
                  type,
                  url
                });
                if (track.details && !track.details.live) {
                  return;
                }
                var hlsUrlParameters = this.switchParams(track.url, lastTrack === null || lastTrack === void 0 ? void 0 : lastTrack.details);
                this.loadPlaylist(hlsUrlParameters);
              };
              _proto.selectInitialTrack = function selectInitialTrack() {
                var audioTracks = this.tracksInGroup;
                console.assert(audioTracks.length, "Initial audio track should be selected when tracks are known");
                var currentAudioTrackName = this.trackName;
                var trackId = this.findTrackId(currentAudioTrackName) || this.findTrackId();
                if (trackId !== -1) {
                  this.setAudioTrack(trackId);
                } else {
                  this.warn("No track found for running audio group-ID: " + this.groupId);
                  this.hls.trigger(_events__WEBPACK_IMPORTED_MODULE_0__["Events"].ERROR, {
                    type: _errors__WEBPACK_IMPORTED_MODULE_1__["ErrorTypes"].MEDIA_ERROR,
                    details: _errors__WEBPACK_IMPORTED_MODULE_1__["ErrorDetails"].AUDIO_TRACK_LOAD_ERROR,
                    fatal: true
                  });
                }
              };
              _proto.findTrackId = function findTrackId(name) {
                var audioTracks = this.tracksInGroup;
                for (var i3 = 0; i3 < audioTracks.length; i3++) {
                  var track = audioTracks[i3];
                  if (!this.selectDefaultTrack || track.default) {
                    if (!name || name === track.name) {
                      return track.id;
                    }
                  }
                }
                return -1;
              };
              _proto.loadPlaylist = function loadPlaylist(hlsUrlParameters) {
                var audioTrack = this.tracksInGroup[this.trackId];
                if (this.shouldLoadTrack(audioTrack)) {
                  var id = audioTrack.id;
                  var groupId = audioTrack.groupId;
                  var url = audioTrack.url;
                  if (hlsUrlParameters) {
                    try {
                      url = hlsUrlParameters.addDirectives(url);
                    } catch (error) {
                      this.warn("Could not construct new URL with HLS Delivery Directives: " + error);
                    }
                  }
                  this.log("loading audio-track playlist for id: " + id);
                  this.clearTimer();
                  this.hls.trigger(_events__WEBPACK_IMPORTED_MODULE_0__["Events"].AUDIO_TRACK_LOADING, {
                    url,
                    id,
                    groupId,
                    deliveryDirectives: hlsUrlParameters || null
                  });
                }
              };
              _createClass(AudioTrackController2, [{
                key: "audioTracks",
                get: function get() {
                  return this.tracksInGroup;
                }
              }, {
                key: "audioTrack",
                get: function get() {
                  return this.trackId;
                },
                set: function set(newId) {
                  this.selectDefaultTrack = false;
                  this.setAudioTrack(newId);
                }
              }]);
              return AudioTrackController2;
            }(_base_playlist_controller__WEBPACK_IMPORTED_MODULE_2__["default"]);
            __webpack_exports__["default"] = AudioTrackController;
          },
          "./src/controller/base-playlist-controller.ts": function(module2, __webpack_exports__, __webpack_require__) {
            "use strict";
            __webpack_require__.r(__webpack_exports__);
            __webpack_require__.d(__webpack_exports__, "default", function() {
              return BasePlaylistController;
            });
            var _home_runner_work_hls_js_hls_js_src_polyfills_number__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("./src/polyfills/number.ts");
            var _types_level__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("./src/types/level.ts");
            var _level_helper__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__("./src/controller/level-helper.ts");
            var _utils_logger__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__("./src/utils/logger.ts");
            var _errors__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__("./src/errors.ts");
            var BasePlaylistController = /* @__PURE__ */ function() {
              function BasePlaylistController2(hls, logPrefix) {
                this.hls = void 0;
                this.timer = -1;
                this.canLoad = false;
                this.retryCount = 0;
                this.log = void 0;
                this.warn = void 0;
                this.log = _utils_logger__WEBPACK_IMPORTED_MODULE_3__["logger"].log.bind(_utils_logger__WEBPACK_IMPORTED_MODULE_3__["logger"], logPrefix + ":");
                this.warn = _utils_logger__WEBPACK_IMPORTED_MODULE_3__["logger"].warn.bind(_utils_logger__WEBPACK_IMPORTED_MODULE_3__["logger"], logPrefix + ":");
                this.hls = hls;
              }
              var _proto = BasePlaylistController2.prototype;
              _proto.destroy = function destroy() {
                this.clearTimer();
                this.hls = this.log = this.warn = null;
              };
              _proto.onError = function onError(event, data) {
                if (data.fatal && data.type === _errors__WEBPACK_IMPORTED_MODULE_4__["ErrorTypes"].NETWORK_ERROR) {
                  this.clearTimer();
                }
              };
              _proto.clearTimer = function clearTimer() {
                clearTimeout(this.timer);
                this.timer = -1;
              };
              _proto.startLoad = function startLoad() {
                this.canLoad = true;
                this.retryCount = 0;
                this.loadPlaylist();
              };
              _proto.stopLoad = function stopLoad() {
                this.canLoad = false;
                this.clearTimer();
              };
              _proto.switchParams = function switchParams(playlistUri, previous) {
                var renditionReports = previous === null || previous === void 0 ? void 0 : previous.renditionReports;
                if (renditionReports) {
                  for (var i3 = 0; i3 < renditionReports.length; i3++) {
                    var attr = renditionReports[i3];
                    var uri = "" + attr.URI;
                    if (uri === playlistUri.substr(-uri.length)) {
                      var msn = parseInt(attr["LAST-MSN"]);
                      var part = parseInt(attr["LAST-PART"]);
                      if (previous && this.hls.config.lowLatencyMode) {
                        var currentGoal = Math.min(previous.age - previous.partTarget, previous.targetduration);
                        if (part !== void 0 && currentGoal > previous.partTarget) {
                          part += 1;
                        }
                      }
                      if (Object(_home_runner_work_hls_js_hls_js_src_polyfills_number__WEBPACK_IMPORTED_MODULE_0__["isFiniteNumber"])(msn)) {
                        return new _types_level__WEBPACK_IMPORTED_MODULE_1__["HlsUrlParameters"](msn, Object(_home_runner_work_hls_js_hls_js_src_polyfills_number__WEBPACK_IMPORTED_MODULE_0__["isFiniteNumber"])(part) ? part : void 0, _types_level__WEBPACK_IMPORTED_MODULE_1__["HlsSkip"].No);
                      }
                    }
                  }
                }
              };
              _proto.loadPlaylist = function loadPlaylist(hlsUrlParameters) {
              };
              _proto.shouldLoadTrack = function shouldLoadTrack(track) {
                return this.canLoad && track && !!track.url && (!track.details || track.details.live);
              };
              _proto.playlistLoaded = function playlistLoaded(index, data, previousDetails) {
                var _this = this;
                var details = data.details, stats = data.stats;
                var elapsed = stats.loading.end ? Math.max(0, self.performance.now() - stats.loading.end) : 0;
                details.advancedDateTime = Date.now() - elapsed;
                if (details.live || previousDetails !== null && previousDetails !== void 0 && previousDetails.live) {
                  details.reloaded(previousDetails);
                  if (previousDetails) {
                    this.log("live playlist " + index + " " + (details.advanced ? "REFRESHED " + details.lastPartSn + "-" + details.lastPartIndex : "MISSED"));
                  }
                  if (previousDetails && details.fragments.length > 0) {
                    Object(_level_helper__WEBPACK_IMPORTED_MODULE_2__["mergeDetails"])(previousDetails, details);
                  }
                  if (!this.canLoad || !details.live) {
                    return;
                  }
                  var deliveryDirectives;
                  var msn = void 0;
                  var part = void 0;
                  if (details.canBlockReload && details.endSN && details.advanced) {
                    var lowLatencyMode = this.hls.config.lowLatencyMode;
                    var lastPartSn = details.lastPartSn;
                    var endSn = details.endSN;
                    var lastPartIndex = details.lastPartIndex;
                    var hasParts = lastPartIndex !== -1;
                    var lastPart = lastPartSn === endSn;
                    var nextSnStartIndex = lowLatencyMode ? 0 : lastPartIndex;
                    if (hasParts) {
                      msn = lastPart ? endSn + 1 : lastPartSn;
                      part = lastPart ? nextSnStartIndex : lastPartIndex + 1;
                    } else {
                      msn = endSn + 1;
                    }
                    var lastAdvanced = details.age;
                    var cdnAge = lastAdvanced + details.ageHeader;
                    var currentGoal = Math.min(cdnAge - details.partTarget, details.targetduration * 1.5);
                    if (currentGoal > 0) {
                      if (previousDetails && currentGoal > previousDetails.tuneInGoal) {
                        this.warn("CDN Tune-in goal increased from: " + previousDetails.tuneInGoal + " to: " + currentGoal + " with playlist age: " + details.age);
                        currentGoal = 0;
                      } else {
                        var segments = Math.floor(currentGoal / details.targetduration);
                        msn += segments;
                        if (part !== void 0) {
                          var parts = Math.round(currentGoal % details.targetduration / details.partTarget);
                          part += parts;
                        }
                        this.log("CDN Tune-in age: " + details.ageHeader + "s last advanced " + lastAdvanced.toFixed(2) + "s goal: " + currentGoal + " skip sn " + segments + " to part " + part);
                      }
                      details.tuneInGoal = currentGoal;
                    }
                    deliveryDirectives = this.getDeliveryDirectives(details, data.deliveryDirectives, msn, part);
                    if (lowLatencyMode || !lastPart) {
                      this.loadPlaylist(deliveryDirectives);
                      return;
                    }
                  } else {
                    deliveryDirectives = this.getDeliveryDirectives(details, data.deliveryDirectives, msn, part);
                  }
                  var reloadInterval = Object(_level_helper__WEBPACK_IMPORTED_MODULE_2__["computeReloadInterval"])(details, stats);
                  if (msn !== void 0 && details.canBlockReload) {
                    reloadInterval -= details.partTarget || 1;
                  }
                  this.log("reload live playlist " + index + " in " + Math.round(reloadInterval) + " ms");
                  this.timer = self.setTimeout(function() {
                    return _this.loadPlaylist(deliveryDirectives);
                  }, reloadInterval);
                } else {
                  this.clearTimer();
                }
              };
              _proto.getDeliveryDirectives = function getDeliveryDirectives(details, previousDeliveryDirectives, msn, part) {
                var skip = Object(_types_level__WEBPACK_IMPORTED_MODULE_1__["getSkipValue"])(details, msn);
                if (previousDeliveryDirectives !== null && previousDeliveryDirectives !== void 0 && previousDeliveryDirectives.skip && details.deltaUpdateFailed) {
                  msn = previousDeliveryDirectives.msn;
                  part = previousDeliveryDirectives.part;
                  skip = _types_level__WEBPACK_IMPORTED_MODULE_1__["HlsSkip"].No;
                }
                return new _types_level__WEBPACK_IMPORTED_MODULE_1__["HlsUrlParameters"](msn, part, skip);
              };
              _proto.retryLoadingOrFail = function retryLoadingOrFail(errorEvent) {
                var _this2 = this;
                var config2 = this.hls.config;
                var retry = this.retryCount < config2.levelLoadingMaxRetry;
                if (retry) {
                  var _errorEvent$context;
                  this.retryCount++;
                  if (errorEvent.details.indexOf("LoadTimeOut") > -1 && (_errorEvent$context = errorEvent.context) !== null && _errorEvent$context !== void 0 && _errorEvent$context.deliveryDirectives) {
                    this.warn("retry playlist loading #" + this.retryCount + ' after "' + errorEvent.details + '"');
                    this.loadPlaylist();
                  } else {
                    var delay = Math.min(Math.pow(2, this.retryCount) * config2.levelLoadingRetryDelay, config2.levelLoadingMaxRetryTimeout);
                    this.timer = self.setTimeout(function() {
                      return _this2.loadPlaylist();
                    }, delay);
                    this.warn("retry playlist loading #" + this.retryCount + " in " + delay + ' ms after "' + errorEvent.details + '"');
                  }
                } else {
                  this.warn('cannot recover from error "' + errorEvent.details + '"');
                  this.clearTimer();
                  errorEvent.fatal = true;
                }
                return retry;
              };
              return BasePlaylistController2;
            }();
          },
          "./src/controller/base-stream-controller.ts": function(module2, __webpack_exports__, __webpack_require__) {
            "use strict";
            __webpack_require__.r(__webpack_exports__);
            __webpack_require__.d(__webpack_exports__, "State", function() {
              return State;
            });
            __webpack_require__.d(__webpack_exports__, "default", function() {
              return BaseStreamController;
            });
            var _home_runner_work_hls_js_hls_js_src_polyfills_number__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("./src/polyfills/number.ts");
            var _task_loop__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("./src/task-loop.ts");
            var _fragment_tracker__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__("./src/controller/fragment-tracker.ts");
            var _utils_buffer_helper__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__("./src/utils/buffer-helper.ts");
            var _utils_logger__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__("./src/utils/logger.ts");
            var _events__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__("./src/events.ts");
            var _errors__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__("./src/errors.ts");
            var _types_transmuxer__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__("./src/types/transmuxer.ts");
            var _utils_mp4_tools__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__("./src/utils/mp4-tools.ts");
            var _utils_discontinuities__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__("./src/utils/discontinuities.ts");
            var _fragment_finders__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__("./src/controller/fragment-finders.ts");
            var _level_helper__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__("./src/controller/level-helper.ts");
            var _loader_fragment_loader__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__("./src/loader/fragment-loader.ts");
            var _crypt_decrypter__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__("./src/crypt/decrypter.ts");
            var _utils_time_ranges__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__("./src/utils/time-ranges.ts");
            var _types_loader__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__("./src/types/loader.ts");
            function _defineProperties(target, props) {
              for (var i3 = 0; i3 < props.length; i3++) {
                var descriptor = props[i3];
                descriptor.enumerable = descriptor.enumerable || false;
                descriptor.configurable = true;
                if ("value" in descriptor)
                  descriptor.writable = true;
                Object.defineProperty(target, descriptor.key, descriptor);
              }
            }
            function _createClass(Constructor, protoProps, staticProps) {
              if (protoProps)
                _defineProperties(Constructor.prototype, protoProps);
              if (staticProps)
                _defineProperties(Constructor, staticProps);
              return Constructor;
            }
            function _assertThisInitialized(self2) {
              if (self2 === void 0) {
                throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
              }
              return self2;
            }
            function _inheritsLoose(subClass, superClass) {
              subClass.prototype = Object.create(superClass.prototype);
              subClass.prototype.constructor = subClass;
              _setPrototypeOf(subClass, superClass);
            }
            function _setPrototypeOf(o3, p5) {
              _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf2(o4, p6) {
                o4.__proto__ = p6;
                return o4;
              };
              return _setPrototypeOf(o3, p5);
            }
            var State = {
              STOPPED: "STOPPED",
              IDLE: "IDLE",
              KEY_LOADING: "KEY_LOADING",
              FRAG_LOADING: "FRAG_LOADING",
              FRAG_LOADING_WAITING_RETRY: "FRAG_LOADING_WAITING_RETRY",
              WAITING_TRACK: "WAITING_TRACK",
              PARSING: "PARSING",
              PARSED: "PARSED",
              BACKTRACKING: "BACKTRACKING",
              ENDED: "ENDED",
              ERROR: "ERROR",
              WAITING_INIT_PTS: "WAITING_INIT_PTS",
              WAITING_LEVEL: "WAITING_LEVEL"
            };
            var BaseStreamController = /* @__PURE__ */ function(_TaskLoop) {
              _inheritsLoose(BaseStreamController2, _TaskLoop);
              function BaseStreamController2(hls, fragmentTracker, logPrefix) {
                var _this;
                _this = _TaskLoop.call(this) || this;
                _this.hls = void 0;
                _this.fragPrevious = null;
                _this.fragCurrent = null;
                _this.fragmentTracker = void 0;
                _this.transmuxer = null;
                _this._state = State.STOPPED;
                _this.media = void 0;
                _this.mediaBuffer = void 0;
                _this.config = void 0;
                _this.bitrateTest = false;
                _this.lastCurrentTime = 0;
                _this.nextLoadPosition = 0;
                _this.startPosition = 0;
                _this.loadedmetadata = false;
                _this.fragLoadError = 0;
                _this.retryDate = 0;
                _this.levels = null;
                _this.fragmentLoader = void 0;
                _this.levelLastLoaded = null;
                _this.startFragRequested = false;
                _this.decrypter = void 0;
                _this.initPTS = [];
                _this.onvseeking = null;
                _this.onvended = null;
                _this.logPrefix = "";
                _this.log = void 0;
                _this.warn = void 0;
                _this.logPrefix = logPrefix;
                _this.log = _utils_logger__WEBPACK_IMPORTED_MODULE_4__["logger"].log.bind(_utils_logger__WEBPACK_IMPORTED_MODULE_4__["logger"], logPrefix + ":");
                _this.warn = _utils_logger__WEBPACK_IMPORTED_MODULE_4__["logger"].warn.bind(_utils_logger__WEBPACK_IMPORTED_MODULE_4__["logger"], logPrefix + ":");
                _this.hls = hls;
                _this.fragmentLoader = new _loader_fragment_loader__WEBPACK_IMPORTED_MODULE_12__["default"](hls.config);
                _this.fragmentTracker = fragmentTracker;
                _this.config = hls.config;
                _this.decrypter = new _crypt_decrypter__WEBPACK_IMPORTED_MODULE_13__["default"](hls, hls.config);
                hls.on(_events__WEBPACK_IMPORTED_MODULE_5__["Events"].KEY_LOADED, _this.onKeyLoaded, _assertThisInitialized(_this));
                return _this;
              }
              var _proto = BaseStreamController2.prototype;
              _proto.doTick = function doTick() {
                this.onTickEnd();
              };
              _proto.onTickEnd = function onTickEnd() {
              };
              _proto.startLoad = function startLoad(startPosition) {
              };
              _proto.stopLoad = function stopLoad() {
                this.fragmentLoader.abort();
                var frag = this.fragCurrent;
                if (frag) {
                  this.fragmentTracker.removeFragment(frag);
                }
                this.resetTransmuxer();
                this.fragCurrent = null;
                this.fragPrevious = null;
                this.clearInterval();
                this.clearNextTick();
                this.state = State.STOPPED;
              };
              _proto._streamEnded = function _streamEnded(bufferInfo, levelDetails) {
                var fragCurrent = this.fragCurrent, fragmentTracker = this.fragmentTracker;
                if (!levelDetails.live && fragCurrent && fragCurrent.sn >= levelDetails.endSN && !bufferInfo.nextStart) {
                  var partList = levelDetails.partList;
                  if (partList !== null && partList !== void 0 && partList.length) {
                    var lastPart = partList[partList.length - 1];
                    var lastPartBuffered = _utils_buffer_helper__WEBPACK_IMPORTED_MODULE_3__["BufferHelper"].isBuffered(this.media, lastPart.start + lastPart.duration / 2);
                    return lastPartBuffered;
                  }
                  var fragState = fragmentTracker.getState(fragCurrent);
                  return fragState === _fragment_tracker__WEBPACK_IMPORTED_MODULE_2__["FragmentState"].PARTIAL || fragState === _fragment_tracker__WEBPACK_IMPORTED_MODULE_2__["FragmentState"].OK;
                }
                return false;
              };
              _proto.onMediaAttached = function onMediaAttached(event, data) {
                var media2 = this.media = this.mediaBuffer = data.media;
                this.onvseeking = this.onMediaSeeking.bind(this);
                this.onvended = this.onMediaEnded.bind(this);
                media2.addEventListener("seeking", this.onvseeking);
                media2.addEventListener("ended", this.onvended);
                var config2 = this.config;
                if (this.levels && config2.autoStartLoad && this.state === State.STOPPED) {
                  this.startLoad(config2.startPosition);
                }
              };
              _proto.onMediaDetaching = function onMediaDetaching() {
                var media2 = this.media;
                if (media2 !== null && media2 !== void 0 && media2.ended) {
                  this.log("MSE detaching and video ended, reset startPosition");
                  this.startPosition = this.lastCurrentTime = 0;
                }
                if (media2) {
                  media2.removeEventListener("seeking", this.onvseeking);
                  media2.removeEventListener("ended", this.onvended);
                  this.onvseeking = this.onvended = null;
                }
                this.media = this.mediaBuffer = null;
                this.loadedmetadata = false;
                this.fragmentTracker.removeAllFragments();
                this.stopLoad();
              };
              _proto.onMediaSeeking = function onMediaSeeking() {
                var config2 = this.config, fragCurrent = this.fragCurrent, media2 = this.media, mediaBuffer = this.mediaBuffer, state = this.state;
                var currentTime = media2 ? media2.currentTime : 0;
                var bufferInfo = _utils_buffer_helper__WEBPACK_IMPORTED_MODULE_3__["BufferHelper"].bufferInfo(mediaBuffer || media2, currentTime, config2.maxBufferHole);
                this.log("media seeking to " + (Object(_home_runner_work_hls_js_hls_js_src_polyfills_number__WEBPACK_IMPORTED_MODULE_0__["isFiniteNumber"])(currentTime) ? currentTime.toFixed(3) : currentTime) + ", state: " + state);
                if (state === State.ENDED) {
                  this.resetLoadingState();
                } else if (fragCurrent && !bufferInfo.len) {
                  var tolerance = config2.maxFragLookUpTolerance;
                  var fragStartOffset = fragCurrent.start - tolerance;
                  var fragEndOffset = fragCurrent.start + fragCurrent.duration + tolerance;
                  var pastFragment = currentTime > fragEndOffset;
                  if (currentTime < fragStartOffset || pastFragment) {
                    if (pastFragment && fragCurrent.loader) {
                      this.log("seeking outside of buffer while fragment load in progress, cancel fragment load");
                      fragCurrent.loader.abort();
                    }
                    this.resetLoadingState();
                  }
                }
                if (media2) {
                  this.lastCurrentTime = currentTime;
                }
                if (!this.loadedmetadata && !bufferInfo.len) {
                  this.nextLoadPosition = this.startPosition = currentTime;
                }
                this.tickImmediate();
              };
              _proto.onMediaEnded = function onMediaEnded() {
                this.startPosition = this.lastCurrentTime = 0;
              };
              _proto.onKeyLoaded = function onKeyLoaded(event, data) {
                if (this.state !== State.KEY_LOADING || data.frag !== this.fragCurrent || !this.levels) {
                  return;
                }
                this.state = State.IDLE;
                var levelDetails = this.levels[data.frag.level].details;
                if (levelDetails) {
                  this.loadFragment(data.frag, levelDetails, data.frag.start);
                }
              };
              _proto.onHandlerDestroying = function onHandlerDestroying() {
                this.stopLoad();
                _TaskLoop.prototype.onHandlerDestroying.call(this);
              };
              _proto.onHandlerDestroyed = function onHandlerDestroyed() {
                this.state = State.STOPPED;
                this.hls.off(_events__WEBPACK_IMPORTED_MODULE_5__["Events"].KEY_LOADED, this.onKeyLoaded, this);
                if (this.fragmentLoader) {
                  this.fragmentLoader.destroy();
                }
                if (this.decrypter) {
                  this.decrypter.destroy();
                }
                this.hls = this.log = this.warn = this.decrypter = this.fragmentLoader = this.fragmentTracker = null;
                _TaskLoop.prototype.onHandlerDestroyed.call(this);
              };
              _proto.loadKey = function loadKey(frag, details) {
                this.log("Loading key for " + frag.sn + " of [" + details.startSN + "-" + details.endSN + "], " + (this.logPrefix === "[stream-controller]" ? "level" : "track") + " " + frag.level);
                this.state = State.KEY_LOADING;
                this.fragCurrent = frag;
                this.hls.trigger(_events__WEBPACK_IMPORTED_MODULE_5__["Events"].KEY_LOADING, {
                  frag
                });
              };
              _proto.loadFragment = function loadFragment(frag, levelDetails, targetBufferTime) {
                this._loadFragForPlayback(frag, levelDetails, targetBufferTime);
              };
              _proto._loadFragForPlayback = function _loadFragForPlayback(frag, levelDetails, targetBufferTime) {
                var _this2 = this;
                var progressCallback = function progressCallback2(data) {
                  if (_this2.fragContextChanged(frag)) {
                    _this2.warn("Fragment " + frag.sn + (data.part ? " p: " + data.part.index : "") + " of level " + frag.level + " was dropped during download.");
                    _this2.fragmentTracker.removeFragment(frag);
                    return;
                  }
                  frag.stats.chunkCount++;
                  _this2._handleFragmentLoadProgress(data);
                };
                this._doFragLoad(frag, levelDetails, targetBufferTime, progressCallback).then(function(data) {
                  if (!data) {
                    return;
                  }
                  _this2.fragLoadError = 0;
                  var state = _this2.state;
                  if (_this2.fragContextChanged(frag)) {
                    if (state === State.FRAG_LOADING || state === State.BACKTRACKING || !_this2.fragCurrent && state === State.PARSING) {
                      _this2.fragmentTracker.removeFragment(frag);
                      _this2.state = State.IDLE;
                    }
                    return;
                  }
                  if ("payload" in data) {
                    _this2.log("Loaded fragment " + frag.sn + " of level " + frag.level);
                    _this2.hls.trigger(_events__WEBPACK_IMPORTED_MODULE_5__["Events"].FRAG_LOADED, data);
                    if (_this2.state === State.BACKTRACKING) {
                      _this2.fragmentTracker.backtrack(frag, data);
                      _this2.resetFragmentLoading(frag);
                      return;
                    }
                  }
                  _this2._handleFragmentLoadComplete(data);
                }).catch(function(reason) {
                  _this2.warn(reason);
                  _this2.resetFragmentLoading(frag);
                });
              };
              _proto.flushMainBuffer = function flushMainBuffer(startOffset, endOffset, type) {
                if (type === void 0) {
                  type = null;
                }
                if (!(startOffset - endOffset)) {
                  return;
                }
                var flushScope = {
                  startOffset,
                  endOffset,
                  type
                };
                this.fragLoadError = 0;
                this.hls.trigger(_events__WEBPACK_IMPORTED_MODULE_5__["Events"].BUFFER_FLUSHING, flushScope);
              };
              _proto._loadInitSegment = function _loadInitSegment(frag) {
                var _this3 = this;
                this._doFragLoad(frag).then(function(data) {
                  if (!data || _this3.fragContextChanged(frag) || !_this3.levels) {
                    throw new Error("init load aborted");
                  }
                  return data;
                }).then(function(data) {
                  var hls = _this3.hls;
                  var payload = data.payload;
                  var decryptData = frag.decryptdata;
                  if (payload && payload.byteLength > 0 && decryptData && decryptData.key && decryptData.iv && decryptData.method === "AES-128") {
                    var startTime = self.performance.now();
                    return _this3.decrypter.webCryptoDecrypt(new Uint8Array(payload), decryptData.key.buffer, decryptData.iv.buffer).then(function(decryptedData) {
                      var endTime = self.performance.now();
                      hls.trigger(_events__WEBPACK_IMPORTED_MODULE_5__["Events"].FRAG_DECRYPTED, {
                        frag,
                        payload: decryptedData,
                        stats: {
                          tstart: startTime,
                          tdecrypt: endTime
                        }
                      });
                      data.payload = decryptedData;
                      return data;
                    });
                  }
                  return data;
                }).then(function(data) {
                  var fragCurrent = _this3.fragCurrent, hls = _this3.hls, levels = _this3.levels;
                  if (!levels) {
                    throw new Error("init load aborted, missing levels");
                  }
                  var details = levels[frag.level].details;
                  console.assert(details, "Level details are defined when init segment is loaded");
                  var stats = frag.stats;
                  _this3.state = State.IDLE;
                  _this3.fragLoadError = 0;
                  frag.data = new Uint8Array(data.payload);
                  stats.parsing.start = stats.buffering.start = self.performance.now();
                  stats.parsing.end = stats.buffering.end = self.performance.now();
                  if (data.frag === fragCurrent) {
                    hls.trigger(_events__WEBPACK_IMPORTED_MODULE_5__["Events"].FRAG_BUFFERED, {
                      stats,
                      frag: fragCurrent,
                      part: null,
                      id: frag.type
                    });
                  }
                  _this3.tick();
                }).catch(function(reason) {
                  _this3.warn(reason);
                  _this3.resetFragmentLoading(frag);
                });
              };
              _proto.fragContextChanged = function fragContextChanged(frag) {
                var fragCurrent = this.fragCurrent;
                return !frag || !fragCurrent || frag.level !== fragCurrent.level || frag.sn !== fragCurrent.sn || frag.urlId !== fragCurrent.urlId;
              };
              _proto.fragBufferedComplete = function fragBufferedComplete(frag, part) {
                var media2 = this.mediaBuffer ? this.mediaBuffer : this.media;
                this.log("Buffered " + frag.type + " sn: " + frag.sn + (part ? " part: " + part.index : "") + " of " + (this.logPrefix === "[stream-controller]" ? "level" : "track") + " " + frag.level + " " + _utils_time_ranges__WEBPACK_IMPORTED_MODULE_14__["default"].toString(_utils_buffer_helper__WEBPACK_IMPORTED_MODULE_3__["BufferHelper"].getBuffered(media2)));
                this.state = State.IDLE;
                this.tick();
              };
              _proto._handleFragmentLoadComplete = function _handleFragmentLoadComplete(fragLoadedEndData) {
                var transmuxer = this.transmuxer;
                if (!transmuxer) {
                  return;
                }
                var frag = fragLoadedEndData.frag, part = fragLoadedEndData.part, partsLoaded = fragLoadedEndData.partsLoaded;
                var complete = !partsLoaded || partsLoaded.length === 0 || partsLoaded.some(function(fragLoaded) {
                  return !fragLoaded;
                });
                var chunkMeta = new _types_transmuxer__WEBPACK_IMPORTED_MODULE_7__["ChunkMetadata"](frag.level, frag.sn, frag.stats.chunkCount + 1, 0, part ? part.index : -1, !complete);
                transmuxer.flush(chunkMeta);
              };
              _proto._handleFragmentLoadProgress = function _handleFragmentLoadProgress(frag) {
              };
              _proto._doFragLoad = function _doFragLoad(frag, details, targetBufferTime, progressCallback) {
                var _this4 = this;
                if (targetBufferTime === void 0) {
                  targetBufferTime = null;
                }
                if (!this.levels) {
                  throw new Error("frag load aborted, missing levels");
                }
                targetBufferTime = Math.max(frag.start, targetBufferTime || 0);
                if (this.config.lowLatencyMode && details) {
                  var partList = details.partList;
                  if (partList && progressCallback) {
                    if (targetBufferTime > frag.end && details.fragmentHint) {
                      frag = details.fragmentHint;
                    }
                    var partIndex = this.getNextPart(partList, frag, targetBufferTime);
                    if (partIndex > -1) {
                      var part = partList[partIndex];
                      this.log("Loading part sn: " + frag.sn + " p: " + part.index + " cc: " + frag.cc + " of playlist [" + details.startSN + "-" + details.endSN + "] parts [0-" + partIndex + "-" + (partList.length - 1) + "] " + (this.logPrefix === "[stream-controller]" ? "level" : "track") + ": " + frag.level + ", target: " + parseFloat(targetBufferTime.toFixed(3)));
                      this.nextLoadPosition = part.start + part.duration;
                      this.state = State.FRAG_LOADING;
                      this.hls.trigger(_events__WEBPACK_IMPORTED_MODULE_5__["Events"].FRAG_LOADING, {
                        frag,
                        part: partList[partIndex],
                        targetBufferTime
                      });
                      return this.doFragPartsLoad(frag, partList, partIndex, progressCallback).catch(function(error) {
                        return _this4.handleFragLoadError(error);
                      });
                    } else if (!frag.url || this.loadedEndOfParts(partList, targetBufferTime)) {
                      return Promise.resolve(null);
                    }
                  }
                }
                this.log("Loading fragment " + frag.sn + " cc: " + frag.cc + " " + (details ? "of [" + details.startSN + "-" + details.endSN + "] " : "") + (this.logPrefix === "[stream-controller]" ? "level" : "track") + ": " + frag.level + ", target: " + parseFloat(targetBufferTime.toFixed(3)));
                if (Object(_home_runner_work_hls_js_hls_js_src_polyfills_number__WEBPACK_IMPORTED_MODULE_0__["isFiniteNumber"])(frag.sn) && !this.bitrateTest) {
                  this.nextLoadPosition = frag.start + frag.duration;
                }
                this.state = State.FRAG_LOADING;
                this.hls.trigger(_events__WEBPACK_IMPORTED_MODULE_5__["Events"].FRAG_LOADING, {
                  frag,
                  targetBufferTime
                });
                return this.fragmentLoader.load(frag, progressCallback).catch(function(error) {
                  return _this4.handleFragLoadError(error);
                });
              };
              _proto.doFragPartsLoad = function doFragPartsLoad(frag, partList, partIndex, progressCallback) {
                var _this5 = this;
                return new Promise(function(resolve, reject) {
                  var partsLoaded = [];
                  var loadPartIndex = function loadPartIndex2(index) {
                    var part = partList[index];
                    _this5.fragmentLoader.loadPart(frag, part, progressCallback).then(function(partLoadedData) {
                      partsLoaded[part.index] = partLoadedData;
                      var loadedPart = partLoadedData.part;
                      _this5.hls.trigger(_events__WEBPACK_IMPORTED_MODULE_5__["Events"].FRAG_LOADED, partLoadedData);
                      var nextPart = partList[index + 1];
                      if (nextPart && nextPart.fragment === frag) {
                        loadPartIndex2(index + 1);
                      } else {
                        return resolve({
                          frag,
                          part: loadedPart,
                          partsLoaded
                        });
                      }
                    }).catch(reject);
                  };
                  loadPartIndex(partIndex);
                });
              };
              _proto.handleFragLoadError = function handleFragLoadError(_ref) {
                var data = _ref.data;
                if (data && data.details === _errors__WEBPACK_IMPORTED_MODULE_6__["ErrorDetails"].INTERNAL_ABORTED) {
                  this.handleFragLoadAborted(data.frag, data.part);
                } else {
                  this.hls.trigger(_events__WEBPACK_IMPORTED_MODULE_5__["Events"].ERROR, data);
                }
                return null;
              };
              _proto._handleTransmuxerFlush = function _handleTransmuxerFlush(chunkMeta) {
                var context = this.getCurrentContext(chunkMeta);
                if (!context || this.state !== State.PARSING) {
                  if (!this.fragCurrent) {
                    this.state = State.IDLE;
                  }
                  return;
                }
                var frag = context.frag, part = context.part, level = context.level;
                var now = self.performance.now();
                frag.stats.parsing.end = now;
                if (part) {
                  part.stats.parsing.end = now;
                }
                this.updateLevelTiming(frag, part, level, chunkMeta.partial);
              };
              _proto.getCurrentContext = function getCurrentContext(chunkMeta) {
                var levels = this.levels;
                var levelIndex = chunkMeta.level, sn = chunkMeta.sn, partIndex = chunkMeta.part;
                if (!levels || !levels[levelIndex]) {
                  this.warn("Levels object was unset while buffering fragment " + sn + " of level " + levelIndex + ". The current chunk will not be buffered.");
                  return null;
                }
                var level = levels[levelIndex];
                var part = partIndex > -1 ? Object(_level_helper__WEBPACK_IMPORTED_MODULE_11__["getPartWith"])(level, sn, partIndex) : null;
                var frag = part ? part.fragment : Object(_level_helper__WEBPACK_IMPORTED_MODULE_11__["getFragmentWithSN"])(level, sn, this.fragCurrent);
                if (!frag) {
                  return null;
                }
                return {
                  frag,
                  part,
                  level
                };
              };
              _proto.bufferFragmentData = function bufferFragmentData(data, frag, part, chunkMeta) {
                if (!data || this.state !== State.PARSING) {
                  return;
                }
                var data1 = data.data1, data2 = data.data2;
                var buffer = data1;
                if (data1 && data2) {
                  buffer = Object(_utils_mp4_tools__WEBPACK_IMPORTED_MODULE_8__["appendUint8Array"])(data1, data2);
                }
                if (!buffer || !buffer.length) {
                  return;
                }
                var segment = {
                  type: data.type,
                  frag,
                  part,
                  chunkMeta,
                  parent: frag.type,
                  data: buffer
                };
                this.hls.trigger(_events__WEBPACK_IMPORTED_MODULE_5__["Events"].BUFFER_APPENDING, segment);
                if (data.dropped && data.independent && !part) {
                  this.flushBufferGap(frag);
                }
              };
              _proto.flushBufferGap = function flushBufferGap(frag) {
                var media2 = this.media;
                if (!media2) {
                  return;
                }
                if (!_utils_buffer_helper__WEBPACK_IMPORTED_MODULE_3__["BufferHelper"].isBuffered(media2, media2.currentTime)) {
                  this.flushMainBuffer(0, frag.start);
                  return;
                }
                var currentTime = media2.currentTime;
                var bufferInfo = _utils_buffer_helper__WEBPACK_IMPORTED_MODULE_3__["BufferHelper"].bufferInfo(media2, currentTime, 0);
                var fragDuration = frag.duration;
                var segmentFraction = Math.min(this.config.maxFragLookUpTolerance * 2, fragDuration * 0.25);
                var start = Math.max(Math.min(frag.start - segmentFraction, bufferInfo.end - segmentFraction), currentTime + segmentFraction);
                if (frag.start - start > segmentFraction) {
                  this.flushMainBuffer(start, frag.start);
                }
              };
              _proto.getFwdBufferInfo = function getFwdBufferInfo(bufferable, type) {
                var config2 = this.config;
                var pos = this.getLoadPosition();
                if (!Object(_home_runner_work_hls_js_hls_js_src_polyfills_number__WEBPACK_IMPORTED_MODULE_0__["isFiniteNumber"])(pos)) {
                  return null;
                }
                var bufferInfo = _utils_buffer_helper__WEBPACK_IMPORTED_MODULE_3__["BufferHelper"].bufferInfo(bufferable, pos, config2.maxBufferHole);
                if (bufferInfo.len === 0 && bufferInfo.nextStart !== void 0) {
                  var bufferedFragAtPos = this.fragmentTracker.getBufferedFrag(pos, type);
                  if (bufferedFragAtPos && bufferInfo.nextStart < bufferedFragAtPos.end) {
                    return _utils_buffer_helper__WEBPACK_IMPORTED_MODULE_3__["BufferHelper"].bufferInfo(bufferable, pos, Math.max(bufferInfo.nextStart, config2.maxBufferHole));
                  }
                }
                return bufferInfo;
              };
              _proto.getMaxBufferLength = function getMaxBufferLength(levelBitrate) {
                var config2 = this.config;
                var maxBufLen;
                if (levelBitrate) {
                  maxBufLen = Math.max(8 * config2.maxBufferSize / levelBitrate, config2.maxBufferLength);
                } else {
                  maxBufLen = config2.maxBufferLength;
                }
                return Math.min(maxBufLen, config2.maxMaxBufferLength);
              };
              _proto.reduceMaxBufferLength = function reduceMaxBufferLength(threshold) {
                var config2 = this.config;
                var minLength = threshold || config2.maxBufferLength;
                if (config2.maxMaxBufferLength >= minLength) {
                  config2.maxMaxBufferLength /= 2;
                  this.warn("Reduce max buffer length to " + config2.maxMaxBufferLength + "s");
                  return true;
                }
                return false;
              };
              _proto.getNextFragment = function getNextFragment(pos, levelDetails) {
                var _frag, _frag2;
                var fragments = levelDetails.fragments;
                var fragLen = fragments.length;
                if (!fragLen) {
                  return null;
                }
                var config2 = this.config;
                var start = fragments[0].start;
                var frag;
                if (levelDetails.live) {
                  var initialLiveManifestSize = config2.initialLiveManifestSize;
                  if (fragLen < initialLiveManifestSize) {
                    this.warn("Not enough fragments to start playback (have: " + fragLen + ", need: " + initialLiveManifestSize + ")");
                    return null;
                  }
                  if (!levelDetails.PTSKnown && !this.startFragRequested && this.startPosition === -1) {
                    frag = this.getInitialLiveFragment(levelDetails, fragments);
                    this.startPosition = frag ? this.hls.liveSyncPosition || frag.start : pos;
                  }
                } else if (pos <= start) {
                  frag = fragments[0];
                }
                if (!frag) {
                  var end = config2.lowLatencyMode ? levelDetails.partEnd : levelDetails.fragmentEnd;
                  frag = this.getFragmentAtPosition(pos, end, levelDetails);
                }
                if ((_frag = frag) !== null && _frag !== void 0 && _frag.initSegment && !((_frag2 = frag) !== null && _frag2 !== void 0 && _frag2.initSegment.data) && !this.bitrateTest) {
                  frag = frag.initSegment;
                }
                return frag;
              };
              _proto.getNextPart = function getNextPart(partList, frag, targetBufferTime) {
                var nextPart = -1;
                var contiguous = false;
                var independentAttrOmitted = true;
                for (var i3 = 0, len = partList.length; i3 < len; i3++) {
                  var part = partList[i3];
                  independentAttrOmitted = independentAttrOmitted && !part.independent;
                  if (nextPart > -1 && targetBufferTime < part.start) {
                    break;
                  }
                  var loaded = part.loaded;
                  if (!loaded && (contiguous || part.independent || independentAttrOmitted) && part.fragment === frag) {
                    nextPart = i3;
                  }
                  contiguous = loaded;
                }
                return nextPart;
              };
              _proto.loadedEndOfParts = function loadedEndOfParts(partList, targetBufferTime) {
                var lastPart = partList[partList.length - 1];
                return lastPart && targetBufferTime > lastPart.start && lastPart.loaded;
              };
              _proto.getInitialLiveFragment = function getInitialLiveFragment(levelDetails, fragments) {
                var fragPrevious = this.fragPrevious;
                var frag = null;
                if (fragPrevious) {
                  if (levelDetails.hasProgramDateTime) {
                    this.log("Live playlist, switching playlist, load frag with same PDT: " + fragPrevious.programDateTime);
                    frag = Object(_fragment_finders__WEBPACK_IMPORTED_MODULE_10__["findFragmentByPDT"])(fragments, fragPrevious.endProgramDateTime, this.config.maxFragLookUpTolerance);
                  }
                  if (!frag) {
                    var targetSN = fragPrevious.sn + 1;
                    if (targetSN >= levelDetails.startSN && targetSN <= levelDetails.endSN) {
                      var fragNext = fragments[targetSN - levelDetails.startSN];
                      if (fragPrevious.cc === fragNext.cc) {
                        frag = fragNext;
                        this.log("Live playlist, switching playlist, load frag with next SN: " + frag.sn);
                      }
                    }
                    if (!frag) {
                      frag = Object(_fragment_finders__WEBPACK_IMPORTED_MODULE_10__["findFragWithCC"])(fragments, fragPrevious.cc);
                      if (frag) {
                        this.log("Live playlist, switching playlist, load frag with same CC: " + frag.sn);
                      }
                    }
                  }
                } else {
                  var liveStart = this.hls.liveSyncPosition;
                  if (liveStart !== null) {
                    frag = this.getFragmentAtPosition(liveStart, this.bitrateTest ? levelDetails.fragmentEnd : levelDetails.edge, levelDetails);
                  }
                }
                return frag;
              };
              _proto.getFragmentAtPosition = function getFragmentAtPosition(bufferEnd, end, levelDetails) {
                var config2 = this.config, fragPrevious = this.fragPrevious;
                var fragments = levelDetails.fragments, endSN = levelDetails.endSN;
                var fragmentHint = levelDetails.fragmentHint;
                var tolerance = config2.maxFragLookUpTolerance;
                var loadingParts = !!(config2.lowLatencyMode && levelDetails.partList && fragmentHint);
                if (loadingParts && fragmentHint && !this.bitrateTest) {
                  fragments = fragments.concat(fragmentHint);
                  endSN = fragmentHint.sn;
                }
                var frag;
                if (bufferEnd < end) {
                  var lookupTolerance = bufferEnd > end - tolerance ? 0 : tolerance;
                  frag = Object(_fragment_finders__WEBPACK_IMPORTED_MODULE_10__["findFragmentByPTS"])(fragPrevious, fragments, bufferEnd, lookupTolerance);
                } else {
                  frag = fragments[fragments.length - 1];
                }
                if (frag) {
                  var curSNIdx = frag.sn - levelDetails.startSN;
                  var sameLevel = fragPrevious && frag.level === fragPrevious.level;
                  var nextFrag = fragments[curSNIdx + 1];
                  var fragState = this.fragmentTracker.getState(frag);
                  if (fragState === _fragment_tracker__WEBPACK_IMPORTED_MODULE_2__["FragmentState"].BACKTRACKED) {
                    frag = null;
                    var i3 = curSNIdx;
                    while (fragments[i3] && this.fragmentTracker.getState(fragments[i3]) === _fragment_tracker__WEBPACK_IMPORTED_MODULE_2__["FragmentState"].BACKTRACKED) {
                      if (!fragPrevious) {
                        frag = fragments[--i3];
                      } else {
                        frag = fragments[i3--];
                      }
                    }
                    if (!frag) {
                      frag = nextFrag;
                    }
                  } else if (fragPrevious && frag.sn === fragPrevious.sn && !loadingParts) {
                    if (sameLevel) {
                      if (frag.sn < endSN && this.fragmentTracker.getState(nextFrag) !== _fragment_tracker__WEBPACK_IMPORTED_MODULE_2__["FragmentState"].OK) {
                        this.log("SN " + frag.sn + " just loaded, load next one: " + nextFrag.sn);
                        frag = nextFrag;
                      } else {
                        frag = null;
                      }
                    }
                  }
                }
                return frag;
              };
              _proto.synchronizeToLiveEdge = function synchronizeToLiveEdge(levelDetails) {
                var config2 = this.config, media2 = this.media;
                if (!media2) {
                  return;
                }
                var liveSyncPosition = this.hls.liveSyncPosition;
                var currentTime = media2.currentTime;
                var start = levelDetails.fragments[0].start;
                var end = levelDetails.edge;
                var withinSlidingWindow = currentTime >= start - config2.maxFragLookUpTolerance && currentTime <= end;
                if (liveSyncPosition !== null && media2.duration > liveSyncPosition && (currentTime < liveSyncPosition || !withinSlidingWindow)) {
                  var maxLatency = config2.liveMaxLatencyDuration !== void 0 ? config2.liveMaxLatencyDuration : config2.liveMaxLatencyDurationCount * levelDetails.targetduration;
                  if (!withinSlidingWindow && media2.readyState < 4 || currentTime < end - maxLatency) {
                    if (!this.loadedmetadata) {
                      this.nextLoadPosition = liveSyncPosition;
                    }
                    if (media2.readyState) {
                      this.warn("Playback: " + currentTime.toFixed(3) + " is located too far from the end of live sliding playlist: " + end + ", reset currentTime to : " + liveSyncPosition.toFixed(3));
                      media2.currentTime = liveSyncPosition;
                    }
                  }
                }
              };
              _proto.alignPlaylists = function alignPlaylists(details, previousDetails) {
                var levels = this.levels, levelLastLoaded = this.levelLastLoaded, fragPrevious = this.fragPrevious;
                var lastLevel = levelLastLoaded !== null ? levels[levelLastLoaded] : null;
                var length = details.fragments.length;
                if (!length) {
                  this.warn("No fragments in live playlist");
                  return 0;
                }
                var slidingStart = details.fragments[0].start;
                var firstLevelLoad = !previousDetails;
                var aligned = details.alignedSliding && Object(_home_runner_work_hls_js_hls_js_src_polyfills_number__WEBPACK_IMPORTED_MODULE_0__["isFiniteNumber"])(slidingStart);
                if (firstLevelLoad || !aligned && !slidingStart) {
                  Object(_utils_discontinuities__WEBPACK_IMPORTED_MODULE_9__["alignStream"])(fragPrevious, lastLevel, details);
                  var alignedSlidingStart = details.fragments[0].start;
                  this.log("Live playlist sliding: " + alignedSlidingStart.toFixed(2) + " start-sn: " + (previousDetails ? previousDetails.startSN : "na") + "->" + details.startSN + " prev-sn: " + (fragPrevious ? fragPrevious.sn : "na") + " fragments: " + length);
                  return alignedSlidingStart;
                }
                return slidingStart;
              };
              _proto.waitForCdnTuneIn = function waitForCdnTuneIn(details) {
                var advancePartLimit = 3;
                return details.live && details.canBlockReload && details.tuneInGoal > Math.max(details.partHoldBack, details.partTarget * advancePartLimit);
              };
              _proto.setStartPosition = function setStartPosition(details, sliding) {
                var startPosition = this.startPosition;
                if (startPosition < sliding) {
                  startPosition = -1;
                }
                if (startPosition === -1 || this.lastCurrentTime === -1) {
                  var startTimeOffset = details.startTimeOffset;
                  if (Object(_home_runner_work_hls_js_hls_js_src_polyfills_number__WEBPACK_IMPORTED_MODULE_0__["isFiniteNumber"])(startTimeOffset)) {
                    startPosition = sliding + startTimeOffset;
                    if (startTimeOffset < 0) {
                      startPosition += details.totalduration;
                    }
                    startPosition = Math.min(Math.max(sliding, startPosition), sliding + details.totalduration);
                    this.log("Start time offset " + startTimeOffset + " found in playlist, adjust startPosition to " + startPosition);
                    this.startPosition = startPosition;
                  } else if (details.live) {
                    startPosition = this.hls.liveSyncPosition || sliding;
                  } else {
                    this.startPosition = startPosition = 0;
                  }
                  this.lastCurrentTime = startPosition;
                }
                this.nextLoadPosition = startPosition;
              };
              _proto.getLoadPosition = function getLoadPosition() {
                var media2 = this.media;
                var pos = 0;
                if (this.loadedmetadata && media2) {
                  pos = media2.currentTime;
                } else if (this.nextLoadPosition) {
                  pos = this.nextLoadPosition;
                }
                return pos;
              };
              _proto.handleFragLoadAborted = function handleFragLoadAborted(frag, part) {
                if (this.transmuxer && frag.sn !== "initSegment" && frag.stats.aborted) {
                  this.warn("Fragment " + frag.sn + (part ? " part" + part.index : "") + " of level " + frag.level + " was aborted");
                  this.resetFragmentLoading(frag);
                }
              };
              _proto.resetFragmentLoading = function resetFragmentLoading(frag) {
                if (!this.fragCurrent || !this.fragContextChanged(frag)) {
                  this.state = State.IDLE;
                }
              };
              _proto.onFragmentOrKeyLoadError = function onFragmentOrKeyLoadError(filterType, data) {
                if (data.fatal) {
                  return;
                }
                var frag = data.frag;
                if (!frag || frag.type !== filterType) {
                  return;
                }
                var fragCurrent = this.fragCurrent;
                console.assert(fragCurrent && frag.sn === fragCurrent.sn && frag.level === fragCurrent.level && frag.urlId === fragCurrent.urlId, "Frag load error must match current frag to retry");
                var config2 = this.config;
                if (this.fragLoadError + 1 <= config2.fragLoadingMaxRetry) {
                  if (this.resetLiveStartWhenNotLoaded(frag.level)) {
                    return;
                  }
                  var delay = Math.min(Math.pow(2, this.fragLoadError) * config2.fragLoadingRetryDelay, config2.fragLoadingMaxRetryTimeout);
                  this.warn("Fragment " + frag.sn + " of " + filterType + " " + frag.level + " failed to load, retrying in " + delay + "ms");
                  this.retryDate = self.performance.now() + delay;
                  this.fragLoadError++;
                  this.state = State.FRAG_LOADING_WAITING_RETRY;
                } else if (data.levelRetry) {
                  if (filterType === _types_loader__WEBPACK_IMPORTED_MODULE_15__["PlaylistLevelType"].AUDIO) {
                    this.fragCurrent = null;
                  }
                  this.fragLoadError = 0;
                  this.state = State.IDLE;
                } else {
                  _utils_logger__WEBPACK_IMPORTED_MODULE_4__["logger"].error(data.details + " reaches max retry, redispatch as fatal ...");
                  data.fatal = true;
                  this.hls.stopLoad();
                  this.state = State.ERROR;
                }
              };
              _proto.afterBufferFlushed = function afterBufferFlushed(media2, bufferType, playlistType) {
                if (!media2) {
                  return;
                }
                var bufferedTimeRanges = _utils_buffer_helper__WEBPACK_IMPORTED_MODULE_3__["BufferHelper"].getBuffered(media2);
                this.fragmentTracker.detectEvictedFragments(bufferType, bufferedTimeRanges, playlistType);
                if (this.state === State.ENDED) {
                  this.resetLoadingState();
                }
              };
              _proto.resetLoadingState = function resetLoadingState() {
                this.fragCurrent = null;
                this.fragPrevious = null;
                this.state = State.IDLE;
              };
              _proto.resetLiveStartWhenNotLoaded = function resetLiveStartWhenNotLoaded(level) {
                if (!this.loadedmetadata) {
                  this.startFragRequested = false;
                  var details = this.levels ? this.levels[level].details : null;
                  if (details !== null && details !== void 0 && details.live) {
                    this.startPosition = -1;
                    this.setStartPosition(details, 0);
                    this.resetLoadingState();
                    return true;
                  }
                  this.nextLoadPosition = this.startPosition;
                }
                return false;
              };
              _proto.updateLevelTiming = function updateLevelTiming(frag, part, level, partial) {
                var _this6 = this;
                var details = level.details;
                console.assert(!!details, "level.details must be defined");
                var parsed = Object.keys(frag.elementaryStreams).reduce(function(result, type) {
                  var info = frag.elementaryStreams[type];
                  if (info) {
                    var parsedDuration = info.endPTS - info.startPTS;
                    if (parsedDuration <= 0) {
                      _this6.warn("Could not parse fragment " + frag.sn + " " + type + " duration reliably (" + parsedDuration + ") resetting transmuxer to fallback to playlist timing");
                      _this6.resetTransmuxer();
                      return result || false;
                    }
                    var drift = partial ? 0 : Object(_level_helper__WEBPACK_IMPORTED_MODULE_11__["updateFragPTSDTS"])(details, frag, info.startPTS, info.endPTS, info.startDTS, info.endDTS);
                    _this6.hls.trigger(_events__WEBPACK_IMPORTED_MODULE_5__["Events"].LEVEL_PTS_UPDATED, {
                      details,
                      level,
                      drift,
                      type,
                      frag,
                      start: info.startPTS,
                      end: info.endPTS
                    });
                    return true;
                  }
                  return result;
                }, false);
                if (parsed) {
                  this.state = State.PARSED;
                  this.hls.trigger(_events__WEBPACK_IMPORTED_MODULE_5__["Events"].FRAG_PARSED, {
                    frag,
                    part
                  });
                } else {
                  this.resetLoadingState();
                }
              };
              _proto.resetTransmuxer = function resetTransmuxer() {
                if (this.transmuxer) {
                  this.transmuxer.destroy();
                  this.transmuxer = null;
                }
              };
              _createClass(BaseStreamController2, [{
                key: "state",
                get: function get() {
                  return this._state;
                },
                set: function set(nextState) {
                  var previousState = this._state;
                  if (previousState !== nextState) {
                    this._state = nextState;
                    this.log(previousState + "->" + nextState);
                  }
                }
              }]);
              return BaseStreamController2;
            }(_task_loop__WEBPACK_IMPORTED_MODULE_1__["default"]);
          },
          "./src/controller/buffer-controller.ts": function(module2, __webpack_exports__, __webpack_require__) {
            "use strict";
            __webpack_require__.r(__webpack_exports__);
            __webpack_require__.d(__webpack_exports__, "default", function() {
              return BufferController;
            });
            var _home_runner_work_hls_js_hls_js_src_polyfills_number__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("./src/polyfills/number.ts");
            var _events__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("./src/events.ts");
            var _utils_logger__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__("./src/utils/logger.ts");
            var _errors__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__("./src/errors.ts");
            var _utils_buffer_helper__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__("./src/utils/buffer-helper.ts");
            var _utils_mediasource_helper__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__("./src/utils/mediasource-helper.ts");
            var _loader_fragment__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__("./src/loader/fragment.ts");
            var _buffer_operation_queue__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__("./src/controller/buffer-operation-queue.ts");
            var MediaSource2 = Object(_utils_mediasource_helper__WEBPACK_IMPORTED_MODULE_5__["getMediaSource"])();
            var VIDEO_CODEC_PROFILE_REPACE = /([ha]vc.)(?:\.[^.,]+)+/;
            var BufferController = /* @__PURE__ */ function() {
              function BufferController2(_hls) {
                var _this = this;
                this.details = null;
                this._objectUrl = null;
                this.operationQueue = void 0;
                this.listeners = void 0;
                this.hls = void 0;
                this.bufferCodecEventsExpected = 0;
                this._bufferCodecEventsTotal = 0;
                this.media = null;
                this.mediaSource = null;
                this.appendError = 0;
                this.tracks = {};
                this.pendingTracks = {};
                this.sourceBuffer = void 0;
                this._onMediaSourceOpen = function() {
                  var hls = _this.hls, media2 = _this.media, mediaSource = _this.mediaSource;
                  _utils_logger__WEBPACK_IMPORTED_MODULE_2__["logger"].log("[buffer-controller]: Media source opened");
                  if (media2) {
                    _this.updateMediaElementDuration();
                    hls.trigger(_events__WEBPACK_IMPORTED_MODULE_1__["Events"].MEDIA_ATTACHED, {
                      media: media2
                    });
                  }
                  if (mediaSource) {
                    mediaSource.removeEventListener("sourceopen", _this._onMediaSourceOpen);
                  }
                  _this.checkPendingTracks();
                };
                this._onMediaSourceClose = function() {
                  _utils_logger__WEBPACK_IMPORTED_MODULE_2__["logger"].log("[buffer-controller]: Media source closed");
                };
                this._onMediaSourceEnded = function() {
                  _utils_logger__WEBPACK_IMPORTED_MODULE_2__["logger"].log("[buffer-controller]: Media source ended");
                };
                this.hls = _hls;
                this._initSourceBuffer();
                this.registerListeners();
              }
              var _proto = BufferController2.prototype;
              _proto.hasSourceTypes = function hasSourceTypes() {
                return this.getSourceBufferTypes().length > 0 || Object.keys(this.pendingTracks).length > 0;
              };
              _proto.destroy = function destroy() {
                this.unregisterListeners();
                this.details = null;
              };
              _proto.registerListeners = function registerListeners() {
                var hls = this.hls;
                hls.on(_events__WEBPACK_IMPORTED_MODULE_1__["Events"].MEDIA_ATTACHING, this.onMediaAttaching, this);
                hls.on(_events__WEBPACK_IMPORTED_MODULE_1__["Events"].MEDIA_DETACHING, this.onMediaDetaching, this);
                hls.on(_events__WEBPACK_IMPORTED_MODULE_1__["Events"].MANIFEST_PARSED, this.onManifestParsed, this);
                hls.on(_events__WEBPACK_IMPORTED_MODULE_1__["Events"].BUFFER_RESET, this.onBufferReset, this);
                hls.on(_events__WEBPACK_IMPORTED_MODULE_1__["Events"].BUFFER_APPENDING, this.onBufferAppending, this);
                hls.on(_events__WEBPACK_IMPORTED_MODULE_1__["Events"].BUFFER_CODECS, this.onBufferCodecs, this);
                hls.on(_events__WEBPACK_IMPORTED_MODULE_1__["Events"].BUFFER_EOS, this.onBufferEos, this);
                hls.on(_events__WEBPACK_IMPORTED_MODULE_1__["Events"].BUFFER_FLUSHING, this.onBufferFlushing, this);
                hls.on(_events__WEBPACK_IMPORTED_MODULE_1__["Events"].LEVEL_UPDATED, this.onLevelUpdated, this);
                hls.on(_events__WEBPACK_IMPORTED_MODULE_1__["Events"].FRAG_PARSED, this.onFragParsed, this);
                hls.on(_events__WEBPACK_IMPORTED_MODULE_1__["Events"].FRAG_CHANGED, this.onFragChanged, this);
              };
              _proto.unregisterListeners = function unregisterListeners() {
                var hls = this.hls;
                hls.off(_events__WEBPACK_IMPORTED_MODULE_1__["Events"].MEDIA_ATTACHING, this.onMediaAttaching, this);
                hls.off(_events__WEBPACK_IMPORTED_MODULE_1__["Events"].MEDIA_DETACHING, this.onMediaDetaching, this);
                hls.off(_events__WEBPACK_IMPORTED_MODULE_1__["Events"].MANIFEST_PARSED, this.onManifestParsed, this);
                hls.off(_events__WEBPACK_IMPORTED_MODULE_1__["Events"].BUFFER_RESET, this.onBufferReset, this);
                hls.off(_events__WEBPACK_IMPORTED_MODULE_1__["Events"].BUFFER_APPENDING, this.onBufferAppending, this);
                hls.off(_events__WEBPACK_IMPORTED_MODULE_1__["Events"].BUFFER_CODECS, this.onBufferCodecs, this);
                hls.off(_events__WEBPACK_IMPORTED_MODULE_1__["Events"].BUFFER_EOS, this.onBufferEos, this);
                hls.off(_events__WEBPACK_IMPORTED_MODULE_1__["Events"].BUFFER_FLUSHING, this.onBufferFlushing, this);
                hls.off(_events__WEBPACK_IMPORTED_MODULE_1__["Events"].LEVEL_UPDATED, this.onLevelUpdated, this);
                hls.off(_events__WEBPACK_IMPORTED_MODULE_1__["Events"].FRAG_PARSED, this.onFragParsed, this);
                hls.off(_events__WEBPACK_IMPORTED_MODULE_1__["Events"].FRAG_CHANGED, this.onFragChanged, this);
              };
              _proto._initSourceBuffer = function _initSourceBuffer() {
                this.sourceBuffer = {};
                this.operationQueue = new _buffer_operation_queue__WEBPACK_IMPORTED_MODULE_7__["default"](this.sourceBuffer);
                this.listeners = {
                  audio: [],
                  video: [],
                  audiovideo: []
                };
              };
              _proto.onManifestParsed = function onManifestParsed(event, data) {
                var codecEvents = 2;
                if (data.audio && !data.video || !data.altAudio) {
                  codecEvents = 1;
                }
                this.bufferCodecEventsExpected = this._bufferCodecEventsTotal = codecEvents;
                this.details = null;
                _utils_logger__WEBPACK_IMPORTED_MODULE_2__["logger"].log(this.bufferCodecEventsExpected + " bufferCodec event(s) expected");
              };
              _proto.onMediaAttaching = function onMediaAttaching(event, data) {
                var media2 = this.media = data.media;
                if (media2 && MediaSource2) {
                  var ms = this.mediaSource = new MediaSource2();
                  ms.addEventListener("sourceopen", this._onMediaSourceOpen);
                  ms.addEventListener("sourceended", this._onMediaSourceEnded);
                  ms.addEventListener("sourceclose", this._onMediaSourceClose);
                  media2.src = self.URL.createObjectURL(ms);
                  this._objectUrl = media2.src;
                }
              };
              _proto.onMediaDetaching = function onMediaDetaching() {
                var media2 = this.media, mediaSource = this.mediaSource, _objectUrl = this._objectUrl;
                if (mediaSource) {
                  _utils_logger__WEBPACK_IMPORTED_MODULE_2__["logger"].log("[buffer-controller]: media source detaching");
                  if (mediaSource.readyState === "open") {
                    try {
                      mediaSource.endOfStream();
                    } catch (err) {
                      _utils_logger__WEBPACK_IMPORTED_MODULE_2__["logger"].warn("[buffer-controller]: onMediaDetaching: " + err.message + " while calling endOfStream");
                    }
                  }
                  this.onBufferReset();
                  mediaSource.removeEventListener("sourceopen", this._onMediaSourceOpen);
                  mediaSource.removeEventListener("sourceended", this._onMediaSourceEnded);
                  mediaSource.removeEventListener("sourceclose", this._onMediaSourceClose);
                  if (media2) {
                    if (_objectUrl) {
                      self.URL.revokeObjectURL(_objectUrl);
                    }
                    if (media2.src === _objectUrl) {
                      media2.removeAttribute("src");
                      media2.load();
                    } else {
                      _utils_logger__WEBPACK_IMPORTED_MODULE_2__["logger"].warn("[buffer-controller]: media.src was changed by a third party - skip cleanup");
                    }
                  }
                  this.mediaSource = null;
                  this.media = null;
                  this._objectUrl = null;
                  this.bufferCodecEventsExpected = this._bufferCodecEventsTotal;
                  this.pendingTracks = {};
                  this.tracks = {};
                }
                this.hls.trigger(_events__WEBPACK_IMPORTED_MODULE_1__["Events"].MEDIA_DETACHED, void 0);
              };
              _proto.onBufferReset = function onBufferReset() {
                var _this2 = this;
                this.getSourceBufferTypes().forEach(function(type) {
                  var sb = _this2.sourceBuffer[type];
                  try {
                    if (sb) {
                      _this2.removeBufferListeners(type);
                      if (_this2.mediaSource) {
                        _this2.mediaSource.removeSourceBuffer(sb);
                      }
                      _this2.sourceBuffer[type] = void 0;
                    }
                  } catch (err) {
                    _utils_logger__WEBPACK_IMPORTED_MODULE_2__["logger"].warn("[buffer-controller]: Failed to reset the " + type + " buffer", err);
                  }
                });
                this._initSourceBuffer();
              };
              _proto.onBufferCodecs = function onBufferCodecs(event, data) {
                var _this3 = this;
                var sourceBufferCount = this.getSourceBufferTypes().length;
                Object.keys(data).forEach(function(trackName) {
                  if (sourceBufferCount) {
                    var track = _this3.tracks[trackName];
                    if (track && typeof track.buffer.changeType === "function") {
                      var _data$trackName = data[trackName], codec = _data$trackName.codec, levelCodec = _data$trackName.levelCodec, container2 = _data$trackName.container;
                      var currentCodec = (track.levelCodec || track.codec).replace(VIDEO_CODEC_PROFILE_REPACE, "$1");
                      var nextCodec = (levelCodec || codec).replace(VIDEO_CODEC_PROFILE_REPACE, "$1");
                      if (currentCodec !== nextCodec) {
                        var mimeType = container2 + ";codecs=" + (levelCodec || codec);
                        _this3.appendChangeType(trackName, mimeType);
                      }
                    }
                  } else {
                    _this3.pendingTracks[trackName] = data[trackName];
                  }
                });
                if (sourceBufferCount) {
                  return;
                }
                this.bufferCodecEventsExpected = Math.max(this.bufferCodecEventsExpected - 1, 0);
                if (this.mediaSource && this.mediaSource.readyState === "open") {
                  this.checkPendingTracks();
                }
              };
              _proto.appendChangeType = function appendChangeType(type, mimeType) {
                var _this4 = this;
                var operationQueue = this.operationQueue;
                var operation = {
                  execute: function execute() {
                    var sb = _this4.sourceBuffer[type];
                    if (sb) {
                      _utils_logger__WEBPACK_IMPORTED_MODULE_2__["logger"].log("[buffer-controller]: changing " + type + " sourceBuffer type to " + mimeType);
                      sb.changeType(mimeType);
                    }
                    operationQueue.shiftAndExecuteNext(type);
                  },
                  onStart: function onStart() {
                  },
                  onComplete: function onComplete() {
                  },
                  onError: function onError(e4) {
                    _utils_logger__WEBPACK_IMPORTED_MODULE_2__["logger"].warn("[buffer-controller]: Failed to change " + type + " SourceBuffer type", e4);
                  }
                };
                operationQueue.append(operation, type);
              };
              _proto.onBufferAppending = function onBufferAppending(event, eventData) {
                var _this5 = this;
                var hls = this.hls, operationQueue = this.operationQueue, tracks = this.tracks;
                var data = eventData.data, type = eventData.type, frag = eventData.frag, part = eventData.part, chunkMeta = eventData.chunkMeta;
                var chunkStats = chunkMeta.buffering[type];
                var bufferAppendingStart = self.performance.now();
                chunkStats.start = bufferAppendingStart;
                var fragBuffering = frag.stats.buffering;
                var partBuffering = part ? part.stats.buffering : null;
                if (fragBuffering.start === 0) {
                  fragBuffering.start = bufferAppendingStart;
                }
                if (partBuffering && partBuffering.start === 0) {
                  partBuffering.start = bufferAppendingStart;
                }
                var audioTrack = tracks.audio;
                var checkTimestampOffset = type === "audio" && chunkMeta.id === 1 && (audioTrack === null || audioTrack === void 0 ? void 0 : audioTrack.container) === "audio/mpeg";
                var operation = {
                  execute: function execute() {
                    chunkStats.executeStart = self.performance.now();
                    if (checkTimestampOffset) {
                      var sb = _this5.sourceBuffer[type];
                      if (sb) {
                        var delta = frag.start - sb.timestampOffset;
                        if (Math.abs(delta) >= 0.1) {
                          _utils_logger__WEBPACK_IMPORTED_MODULE_2__["logger"].log("[buffer-controller]: Updating audio SourceBuffer timestampOffset to " + frag.start + " (delta: " + delta + ") sn: " + frag.sn + ")");
                          sb.timestampOffset = frag.start;
                        }
                      }
                    }
                    _this5.appendExecutor(data, type);
                  },
                  onStart: function onStart() {
                  },
                  onComplete: function onComplete() {
                    var end = self.performance.now();
                    chunkStats.executeEnd = chunkStats.end = end;
                    if (fragBuffering.first === 0) {
                      fragBuffering.first = end;
                    }
                    if (partBuffering && partBuffering.first === 0) {
                      partBuffering.first = end;
                    }
                    var sourceBuffer = _this5.sourceBuffer;
                    var timeRanges = {};
                    for (var _type in sourceBuffer) {
                      timeRanges[_type] = _utils_buffer_helper__WEBPACK_IMPORTED_MODULE_4__["BufferHelper"].getBuffered(sourceBuffer[_type]);
                    }
                    _this5.appendError = 0;
                    _this5.hls.trigger(_events__WEBPACK_IMPORTED_MODULE_1__["Events"].BUFFER_APPENDED, {
                      type,
                      frag,
                      part,
                      chunkMeta,
                      parent: frag.type,
                      timeRanges
                    });
                  },
                  onError: function onError(err) {
                    _utils_logger__WEBPACK_IMPORTED_MODULE_2__["logger"].error("[buffer-controller]: Error encountered while trying to append to the " + type + " SourceBuffer", err);
                    var event2 = {
                      type: _errors__WEBPACK_IMPORTED_MODULE_3__["ErrorTypes"].MEDIA_ERROR,
                      parent: frag.type,
                      details: _errors__WEBPACK_IMPORTED_MODULE_3__["ErrorDetails"].BUFFER_APPEND_ERROR,
                      err,
                      fatal: false
                    };
                    if (err.code === DOMException.QUOTA_EXCEEDED_ERR) {
                      event2.details = _errors__WEBPACK_IMPORTED_MODULE_3__["ErrorDetails"].BUFFER_FULL_ERROR;
                    } else {
                      _this5.appendError++;
                      event2.details = _errors__WEBPACK_IMPORTED_MODULE_3__["ErrorDetails"].BUFFER_APPEND_ERROR;
                      if (_this5.appendError > hls.config.appendErrorMaxRetry) {
                        _utils_logger__WEBPACK_IMPORTED_MODULE_2__["logger"].error("[buffer-controller]: Failed " + hls.config.appendErrorMaxRetry + " times to append segment in sourceBuffer");
                        event2.fatal = true;
                      }
                    }
                    hls.trigger(_events__WEBPACK_IMPORTED_MODULE_1__["Events"].ERROR, event2);
                  }
                };
                operationQueue.append(operation, type);
              };
              _proto.onBufferFlushing = function onBufferFlushing(event, data) {
                var _this6 = this;
                var operationQueue = this.operationQueue;
                var flushOperation = function flushOperation2(type) {
                  return {
                    execute: _this6.removeExecutor.bind(_this6, type, data.startOffset, data.endOffset),
                    onStart: function onStart() {
                    },
                    onComplete: function onComplete() {
                      _this6.hls.trigger(_events__WEBPACK_IMPORTED_MODULE_1__["Events"].BUFFER_FLUSHED, {
                        type
                      });
                    },
                    onError: function onError(e4) {
                      _utils_logger__WEBPACK_IMPORTED_MODULE_2__["logger"].warn("[buffer-controller]: Failed to remove from " + type + " SourceBuffer", e4);
                    }
                  };
                };
                if (data.type) {
                  operationQueue.append(flushOperation(data.type), data.type);
                } else {
                  this.getSourceBufferTypes().forEach(function(type) {
                    operationQueue.append(flushOperation(type), type);
                  });
                }
              };
              _proto.onFragParsed = function onFragParsed(event, data) {
                var _this7 = this;
                var frag = data.frag, part = data.part;
                var buffersAppendedTo = [];
                var elementaryStreams = part ? part.elementaryStreams : frag.elementaryStreams;
                if (elementaryStreams[_loader_fragment__WEBPACK_IMPORTED_MODULE_6__["ElementaryStreamTypes"].AUDIOVIDEO]) {
                  buffersAppendedTo.push("audiovideo");
                } else {
                  if (elementaryStreams[_loader_fragment__WEBPACK_IMPORTED_MODULE_6__["ElementaryStreamTypes"].AUDIO]) {
                    buffersAppendedTo.push("audio");
                  }
                  if (elementaryStreams[_loader_fragment__WEBPACK_IMPORTED_MODULE_6__["ElementaryStreamTypes"].VIDEO]) {
                    buffersAppendedTo.push("video");
                  }
                }
                var onUnblocked = function onUnblocked2() {
                  var now = self.performance.now();
                  frag.stats.buffering.end = now;
                  if (part) {
                    part.stats.buffering.end = now;
                  }
                  var stats = part ? part.stats : frag.stats;
                  _this7.hls.trigger(_events__WEBPACK_IMPORTED_MODULE_1__["Events"].FRAG_BUFFERED, {
                    frag,
                    part,
                    stats,
                    id: frag.type
                  });
                };
                if (buffersAppendedTo.length === 0) {
                  _utils_logger__WEBPACK_IMPORTED_MODULE_2__["logger"].warn("Fragments must have at least one ElementaryStreamType set. type: " + frag.type + " level: " + frag.level + " sn: " + frag.sn);
                }
                this.blockBuffers(onUnblocked, buffersAppendedTo);
              };
              _proto.onFragChanged = function onFragChanged(event, data) {
                this.flushBackBuffer();
              };
              _proto.onBufferEos = function onBufferEos(event, data) {
                var _this8 = this;
                var ended = this.getSourceBufferTypes().reduce(function(acc, type) {
                  var sb = _this8.sourceBuffer[type];
                  if (!data.type || data.type === type) {
                    if (sb && !sb.ended) {
                      sb.ended = true;
                      _utils_logger__WEBPACK_IMPORTED_MODULE_2__["logger"].log("[buffer-controller]: " + type + " sourceBuffer now EOS");
                    }
                  }
                  return acc && !!(!sb || sb.ended);
                }, true);
                if (ended) {
                  this.blockBuffers(function() {
                    var mediaSource = _this8.mediaSource;
                    if (!mediaSource || mediaSource.readyState !== "open") {
                      return;
                    }
                    mediaSource.endOfStream();
                  });
                }
              };
              _proto.onLevelUpdated = function onLevelUpdated(event, _ref) {
                var details = _ref.details;
                if (!details.fragments.length) {
                  return;
                }
                this.details = details;
                if (this.getSourceBufferTypes().length) {
                  this.blockBuffers(this.updateMediaElementDuration.bind(this));
                } else {
                  this.updateMediaElementDuration();
                }
              };
              _proto.flushBackBuffer = function flushBackBuffer() {
                var hls = this.hls, details = this.details, media2 = this.media, sourceBuffer = this.sourceBuffer;
                if (!media2 || details === null) {
                  return;
                }
                var sourceBufferTypes = this.getSourceBufferTypes();
                if (!sourceBufferTypes.length) {
                  return;
                }
                var backBufferLength = details.live && hls.config.liveBackBufferLength !== null ? hls.config.liveBackBufferLength : hls.config.backBufferLength;
                if (!Object(_home_runner_work_hls_js_hls_js_src_polyfills_number__WEBPACK_IMPORTED_MODULE_0__["isFiniteNumber"])(backBufferLength) || backBufferLength < 0) {
                  return;
                }
                var currentTime = media2.currentTime;
                var targetDuration = details.levelTargetDuration;
                var maxBackBufferLength = Math.max(backBufferLength, targetDuration);
                var targetBackBufferPosition = Math.floor(currentTime / targetDuration) * targetDuration - maxBackBufferLength;
                sourceBufferTypes.forEach(function(type) {
                  var sb = sourceBuffer[type];
                  if (sb) {
                    var buffered = _utils_buffer_helper__WEBPACK_IMPORTED_MODULE_4__["BufferHelper"].getBuffered(sb);
                    if (buffered.length > 0 && targetBackBufferPosition > buffered.start(0)) {
                      hls.trigger(_events__WEBPACK_IMPORTED_MODULE_1__["Events"].BACK_BUFFER_REACHED, {
                        bufferEnd: targetBackBufferPosition
                      });
                      if (details.live) {
                        hls.trigger(_events__WEBPACK_IMPORTED_MODULE_1__["Events"].LIVE_BACK_BUFFER_REACHED, {
                          bufferEnd: targetBackBufferPosition
                        });
                      }
                      hls.trigger(_events__WEBPACK_IMPORTED_MODULE_1__["Events"].BUFFER_FLUSHING, {
                        startOffset: 0,
                        endOffset: targetBackBufferPosition,
                        type
                      });
                    }
                  }
                });
              };
              _proto.updateMediaElementDuration = function updateMediaElementDuration() {
                if (!this.details || !this.media || !this.mediaSource || this.mediaSource.readyState !== "open") {
                  return;
                }
                var details = this.details, hls = this.hls, media2 = this.media, mediaSource = this.mediaSource;
                var levelDuration = details.fragments[0].start + details.totalduration;
                var mediaDuration = media2.duration;
                var msDuration = Object(_home_runner_work_hls_js_hls_js_src_polyfills_number__WEBPACK_IMPORTED_MODULE_0__["isFiniteNumber"])(mediaSource.duration) ? mediaSource.duration : 0;
                if (details.live && hls.config.liveDurationInfinity) {
                  _utils_logger__WEBPACK_IMPORTED_MODULE_2__["logger"].log("[buffer-controller]: Media Source duration is set to Infinity");
                  mediaSource.duration = Infinity;
                  this.updateSeekableRange(details);
                } else if (levelDuration > msDuration && levelDuration > mediaDuration || !Object(_home_runner_work_hls_js_hls_js_src_polyfills_number__WEBPACK_IMPORTED_MODULE_0__["isFiniteNumber"])(mediaDuration)) {
                  _utils_logger__WEBPACK_IMPORTED_MODULE_2__["logger"].log("[buffer-controller]: Updating Media Source duration to " + levelDuration.toFixed(3));
                  mediaSource.duration = levelDuration;
                }
              };
              _proto.updateSeekableRange = function updateSeekableRange(levelDetails) {
                var mediaSource = this.mediaSource;
                var fragments = levelDetails.fragments;
                var len = fragments.length;
                if (len && levelDetails.live && mediaSource !== null && mediaSource !== void 0 && mediaSource.setLiveSeekableRange) {
                  var start = Math.max(0, fragments[0].start);
                  var end = Math.max(start, start + levelDetails.totalduration);
                  mediaSource.setLiveSeekableRange(start, end);
                }
              };
              _proto.checkPendingTracks = function checkPendingTracks() {
                var bufferCodecEventsExpected = this.bufferCodecEventsExpected, operationQueue = this.operationQueue, pendingTracks = this.pendingTracks;
                var pendingTracksCount = Object.keys(pendingTracks).length;
                if (pendingTracksCount && !bufferCodecEventsExpected || pendingTracksCount === 2) {
                  this.createSourceBuffers(pendingTracks);
                  this.pendingTracks = {};
                  var buffers = this.getSourceBufferTypes();
                  if (buffers.length === 0) {
                    this.hls.trigger(_events__WEBPACK_IMPORTED_MODULE_1__["Events"].ERROR, {
                      type: _errors__WEBPACK_IMPORTED_MODULE_3__["ErrorTypes"].MEDIA_ERROR,
                      details: _errors__WEBPACK_IMPORTED_MODULE_3__["ErrorDetails"].BUFFER_INCOMPATIBLE_CODECS_ERROR,
                      fatal: true,
                      reason: "could not create source buffer for media codec(s)"
                    });
                    return;
                  }
                  buffers.forEach(function(type) {
                    operationQueue.executeNext(type);
                  });
                }
              };
              _proto.createSourceBuffers = function createSourceBuffers(tracks) {
                var sourceBuffer = this.sourceBuffer, mediaSource = this.mediaSource;
                if (!mediaSource) {
                  throw Error("createSourceBuffers called when mediaSource was null");
                }
                var tracksCreated = 0;
                for (var trackName in tracks) {
                  if (!sourceBuffer[trackName]) {
                    var track = tracks[trackName];
                    if (!track) {
                      throw Error("source buffer exists for track " + trackName + ", however track does not");
                    }
                    var codec = track.levelCodec || track.codec;
                    var mimeType = track.container + ";codecs=" + codec;
                    _utils_logger__WEBPACK_IMPORTED_MODULE_2__["logger"].log("[buffer-controller]: creating sourceBuffer(" + mimeType + ")");
                    try {
                      var sb = sourceBuffer[trackName] = mediaSource.addSourceBuffer(mimeType);
                      var sbName = trackName;
                      this.addBufferListener(sbName, "updatestart", this._onSBUpdateStart);
                      this.addBufferListener(sbName, "updateend", this._onSBUpdateEnd);
                      this.addBufferListener(sbName, "error", this._onSBUpdateError);
                      this.tracks[trackName] = {
                        buffer: sb,
                        codec,
                        container: track.container,
                        levelCodec: track.levelCodec,
                        id: track.id
                      };
                      tracksCreated++;
                    } catch (err) {
                      _utils_logger__WEBPACK_IMPORTED_MODULE_2__["logger"].error("[buffer-controller]: error while trying to add sourceBuffer: " + err.message);
                      this.hls.trigger(_events__WEBPACK_IMPORTED_MODULE_1__["Events"].ERROR, {
                        type: _errors__WEBPACK_IMPORTED_MODULE_3__["ErrorTypes"].MEDIA_ERROR,
                        details: _errors__WEBPACK_IMPORTED_MODULE_3__["ErrorDetails"].BUFFER_ADD_CODEC_ERROR,
                        fatal: false,
                        error: err,
                        mimeType
                      });
                    }
                  }
                }
                if (tracksCreated) {
                  this.hls.trigger(_events__WEBPACK_IMPORTED_MODULE_1__["Events"].BUFFER_CREATED, {
                    tracks: this.tracks
                  });
                }
              };
              _proto._onSBUpdateStart = function _onSBUpdateStart(type) {
                var operationQueue = this.operationQueue;
                var operation = operationQueue.current(type);
                operation.onStart();
              };
              _proto._onSBUpdateEnd = function _onSBUpdateEnd(type) {
                var operationQueue = this.operationQueue;
                var operation = operationQueue.current(type);
                operation.onComplete();
                operationQueue.shiftAndExecuteNext(type);
              };
              _proto._onSBUpdateError = function _onSBUpdateError(type, event) {
                _utils_logger__WEBPACK_IMPORTED_MODULE_2__["logger"].error("[buffer-controller]: " + type + " SourceBuffer error", event);
                this.hls.trigger(_events__WEBPACK_IMPORTED_MODULE_1__["Events"].ERROR, {
                  type: _errors__WEBPACK_IMPORTED_MODULE_3__["ErrorTypes"].MEDIA_ERROR,
                  details: _errors__WEBPACK_IMPORTED_MODULE_3__["ErrorDetails"].BUFFER_APPENDING_ERROR,
                  fatal: false
                });
                var operation = this.operationQueue.current(type);
                if (operation) {
                  operation.onError(event);
                }
              };
              _proto.removeExecutor = function removeExecutor(type, startOffset, endOffset) {
                var media2 = this.media, mediaSource = this.mediaSource, operationQueue = this.operationQueue, sourceBuffer = this.sourceBuffer;
                var sb = sourceBuffer[type];
                if (!media2 || !mediaSource || !sb) {
                  _utils_logger__WEBPACK_IMPORTED_MODULE_2__["logger"].warn("[buffer-controller]: Attempting to remove from the " + type + " SourceBuffer, but it does not exist");
                  operationQueue.shiftAndExecuteNext(type);
                  return;
                }
                var mediaDuration = Object(_home_runner_work_hls_js_hls_js_src_polyfills_number__WEBPACK_IMPORTED_MODULE_0__["isFiniteNumber"])(media2.duration) ? media2.duration : Infinity;
                var msDuration = Object(_home_runner_work_hls_js_hls_js_src_polyfills_number__WEBPACK_IMPORTED_MODULE_0__["isFiniteNumber"])(mediaSource.duration) ? mediaSource.duration : Infinity;
                var removeStart = Math.max(0, startOffset);
                var removeEnd = Math.min(endOffset, mediaDuration, msDuration);
                if (removeEnd > removeStart) {
                  _utils_logger__WEBPACK_IMPORTED_MODULE_2__["logger"].log("[buffer-controller]: Removing [" + removeStart + "," + removeEnd + "] from the " + type + " SourceBuffer");
                  console.assert(!sb.updating, type + " sourceBuffer must not be updating");
                  sb.remove(removeStart, removeEnd);
                } else {
                  operationQueue.shiftAndExecuteNext(type);
                }
              };
              _proto.appendExecutor = function appendExecutor(data, type) {
                var operationQueue = this.operationQueue, sourceBuffer = this.sourceBuffer;
                var sb = sourceBuffer[type];
                if (!sb) {
                  _utils_logger__WEBPACK_IMPORTED_MODULE_2__["logger"].warn("[buffer-controller]: Attempting to append to the " + type + " SourceBuffer, but it does not exist");
                  operationQueue.shiftAndExecuteNext(type);
                  return;
                }
                sb.ended = false;
                console.assert(!sb.updating, type + " sourceBuffer must not be updating");
                sb.appendBuffer(data);
              };
              _proto.blockBuffers = function blockBuffers(onUnblocked, buffers) {
                var _this9 = this;
                if (buffers === void 0) {
                  buffers = this.getSourceBufferTypes();
                }
                if (!buffers.length) {
                  _utils_logger__WEBPACK_IMPORTED_MODULE_2__["logger"].log("[buffer-controller]: Blocking operation requested, but no SourceBuffers exist");
                  Promise.resolve(onUnblocked);
                  return;
                }
                var operationQueue = this.operationQueue;
                var blockingOperations = buffers.map(function(type) {
                  return operationQueue.appendBlocker(type);
                });
                Promise.all(blockingOperations).then(function() {
                  onUnblocked();
                  buffers.forEach(function(type) {
                    var sb = _this9.sourceBuffer[type];
                    if (!sb || !sb.updating) {
                      operationQueue.shiftAndExecuteNext(type);
                    }
                  });
                });
              };
              _proto.getSourceBufferTypes = function getSourceBufferTypes() {
                return Object.keys(this.sourceBuffer);
              };
              _proto.addBufferListener = function addBufferListener(type, event, fn) {
                var buffer = this.sourceBuffer[type];
                if (!buffer) {
                  return;
                }
                var listener = fn.bind(this, type);
                this.listeners[type].push({
                  event,
                  listener
                });
                buffer.addEventListener(event, listener);
              };
              _proto.removeBufferListeners = function removeBufferListeners(type) {
                var buffer = this.sourceBuffer[type];
                if (!buffer) {
                  return;
                }
                this.listeners[type].forEach(function(l4) {
                  buffer.removeEventListener(l4.event, l4.listener);
                });
              };
              return BufferController2;
            }();
          },
          "./src/controller/buffer-operation-queue.ts": function(module2, __webpack_exports__, __webpack_require__) {
            "use strict";
            __webpack_require__.r(__webpack_exports__);
            __webpack_require__.d(__webpack_exports__, "default", function() {
              return BufferOperationQueue;
            });
            var _utils_logger__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("./src/utils/logger.ts");
            var BufferOperationQueue = /* @__PURE__ */ function() {
              function BufferOperationQueue2(sourceBufferReference) {
                this.buffers = void 0;
                this.queues = {
                  video: [],
                  audio: [],
                  audiovideo: []
                };
                this.buffers = sourceBufferReference;
              }
              var _proto = BufferOperationQueue2.prototype;
              _proto.append = function append(operation, type) {
                var queue = this.queues[type];
                queue.push(operation);
                if (queue.length === 1 && this.buffers[type]) {
                  this.executeNext(type);
                }
              };
              _proto.insertAbort = function insertAbort(operation, type) {
                var queue = this.queues[type];
                queue.unshift(operation);
                this.executeNext(type);
              };
              _proto.appendBlocker = function appendBlocker(type) {
                var execute;
                var promise = new Promise(function(resolve) {
                  execute = resolve;
                });
                var operation = {
                  execute,
                  onStart: function onStart() {
                  },
                  onComplete: function onComplete() {
                  },
                  onError: function onError() {
                  }
                };
                this.append(operation, type);
                return promise;
              };
              _proto.executeNext = function executeNext(type) {
                var buffers = this.buffers, queues = this.queues;
                var sb = buffers[type];
                var queue = queues[type];
                if (queue.length) {
                  var operation = queue[0];
                  try {
                    operation.execute();
                  } catch (e4) {
                    _utils_logger__WEBPACK_IMPORTED_MODULE_0__["logger"].warn("[buffer-operation-queue]: Unhandled exception executing the current operation");
                    operation.onError(e4);
                    if (!sb || !sb.updating) {
                      queue.shift();
                      this.executeNext(type);
                    }
                  }
                }
              };
              _proto.shiftAndExecuteNext = function shiftAndExecuteNext(type) {
                this.queues[type].shift();
                this.executeNext(type);
              };
              _proto.current = function current(type) {
                return this.queues[type][0];
              };
              return BufferOperationQueue2;
            }();
          },
          "./src/controller/cap-level-controller.ts": function(module2, __webpack_exports__, __webpack_require__) {
            "use strict";
            __webpack_require__.r(__webpack_exports__);
            var _events__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("./src/events.ts");
            function _defineProperties(target, props) {
              for (var i3 = 0; i3 < props.length; i3++) {
                var descriptor = props[i3];
                descriptor.enumerable = descriptor.enumerable || false;
                descriptor.configurable = true;
                if ("value" in descriptor)
                  descriptor.writable = true;
                Object.defineProperty(target, descriptor.key, descriptor);
              }
            }
            function _createClass(Constructor, protoProps, staticProps) {
              if (protoProps)
                _defineProperties(Constructor.prototype, protoProps);
              if (staticProps)
                _defineProperties(Constructor, staticProps);
              return Constructor;
            }
            var CapLevelController = /* @__PURE__ */ function() {
              function CapLevelController2(hls) {
                this.autoLevelCapping = void 0;
                this.firstLevel = void 0;
                this.media = void 0;
                this.restrictedLevels = void 0;
                this.timer = void 0;
                this.hls = void 0;
                this.streamController = void 0;
                this.clientRect = void 0;
                this.hls = hls;
                this.autoLevelCapping = Number.POSITIVE_INFINITY;
                this.firstLevel = -1;
                this.media = null;
                this.restrictedLevels = [];
                this.timer = void 0;
                this.clientRect = null;
                this.registerListeners();
              }
              var _proto = CapLevelController2.prototype;
              _proto.setStreamController = function setStreamController(streamController) {
                this.streamController = streamController;
              };
              _proto.destroy = function destroy() {
                this.unregisterListener();
                if (this.hls.config.capLevelToPlayerSize) {
                  this.stopCapping();
                }
                this.media = null;
                this.clientRect = null;
                this.hls = this.streamController = null;
              };
              _proto.registerListeners = function registerListeners() {
                var hls = this.hls;
                hls.on(_events__WEBPACK_IMPORTED_MODULE_0__["Events"].FPS_DROP_LEVEL_CAPPING, this.onFpsDropLevelCapping, this);
                hls.on(_events__WEBPACK_IMPORTED_MODULE_0__["Events"].MEDIA_ATTACHING, this.onMediaAttaching, this);
                hls.on(_events__WEBPACK_IMPORTED_MODULE_0__["Events"].MANIFEST_PARSED, this.onManifestParsed, this);
                hls.on(_events__WEBPACK_IMPORTED_MODULE_0__["Events"].BUFFER_CODECS, this.onBufferCodecs, this);
                hls.on(_events__WEBPACK_IMPORTED_MODULE_0__["Events"].MEDIA_DETACHING, this.onMediaDetaching, this);
              };
              _proto.unregisterListener = function unregisterListener() {
                var hls = this.hls;
                hls.off(_events__WEBPACK_IMPORTED_MODULE_0__["Events"].FPS_DROP_LEVEL_CAPPING, this.onFpsDropLevelCapping, this);
                hls.off(_events__WEBPACK_IMPORTED_MODULE_0__["Events"].MEDIA_ATTACHING, this.onMediaAttaching, this);
                hls.off(_events__WEBPACK_IMPORTED_MODULE_0__["Events"].MANIFEST_PARSED, this.onManifestParsed, this);
                hls.off(_events__WEBPACK_IMPORTED_MODULE_0__["Events"].BUFFER_CODECS, this.onBufferCodecs, this);
                hls.off(_events__WEBPACK_IMPORTED_MODULE_0__["Events"].MEDIA_DETACHING, this.onMediaDetaching, this);
              };
              _proto.onFpsDropLevelCapping = function onFpsDropLevelCapping(event, data) {
                if (CapLevelController2.isLevelAllowed(data.droppedLevel, this.restrictedLevels)) {
                  this.restrictedLevels.push(data.droppedLevel);
                }
              };
              _proto.onMediaAttaching = function onMediaAttaching(event, data) {
                this.media = data.media instanceof HTMLVideoElement ? data.media : null;
              };
              _proto.onManifestParsed = function onManifestParsed(event, data) {
                var hls = this.hls;
                this.restrictedLevels = [];
                this.firstLevel = data.firstLevel;
                if (hls.config.capLevelToPlayerSize && data.video) {
                  this.startCapping();
                }
              };
              _proto.onBufferCodecs = function onBufferCodecs(event, data) {
                var hls = this.hls;
                if (hls.config.capLevelToPlayerSize && data.video) {
                  this.startCapping();
                }
              };
              _proto.onMediaDetaching = function onMediaDetaching() {
                this.stopCapping();
              };
              _proto.detectPlayerSize = function detectPlayerSize() {
                if (this.media && this.mediaHeight > 0 && this.mediaWidth > 0) {
                  var levels = this.hls.levels;
                  if (levels.length) {
                    var hls = this.hls;
                    hls.autoLevelCapping = this.getMaxLevel(levels.length - 1);
                    if (hls.autoLevelCapping > this.autoLevelCapping && this.streamController) {
                      this.streamController.nextLevelSwitch();
                    }
                    this.autoLevelCapping = hls.autoLevelCapping;
                  }
                }
              };
              _proto.getMaxLevel = function getMaxLevel(capLevelIndex) {
                var _this = this;
                var levels = this.hls.levels;
                if (!levels.length) {
                  return -1;
                }
                var validLevels = levels.filter(function(level, index) {
                  return CapLevelController2.isLevelAllowed(index, _this.restrictedLevels) && index <= capLevelIndex;
                });
                this.clientRect = null;
                return CapLevelController2.getMaxLevelByMediaSize(validLevels, this.mediaWidth, this.mediaHeight);
              };
              _proto.startCapping = function startCapping() {
                if (this.timer) {
                  return;
                }
                this.autoLevelCapping = Number.POSITIVE_INFINITY;
                this.hls.firstLevel = this.getMaxLevel(this.firstLevel);
                self.clearInterval(this.timer);
                this.timer = self.setInterval(this.detectPlayerSize.bind(this), 1e3);
                this.detectPlayerSize();
              };
              _proto.stopCapping = function stopCapping() {
                this.restrictedLevels = [];
                this.firstLevel = -1;
                this.autoLevelCapping = Number.POSITIVE_INFINITY;
                if (this.timer) {
                  self.clearInterval(this.timer);
                  this.timer = void 0;
                }
              };
              _proto.getDimensions = function getDimensions() {
                if (this.clientRect) {
                  return this.clientRect;
                }
                var media2 = this.media;
                var boundsRect = {
                  width: 0,
                  height: 0
                };
                if (media2) {
                  var clientRect = media2.getBoundingClientRect();
                  boundsRect.width = clientRect.width;
                  boundsRect.height = clientRect.height;
                  if (!boundsRect.width && !boundsRect.height) {
                    boundsRect.width = clientRect.right - clientRect.left || media2.width || 0;
                    boundsRect.height = clientRect.bottom - clientRect.top || media2.height || 0;
                  }
                }
                this.clientRect = boundsRect;
                return boundsRect;
              };
              CapLevelController2.isLevelAllowed = function isLevelAllowed(level, restrictedLevels) {
                if (restrictedLevels === void 0) {
                  restrictedLevels = [];
                }
                return restrictedLevels.indexOf(level) === -1;
              };
              CapLevelController2.getMaxLevelByMediaSize = function getMaxLevelByMediaSize(levels, width, height) {
                if (!levels || !levels.length) {
                  return -1;
                }
                var atGreatestBandiwdth = function atGreatestBandiwdth2(curLevel, nextLevel) {
                  if (!nextLevel) {
                    return true;
                  }
                  return curLevel.width !== nextLevel.width || curLevel.height !== nextLevel.height;
                };
                var maxLevelIndex = levels.length - 1;
                for (var i3 = 0; i3 < levels.length; i3 += 1) {
                  var level = levels[i3];
                  if ((level.width >= width || level.height >= height) && atGreatestBandiwdth(level, levels[i3 + 1])) {
                    maxLevelIndex = i3;
                    break;
                  }
                }
                return maxLevelIndex;
              };
              _createClass(CapLevelController2, [{
                key: "mediaWidth",
                get: function get() {
                  return this.getDimensions().width * CapLevelController2.contentScaleFactor;
                }
              }, {
                key: "mediaHeight",
                get: function get() {
                  return this.getDimensions().height * CapLevelController2.contentScaleFactor;
                }
              }], [{
                key: "contentScaleFactor",
                get: function get() {
                  var pixelRatio = 1;
                  try {
                    pixelRatio = self.devicePixelRatio;
                  } catch (e4) {
                  }
                  return pixelRatio;
                }
              }]);
              return CapLevelController2;
            }();
            __webpack_exports__["default"] = CapLevelController;
          },
          "./src/controller/cmcd-controller.ts": function(module2, __webpack_exports__, __webpack_require__) {
            "use strict";
            __webpack_require__.r(__webpack_exports__);
            __webpack_require__.d(__webpack_exports__, "default", function() {
              return CMCDController;
            });
            var _events__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("./src/events.ts");
            var _types_cmcd__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("./src/types/cmcd.ts");
            var _utils_buffer_helper__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__("./src/utils/buffer-helper.ts");
            var _utils_logger__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__("./src/utils/logger.ts");
            function _defineProperties(target, props) {
              for (var i3 = 0; i3 < props.length; i3++) {
                var descriptor = props[i3];
                descriptor.enumerable = descriptor.enumerable || false;
                descriptor.configurable = true;
                if ("value" in descriptor)
                  descriptor.writable = true;
                Object.defineProperty(target, descriptor.key, descriptor);
              }
            }
            function _createClass(Constructor, protoProps, staticProps) {
              if (protoProps)
                _defineProperties(Constructor.prototype, protoProps);
              if (staticProps)
                _defineProperties(Constructor, staticProps);
              return Constructor;
            }
            function _createForOfIteratorHelperLoose(o3, allowArrayLike) {
              var it3 = typeof Symbol !== "undefined" && o3[Symbol.iterator] || o3["@@iterator"];
              if (it3)
                return (it3 = it3.call(o3)).next.bind(it3);
              if (Array.isArray(o3) || (it3 = _unsupportedIterableToArray(o3)) || allowArrayLike && o3 && typeof o3.length === "number") {
                if (it3)
                  o3 = it3;
                var i3 = 0;
                return function() {
                  if (i3 >= o3.length)
                    return { done: true };
                  return { done: false, value: o3[i3++] };
                };
              }
              throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
            }
            function _unsupportedIterableToArray(o3, minLen) {
              if (!o3)
                return;
              if (typeof o3 === "string")
                return _arrayLikeToArray(o3, minLen);
              var n4 = Object.prototype.toString.call(o3).slice(8, -1);
              if (n4 === "Object" && o3.constructor)
                n4 = o3.constructor.name;
              if (n4 === "Map" || n4 === "Set")
                return Array.from(o3);
              if (n4 === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n4))
                return _arrayLikeToArray(o3, minLen);
            }
            function _arrayLikeToArray(arr, len) {
              if (len == null || len > arr.length)
                len = arr.length;
              for (var i3 = 0, arr2 = new Array(len); i3 < len; i3++) {
                arr2[i3] = arr[i3];
              }
              return arr2;
            }
            function _extends2() {
              _extends2 = Object.assign || function(target) {
                for (var i3 = 1; i3 < arguments.length; i3++) {
                  var source = arguments[i3];
                  for (var key in source) {
                    if (Object.prototype.hasOwnProperty.call(source, key)) {
                      target[key] = source[key];
                    }
                  }
                }
                return target;
              };
              return _extends2.apply(this, arguments);
            }
            var CMCDController = /* @__PURE__ */ function() {
              function CMCDController2(hls) {
                var _this = this;
                this.hls = void 0;
                this.config = void 0;
                this.media = void 0;
                this.sid = void 0;
                this.cid = void 0;
                this.useHeaders = false;
                this.initialized = false;
                this.starved = false;
                this.buffering = true;
                this.audioBuffer = void 0;
                this.videoBuffer = void 0;
                this.onWaiting = function() {
                  if (_this.initialized) {
                    _this.starved = true;
                  }
                  _this.buffering = true;
                };
                this.onPlaying = function() {
                  if (!_this.initialized) {
                    _this.initialized = true;
                  }
                  _this.buffering = false;
                };
                this.applyPlaylistData = function(context) {
                  try {
                    _this.apply(context, {
                      ot: _types_cmcd__WEBPACK_IMPORTED_MODULE_1__["CMCDObjectType"].MANIFEST,
                      su: !_this.initialized
                    });
                  } catch (error) {
                    _utils_logger__WEBPACK_IMPORTED_MODULE_3__["logger"].warn("Could not generate manifest CMCD data.", error);
                  }
                };
                this.applyFragmentData = function(context) {
                  try {
                    var fragment = context.frag;
                    var level = _this.hls.levels[fragment.level];
                    var ot3 = _this.getObjectType(fragment);
                    var data = {
                      d: fragment.duration * 1e3,
                      ot: ot3
                    };
                    if (ot3 === _types_cmcd__WEBPACK_IMPORTED_MODULE_1__["CMCDObjectType"].VIDEO || ot3 === _types_cmcd__WEBPACK_IMPORTED_MODULE_1__["CMCDObjectType"].AUDIO || ot3 == _types_cmcd__WEBPACK_IMPORTED_MODULE_1__["CMCDObjectType"].MUXED) {
                      data.br = level.bitrate / 1e3;
                      data.tb = _this.getTopBandwidth(ot3) / 1e3;
                      data.bl = _this.getBufferLength(ot3);
                    }
                    _this.apply(context, data);
                  } catch (error) {
                    _utils_logger__WEBPACK_IMPORTED_MODULE_3__["logger"].warn("Could not generate segment CMCD data.", error);
                  }
                };
                this.hls = hls;
                var config2 = this.config = hls.config;
                var cmcd = config2.cmcd;
                if (cmcd != null) {
                  config2.pLoader = this.createPlaylistLoader();
                  config2.fLoader = this.createFragmentLoader();
                  this.sid = cmcd.sessionId || CMCDController2.uuid();
                  this.cid = cmcd.contentId;
                  this.useHeaders = cmcd.useHeaders === true;
                  this.registerListeners();
                }
              }
              var _proto = CMCDController2.prototype;
              _proto.registerListeners = function registerListeners() {
                var hls = this.hls;
                hls.on(_events__WEBPACK_IMPORTED_MODULE_0__["Events"].MEDIA_ATTACHED, this.onMediaAttached, this);
                hls.on(_events__WEBPACK_IMPORTED_MODULE_0__["Events"].MEDIA_DETACHED, this.onMediaDetached, this);
                hls.on(_events__WEBPACK_IMPORTED_MODULE_0__["Events"].BUFFER_CREATED, this.onBufferCreated, this);
              };
              _proto.unregisterListeners = function unregisterListeners() {
                var hls = this.hls;
                hls.off(_events__WEBPACK_IMPORTED_MODULE_0__["Events"].MEDIA_ATTACHED, this.onMediaAttached, this);
                hls.off(_events__WEBPACK_IMPORTED_MODULE_0__["Events"].MEDIA_DETACHED, this.onMediaDetached, this);
                hls.off(_events__WEBPACK_IMPORTED_MODULE_0__["Events"].BUFFER_CREATED, this.onBufferCreated, this);
                this.onMediaDetached();
              };
              _proto.destroy = function destroy() {
                this.unregisterListeners();
                this.hls = this.config = this.audioBuffer = this.videoBuffer = null;
              };
              _proto.onMediaAttached = function onMediaAttached(event, data) {
                this.media = data.media;
                this.media.addEventListener("waiting", this.onWaiting);
                this.media.addEventListener("playing", this.onPlaying);
              };
              _proto.onMediaDetached = function onMediaDetached() {
                if (!this.media) {
                  return;
                }
                this.media.removeEventListener("waiting", this.onWaiting);
                this.media.removeEventListener("playing", this.onPlaying);
                this.media = null;
              };
              _proto.onBufferCreated = function onBufferCreated(event, data) {
                var _data$tracks$audio, _data$tracks$video;
                this.audioBuffer = (_data$tracks$audio = data.tracks.audio) === null || _data$tracks$audio === void 0 ? void 0 : _data$tracks$audio.buffer;
                this.videoBuffer = (_data$tracks$video = data.tracks.video) === null || _data$tracks$video === void 0 ? void 0 : _data$tracks$video.buffer;
              };
              _proto.createData = function createData() {
                var _this$media;
                return {
                  v: _types_cmcd__WEBPACK_IMPORTED_MODULE_1__["CMCDVersion"],
                  sf: _types_cmcd__WEBPACK_IMPORTED_MODULE_1__["CMCDStreamingFormat"].HLS,
                  sid: this.sid,
                  cid: this.cid,
                  pr: (_this$media = this.media) === null || _this$media === void 0 ? void 0 : _this$media.playbackRate,
                  mtp: this.hls.bandwidthEstimate / 1e3
                };
              };
              _proto.apply = function apply(context, data) {
                if (data === void 0) {
                  data = {};
                }
                _extends2(data, this.createData());
                var isVideo = data.ot === _types_cmcd__WEBPACK_IMPORTED_MODULE_1__["CMCDObjectType"].INIT || data.ot === _types_cmcd__WEBPACK_IMPORTED_MODULE_1__["CMCDObjectType"].VIDEO || data.ot === _types_cmcd__WEBPACK_IMPORTED_MODULE_1__["CMCDObjectType"].MUXED;
                if (this.starved && isVideo) {
                  data.bs = true;
                  data.su = true;
                  this.starved = false;
                }
                if (data.su == null) {
                  data.su = this.buffering;
                }
                if (this.useHeaders) {
                  var headers = CMCDController2.toHeaders(data);
                  if (!Object.keys(headers).length) {
                    return;
                  }
                  if (!context.headers) {
                    context.headers = {};
                  }
                  _extends2(context.headers, headers);
                } else {
                  var query = CMCDController2.toQuery(data);
                  if (!query) {
                    return;
                  }
                  context.url = CMCDController2.appendQueryToUri(context.url, query);
                }
              };
              _proto.getObjectType = function getObjectType(fragment) {
                var type = fragment.type;
                if (type === "subtitle") {
                  return _types_cmcd__WEBPACK_IMPORTED_MODULE_1__["CMCDObjectType"].TIMED_TEXT;
                }
                if (fragment.sn === "initSegment") {
                  return _types_cmcd__WEBPACK_IMPORTED_MODULE_1__["CMCDObjectType"].INIT;
                }
                if (type === "audio") {
                  return _types_cmcd__WEBPACK_IMPORTED_MODULE_1__["CMCDObjectType"].AUDIO;
                }
                if (type === "main") {
                  if (!this.hls.audioTracks.length) {
                    return _types_cmcd__WEBPACK_IMPORTED_MODULE_1__["CMCDObjectType"].MUXED;
                  }
                  return _types_cmcd__WEBPACK_IMPORTED_MODULE_1__["CMCDObjectType"].VIDEO;
                }
                return void 0;
              };
              _proto.getTopBandwidth = function getTopBandwidth(type) {
                var bitrate = 0;
                var levels;
                var hls = this.hls;
                if (type === _types_cmcd__WEBPACK_IMPORTED_MODULE_1__["CMCDObjectType"].AUDIO) {
                  levels = hls.audioTracks;
                } else {
                  var max = hls.maxAutoLevel;
                  var len = max > -1 ? max + 1 : hls.levels.length;
                  levels = hls.levels.slice(0, len);
                }
                for (var _iterator = _createForOfIteratorHelperLoose(levels), _step; !(_step = _iterator()).done; ) {
                  var level = _step.value;
                  if (level.bitrate > bitrate) {
                    bitrate = level.bitrate;
                  }
                }
                return bitrate > 0 ? bitrate : NaN;
              };
              _proto.getBufferLength = function getBufferLength(type) {
                var media2 = this.hls.media;
                var buffer = type === _types_cmcd__WEBPACK_IMPORTED_MODULE_1__["CMCDObjectType"].AUDIO ? this.audioBuffer : this.videoBuffer;
                if (!buffer || !media2) {
                  return NaN;
                }
                var info = _utils_buffer_helper__WEBPACK_IMPORTED_MODULE_2__["BufferHelper"].bufferInfo(buffer, media2.currentTime, this.config.maxBufferHole);
                return info.len * 1e3;
              };
              _proto.createPlaylistLoader = function createPlaylistLoader() {
                var pLoader = this.config.pLoader;
                var apply = this.applyPlaylistData;
                var Ctor = pLoader || this.config.loader;
                return /* @__PURE__ */ function() {
                  function CmcdPlaylistLoader(config2) {
                    this.loader = void 0;
                    this.loader = new Ctor(config2);
                  }
                  var _proto2 = CmcdPlaylistLoader.prototype;
                  _proto2.destroy = function destroy() {
                    this.loader.destroy();
                  };
                  _proto2.abort = function abort() {
                    this.loader.abort();
                  };
                  _proto2.load = function load(context, config2, callbacks) {
                    apply(context);
                    this.loader.load(context, config2, callbacks);
                  };
                  _createClass(CmcdPlaylistLoader, [{
                    key: "stats",
                    get: function get() {
                      return this.loader.stats;
                    }
                  }, {
                    key: "context",
                    get: function get() {
                      return this.loader.context;
                    }
                  }]);
                  return CmcdPlaylistLoader;
                }();
              };
              _proto.createFragmentLoader = function createFragmentLoader() {
                var fLoader = this.config.fLoader;
                var apply = this.applyFragmentData;
                var Ctor = fLoader || this.config.loader;
                return /* @__PURE__ */ function() {
                  function CmcdFragmentLoader(config2) {
                    this.loader = void 0;
                    this.loader = new Ctor(config2);
                  }
                  var _proto3 = CmcdFragmentLoader.prototype;
                  _proto3.destroy = function destroy() {
                    this.loader.destroy();
                  };
                  _proto3.abort = function abort() {
                    this.loader.abort();
                  };
                  _proto3.load = function load(context, config2, callbacks) {
                    apply(context);
                    this.loader.load(context, config2, callbacks);
                  };
                  _createClass(CmcdFragmentLoader, [{
                    key: "stats",
                    get: function get() {
                      return this.loader.stats;
                    }
                  }, {
                    key: "context",
                    get: function get() {
                      return this.loader.context;
                    }
                  }]);
                  return CmcdFragmentLoader;
                }();
              };
              CMCDController2.uuid = function uuid() {
                var url = URL.createObjectURL(new Blob());
                var uuid2 = url.toString();
                URL.revokeObjectURL(url);
                return uuid2.substr(uuid2.lastIndexOf("/") + 1);
              };
              CMCDController2.serialize = function serialize(data) {
                var results = [];
                var isValid = function isValid2(value2) {
                  return !Number.isNaN(value2) && value2 != null && value2 !== "" && value2 !== false;
                };
                var toRounded = function toRounded2(value2) {
                  return Math.round(value2);
                };
                var toHundred = function toHundred2(value2) {
                  return toRounded(value2 / 100) * 100;
                };
                var toUrlSafe = function toUrlSafe2(value2) {
                  return encodeURIComponent(value2);
                };
                var formatters = {
                  br: toRounded,
                  d: toRounded,
                  bl: toHundred,
                  dl: toHundred,
                  mtp: toHundred,
                  nor: toUrlSafe,
                  rtp: toHundred,
                  tb: toRounded
                };
                var keys = Object.keys(data || {}).sort();
                for (var _iterator2 = _createForOfIteratorHelperLoose(keys), _step2; !(_step2 = _iterator2()).done; ) {
                  var key = _step2.value;
                  var value = data[key];
                  if (!isValid(value)) {
                    continue;
                  }
                  if (key === "v" && value === 1) {
                    continue;
                  }
                  if (key == "pr" && value === 1) {
                    continue;
                  }
                  var formatter = formatters[key];
                  if (formatter) {
                    value = formatter(value);
                  }
                  var type = typeof value;
                  var result = void 0;
                  if (key === "ot" || key === "sf" || key === "st") {
                    result = key + "=" + value;
                  } else if (type === "boolean") {
                    result = key;
                  } else if (type === "number") {
                    result = key + "=" + value;
                  } else {
                    result = key + "=" + JSON.stringify(value);
                  }
                  results.push(result);
                }
                return results.join(",");
              };
              CMCDController2.toHeaders = function toHeaders(data) {
                var keys = Object.keys(data);
                var headers = {};
                var headerNames = ["Object", "Request", "Session", "Status"];
                var headerGroups = [{}, {}, {}, {}];
                var headerMap = {
                  br: 0,
                  d: 0,
                  ot: 0,
                  tb: 0,
                  bl: 1,
                  dl: 1,
                  mtp: 1,
                  nor: 1,
                  nrr: 1,
                  su: 1,
                  cid: 2,
                  pr: 2,
                  sf: 2,
                  sid: 2,
                  st: 2,
                  v: 2,
                  bs: 3,
                  rtp: 3
                };
                for (var _i = 0, _keys = keys; _i < _keys.length; _i++) {
                  var key = _keys[_i];
                  var index = headerMap[key] != null ? headerMap[key] : 1;
                  headerGroups[index][key] = data[key];
                }
                for (var i3 = 0; i3 < headerGroups.length; i3++) {
                  var value = CMCDController2.serialize(headerGroups[i3]);
                  if (value) {
                    headers["CMCD-" + headerNames[i3]] = value;
                  }
                }
                return headers;
              };
              CMCDController2.toQuery = function toQuery(data) {
                return "CMCD=" + encodeURIComponent(CMCDController2.serialize(data));
              };
              CMCDController2.appendQueryToUri = function appendQueryToUri(uri, query) {
                if (!query) {
                  return uri;
                }
                var separator = uri.includes("?") ? "&" : "?";
                return "" + uri + separator + query;
              };
              return CMCDController2;
            }();
          },
          "./src/controller/eme-controller.ts": function(module2, __webpack_exports__, __webpack_require__) {
            "use strict";
            __webpack_require__.r(__webpack_exports__);
            var _events__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("./src/events.ts");
            var _errors__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("./src/errors.ts");
            var _utils_logger__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__("./src/utils/logger.ts");
            var _utils_mediakeys_helper__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__("./src/utils/mediakeys-helper.ts");
            function _defineProperties(target, props) {
              for (var i3 = 0; i3 < props.length; i3++) {
                var descriptor = props[i3];
                descriptor.enumerable = descriptor.enumerable || false;
                descriptor.configurable = true;
                if ("value" in descriptor)
                  descriptor.writable = true;
                Object.defineProperty(target, descriptor.key, descriptor);
              }
            }
            function _createClass(Constructor, protoProps, staticProps) {
              if (protoProps)
                _defineProperties(Constructor.prototype, protoProps);
              if (staticProps)
                _defineProperties(Constructor, staticProps);
              return Constructor;
            }
            var MAX_LICENSE_REQUEST_FAILURES = 3;
            var createWidevineMediaKeySystemConfigurations = function createWidevineMediaKeySystemConfigurations2(audioCodecs, videoCodecs, drmSystemOptions) {
              var baseConfig = {
                audioCapabilities: [],
                videoCapabilities: []
              };
              audioCodecs.forEach(function(codec) {
                baseConfig.audioCapabilities.push({
                  contentType: 'audio/mp4; codecs="' + codec + '"',
                  robustness: drmSystemOptions.audioRobustness || ""
                });
              });
              videoCodecs.forEach(function(codec) {
                baseConfig.videoCapabilities.push({
                  contentType: 'video/mp4; codecs="' + codec + '"',
                  robustness: drmSystemOptions.videoRobustness || ""
                });
              });
              return [baseConfig];
            };
            var getSupportedMediaKeySystemConfigurations = function getSupportedMediaKeySystemConfigurations2(keySystem, audioCodecs, videoCodecs, drmSystemOptions) {
              switch (keySystem) {
                case _utils_mediakeys_helper__WEBPACK_IMPORTED_MODULE_3__["KeySystems"].WIDEVINE:
                  return createWidevineMediaKeySystemConfigurations(audioCodecs, videoCodecs, drmSystemOptions);
                default:
                  throw new Error("Unknown key-system: " + keySystem);
              }
            };
            var EMEController = /* @__PURE__ */ function() {
              function EMEController2(hls) {
                this.hls = void 0;
                this._widevineLicenseUrl = void 0;
                this._licenseXhrSetup = void 0;
                this._licenseResponseCallback = void 0;
                this._emeEnabled = void 0;
                this._requestMediaKeySystemAccess = void 0;
                this._drmSystemOptions = void 0;
                this._config = void 0;
                this._mediaKeysList = [];
                this._media = null;
                this._hasSetMediaKeys = false;
                this._requestLicenseFailureCount = 0;
                this.mediaKeysPromise = null;
                this._onMediaEncrypted = this.onMediaEncrypted.bind(this);
                this.hls = hls;
                this._config = hls.config;
                this._widevineLicenseUrl = this._config.widevineLicenseUrl;
                this._licenseXhrSetup = this._config.licenseXhrSetup;
                this._licenseResponseCallback = this._config.licenseResponseCallback;
                this._emeEnabled = this._config.emeEnabled;
                this._requestMediaKeySystemAccess = this._config.requestMediaKeySystemAccessFunc;
                this._drmSystemOptions = this._config.drmSystemOptions;
                this._registerListeners();
              }
              var _proto = EMEController2.prototype;
              _proto.destroy = function destroy() {
                this._unregisterListeners();
                this.hls = this._onMediaEncrypted = null;
                this._requestMediaKeySystemAccess = null;
              };
              _proto._registerListeners = function _registerListeners() {
                this.hls.on(_events__WEBPACK_IMPORTED_MODULE_0__["Events"].MEDIA_ATTACHED, this.onMediaAttached, this);
                this.hls.on(_events__WEBPACK_IMPORTED_MODULE_0__["Events"].MEDIA_DETACHED, this.onMediaDetached, this);
                this.hls.on(_events__WEBPACK_IMPORTED_MODULE_0__["Events"].MANIFEST_PARSED, this.onManifestParsed, this);
              };
              _proto._unregisterListeners = function _unregisterListeners() {
                this.hls.off(_events__WEBPACK_IMPORTED_MODULE_0__["Events"].MEDIA_ATTACHED, this.onMediaAttached, this);
                this.hls.off(_events__WEBPACK_IMPORTED_MODULE_0__["Events"].MEDIA_DETACHED, this.onMediaDetached, this);
                this.hls.off(_events__WEBPACK_IMPORTED_MODULE_0__["Events"].MANIFEST_PARSED, this.onManifestParsed, this);
              };
              _proto.getLicenseServerUrl = function getLicenseServerUrl(keySystem) {
                switch (keySystem) {
                  case _utils_mediakeys_helper__WEBPACK_IMPORTED_MODULE_3__["KeySystems"].WIDEVINE:
                    if (!this._widevineLicenseUrl) {
                      break;
                    }
                    return this._widevineLicenseUrl;
                }
                throw new Error('no license server URL configured for key-system "' + keySystem + '"');
              };
              _proto._attemptKeySystemAccess = function _attemptKeySystemAccess(keySystem, audioCodecs, videoCodecs) {
                var _this = this;
                var mediaKeySystemConfigs = getSupportedMediaKeySystemConfigurations(keySystem, audioCodecs, videoCodecs, this._drmSystemOptions);
                _utils_logger__WEBPACK_IMPORTED_MODULE_2__["logger"].log("Requesting encrypted media key-system access");
                var keySystemAccessPromise = this.requestMediaKeySystemAccess(keySystem, mediaKeySystemConfigs);
                this.mediaKeysPromise = keySystemAccessPromise.then(function(mediaKeySystemAccess) {
                  return _this._onMediaKeySystemAccessObtained(keySystem, mediaKeySystemAccess);
                });
                keySystemAccessPromise.catch(function(err) {
                  _utils_logger__WEBPACK_IMPORTED_MODULE_2__["logger"].error('Failed to obtain key-system "' + keySystem + '" access:', err);
                });
              };
              _proto._onMediaKeySystemAccessObtained = function _onMediaKeySystemAccessObtained(keySystem, mediaKeySystemAccess) {
                var _this2 = this;
                _utils_logger__WEBPACK_IMPORTED_MODULE_2__["logger"].log('Access for key-system "' + keySystem + '" obtained');
                var mediaKeysListItem = {
                  mediaKeysSessionInitialized: false,
                  mediaKeySystemAccess,
                  mediaKeySystemDomain: keySystem
                };
                this._mediaKeysList.push(mediaKeysListItem);
                var mediaKeysPromise = Promise.resolve().then(function() {
                  return mediaKeySystemAccess.createMediaKeys();
                }).then(function(mediaKeys) {
                  mediaKeysListItem.mediaKeys = mediaKeys;
                  _utils_logger__WEBPACK_IMPORTED_MODULE_2__["logger"].log('Media-keys created for key-system "' + keySystem + '"');
                  _this2._onMediaKeysCreated();
                  return mediaKeys;
                });
                mediaKeysPromise.catch(function(err) {
                  _utils_logger__WEBPACK_IMPORTED_MODULE_2__["logger"].error("Failed to create media-keys:", err);
                });
                return mediaKeysPromise;
              };
              _proto._onMediaKeysCreated = function _onMediaKeysCreated() {
                var _this3 = this;
                this._mediaKeysList.forEach(function(mediaKeysListItem) {
                  if (!mediaKeysListItem.mediaKeysSession) {
                    mediaKeysListItem.mediaKeysSession = mediaKeysListItem.mediaKeys.createSession();
                    _this3._onNewMediaKeySession(mediaKeysListItem.mediaKeysSession);
                  }
                });
              };
              _proto._onNewMediaKeySession = function _onNewMediaKeySession(keySession) {
                var _this4 = this;
                _utils_logger__WEBPACK_IMPORTED_MODULE_2__["logger"].log("New key-system session " + keySession.sessionId);
                keySession.addEventListener("message", function(event) {
                  _this4._onKeySessionMessage(keySession, event.message);
                }, false);
              };
              _proto._onKeySessionMessage = function _onKeySessionMessage(keySession, message) {
                _utils_logger__WEBPACK_IMPORTED_MODULE_2__["logger"].log("Got EME message event, creating license request");
                this._requestLicense(message, function(data) {
                  _utils_logger__WEBPACK_IMPORTED_MODULE_2__["logger"].log("Received license data (length: " + (data ? data.byteLength : data) + "), updating key-session");
                  keySession.update(data);
                });
              };
              _proto.onMediaEncrypted = function onMediaEncrypted(e4) {
                var _this5 = this;
                _utils_logger__WEBPACK_IMPORTED_MODULE_2__["logger"].log('Media is encrypted using "' + e4.initDataType + '" init data type');
                if (!this.mediaKeysPromise) {
                  _utils_logger__WEBPACK_IMPORTED_MODULE_2__["logger"].error("Fatal: Media is encrypted but no CDM access or no keys have been requested");
                  this.hls.trigger(_events__WEBPACK_IMPORTED_MODULE_0__["Events"].ERROR, {
                    type: _errors__WEBPACK_IMPORTED_MODULE_1__["ErrorTypes"].KEY_SYSTEM_ERROR,
                    details: _errors__WEBPACK_IMPORTED_MODULE_1__["ErrorDetails"].KEY_SYSTEM_NO_KEYS,
                    fatal: true
                  });
                  return;
                }
                var finallySetKeyAndStartSession = function finallySetKeyAndStartSession2(mediaKeys) {
                  if (!_this5._media) {
                    return;
                  }
                  _this5._attemptSetMediaKeys(mediaKeys);
                  _this5._generateRequestWithPreferredKeySession(e4.initDataType, e4.initData);
                };
                this.mediaKeysPromise.then(finallySetKeyAndStartSession).catch(finallySetKeyAndStartSession);
              };
              _proto._attemptSetMediaKeys = function _attemptSetMediaKeys(mediaKeys) {
                if (!this._media) {
                  throw new Error("Attempted to set mediaKeys without first attaching a media element");
                }
                if (!this._hasSetMediaKeys) {
                  var keysListItem = this._mediaKeysList[0];
                  if (!keysListItem || !keysListItem.mediaKeys) {
                    _utils_logger__WEBPACK_IMPORTED_MODULE_2__["logger"].error("Fatal: Media is encrypted but no CDM access or no keys have been obtained yet");
                    this.hls.trigger(_events__WEBPACK_IMPORTED_MODULE_0__["Events"].ERROR, {
                      type: _errors__WEBPACK_IMPORTED_MODULE_1__["ErrorTypes"].KEY_SYSTEM_ERROR,
                      details: _errors__WEBPACK_IMPORTED_MODULE_1__["ErrorDetails"].KEY_SYSTEM_NO_KEYS,
                      fatal: true
                    });
                    return;
                  }
                  _utils_logger__WEBPACK_IMPORTED_MODULE_2__["logger"].log("Setting keys for encrypted media");
                  this._media.setMediaKeys(keysListItem.mediaKeys);
                  this._hasSetMediaKeys = true;
                }
              };
              _proto._generateRequestWithPreferredKeySession = function _generateRequestWithPreferredKeySession(initDataType, initData) {
                var _this6 = this;
                var keysListItem = this._mediaKeysList[0];
                if (!keysListItem) {
                  _utils_logger__WEBPACK_IMPORTED_MODULE_2__["logger"].error("Fatal: Media is encrypted but not any key-system access has been obtained yet");
                  this.hls.trigger(_events__WEBPACK_IMPORTED_MODULE_0__["Events"].ERROR, {
                    type: _errors__WEBPACK_IMPORTED_MODULE_1__["ErrorTypes"].KEY_SYSTEM_ERROR,
                    details: _errors__WEBPACK_IMPORTED_MODULE_1__["ErrorDetails"].KEY_SYSTEM_NO_ACCESS,
                    fatal: true
                  });
                  return;
                }
                if (keysListItem.mediaKeysSessionInitialized) {
                  _utils_logger__WEBPACK_IMPORTED_MODULE_2__["logger"].warn("Key-Session already initialized but requested again");
                  return;
                }
                var keySession = keysListItem.mediaKeysSession;
                if (!keySession) {
                  _utils_logger__WEBPACK_IMPORTED_MODULE_2__["logger"].error("Fatal: Media is encrypted but no key-session existing");
                  this.hls.trigger(_events__WEBPACK_IMPORTED_MODULE_0__["Events"].ERROR, {
                    type: _errors__WEBPACK_IMPORTED_MODULE_1__["ErrorTypes"].KEY_SYSTEM_ERROR,
                    details: _errors__WEBPACK_IMPORTED_MODULE_1__["ErrorDetails"].KEY_SYSTEM_NO_SESSION,
                    fatal: true
                  });
                  return;
                }
                if (!initData) {
                  _utils_logger__WEBPACK_IMPORTED_MODULE_2__["logger"].warn("Fatal: initData required for generating a key session is null");
                  this.hls.trigger(_events__WEBPACK_IMPORTED_MODULE_0__["Events"].ERROR, {
                    type: _errors__WEBPACK_IMPORTED_MODULE_1__["ErrorTypes"].KEY_SYSTEM_ERROR,
                    details: _errors__WEBPACK_IMPORTED_MODULE_1__["ErrorDetails"].KEY_SYSTEM_NO_INIT_DATA,
                    fatal: true
                  });
                  return;
                }
                _utils_logger__WEBPACK_IMPORTED_MODULE_2__["logger"].log('Generating key-session request for "' + initDataType + '" init data type');
                keysListItem.mediaKeysSessionInitialized = true;
                keySession.generateRequest(initDataType, initData).then(function() {
                  _utils_logger__WEBPACK_IMPORTED_MODULE_2__["logger"].debug("Key-session generation succeeded");
                }).catch(function(err) {
                  _utils_logger__WEBPACK_IMPORTED_MODULE_2__["logger"].error("Error generating key-session request:", err);
                  _this6.hls.trigger(_events__WEBPACK_IMPORTED_MODULE_0__["Events"].ERROR, {
                    type: _errors__WEBPACK_IMPORTED_MODULE_1__["ErrorTypes"].KEY_SYSTEM_ERROR,
                    details: _errors__WEBPACK_IMPORTED_MODULE_1__["ErrorDetails"].KEY_SYSTEM_NO_SESSION,
                    fatal: false
                  });
                });
              };
              _proto._createLicenseXhr = function _createLicenseXhr(url, keyMessage, callback) {
                var xhr = new XMLHttpRequest();
                xhr.responseType = "arraybuffer";
                xhr.onreadystatechange = this._onLicenseRequestReadyStageChange.bind(this, xhr, url, keyMessage, callback);
                var licenseXhrSetup = this._licenseXhrSetup;
                if (licenseXhrSetup) {
                  try {
                    licenseXhrSetup.call(this.hls, xhr, url);
                    licenseXhrSetup = void 0;
                  } catch (e4) {
                    _utils_logger__WEBPACK_IMPORTED_MODULE_2__["logger"].error(e4);
                  }
                }
                try {
                  if (!xhr.readyState) {
                    xhr.open("POST", url, true);
                  }
                  if (licenseXhrSetup) {
                    licenseXhrSetup.call(this.hls, xhr, url);
                  }
                } catch (e4) {
                  throw new Error("issue setting up KeySystem license XHR " + e4);
                }
                return xhr;
              };
              _proto._onLicenseRequestReadyStageChange = function _onLicenseRequestReadyStageChange(xhr, url, keyMessage, callback) {
                switch (xhr.readyState) {
                  case 4:
                    if (xhr.status === 200) {
                      this._requestLicenseFailureCount = 0;
                      _utils_logger__WEBPACK_IMPORTED_MODULE_2__["logger"].log("License request succeeded");
                      var _data = xhr.response;
                      var licenseResponseCallback = this._licenseResponseCallback;
                      if (licenseResponseCallback) {
                        try {
                          _data = licenseResponseCallback.call(this.hls, xhr, url);
                        } catch (e4) {
                          _utils_logger__WEBPACK_IMPORTED_MODULE_2__["logger"].error(e4);
                        }
                      }
                      callback(_data);
                    } else {
                      _utils_logger__WEBPACK_IMPORTED_MODULE_2__["logger"].error("License Request XHR failed (" + url + "). Status: " + xhr.status + " (" + xhr.statusText + ")");
                      this._requestLicenseFailureCount++;
                      if (this._requestLicenseFailureCount > MAX_LICENSE_REQUEST_FAILURES) {
                        this.hls.trigger(_events__WEBPACK_IMPORTED_MODULE_0__["Events"].ERROR, {
                          type: _errors__WEBPACK_IMPORTED_MODULE_1__["ErrorTypes"].KEY_SYSTEM_ERROR,
                          details: _errors__WEBPACK_IMPORTED_MODULE_1__["ErrorDetails"].KEY_SYSTEM_LICENSE_REQUEST_FAILED,
                          fatal: true
                        });
                        return;
                      }
                      var attemptsLeft = MAX_LICENSE_REQUEST_FAILURES - this._requestLicenseFailureCount + 1;
                      _utils_logger__WEBPACK_IMPORTED_MODULE_2__["logger"].warn("Retrying license request, " + attemptsLeft + " attempts left");
                      this._requestLicense(keyMessage, callback);
                    }
                    break;
                }
              };
              _proto._generateLicenseRequestChallenge = function _generateLicenseRequestChallenge(keysListItem, keyMessage) {
                switch (keysListItem.mediaKeySystemDomain) {
                  case _utils_mediakeys_helper__WEBPACK_IMPORTED_MODULE_3__["KeySystems"].WIDEVINE:
                    return keyMessage;
                }
                throw new Error("unsupported key-system: " + keysListItem.mediaKeySystemDomain);
              };
              _proto._requestLicense = function _requestLicense(keyMessage, callback) {
                _utils_logger__WEBPACK_IMPORTED_MODULE_2__["logger"].log("Requesting content license for key-system");
                var keysListItem = this._mediaKeysList[0];
                if (!keysListItem) {
                  _utils_logger__WEBPACK_IMPORTED_MODULE_2__["logger"].error("Fatal error: Media is encrypted but no key-system access has been obtained yet");
                  this.hls.trigger(_events__WEBPACK_IMPORTED_MODULE_0__["Events"].ERROR, {
                    type: _errors__WEBPACK_IMPORTED_MODULE_1__["ErrorTypes"].KEY_SYSTEM_ERROR,
                    details: _errors__WEBPACK_IMPORTED_MODULE_1__["ErrorDetails"].KEY_SYSTEM_NO_ACCESS,
                    fatal: true
                  });
                  return;
                }
                try {
                  var _url = this.getLicenseServerUrl(keysListItem.mediaKeySystemDomain);
                  var _xhr = this._createLicenseXhr(_url, keyMessage, callback);
                  _utils_logger__WEBPACK_IMPORTED_MODULE_2__["logger"].log("Sending license request to URL: " + _url);
                  var challenge = this._generateLicenseRequestChallenge(keysListItem, keyMessage);
                  _xhr.send(challenge);
                } catch (e4) {
                  _utils_logger__WEBPACK_IMPORTED_MODULE_2__["logger"].error("Failure requesting DRM license: " + e4);
                  this.hls.trigger(_events__WEBPACK_IMPORTED_MODULE_0__["Events"].ERROR, {
                    type: _errors__WEBPACK_IMPORTED_MODULE_1__["ErrorTypes"].KEY_SYSTEM_ERROR,
                    details: _errors__WEBPACK_IMPORTED_MODULE_1__["ErrorDetails"].KEY_SYSTEM_LICENSE_REQUEST_FAILED,
                    fatal: true
                  });
                }
              };
              _proto.onMediaAttached = function onMediaAttached(event, data) {
                if (!this._emeEnabled) {
                  return;
                }
                var media2 = data.media;
                this._media = media2;
                media2.addEventListener("encrypted", this._onMediaEncrypted);
              };
              _proto.onMediaDetached = function onMediaDetached() {
                var media2 = this._media;
                var mediaKeysList = this._mediaKeysList;
                if (!media2) {
                  return;
                }
                media2.removeEventListener("encrypted", this._onMediaEncrypted);
                this._media = null;
                this._mediaKeysList = [];
                Promise.all(mediaKeysList.map(function(mediaKeysListItem) {
                  if (mediaKeysListItem.mediaKeysSession) {
                    return mediaKeysListItem.mediaKeysSession.close().catch(function() {
                    });
                  }
                })).then(function() {
                  return media2.setMediaKeys(null);
                }).catch(function() {
                });
              };
              _proto.onManifestParsed = function onManifestParsed(event, data) {
                if (!this._emeEnabled) {
                  return;
                }
                var audioCodecs = data.levels.map(function(level) {
                  return level.audioCodec;
                }).filter(function(audioCodec) {
                  return !!audioCodec;
                });
                var videoCodecs = data.levels.map(function(level) {
                  return level.videoCodec;
                }).filter(function(videoCodec) {
                  return !!videoCodec;
                });
                this._attemptKeySystemAccess(_utils_mediakeys_helper__WEBPACK_IMPORTED_MODULE_3__["KeySystems"].WIDEVINE, audioCodecs, videoCodecs);
              };
              _createClass(EMEController2, [{
                key: "requestMediaKeySystemAccess",
                get: function get() {
                  if (!this._requestMediaKeySystemAccess) {
                    throw new Error("No requestMediaKeySystemAccess function configured");
                  }
                  return this._requestMediaKeySystemAccess;
                }
              }]);
              return EMEController2;
            }();
            __webpack_exports__["default"] = EMEController;
          },
          "./src/controller/fps-controller.ts": function(module2, __webpack_exports__, __webpack_require__) {
            "use strict";
            __webpack_require__.r(__webpack_exports__);
            var _events__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("./src/events.ts");
            var _utils_logger__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("./src/utils/logger.ts");
            var FPSController = /* @__PURE__ */ function() {
              function FPSController2(hls) {
                this.hls = void 0;
                this.isVideoPlaybackQualityAvailable = false;
                this.timer = void 0;
                this.media = null;
                this.lastTime = void 0;
                this.lastDroppedFrames = 0;
                this.lastDecodedFrames = 0;
                this.streamController = void 0;
                this.hls = hls;
                this.registerListeners();
              }
              var _proto = FPSController2.prototype;
              _proto.setStreamController = function setStreamController(streamController) {
                this.streamController = streamController;
              };
              _proto.registerListeners = function registerListeners() {
                this.hls.on(_events__WEBPACK_IMPORTED_MODULE_0__["Events"].MEDIA_ATTACHING, this.onMediaAttaching, this);
              };
              _proto.unregisterListeners = function unregisterListeners() {
                this.hls.off(_events__WEBPACK_IMPORTED_MODULE_0__["Events"].MEDIA_ATTACHING, this.onMediaAttaching);
              };
              _proto.destroy = function destroy() {
                if (this.timer) {
                  clearInterval(this.timer);
                }
                this.unregisterListeners();
                this.isVideoPlaybackQualityAvailable = false;
                this.media = null;
              };
              _proto.onMediaAttaching = function onMediaAttaching(event, data) {
                var config2 = this.hls.config;
                if (config2.capLevelOnFPSDrop) {
                  var media2 = data.media instanceof self.HTMLVideoElement ? data.media : null;
                  this.media = media2;
                  if (media2 && typeof media2.getVideoPlaybackQuality === "function") {
                    this.isVideoPlaybackQualityAvailable = true;
                  }
                  self.clearInterval(this.timer);
                  this.timer = self.setInterval(this.checkFPSInterval.bind(this), config2.fpsDroppedMonitoringPeriod);
                }
              };
              _proto.checkFPS = function checkFPS(video, decodedFrames, droppedFrames) {
                var currentTime = performance.now();
                if (decodedFrames) {
                  if (this.lastTime) {
                    var currentPeriod = currentTime - this.lastTime;
                    var currentDropped = droppedFrames - this.lastDroppedFrames;
                    var currentDecoded = decodedFrames - this.lastDecodedFrames;
                    var droppedFPS = 1e3 * currentDropped / currentPeriod;
                    var hls = this.hls;
                    hls.trigger(_events__WEBPACK_IMPORTED_MODULE_0__["Events"].FPS_DROP, {
                      currentDropped,
                      currentDecoded,
                      totalDroppedFrames: droppedFrames
                    });
                    if (droppedFPS > 0) {
                      if (currentDropped > hls.config.fpsDroppedMonitoringThreshold * currentDecoded) {
                        var currentLevel = hls.currentLevel;
                        _utils_logger__WEBPACK_IMPORTED_MODULE_1__["logger"].warn("drop FPS ratio greater than max allowed value for currentLevel: " + currentLevel);
                        if (currentLevel > 0 && (hls.autoLevelCapping === -1 || hls.autoLevelCapping >= currentLevel)) {
                          currentLevel = currentLevel - 1;
                          hls.trigger(_events__WEBPACK_IMPORTED_MODULE_0__["Events"].FPS_DROP_LEVEL_CAPPING, {
                            level: currentLevel,
                            droppedLevel: hls.currentLevel
                          });
                          hls.autoLevelCapping = currentLevel;
                          this.streamController.nextLevelSwitch();
                        }
                      }
                    }
                  }
                  this.lastTime = currentTime;
                  this.lastDroppedFrames = droppedFrames;
                  this.lastDecodedFrames = decodedFrames;
                }
              };
              _proto.checkFPSInterval = function checkFPSInterval() {
                var video = this.media;
                if (video) {
                  if (this.isVideoPlaybackQualityAvailable) {
                    var videoPlaybackQuality = video.getVideoPlaybackQuality();
                    this.checkFPS(video, videoPlaybackQuality.totalVideoFrames, videoPlaybackQuality.droppedVideoFrames);
                  } else {
                    this.checkFPS(video, video.webkitDecodedFrameCount, video.webkitDroppedFrameCount);
                  }
                }
              };
              return FPSController2;
            }();
            __webpack_exports__["default"] = FPSController;
          },
          "./src/controller/fragment-finders.ts": function(module2, __webpack_exports__, __webpack_require__) {
            "use strict";
            __webpack_require__.r(__webpack_exports__);
            __webpack_require__.d(__webpack_exports__, "findFragmentByPDT", function() {
              return findFragmentByPDT;
            });
            __webpack_require__.d(__webpack_exports__, "findFragmentByPTS", function() {
              return findFragmentByPTS;
            });
            __webpack_require__.d(__webpack_exports__, "fragmentWithinToleranceTest", function() {
              return fragmentWithinToleranceTest;
            });
            __webpack_require__.d(__webpack_exports__, "pdtWithinToleranceTest", function() {
              return pdtWithinToleranceTest;
            });
            __webpack_require__.d(__webpack_exports__, "findFragWithCC", function() {
              return findFragWithCC;
            });
            var _home_runner_work_hls_js_hls_js_src_polyfills_number__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("./src/polyfills/number.ts");
            var _utils_binary_search__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("./src/utils/binary-search.ts");
            function findFragmentByPDT(fragments, PDTValue, maxFragLookUpTolerance) {
              if (PDTValue === null || !Array.isArray(fragments) || !fragments.length || !Object(_home_runner_work_hls_js_hls_js_src_polyfills_number__WEBPACK_IMPORTED_MODULE_0__["isFiniteNumber"])(PDTValue)) {
                return null;
              }
              var startPDT = fragments[0].programDateTime;
              if (PDTValue < (startPDT || 0)) {
                return null;
              }
              var endPDT = fragments[fragments.length - 1].endProgramDateTime;
              if (PDTValue >= (endPDT || 0)) {
                return null;
              }
              maxFragLookUpTolerance = maxFragLookUpTolerance || 0;
              for (var seg = 0; seg < fragments.length; ++seg) {
                var frag = fragments[seg];
                if (pdtWithinToleranceTest(PDTValue, maxFragLookUpTolerance, frag)) {
                  return frag;
                }
              }
              return null;
            }
            function findFragmentByPTS(fragPrevious, fragments, bufferEnd, maxFragLookUpTolerance) {
              if (bufferEnd === void 0) {
                bufferEnd = 0;
              }
              if (maxFragLookUpTolerance === void 0) {
                maxFragLookUpTolerance = 0;
              }
              var fragNext = null;
              if (fragPrevious) {
                fragNext = fragments[fragPrevious.sn - fragments[0].sn + 1] || null;
              } else if (bufferEnd === 0 && fragments[0].start === 0) {
                fragNext = fragments[0];
              }
              if (fragNext && fragmentWithinToleranceTest(bufferEnd, maxFragLookUpTolerance, fragNext) === 0) {
                return fragNext;
              }
              var foundFragment = _utils_binary_search__WEBPACK_IMPORTED_MODULE_1__["default"].search(fragments, fragmentWithinToleranceTest.bind(null, bufferEnd, maxFragLookUpTolerance));
              if (foundFragment) {
                return foundFragment;
              }
              return fragNext;
            }
            function fragmentWithinToleranceTest(bufferEnd, maxFragLookUpTolerance, candidate) {
              if (bufferEnd === void 0) {
                bufferEnd = 0;
              }
              if (maxFragLookUpTolerance === void 0) {
                maxFragLookUpTolerance = 0;
              }
              var candidateLookupTolerance = Math.min(maxFragLookUpTolerance, candidate.duration + (candidate.deltaPTS ? candidate.deltaPTS : 0));
              if (candidate.start + candidate.duration - candidateLookupTolerance <= bufferEnd) {
                return 1;
              } else if (candidate.start - candidateLookupTolerance > bufferEnd && candidate.start) {
                return -1;
              }
              return 0;
            }
            function pdtWithinToleranceTest(pdtBufferEnd, maxFragLookUpTolerance, candidate) {
              var candidateLookupTolerance = Math.min(maxFragLookUpTolerance, candidate.duration + (candidate.deltaPTS ? candidate.deltaPTS : 0)) * 1e3;
              var endProgramDateTime = candidate.endProgramDateTime || 0;
              return endProgramDateTime - candidateLookupTolerance > pdtBufferEnd;
            }
            function findFragWithCC(fragments, cc) {
              return _utils_binary_search__WEBPACK_IMPORTED_MODULE_1__["default"].search(fragments, function(candidate) {
                if (candidate.cc < cc) {
                  return 1;
                } else if (candidate.cc > cc) {
                  return -1;
                } else {
                  return 0;
                }
              });
            }
          },
          "./src/controller/fragment-tracker.ts": function(module2, __webpack_exports__, __webpack_require__) {
            "use strict";
            __webpack_require__.r(__webpack_exports__);
            __webpack_require__.d(__webpack_exports__, "FragmentState", function() {
              return FragmentState;
            });
            __webpack_require__.d(__webpack_exports__, "FragmentTracker", function() {
              return FragmentTracker;
            });
            var _events__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("./src/events.ts");
            var _types_loader__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("./src/types/loader.ts");
            var FragmentState;
            (function(FragmentState2) {
              FragmentState2["NOT_LOADED"] = "NOT_LOADED";
              FragmentState2["BACKTRACKED"] = "BACKTRACKED";
              FragmentState2["APPENDING"] = "APPENDING";
              FragmentState2["PARTIAL"] = "PARTIAL";
              FragmentState2["OK"] = "OK";
            })(FragmentState || (FragmentState = {}));
            var FragmentTracker = /* @__PURE__ */ function() {
              function FragmentTracker2(hls) {
                this.activeFragment = null;
                this.activeParts = null;
                this.fragments = /* @__PURE__ */ Object.create(null);
                this.timeRanges = /* @__PURE__ */ Object.create(null);
                this.bufferPadding = 0.2;
                this.hls = void 0;
                this.hls = hls;
                this._registerListeners();
              }
              var _proto = FragmentTracker2.prototype;
              _proto._registerListeners = function _registerListeners() {
                var hls = this.hls;
                hls.on(_events__WEBPACK_IMPORTED_MODULE_0__["Events"].BUFFER_APPENDED, this.onBufferAppended, this);
                hls.on(_events__WEBPACK_IMPORTED_MODULE_0__["Events"].FRAG_BUFFERED, this.onFragBuffered, this);
                hls.on(_events__WEBPACK_IMPORTED_MODULE_0__["Events"].FRAG_LOADED, this.onFragLoaded, this);
              };
              _proto._unregisterListeners = function _unregisterListeners() {
                var hls = this.hls;
                hls.off(_events__WEBPACK_IMPORTED_MODULE_0__["Events"].BUFFER_APPENDED, this.onBufferAppended, this);
                hls.off(_events__WEBPACK_IMPORTED_MODULE_0__["Events"].FRAG_BUFFERED, this.onFragBuffered, this);
                hls.off(_events__WEBPACK_IMPORTED_MODULE_0__["Events"].FRAG_LOADED, this.onFragLoaded, this);
              };
              _proto.destroy = function destroy() {
                this._unregisterListeners();
                this.fragments = this.timeRanges = null;
              };
              _proto.getAppendedFrag = function getAppendedFrag(position, levelType) {
                if (levelType === _types_loader__WEBPACK_IMPORTED_MODULE_1__["PlaylistLevelType"].MAIN) {
                  var activeFragment = this.activeFragment, activeParts = this.activeParts;
                  if (!activeFragment) {
                    return null;
                  }
                  if (activeParts) {
                    for (var i3 = activeParts.length; i3--; ) {
                      var activePart = activeParts[i3];
                      var appendedPTS = activePart ? activePart.end : activeFragment.appendedPTS;
                      if (activePart.start <= position && appendedPTS !== void 0 && position <= appendedPTS) {
                        if (i3 > 9) {
                          this.activeParts = activeParts.slice(i3 - 9);
                        }
                        return activePart;
                      }
                    }
                  } else if (activeFragment.start <= position && activeFragment.appendedPTS !== void 0 && position <= activeFragment.appendedPTS) {
                    return activeFragment;
                  }
                }
                return this.getBufferedFrag(position, levelType);
              };
              _proto.getBufferedFrag = function getBufferedFrag(position, levelType) {
                var fragments = this.fragments;
                var keys = Object.keys(fragments);
                for (var i3 = keys.length; i3--; ) {
                  var fragmentEntity = fragments[keys[i3]];
                  if ((fragmentEntity === null || fragmentEntity === void 0 ? void 0 : fragmentEntity.body.type) === levelType && fragmentEntity.buffered) {
                    var frag = fragmentEntity.body;
                    if (frag.start <= position && position <= frag.end) {
                      return frag;
                    }
                  }
                }
                return null;
              };
              _proto.detectEvictedFragments = function detectEvictedFragments(elementaryStream, timeRange, playlistType) {
                var _this = this;
                Object.keys(this.fragments).forEach(function(key) {
                  var fragmentEntity = _this.fragments[key];
                  if (!fragmentEntity) {
                    return;
                  }
                  if (!fragmentEntity.buffered) {
                    if (fragmentEntity.body.type === playlistType) {
                      _this.removeFragment(fragmentEntity.body);
                    }
                    return;
                  }
                  var esData = fragmentEntity.range[elementaryStream];
                  if (!esData) {
                    return;
                  }
                  esData.time.some(function(time) {
                    var isNotBuffered = !_this.isTimeBuffered(time.startPTS, time.endPTS, timeRange);
                    if (isNotBuffered) {
                      _this.removeFragment(fragmentEntity.body);
                    }
                    return isNotBuffered;
                  });
                });
              };
              _proto.detectPartialFragments = function detectPartialFragments(data) {
                var _this2 = this;
                var timeRanges = this.timeRanges;
                var frag = data.frag, part = data.part;
                if (!timeRanges || frag.sn === "initSegment") {
                  return;
                }
                var fragKey = getFragmentKey(frag);
                var fragmentEntity = this.fragments[fragKey];
                if (!fragmentEntity) {
                  return;
                }
                Object.keys(timeRanges).forEach(function(elementaryStream) {
                  var streamInfo = frag.elementaryStreams[elementaryStream];
                  if (!streamInfo) {
                    return;
                  }
                  var timeRange = timeRanges[elementaryStream];
                  var partial = part !== null || streamInfo.partial === true;
                  fragmentEntity.range[elementaryStream] = _this2.getBufferedTimes(frag, part, partial, timeRange);
                });
                fragmentEntity.backtrack = fragmentEntity.loaded = null;
                if (Object.keys(fragmentEntity.range).length) {
                  fragmentEntity.buffered = true;
                } else {
                  this.removeFragment(fragmentEntity.body);
                }
              };
              _proto.fragBuffered = function fragBuffered(frag) {
                var fragKey = getFragmentKey(frag);
                var fragmentEntity = this.fragments[fragKey];
                if (fragmentEntity) {
                  fragmentEntity.backtrack = fragmentEntity.loaded = null;
                  fragmentEntity.buffered = true;
                }
              };
              _proto.getBufferedTimes = function getBufferedTimes(fragment, part, partial, timeRange) {
                var buffered = {
                  time: [],
                  partial
                };
                var startPTS = part ? part.start : fragment.start;
                var endPTS = part ? part.end : fragment.end;
                var minEndPTS = fragment.minEndPTS || endPTS;
                var maxStartPTS = fragment.maxStartPTS || startPTS;
                for (var i3 = 0; i3 < timeRange.length; i3++) {
                  var startTime = timeRange.start(i3) - this.bufferPadding;
                  var endTime = timeRange.end(i3) + this.bufferPadding;
                  if (maxStartPTS >= startTime && minEndPTS <= endTime) {
                    buffered.time.push({
                      startPTS: Math.max(startPTS, timeRange.start(i3)),
                      endPTS: Math.min(endPTS, timeRange.end(i3))
                    });
                    break;
                  } else if (startPTS < endTime && endPTS > startTime) {
                    buffered.partial = true;
                    buffered.time.push({
                      startPTS: Math.max(startPTS, timeRange.start(i3)),
                      endPTS: Math.min(endPTS, timeRange.end(i3))
                    });
                  } else if (endPTS <= startTime) {
                    break;
                  }
                }
                return buffered;
              };
              _proto.getPartialFragment = function getPartialFragment(time) {
                var bestFragment = null;
                var timePadding;
                var startTime;
                var endTime;
                var bestOverlap = 0;
                var bufferPadding = this.bufferPadding, fragments = this.fragments;
                Object.keys(fragments).forEach(function(key) {
                  var fragmentEntity = fragments[key];
                  if (!fragmentEntity) {
                    return;
                  }
                  if (isPartial(fragmentEntity)) {
                    startTime = fragmentEntity.body.start - bufferPadding;
                    endTime = fragmentEntity.body.end + bufferPadding;
                    if (time >= startTime && time <= endTime) {
                      timePadding = Math.min(time - startTime, endTime - time);
                      if (bestOverlap <= timePadding) {
                        bestFragment = fragmentEntity.body;
                        bestOverlap = timePadding;
                      }
                    }
                  }
                });
                return bestFragment;
              };
              _proto.getState = function getState(fragment) {
                var fragKey = getFragmentKey(fragment);
                var fragmentEntity = this.fragments[fragKey];
                if (fragmentEntity) {
                  if (!fragmentEntity.buffered) {
                    if (fragmentEntity.backtrack) {
                      return FragmentState.BACKTRACKED;
                    }
                    return FragmentState.APPENDING;
                  } else if (isPartial(fragmentEntity)) {
                    return FragmentState.PARTIAL;
                  } else {
                    return FragmentState.OK;
                  }
                }
                return FragmentState.NOT_LOADED;
              };
              _proto.backtrack = function backtrack(frag, data) {
                var fragKey = getFragmentKey(frag);
                var fragmentEntity = this.fragments[fragKey];
                if (!fragmentEntity || fragmentEntity.backtrack) {
                  return null;
                }
                var backtrack2 = fragmentEntity.backtrack = data ? data : fragmentEntity.loaded;
                fragmentEntity.loaded = null;
                return backtrack2;
              };
              _proto.getBacktrackData = function getBacktrackData(fragment) {
                var fragKey = getFragmentKey(fragment);
                var fragmentEntity = this.fragments[fragKey];
                if (fragmentEntity) {
                  var _backtrack$payload;
                  var backtrack = fragmentEntity.backtrack;
                  if (backtrack !== null && backtrack !== void 0 && (_backtrack$payload = backtrack.payload) !== null && _backtrack$payload !== void 0 && _backtrack$payload.byteLength) {
                    return backtrack;
                  } else {
                    this.removeFragment(fragment);
                  }
                }
                return null;
              };
              _proto.isTimeBuffered = function isTimeBuffered(startPTS, endPTS, timeRange) {
                var startTime;
                var endTime;
                for (var i3 = 0; i3 < timeRange.length; i3++) {
                  startTime = timeRange.start(i3) - this.bufferPadding;
                  endTime = timeRange.end(i3) + this.bufferPadding;
                  if (startPTS >= startTime && endPTS <= endTime) {
                    return true;
                  }
                  if (endPTS <= startTime) {
                    return false;
                  }
                }
                return false;
              };
              _proto.onFragLoaded = function onFragLoaded(event, data) {
                var frag = data.frag, part = data.part;
                if (frag.sn === "initSegment" || frag.bitrateTest || part) {
                  return;
                }
                var fragKey = getFragmentKey(frag);
                this.fragments[fragKey] = {
                  body: frag,
                  loaded: data,
                  backtrack: null,
                  buffered: false,
                  range: /* @__PURE__ */ Object.create(null)
                };
              };
              _proto.onBufferAppended = function onBufferAppended(event, data) {
                var _this3 = this;
                var frag = data.frag, part = data.part, timeRanges = data.timeRanges;
                if (frag.type === _types_loader__WEBPACK_IMPORTED_MODULE_1__["PlaylistLevelType"].MAIN) {
                  this.activeFragment = frag;
                  if (part) {
                    var activeParts = this.activeParts;
                    if (!activeParts) {
                      this.activeParts = activeParts = [];
                    }
                    activeParts.push(part);
                  } else {
                    this.activeParts = null;
                  }
                }
                this.timeRanges = timeRanges;
                Object.keys(timeRanges).forEach(function(elementaryStream) {
                  var timeRange = timeRanges[elementaryStream];
                  _this3.detectEvictedFragments(elementaryStream, timeRange);
                  if (!part) {
                    for (var i3 = 0; i3 < timeRange.length; i3++) {
                      frag.appendedPTS = Math.max(timeRange.end(i3), frag.appendedPTS || 0);
                    }
                  }
                });
              };
              _proto.onFragBuffered = function onFragBuffered(event, data) {
                this.detectPartialFragments(data);
              };
              _proto.hasFragment = function hasFragment(fragment) {
                var fragKey = getFragmentKey(fragment);
                return !!this.fragments[fragKey];
              };
              _proto.removeFragmentsInRange = function removeFragmentsInRange(start, end, playlistType) {
                var _this4 = this;
                Object.keys(this.fragments).forEach(function(key) {
                  var fragmentEntity = _this4.fragments[key];
                  if (!fragmentEntity) {
                    return;
                  }
                  if (fragmentEntity.buffered) {
                    var frag = fragmentEntity.body;
                    if (frag.type === playlistType && frag.start < end && frag.end > start) {
                      _this4.removeFragment(frag);
                    }
                  }
                });
              };
              _proto.removeFragment = function removeFragment(fragment) {
                var fragKey = getFragmentKey(fragment);
                fragment.stats.loaded = 0;
                fragment.clearElementaryStreamInfo();
                delete this.fragments[fragKey];
              };
              _proto.removeAllFragments = function removeAllFragments() {
                this.fragments = /* @__PURE__ */ Object.create(null);
                this.activeFragment = null;
                this.activeParts = null;
              };
              return FragmentTracker2;
            }();
            function isPartial(fragmentEntity) {
              var _fragmentEntity$range, _fragmentEntity$range2;
              return fragmentEntity.buffered && (((_fragmentEntity$range = fragmentEntity.range.video) === null || _fragmentEntity$range === void 0 ? void 0 : _fragmentEntity$range.partial) || ((_fragmentEntity$range2 = fragmentEntity.range.audio) === null || _fragmentEntity$range2 === void 0 ? void 0 : _fragmentEntity$range2.partial));
            }
            function getFragmentKey(fragment) {
              return fragment.type + "_" + fragment.level + "_" + fragment.urlId + "_" + fragment.sn;
            }
          },
          "./src/controller/gap-controller.ts": function(module2, __webpack_exports__, __webpack_require__) {
            "use strict";
            __webpack_require__.r(__webpack_exports__);
            __webpack_require__.d(__webpack_exports__, "STALL_MINIMUM_DURATION_MS", function() {
              return STALL_MINIMUM_DURATION_MS;
            });
            __webpack_require__.d(__webpack_exports__, "MAX_START_GAP_JUMP", function() {
              return MAX_START_GAP_JUMP;
            });
            __webpack_require__.d(__webpack_exports__, "SKIP_BUFFER_HOLE_STEP_SECONDS", function() {
              return SKIP_BUFFER_HOLE_STEP_SECONDS;
            });
            __webpack_require__.d(__webpack_exports__, "SKIP_BUFFER_RANGE_START", function() {
              return SKIP_BUFFER_RANGE_START;
            });
            __webpack_require__.d(__webpack_exports__, "default", function() {
              return GapController;
            });
            var _utils_buffer_helper__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("./src/utils/buffer-helper.ts");
            var _errors__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("./src/errors.ts");
            var _events__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__("./src/events.ts");
            var _utils_logger__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__("./src/utils/logger.ts");
            var STALL_MINIMUM_DURATION_MS = 250;
            var MAX_START_GAP_JUMP = 2;
            var SKIP_BUFFER_HOLE_STEP_SECONDS = 0.1;
            var SKIP_BUFFER_RANGE_START = 0.05;
            var GapController = /* @__PURE__ */ function() {
              function GapController2(config2, media2, fragmentTracker, hls) {
                this.config = void 0;
                this.media = void 0;
                this.fragmentTracker = void 0;
                this.hls = void 0;
                this.nudgeRetry = 0;
                this.stallReported = false;
                this.stalled = null;
                this.moved = false;
                this.seeking = false;
                this.config = config2;
                this.media = media2;
                this.fragmentTracker = fragmentTracker;
                this.hls = hls;
              }
              var _proto = GapController2.prototype;
              _proto.destroy = function destroy() {
                this.hls = this.fragmentTracker = this.media = null;
              };
              _proto.poll = function poll(lastCurrentTime) {
                var config2 = this.config, media2 = this.media, stalled = this.stalled;
                var currentTime = media2.currentTime, seeking = media2.seeking;
                var seeked = this.seeking && !seeking;
                var beginSeek = !this.seeking && seeking;
                this.seeking = seeking;
                if (currentTime !== lastCurrentTime) {
                  this.moved = true;
                  if (stalled !== null) {
                    if (this.stallReported) {
                      var _stalledDuration = self.performance.now() - stalled;
                      _utils_logger__WEBPACK_IMPORTED_MODULE_3__["logger"].warn("playback not stuck anymore @" + currentTime + ", after " + Math.round(_stalledDuration) + "ms");
                      this.stallReported = false;
                    }
                    this.stalled = null;
                    this.nudgeRetry = 0;
                  }
                  return;
                }
                if (beginSeek || seeked) {
                  this.stalled = null;
                }
                if (media2.paused || media2.ended || media2.playbackRate === 0 || !_utils_buffer_helper__WEBPACK_IMPORTED_MODULE_0__["BufferHelper"].getBuffered(media2).length) {
                  return;
                }
                var bufferInfo = _utils_buffer_helper__WEBPACK_IMPORTED_MODULE_0__["BufferHelper"].bufferInfo(media2, currentTime, 0);
                var isBuffered = bufferInfo.len > 0;
                var nextStart = bufferInfo.nextStart || 0;
                if (!isBuffered && !nextStart) {
                  return;
                }
                if (seeking) {
                  var hasEnoughBuffer = bufferInfo.len > MAX_START_GAP_JUMP;
                  var noBufferGap = !nextStart || nextStart - currentTime > MAX_START_GAP_JUMP && !this.fragmentTracker.getPartialFragment(currentTime);
                  if (hasEnoughBuffer || noBufferGap) {
                    return;
                  }
                  this.moved = false;
                }
                if (!this.moved && this.stalled !== null) {
                  var _level$details;
                  var startJump = Math.max(nextStart, bufferInfo.start || 0) - currentTime;
                  var level = this.hls.levels ? this.hls.levels[this.hls.currentLevel] : null;
                  var isLive = level === null || level === void 0 ? void 0 : (_level$details = level.details) === null || _level$details === void 0 ? void 0 : _level$details.live;
                  var maxStartGapJump = isLive ? level.details.targetduration * 2 : MAX_START_GAP_JUMP;
                  if (startJump > 0 && startJump <= maxStartGapJump) {
                    this._trySkipBufferHole(null);
                    return;
                  }
                }
                var tnow = self.performance.now();
                if (stalled === null) {
                  this.stalled = tnow;
                  return;
                }
                var stalledDuration = tnow - stalled;
                if (!seeking && stalledDuration >= STALL_MINIMUM_DURATION_MS) {
                  this._reportStall(bufferInfo.len);
                }
                var bufferedWithHoles = _utils_buffer_helper__WEBPACK_IMPORTED_MODULE_0__["BufferHelper"].bufferInfo(media2, currentTime, config2.maxBufferHole);
                this._tryFixBufferStall(bufferedWithHoles, stalledDuration);
              };
              _proto._tryFixBufferStall = function _tryFixBufferStall(bufferInfo, stalledDurationMs) {
                var config2 = this.config, fragmentTracker = this.fragmentTracker, media2 = this.media;
                var currentTime = media2.currentTime;
                var partial = fragmentTracker.getPartialFragment(currentTime);
                if (partial) {
                  var targetTime = this._trySkipBufferHole(partial);
                  if (targetTime) {
                    return;
                  }
                }
                if (bufferInfo.len > config2.maxBufferHole && stalledDurationMs > config2.highBufferWatchdogPeriod * 1e3) {
                  _utils_logger__WEBPACK_IMPORTED_MODULE_3__["logger"].warn("Trying to nudge playhead over buffer-hole");
                  this.stalled = null;
                  this._tryNudgeBuffer();
                }
              };
              _proto._reportStall = function _reportStall(bufferLen) {
                var hls = this.hls, media2 = this.media, stallReported = this.stallReported;
                if (!stallReported) {
                  this.stallReported = true;
                  _utils_logger__WEBPACK_IMPORTED_MODULE_3__["logger"].warn("Playback stalling at @" + media2.currentTime + " due to low buffer (buffer=" + bufferLen + ")");
                  hls.trigger(_events__WEBPACK_IMPORTED_MODULE_2__["Events"].ERROR, {
                    type: _errors__WEBPACK_IMPORTED_MODULE_1__["ErrorTypes"].MEDIA_ERROR,
                    details: _errors__WEBPACK_IMPORTED_MODULE_1__["ErrorDetails"].BUFFER_STALLED_ERROR,
                    fatal: false,
                    buffer: bufferLen
                  });
                }
              };
              _proto._trySkipBufferHole = function _trySkipBufferHole(partial) {
                var config2 = this.config, hls = this.hls, media2 = this.media;
                var currentTime = media2.currentTime;
                var lastEndTime = 0;
                var buffered = _utils_buffer_helper__WEBPACK_IMPORTED_MODULE_0__["BufferHelper"].getBuffered(media2);
                for (var i3 = 0; i3 < buffered.length; i3++) {
                  var startTime = buffered.start(i3);
                  if (currentTime + config2.maxBufferHole >= lastEndTime && currentTime < startTime) {
                    var targetTime = Math.max(startTime + SKIP_BUFFER_RANGE_START, media2.currentTime + SKIP_BUFFER_HOLE_STEP_SECONDS);
                    _utils_logger__WEBPACK_IMPORTED_MODULE_3__["logger"].warn("skipping hole, adjusting currentTime from " + currentTime + " to " + targetTime);
                    this.moved = true;
                    this.stalled = null;
                    media2.currentTime = targetTime;
                    if (partial) {
                      hls.trigger(_events__WEBPACK_IMPORTED_MODULE_2__["Events"].ERROR, {
                        type: _errors__WEBPACK_IMPORTED_MODULE_1__["ErrorTypes"].MEDIA_ERROR,
                        details: _errors__WEBPACK_IMPORTED_MODULE_1__["ErrorDetails"].BUFFER_SEEK_OVER_HOLE,
                        fatal: false,
                        reason: "fragment loaded with buffer holes, seeking from " + currentTime + " to " + targetTime,
                        frag: partial
                      });
                    }
                    return targetTime;
                  }
                  lastEndTime = buffered.end(i3);
                }
                return 0;
              };
              _proto._tryNudgeBuffer = function _tryNudgeBuffer() {
                var config2 = this.config, hls = this.hls, media2 = this.media;
                var currentTime = media2.currentTime;
                var nudgeRetry = (this.nudgeRetry || 0) + 1;
                this.nudgeRetry = nudgeRetry;
                if (nudgeRetry < config2.nudgeMaxRetry) {
                  var targetTime = currentTime + nudgeRetry * config2.nudgeOffset;
                  _utils_logger__WEBPACK_IMPORTED_MODULE_3__["logger"].warn("Nudging 'currentTime' from " + currentTime + " to " + targetTime);
                  media2.currentTime = targetTime;
                  hls.trigger(_events__WEBPACK_IMPORTED_MODULE_2__["Events"].ERROR, {
                    type: _errors__WEBPACK_IMPORTED_MODULE_1__["ErrorTypes"].MEDIA_ERROR,
                    details: _errors__WEBPACK_IMPORTED_MODULE_1__["ErrorDetails"].BUFFER_NUDGE_ON_STALL,
                    fatal: false
                  });
                } else {
                  _utils_logger__WEBPACK_IMPORTED_MODULE_3__["logger"].error("Playhead still not moving while enough data buffered @" + currentTime + " after " + config2.nudgeMaxRetry + " nudges");
                  hls.trigger(_events__WEBPACK_IMPORTED_MODULE_2__["Events"].ERROR, {
                    type: _errors__WEBPACK_IMPORTED_MODULE_1__["ErrorTypes"].MEDIA_ERROR,
                    details: _errors__WEBPACK_IMPORTED_MODULE_1__["ErrorDetails"].BUFFER_STALLED_ERROR,
                    fatal: true
                  });
                }
              };
              return GapController2;
            }();
          },
          "./src/controller/id3-track-controller.ts": function(module2, __webpack_exports__, __webpack_require__) {
            "use strict";
            __webpack_require__.r(__webpack_exports__);
            var _events__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("./src/events.ts");
            var _utils_texttrack_utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("./src/utils/texttrack-utils.ts");
            var _demux_id3__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__("./src/demux/id3.ts");
            var MIN_CUE_DURATION = 0.25;
            var ID3TrackController = /* @__PURE__ */ function() {
              function ID3TrackController2(hls) {
                this.hls = void 0;
                this.id3Track = null;
                this.media = null;
                this.hls = hls;
                this._registerListeners();
              }
              var _proto = ID3TrackController2.prototype;
              _proto.destroy = function destroy() {
                this._unregisterListeners();
              };
              _proto._registerListeners = function _registerListeners() {
                var hls = this.hls;
                hls.on(_events__WEBPACK_IMPORTED_MODULE_0__["Events"].MEDIA_ATTACHED, this.onMediaAttached, this);
                hls.on(_events__WEBPACK_IMPORTED_MODULE_0__["Events"].MEDIA_DETACHING, this.onMediaDetaching, this);
                hls.on(_events__WEBPACK_IMPORTED_MODULE_0__["Events"].FRAG_PARSING_METADATA, this.onFragParsingMetadata, this);
                hls.on(_events__WEBPACK_IMPORTED_MODULE_0__["Events"].BUFFER_FLUSHING, this.onBufferFlushing, this);
              };
              _proto._unregisterListeners = function _unregisterListeners() {
                var hls = this.hls;
                hls.off(_events__WEBPACK_IMPORTED_MODULE_0__["Events"].MEDIA_ATTACHED, this.onMediaAttached, this);
                hls.off(_events__WEBPACK_IMPORTED_MODULE_0__["Events"].MEDIA_DETACHING, this.onMediaDetaching, this);
                hls.off(_events__WEBPACK_IMPORTED_MODULE_0__["Events"].FRAG_PARSING_METADATA, this.onFragParsingMetadata, this);
                hls.off(_events__WEBPACK_IMPORTED_MODULE_0__["Events"].BUFFER_FLUSHING, this.onBufferFlushing, this);
              };
              _proto.onMediaAttached = function onMediaAttached(event, data) {
                this.media = data.media;
              };
              _proto.onMediaDetaching = function onMediaDetaching() {
                if (!this.id3Track) {
                  return;
                }
                Object(_utils_texttrack_utils__WEBPACK_IMPORTED_MODULE_1__["clearCurrentCues"])(this.id3Track);
                this.id3Track = null;
                this.media = null;
              };
              _proto.getID3Track = function getID3Track(textTracks) {
                if (!this.media) {
                  return;
                }
                for (var i3 = 0; i3 < textTracks.length; i3++) {
                  var textTrack = textTracks[i3];
                  if (textTrack.kind === "metadata" && textTrack.label === "id3") {
                    Object(_utils_texttrack_utils__WEBPACK_IMPORTED_MODULE_1__["sendAddTrackEvent"])(textTrack, this.media);
                    return textTrack;
                  }
                }
                return this.media.addTextTrack("metadata", "id3");
              };
              _proto.onFragParsingMetadata = function onFragParsingMetadata(event, data) {
                if (!this.media) {
                  return;
                }
                var fragment = data.frag;
                var samples = data.samples;
                if (!this.id3Track) {
                  this.id3Track = this.getID3Track(this.media.textTracks);
                  this.id3Track.mode = "hidden";
                }
                var Cue2 = self.WebKitDataCue || self.VTTCue || self.TextTrackCue;
                for (var i3 = 0; i3 < samples.length; i3++) {
                  var frames = _demux_id3__WEBPACK_IMPORTED_MODULE_2__["getID3Frames"](samples[i3].data);
                  if (frames) {
                    var startTime = samples[i3].pts;
                    var endTime = i3 < samples.length - 1 ? samples[i3 + 1].pts : fragment.end;
                    var timeDiff = endTime - startTime;
                    if (timeDiff <= 0) {
                      endTime = startTime + MIN_CUE_DURATION;
                    }
                    for (var j3 = 0; j3 < frames.length; j3++) {
                      var frame = frames[j3];
                      if (!_demux_id3__WEBPACK_IMPORTED_MODULE_2__["isTimeStampFrame"](frame)) {
                        var cue = new Cue2(startTime, endTime, "");
                        cue.value = frame;
                        this.id3Track.addCue(cue);
                      }
                    }
                  }
                }
              };
              _proto.onBufferFlushing = function onBufferFlushing(event, _ref) {
                var startOffset = _ref.startOffset, endOffset = _ref.endOffset, type = _ref.type;
                if (!type || type === "audio") {
                  var id3Track = this.id3Track;
                  if (id3Track) {
                    Object(_utils_texttrack_utils__WEBPACK_IMPORTED_MODULE_1__["removeCuesInRange"])(id3Track, startOffset, endOffset);
                  }
                }
              };
              return ID3TrackController2;
            }();
            __webpack_exports__["default"] = ID3TrackController;
          },
          "./src/controller/latency-controller.ts": function(module2, __webpack_exports__, __webpack_require__) {
            "use strict";
            __webpack_require__.r(__webpack_exports__);
            __webpack_require__.d(__webpack_exports__, "default", function() {
              return LatencyController;
            });
            var _errors__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("./src/errors.ts");
            var _events__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("./src/events.ts");
            var _utils_logger__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__("./src/utils/logger.ts");
            function _defineProperties(target, props) {
              for (var i3 = 0; i3 < props.length; i3++) {
                var descriptor = props[i3];
                descriptor.enumerable = descriptor.enumerable || false;
                descriptor.configurable = true;
                if ("value" in descriptor)
                  descriptor.writable = true;
                Object.defineProperty(target, descriptor.key, descriptor);
              }
            }
            function _createClass(Constructor, protoProps, staticProps) {
              if (protoProps)
                _defineProperties(Constructor.prototype, protoProps);
              if (staticProps)
                _defineProperties(Constructor, staticProps);
              return Constructor;
            }
            var LatencyController = /* @__PURE__ */ function() {
              function LatencyController2(hls) {
                var _this = this;
                this.hls = void 0;
                this.config = void 0;
                this.media = null;
                this.levelDetails = null;
                this.currentTime = 0;
                this.stallCount = 0;
                this._latency = null;
                this.timeupdateHandler = function() {
                  return _this.timeupdate();
                };
                this.hls = hls;
                this.config = hls.config;
                this.registerListeners();
              }
              var _proto = LatencyController2.prototype;
              _proto.destroy = function destroy() {
                this.unregisterListeners();
                this.onMediaDetaching();
                this.levelDetails = null;
                this.hls = this.timeupdateHandler = null;
              };
              _proto.registerListeners = function registerListeners() {
                this.hls.on(_events__WEBPACK_IMPORTED_MODULE_1__["Events"].MEDIA_ATTACHED, this.onMediaAttached, this);
                this.hls.on(_events__WEBPACK_IMPORTED_MODULE_1__["Events"].MEDIA_DETACHING, this.onMediaDetaching, this);
                this.hls.on(_events__WEBPACK_IMPORTED_MODULE_1__["Events"].MANIFEST_LOADING, this.onManifestLoading, this);
                this.hls.on(_events__WEBPACK_IMPORTED_MODULE_1__["Events"].LEVEL_UPDATED, this.onLevelUpdated, this);
                this.hls.on(_events__WEBPACK_IMPORTED_MODULE_1__["Events"].ERROR, this.onError, this);
              };
              _proto.unregisterListeners = function unregisterListeners() {
                this.hls.off(_events__WEBPACK_IMPORTED_MODULE_1__["Events"].MEDIA_ATTACHED, this.onMediaAttached);
                this.hls.off(_events__WEBPACK_IMPORTED_MODULE_1__["Events"].MEDIA_DETACHING, this.onMediaDetaching);
                this.hls.off(_events__WEBPACK_IMPORTED_MODULE_1__["Events"].MANIFEST_LOADING, this.onManifestLoading);
                this.hls.off(_events__WEBPACK_IMPORTED_MODULE_1__["Events"].LEVEL_UPDATED, this.onLevelUpdated);
                this.hls.off(_events__WEBPACK_IMPORTED_MODULE_1__["Events"].ERROR, this.onError);
              };
              _proto.onMediaAttached = function onMediaAttached(event, data) {
                this.media = data.media;
                this.media.addEventListener("timeupdate", this.timeupdateHandler);
              };
              _proto.onMediaDetaching = function onMediaDetaching() {
                if (this.media) {
                  this.media.removeEventListener("timeupdate", this.timeupdateHandler);
                  this.media = null;
                }
              };
              _proto.onManifestLoading = function onManifestLoading() {
                this.levelDetails = null;
                this._latency = null;
                this.stallCount = 0;
              };
              _proto.onLevelUpdated = function onLevelUpdated(event, _ref) {
                var details = _ref.details;
                this.levelDetails = details;
                if (details.advanced) {
                  this.timeupdate();
                }
                if (!details.live && this.media) {
                  this.media.removeEventListener("timeupdate", this.timeupdateHandler);
                }
              };
              _proto.onError = function onError(event, data) {
                if (data.details !== _errors__WEBPACK_IMPORTED_MODULE_0__["ErrorDetails"].BUFFER_STALLED_ERROR) {
                  return;
                }
                this.stallCount++;
                _utils_logger__WEBPACK_IMPORTED_MODULE_2__["logger"].warn("[playback-rate-controller]: Stall detected, adjusting target latency");
              };
              _proto.timeupdate = function timeupdate() {
                var media2 = this.media, levelDetails = this.levelDetails;
                if (!media2 || !levelDetails) {
                  return;
                }
                this.currentTime = media2.currentTime;
                var latency = this.computeLatency();
                if (latency === null) {
                  return;
                }
                this._latency = latency;
                var _this$config = this.config, lowLatencyMode = _this$config.lowLatencyMode, maxLiveSyncPlaybackRate = _this$config.maxLiveSyncPlaybackRate;
                if (!lowLatencyMode || maxLiveSyncPlaybackRate === 1) {
                  return;
                }
                var targetLatency = this.targetLatency;
                if (targetLatency === null) {
                  return;
                }
                var distanceFromTarget = latency - targetLatency;
                var liveMinLatencyDuration = Math.min(this.maxLatency, targetLatency + levelDetails.targetduration);
                var inLiveRange = distanceFromTarget < liveMinLatencyDuration;
                if (levelDetails.live && inLiveRange && distanceFromTarget > 0.05 && this.forwardBufferLength > 1) {
                  var max = Math.min(2, Math.max(1, maxLiveSyncPlaybackRate));
                  var rate = Math.round(2 / (1 + Math.exp(-0.75 * distanceFromTarget - this.edgeStalled)) * 20) / 20;
                  media2.playbackRate = Math.min(max, Math.max(1, rate));
                } else if (media2.playbackRate !== 1 && media2.playbackRate !== 0) {
                  media2.playbackRate = 1;
                }
              };
              _proto.estimateLiveEdge = function estimateLiveEdge() {
                var levelDetails = this.levelDetails;
                if (levelDetails === null) {
                  return null;
                }
                return levelDetails.edge + levelDetails.age;
              };
              _proto.computeLatency = function computeLatency() {
                var liveEdge = this.estimateLiveEdge();
                if (liveEdge === null) {
                  return null;
                }
                return liveEdge - this.currentTime;
              };
              _createClass(LatencyController2, [{
                key: "latency",
                get: function get() {
                  return this._latency || 0;
                }
              }, {
                key: "maxLatency",
                get: function get() {
                  var config2 = this.config, levelDetails = this.levelDetails;
                  if (config2.liveMaxLatencyDuration !== void 0) {
                    return config2.liveMaxLatencyDuration;
                  }
                  return levelDetails ? config2.liveMaxLatencyDurationCount * levelDetails.targetduration : 0;
                }
              }, {
                key: "targetLatency",
                get: function get() {
                  var levelDetails = this.levelDetails;
                  if (levelDetails === null) {
                    return null;
                  }
                  var holdBack = levelDetails.holdBack, partHoldBack = levelDetails.partHoldBack, targetduration = levelDetails.targetduration;
                  var _this$config2 = this.config, liveSyncDuration = _this$config2.liveSyncDuration, liveSyncDurationCount = _this$config2.liveSyncDurationCount, lowLatencyMode = _this$config2.lowLatencyMode;
                  var userConfig = this.hls.userConfig;
                  var targetLatency = lowLatencyMode ? partHoldBack || holdBack : holdBack;
                  if (userConfig.liveSyncDuration || userConfig.liveSyncDurationCount || targetLatency === 0) {
                    targetLatency = liveSyncDuration !== void 0 ? liveSyncDuration : liveSyncDurationCount * targetduration;
                  }
                  var maxLiveSyncOnStallIncrease = targetduration;
                  var liveSyncOnStallIncrease = 1;
                  return targetLatency + Math.min(this.stallCount * liveSyncOnStallIncrease, maxLiveSyncOnStallIncrease);
                }
              }, {
                key: "liveSyncPosition",
                get: function get() {
                  var liveEdge = this.estimateLiveEdge();
                  var targetLatency = this.targetLatency;
                  var levelDetails = this.levelDetails;
                  if (liveEdge === null || targetLatency === null || levelDetails === null) {
                    return null;
                  }
                  var edge = levelDetails.edge;
                  var syncPosition = liveEdge - targetLatency - this.edgeStalled;
                  var min = edge - levelDetails.totalduration;
                  var max = edge - (this.config.lowLatencyMode && levelDetails.partTarget || levelDetails.targetduration);
                  return Math.min(Math.max(min, syncPosition), max);
                }
              }, {
                key: "drift",
                get: function get() {
                  var levelDetails = this.levelDetails;
                  if (levelDetails === null) {
                    return 1;
                  }
                  return levelDetails.drift;
                }
              }, {
                key: "edgeStalled",
                get: function get() {
                  var levelDetails = this.levelDetails;
                  if (levelDetails === null) {
                    return 0;
                  }
                  var maxLevelUpdateAge = (this.config.lowLatencyMode && levelDetails.partTarget || levelDetails.targetduration) * 3;
                  return Math.max(levelDetails.age - maxLevelUpdateAge, 0);
                }
              }, {
                key: "forwardBufferLength",
                get: function get() {
                  var media2 = this.media, levelDetails = this.levelDetails;
                  if (!media2 || !levelDetails) {
                    return 0;
                  }
                  var bufferedRanges = media2.buffered.length;
                  return bufferedRanges ? media2.buffered.end(bufferedRanges - 1) : levelDetails.edge - this.currentTime;
                }
              }]);
              return LatencyController2;
            }();
          },
          "./src/controller/level-controller.ts": function(module2, __webpack_exports__, __webpack_require__) {
            "use strict";
            __webpack_require__.r(__webpack_exports__);
            __webpack_require__.d(__webpack_exports__, "default", function() {
              return LevelController;
            });
            var _types_level__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("./src/types/level.ts");
            var _events__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("./src/events.ts");
            var _errors__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__("./src/errors.ts");
            var _utils_codecs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__("./src/utils/codecs.ts");
            var _level_helper__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__("./src/controller/level-helper.ts");
            var _base_playlist_controller__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__("./src/controller/base-playlist-controller.ts");
            var _types_loader__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__("./src/types/loader.ts");
            function _extends2() {
              _extends2 = Object.assign || function(target) {
                for (var i3 = 1; i3 < arguments.length; i3++) {
                  var source = arguments[i3];
                  for (var key in source) {
                    if (Object.prototype.hasOwnProperty.call(source, key)) {
                      target[key] = source[key];
                    }
                  }
                }
                return target;
              };
              return _extends2.apply(this, arguments);
            }
            function _defineProperties(target, props) {
              for (var i3 = 0; i3 < props.length; i3++) {
                var descriptor = props[i3];
                descriptor.enumerable = descriptor.enumerable || false;
                descriptor.configurable = true;
                if ("value" in descriptor)
                  descriptor.writable = true;
                Object.defineProperty(target, descriptor.key, descriptor);
              }
            }
            function _createClass(Constructor, protoProps, staticProps) {
              if (protoProps)
                _defineProperties(Constructor.prototype, protoProps);
              if (staticProps)
                _defineProperties(Constructor, staticProps);
              return Constructor;
            }
            function _inheritsLoose(subClass, superClass) {
              subClass.prototype = Object.create(superClass.prototype);
              subClass.prototype.constructor = subClass;
              _setPrototypeOf(subClass, superClass);
            }
            function _setPrototypeOf(o3, p5) {
              _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf2(o4, p6) {
                o4.__proto__ = p6;
                return o4;
              };
              return _setPrototypeOf(o3, p5);
            }
            var chromeOrFirefox = /chrome|firefox/.test(navigator.userAgent.toLowerCase());
            var LevelController = /* @__PURE__ */ function(_BasePlaylistControll) {
              _inheritsLoose(LevelController2, _BasePlaylistControll);
              function LevelController2(hls) {
                var _this;
                _this = _BasePlaylistControll.call(this, hls, "[level-controller]") || this;
                _this._levels = [];
                _this._firstLevel = -1;
                _this._startLevel = void 0;
                _this.currentLevelIndex = -1;
                _this.manualLevelIndex = -1;
                _this.onParsedComplete = void 0;
                _this._registerListeners();
                return _this;
              }
              var _proto = LevelController2.prototype;
              _proto._registerListeners = function _registerListeners() {
                var hls = this.hls;
                hls.on(_events__WEBPACK_IMPORTED_MODULE_1__["Events"].MANIFEST_LOADED, this.onManifestLoaded, this);
                hls.on(_events__WEBPACK_IMPORTED_MODULE_1__["Events"].LEVEL_LOADED, this.onLevelLoaded, this);
                hls.on(_events__WEBPACK_IMPORTED_MODULE_1__["Events"].AUDIO_TRACK_SWITCHED, this.onAudioTrackSwitched, this);
                hls.on(_events__WEBPACK_IMPORTED_MODULE_1__["Events"].FRAG_LOADED, this.onFragLoaded, this);
                hls.on(_events__WEBPACK_IMPORTED_MODULE_1__["Events"].ERROR, this.onError, this);
              };
              _proto._unregisterListeners = function _unregisterListeners() {
                var hls = this.hls;
                hls.off(_events__WEBPACK_IMPORTED_MODULE_1__["Events"].MANIFEST_LOADED, this.onManifestLoaded, this);
                hls.off(_events__WEBPACK_IMPORTED_MODULE_1__["Events"].LEVEL_LOADED, this.onLevelLoaded, this);
                hls.off(_events__WEBPACK_IMPORTED_MODULE_1__["Events"].AUDIO_TRACK_SWITCHED, this.onAudioTrackSwitched, this);
                hls.off(_events__WEBPACK_IMPORTED_MODULE_1__["Events"].FRAG_LOADED, this.onFragLoaded, this);
                hls.off(_events__WEBPACK_IMPORTED_MODULE_1__["Events"].ERROR, this.onError, this);
              };
              _proto.destroy = function destroy() {
                this._unregisterListeners();
                this.manualLevelIndex = -1;
                this._levels.length = 0;
                _BasePlaylistControll.prototype.destroy.call(this);
              };
              _proto.startLoad = function startLoad() {
                var levels = this._levels;
                levels.forEach(function(level) {
                  level.loadError = 0;
                });
                _BasePlaylistControll.prototype.startLoad.call(this);
              };
              _proto.onManifestLoaded = function onManifestLoaded(event, data) {
                var levels = [];
                var audioTracks = [];
                var subtitleTracks = [];
                var bitrateStart;
                var levelSet = {};
                var levelFromSet;
                var resolutionFound = false;
                var videoCodecFound = false;
                var audioCodecFound = false;
                data.levels.forEach(function(levelParsed) {
                  var attributes = levelParsed.attrs;
                  resolutionFound = resolutionFound || !!(levelParsed.width && levelParsed.height);
                  videoCodecFound = videoCodecFound || !!levelParsed.videoCodec;
                  audioCodecFound = audioCodecFound || !!levelParsed.audioCodec;
                  if (chromeOrFirefox && levelParsed.audioCodec && levelParsed.audioCodec.indexOf("mp4a.40.34") !== -1) {
                    levelParsed.audioCodec = void 0;
                  }
                  var levelKey = levelParsed.bitrate + "-" + levelParsed.attrs.RESOLUTION + "-" + levelParsed.attrs.CODECS;
                  levelFromSet = levelSet[levelKey];
                  if (!levelFromSet) {
                    levelFromSet = new _types_level__WEBPACK_IMPORTED_MODULE_0__["Level"](levelParsed);
                    levelSet[levelKey] = levelFromSet;
                    levels.push(levelFromSet);
                  } else {
                    levelFromSet.url.push(levelParsed.url);
                  }
                  if (attributes) {
                    if (attributes.AUDIO) {
                      Object(_level_helper__WEBPACK_IMPORTED_MODULE_4__["addGroupId"])(levelFromSet, "audio", attributes.AUDIO);
                    }
                    if (attributes.SUBTITLES) {
                      Object(_level_helper__WEBPACK_IMPORTED_MODULE_4__["addGroupId"])(levelFromSet, "text", attributes.SUBTITLES);
                    }
                  }
                });
                if ((resolutionFound || videoCodecFound) && audioCodecFound) {
                  levels = levels.filter(function(_ref) {
                    var videoCodec = _ref.videoCodec, width = _ref.width, height = _ref.height;
                    return !!videoCodec || !!(width && height);
                  });
                }
                levels = levels.filter(function(_ref2) {
                  var audioCodec = _ref2.audioCodec, videoCodec = _ref2.videoCodec;
                  return (!audioCodec || Object(_utils_codecs__WEBPACK_IMPORTED_MODULE_3__["isCodecSupportedInMp4"])(audioCodec, "audio")) && (!videoCodec || Object(_utils_codecs__WEBPACK_IMPORTED_MODULE_3__["isCodecSupportedInMp4"])(videoCodec, "video"));
                });
                if (data.audioTracks) {
                  audioTracks = data.audioTracks.filter(function(track) {
                    return !track.audioCodec || Object(_utils_codecs__WEBPACK_IMPORTED_MODULE_3__["isCodecSupportedInMp4"])(track.audioCodec, "audio");
                  });
                  Object(_level_helper__WEBPACK_IMPORTED_MODULE_4__["assignTrackIdsByGroup"])(audioTracks);
                }
                if (data.subtitles) {
                  subtitleTracks = data.subtitles;
                  Object(_level_helper__WEBPACK_IMPORTED_MODULE_4__["assignTrackIdsByGroup"])(subtitleTracks);
                }
                if (levels.length > 0) {
                  bitrateStart = levels[0].bitrate;
                  levels.sort(function(a3, b3) {
                    return a3.bitrate - b3.bitrate;
                  });
                  this._levels = levels;
                  for (var i3 = 0; i3 < levels.length; i3++) {
                    if (levels[i3].bitrate === bitrateStart) {
                      this._firstLevel = i3;
                      this.log("manifest loaded, " + levels.length + " level(s) found, first bitrate: " + bitrateStart);
                      break;
                    }
                  }
                  var audioOnly = audioCodecFound && !videoCodecFound;
                  var edata = {
                    levels,
                    audioTracks,
                    subtitleTracks,
                    firstLevel: this._firstLevel,
                    stats: data.stats,
                    audio: audioCodecFound,
                    video: videoCodecFound,
                    altAudio: !audioOnly && audioTracks.some(function(t4) {
                      return !!t4.url;
                    })
                  };
                  this.hls.trigger(_events__WEBPACK_IMPORTED_MODULE_1__["Events"].MANIFEST_PARSED, edata);
                  if (this.hls.config.autoStartLoad || this.hls.forceStartLoad) {
                    this.hls.startLoad(this.hls.config.startPosition);
                  }
                } else {
                  this.hls.trigger(_events__WEBPACK_IMPORTED_MODULE_1__["Events"].ERROR, {
                    type: _errors__WEBPACK_IMPORTED_MODULE_2__["ErrorTypes"].MEDIA_ERROR,
                    details: _errors__WEBPACK_IMPORTED_MODULE_2__["ErrorDetails"].MANIFEST_INCOMPATIBLE_CODECS_ERROR,
                    fatal: true,
                    url: data.url,
                    reason: "no level with compatible codecs found in manifest"
                  });
                }
              };
              _proto.onError = function onError(event, data) {
                _BasePlaylistControll.prototype.onError.call(this, event, data);
                if (data.fatal) {
                  return;
                }
                var context = data.context;
                var level = this._levels[this.currentLevelIndex];
                if (context && (context.type === _types_loader__WEBPACK_IMPORTED_MODULE_6__["PlaylistContextType"].AUDIO_TRACK && level.audioGroupIds && context.groupId === level.audioGroupIds[level.urlId] || context.type === _types_loader__WEBPACK_IMPORTED_MODULE_6__["PlaylistContextType"].SUBTITLE_TRACK && level.textGroupIds && context.groupId === level.textGroupIds[level.urlId])) {
                  this.redundantFailover(this.currentLevelIndex);
                  return;
                }
                var levelError = false;
                var levelSwitch = true;
                var levelIndex;
                switch (data.details) {
                  case _errors__WEBPACK_IMPORTED_MODULE_2__["ErrorDetails"].FRAG_LOAD_ERROR:
                  case _errors__WEBPACK_IMPORTED_MODULE_2__["ErrorDetails"].FRAG_LOAD_TIMEOUT:
                  case _errors__WEBPACK_IMPORTED_MODULE_2__["ErrorDetails"].KEY_LOAD_ERROR:
                  case _errors__WEBPACK_IMPORTED_MODULE_2__["ErrorDetails"].KEY_LOAD_TIMEOUT:
                    if (data.frag) {
                      var _level = this._levels[data.frag.level];
                      if (_level) {
                        _level.fragmentError++;
                        if (_level.fragmentError > this.hls.config.fragLoadingMaxRetry) {
                          levelIndex = data.frag.level;
                        }
                      } else {
                        levelIndex = data.frag.level;
                      }
                    }
                    break;
                  case _errors__WEBPACK_IMPORTED_MODULE_2__["ErrorDetails"].LEVEL_LOAD_ERROR:
                  case _errors__WEBPACK_IMPORTED_MODULE_2__["ErrorDetails"].LEVEL_LOAD_TIMEOUT:
                    if (context) {
                      if (context.deliveryDirectives) {
                        levelSwitch = false;
                      }
                      levelIndex = context.level;
                    }
                    levelError = true;
                    break;
                  case _errors__WEBPACK_IMPORTED_MODULE_2__["ErrorDetails"].REMUX_ALLOC_ERROR:
                    levelIndex = data.level;
                    levelError = true;
                    break;
                }
                if (levelIndex !== void 0) {
                  this.recoverLevel(data, levelIndex, levelError, levelSwitch);
                }
              };
              _proto.recoverLevel = function recoverLevel(errorEvent, levelIndex, levelError, levelSwitch) {
                var errorDetails = errorEvent.details;
                var level = this._levels[levelIndex];
                level.loadError++;
                if (levelError) {
                  var retrying = this.retryLoadingOrFail(errorEvent);
                  if (retrying) {
                    errorEvent.levelRetry = true;
                  } else {
                    this.currentLevelIndex = -1;
                    return;
                  }
                }
                if (levelSwitch) {
                  var redundantLevels = level.url.length;
                  if (redundantLevels > 1 && level.loadError < redundantLevels) {
                    errorEvent.levelRetry = true;
                    this.redundantFailover(levelIndex);
                  } else if (this.manualLevelIndex === -1) {
                    var nextLevel = levelIndex === 0 ? this._levels.length - 1 : levelIndex - 1;
                    if (this.currentLevelIndex !== nextLevel && this._levels[nextLevel].loadError === 0) {
                      this.warn(errorDetails + ": switch to " + nextLevel);
                      errorEvent.levelRetry = true;
                      this.hls.nextAutoLevel = nextLevel;
                    }
                  }
                }
              };
              _proto.redundantFailover = function redundantFailover(levelIndex) {
                var level = this._levels[levelIndex];
                var redundantLevels = level.url.length;
                if (redundantLevels > 1) {
                  var newUrlId = (level.urlId + 1) % redundantLevels;
                  this.warn("Switching to redundant URL-id " + newUrlId);
                  this._levels.forEach(function(level2) {
                    level2.urlId = newUrlId;
                  });
                  this.level = levelIndex;
                }
              };
              _proto.onFragLoaded = function onFragLoaded(event, _ref3) {
                var frag = _ref3.frag;
                if (frag !== void 0 && frag.type === _types_loader__WEBPACK_IMPORTED_MODULE_6__["PlaylistLevelType"].MAIN) {
                  var level = this._levels[frag.level];
                  if (level !== void 0) {
                    level.fragmentError = 0;
                    level.loadError = 0;
                  }
                }
              };
              _proto.onLevelLoaded = function onLevelLoaded(event, data) {
                var _data$deliveryDirecti2;
                var level = data.level, details = data.details;
                var curLevel = this._levels[level];
                if (!curLevel) {
                  var _data$deliveryDirecti;
                  this.warn("Invalid level index " + level);
                  if ((_data$deliveryDirecti = data.deliveryDirectives) !== null && _data$deliveryDirecti !== void 0 && _data$deliveryDirecti.skip) {
                    details.deltaUpdateFailed = true;
                  }
                  return;
                }
                if (level === this.currentLevelIndex) {
                  if (curLevel.fragmentError === 0) {
                    curLevel.loadError = 0;
                    this.retryCount = 0;
                  }
                  this.playlistLoaded(level, data, curLevel.details);
                } else if ((_data$deliveryDirecti2 = data.deliveryDirectives) !== null && _data$deliveryDirecti2 !== void 0 && _data$deliveryDirecti2.skip) {
                  details.deltaUpdateFailed = true;
                }
              };
              _proto.onAudioTrackSwitched = function onAudioTrackSwitched(event, data) {
                var currentLevel = this.hls.levels[this.currentLevelIndex];
                if (!currentLevel) {
                  return;
                }
                if (currentLevel.audioGroupIds) {
                  var urlId = -1;
                  var audioGroupId = this.hls.audioTracks[data.id].groupId;
                  for (var i3 = 0; i3 < currentLevel.audioGroupIds.length; i3++) {
                    if (currentLevel.audioGroupIds[i3] === audioGroupId) {
                      urlId = i3;
                      break;
                    }
                  }
                  if (urlId !== currentLevel.urlId) {
                    currentLevel.urlId = urlId;
                    this.startLoad();
                  }
                }
              };
              _proto.loadPlaylist = function loadPlaylist(hlsUrlParameters) {
                var level = this.currentLevelIndex;
                var currentLevel = this._levels[level];
                if (this.canLoad && currentLevel && currentLevel.url.length > 0) {
                  var id = currentLevel.urlId;
                  var url = currentLevel.url[id];
                  if (hlsUrlParameters) {
                    try {
                      url = hlsUrlParameters.addDirectives(url);
                    } catch (error) {
                      this.warn("Could not construct new URL with HLS Delivery Directives: " + error);
                    }
                  }
                  this.log("Attempt loading level index " + level + (hlsUrlParameters ? " at sn " + hlsUrlParameters.msn + " part " + hlsUrlParameters.part : "") + " with URL-id " + id + " " + url);
                  this.clearTimer();
                  this.hls.trigger(_events__WEBPACK_IMPORTED_MODULE_1__["Events"].LEVEL_LOADING, {
                    url,
                    level,
                    id,
                    deliveryDirectives: hlsUrlParameters || null
                  });
                }
              };
              _proto.removeLevel = function removeLevel(levelIndex, urlId) {
                var filterLevelAndGroupByIdIndex = function filterLevelAndGroupByIdIndex2(url, id) {
                  return id !== urlId;
                };
                var levels = this._levels.filter(function(level, index) {
                  if (index !== levelIndex) {
                    return true;
                  }
                  if (level.url.length > 1 && urlId !== void 0) {
                    level.url = level.url.filter(filterLevelAndGroupByIdIndex);
                    if (level.audioGroupIds) {
                      level.audioGroupIds = level.audioGroupIds.filter(filterLevelAndGroupByIdIndex);
                    }
                    if (level.textGroupIds) {
                      level.textGroupIds = level.textGroupIds.filter(filterLevelAndGroupByIdIndex);
                    }
                    level.urlId = 0;
                    return true;
                  }
                  return false;
                }).map(function(level, index) {
                  var details = level.details;
                  if (details !== null && details !== void 0 && details.fragments) {
                    details.fragments.forEach(function(fragment) {
                      fragment.level = index;
                    });
                  }
                  return level;
                });
                this._levels = levels;
                this.hls.trigger(_events__WEBPACK_IMPORTED_MODULE_1__["Events"].LEVELS_UPDATED, {
                  levels
                });
              };
              _createClass(LevelController2, [{
                key: "levels",
                get: function get() {
                  if (this._levels.length === 0) {
                    return null;
                  }
                  return this._levels;
                }
              }, {
                key: "level",
                get: function get() {
                  return this.currentLevelIndex;
                },
                set: function set(newLevel) {
                  var _levels$newLevel;
                  var levels = this._levels;
                  if (levels.length === 0) {
                    return;
                  }
                  if (this.currentLevelIndex === newLevel && (_levels$newLevel = levels[newLevel]) !== null && _levels$newLevel !== void 0 && _levels$newLevel.details) {
                    return;
                  }
                  if (newLevel < 0 || newLevel >= levels.length) {
                    var fatal = newLevel < 0;
                    this.hls.trigger(_events__WEBPACK_IMPORTED_MODULE_1__["Events"].ERROR, {
                      type: _errors__WEBPACK_IMPORTED_MODULE_2__["ErrorTypes"].OTHER_ERROR,
                      details: _errors__WEBPACK_IMPORTED_MODULE_2__["ErrorDetails"].LEVEL_SWITCH_ERROR,
                      level: newLevel,
                      fatal,
                      reason: "invalid level idx"
                    });
                    if (fatal) {
                      return;
                    }
                    newLevel = Math.min(newLevel, levels.length - 1);
                  }
                  this.clearTimer();
                  var lastLevelIndex = this.currentLevelIndex;
                  var lastLevel = levels[lastLevelIndex];
                  var level = levels[newLevel];
                  this.log("switching to level " + newLevel + " from " + lastLevelIndex);
                  this.currentLevelIndex = newLevel;
                  var levelSwitchingData = _extends2({}, level, {
                    level: newLevel,
                    maxBitrate: level.maxBitrate,
                    uri: level.uri,
                    urlId: level.urlId
                  });
                  delete levelSwitchingData._urlId;
                  this.hls.trigger(_events__WEBPACK_IMPORTED_MODULE_1__["Events"].LEVEL_SWITCHING, levelSwitchingData);
                  var levelDetails = level.details;
                  if (!levelDetails || levelDetails.live) {
                    var hlsUrlParameters = this.switchParams(level.uri, lastLevel === null || lastLevel === void 0 ? void 0 : lastLevel.details);
                    this.loadPlaylist(hlsUrlParameters);
                  }
                }
              }, {
                key: "manualLevel",
                get: function get() {
                  return this.manualLevelIndex;
                },
                set: function set(newLevel) {
                  this.manualLevelIndex = newLevel;
                  if (this._startLevel === void 0) {
                    this._startLevel = newLevel;
                  }
                  if (newLevel !== -1) {
                    this.level = newLevel;
                  }
                }
              }, {
                key: "firstLevel",
                get: function get() {
                  return this._firstLevel;
                },
                set: function set(newLevel) {
                  this._firstLevel = newLevel;
                }
              }, {
                key: "startLevel",
                get: function get() {
                  if (this._startLevel === void 0) {
                    var configStartLevel = this.hls.config.startLevel;
                    if (configStartLevel !== void 0) {
                      return configStartLevel;
                    } else {
                      return this._firstLevel;
                    }
                  } else {
                    return this._startLevel;
                  }
                },
                set: function set(newLevel) {
                  this._startLevel = newLevel;
                }
              }, {
                key: "nextLoadLevel",
                get: function get() {
                  if (this.manualLevelIndex !== -1) {
                    return this.manualLevelIndex;
                  } else {
                    return this.hls.nextAutoLevel;
                  }
                },
                set: function set(nextLevel) {
                  this.level = nextLevel;
                  if (this.manualLevelIndex === -1) {
                    this.hls.nextAutoLevel = nextLevel;
                  }
                }
              }]);
              return LevelController2;
            }(_base_playlist_controller__WEBPACK_IMPORTED_MODULE_5__["default"]);
          },
          "./src/controller/level-helper.ts": function(module2, __webpack_exports__, __webpack_require__) {
            "use strict";
            __webpack_require__.r(__webpack_exports__);
            __webpack_require__.d(__webpack_exports__, "addGroupId", function() {
              return addGroupId;
            });
            __webpack_require__.d(__webpack_exports__, "assignTrackIdsByGroup", function() {
              return assignTrackIdsByGroup;
            });
            __webpack_require__.d(__webpack_exports__, "updatePTS", function() {
              return updatePTS;
            });
            __webpack_require__.d(__webpack_exports__, "updateFragPTSDTS", function() {
              return updateFragPTSDTS;
            });
            __webpack_require__.d(__webpack_exports__, "mergeDetails", function() {
              return mergeDetails;
            });
            __webpack_require__.d(__webpack_exports__, "mapPartIntersection", function() {
              return mapPartIntersection;
            });
            __webpack_require__.d(__webpack_exports__, "mapFragmentIntersection", function() {
              return mapFragmentIntersection;
            });
            __webpack_require__.d(__webpack_exports__, "adjustSliding", function() {
              return adjustSliding;
            });
            __webpack_require__.d(__webpack_exports__, "addSliding", function() {
              return addSliding;
            });
            __webpack_require__.d(__webpack_exports__, "computeReloadInterval", function() {
              return computeReloadInterval;
            });
            __webpack_require__.d(__webpack_exports__, "getFragmentWithSN", function() {
              return getFragmentWithSN;
            });
            __webpack_require__.d(__webpack_exports__, "getPartWith", function() {
              return getPartWith;
            });
            var _home_runner_work_hls_js_hls_js_src_polyfills_number__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("./src/polyfills/number.ts");
            var _utils_logger__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("./src/utils/logger.ts");
            function addGroupId(level, type, id) {
              switch (type) {
                case "audio":
                  if (!level.audioGroupIds) {
                    level.audioGroupIds = [];
                  }
                  level.audioGroupIds.push(id);
                  break;
                case "text":
                  if (!level.textGroupIds) {
                    level.textGroupIds = [];
                  }
                  level.textGroupIds.push(id);
                  break;
              }
            }
            function assignTrackIdsByGroup(tracks) {
              var groups = {};
              tracks.forEach(function(track) {
                var groupId = track.groupId || "";
                track.id = groups[groupId] = groups[groupId] || 0;
                groups[groupId]++;
              });
            }
            function updatePTS(fragments, fromIdx, toIdx) {
              var fragFrom = fragments[fromIdx];
              var fragTo = fragments[toIdx];
              updateFromToPTS(fragFrom, fragTo);
            }
            function updateFromToPTS(fragFrom, fragTo) {
              var fragToPTS = fragTo.startPTS;
              if (Object(_home_runner_work_hls_js_hls_js_src_polyfills_number__WEBPACK_IMPORTED_MODULE_0__["isFiniteNumber"])(fragToPTS)) {
                var duration = 0;
                var frag;
                if (fragTo.sn > fragFrom.sn) {
                  duration = fragToPTS - fragFrom.start;
                  frag = fragFrom;
                } else {
                  duration = fragFrom.start - fragToPTS;
                  frag = fragTo;
                }
                if (frag.duration !== duration) {
                  frag.duration = duration;
                }
              } else if (fragTo.sn > fragFrom.sn) {
                var contiguous = fragFrom.cc === fragTo.cc;
                if (contiguous && fragFrom.minEndPTS) {
                  fragTo.start = fragFrom.start + (fragFrom.minEndPTS - fragFrom.start);
                } else {
                  fragTo.start = fragFrom.start + fragFrom.duration;
                }
              } else {
                fragTo.start = Math.max(fragFrom.start - fragTo.duration, 0);
              }
            }
            function updateFragPTSDTS(details, frag, startPTS, endPTS, startDTS, endDTS) {
              var parsedMediaDuration = endPTS - startPTS;
              if (parsedMediaDuration <= 0) {
                _utils_logger__WEBPACK_IMPORTED_MODULE_1__["logger"].warn("Fragment should have a positive duration", frag);
                endPTS = startPTS + frag.duration;
                endDTS = startDTS + frag.duration;
              }
              var maxStartPTS = startPTS;
              var minEndPTS = endPTS;
              var fragStartPts = frag.startPTS;
              var fragEndPts = frag.endPTS;
              if (Object(_home_runner_work_hls_js_hls_js_src_polyfills_number__WEBPACK_IMPORTED_MODULE_0__["isFiniteNumber"])(fragStartPts)) {
                var deltaPTS = Math.abs(fragStartPts - startPTS);
                if (!Object(_home_runner_work_hls_js_hls_js_src_polyfills_number__WEBPACK_IMPORTED_MODULE_0__["isFiniteNumber"])(frag.deltaPTS)) {
                  frag.deltaPTS = deltaPTS;
                } else {
                  frag.deltaPTS = Math.max(deltaPTS, frag.deltaPTS);
                }
                maxStartPTS = Math.max(startPTS, fragStartPts);
                startPTS = Math.min(startPTS, fragStartPts);
                startDTS = Math.min(startDTS, frag.startDTS);
                minEndPTS = Math.min(endPTS, fragEndPts);
                endPTS = Math.max(endPTS, fragEndPts);
                endDTS = Math.max(endDTS, frag.endDTS);
              }
              frag.duration = endPTS - startPTS;
              var drift = startPTS - frag.start;
              frag.appendedPTS = endPTS;
              frag.start = frag.startPTS = startPTS;
              frag.maxStartPTS = maxStartPTS;
              frag.startDTS = startDTS;
              frag.endPTS = endPTS;
              frag.minEndPTS = minEndPTS;
              frag.endDTS = endDTS;
              var sn = frag.sn;
              if (!details || sn < details.startSN || sn > details.endSN) {
                return 0;
              }
              var i3;
              var fragIdx = sn - details.startSN;
              var fragments = details.fragments;
              fragments[fragIdx] = frag;
              for (i3 = fragIdx; i3 > 0; i3--) {
                updateFromToPTS(fragments[i3], fragments[i3 - 1]);
              }
              for (i3 = fragIdx; i3 < fragments.length - 1; i3++) {
                updateFromToPTS(fragments[i3], fragments[i3 + 1]);
              }
              if (details.fragmentHint) {
                updateFromToPTS(fragments[fragments.length - 1], details.fragmentHint);
              }
              details.PTSKnown = details.alignedSliding = true;
              return drift;
            }
            function mergeDetails(oldDetails, newDetails) {
              var currentInitSegment = null;
              var oldFragments = oldDetails.fragments;
              for (var i3 = oldFragments.length - 1; i3 >= 0; i3--) {
                var oldInit = oldFragments[i3].initSegment;
                if (oldInit) {
                  currentInitSegment = oldInit;
                  break;
                }
              }
              if (oldDetails.fragmentHint) {
                delete oldDetails.fragmentHint.endPTS;
              }
              var ccOffset = 0;
              var PTSFrag;
              mapFragmentIntersection(oldDetails, newDetails, function(oldFrag, newFrag) {
                if (oldFrag.relurl) {
                  ccOffset = oldFrag.cc - newFrag.cc;
                }
                if (Object(_home_runner_work_hls_js_hls_js_src_polyfills_number__WEBPACK_IMPORTED_MODULE_0__["isFiniteNumber"])(oldFrag.startPTS) && Object(_home_runner_work_hls_js_hls_js_src_polyfills_number__WEBPACK_IMPORTED_MODULE_0__["isFiniteNumber"])(oldFrag.endPTS)) {
                  newFrag.start = newFrag.startPTS = oldFrag.startPTS;
                  newFrag.startDTS = oldFrag.startDTS;
                  newFrag.appendedPTS = oldFrag.appendedPTS;
                  newFrag.maxStartPTS = oldFrag.maxStartPTS;
                  newFrag.endPTS = oldFrag.endPTS;
                  newFrag.endDTS = oldFrag.endDTS;
                  newFrag.minEndPTS = oldFrag.minEndPTS;
                  newFrag.duration = oldFrag.endPTS - oldFrag.startPTS;
                  if (newFrag.duration) {
                    PTSFrag = newFrag;
                  }
                  newDetails.PTSKnown = newDetails.alignedSliding = true;
                }
                newFrag.elementaryStreams = oldFrag.elementaryStreams;
                newFrag.loader = oldFrag.loader;
                newFrag.stats = oldFrag.stats;
                newFrag.urlId = oldFrag.urlId;
                if (oldFrag.initSegment) {
                  newFrag.initSegment = oldFrag.initSegment;
                  currentInitSegment = oldFrag.initSegment;
                }
              });
              if (currentInitSegment) {
                var fragmentsToCheck = newDetails.fragmentHint ? newDetails.fragments.concat(newDetails.fragmentHint) : newDetails.fragments;
                fragmentsToCheck.forEach(function(frag) {
                  var _currentInitSegment;
                  if (!frag.initSegment || frag.initSegment.relurl === ((_currentInitSegment = currentInitSegment) === null || _currentInitSegment === void 0 ? void 0 : _currentInitSegment.relurl)) {
                    frag.initSegment = currentInitSegment;
                  }
                });
              }
              if (newDetails.skippedSegments) {
                newDetails.deltaUpdateFailed = newDetails.fragments.some(function(frag) {
                  return !frag;
                });
                if (newDetails.deltaUpdateFailed) {
                  _utils_logger__WEBPACK_IMPORTED_MODULE_1__["logger"].warn("[level-helper] Previous playlist missing segments skipped in delta playlist");
                  for (var _i = newDetails.skippedSegments; _i--; ) {
                    newDetails.fragments.shift();
                  }
                  newDetails.startSN = newDetails.fragments[0].sn;
                  newDetails.startCC = newDetails.fragments[0].cc;
                }
              }
              var newFragments = newDetails.fragments;
              if (ccOffset) {
                _utils_logger__WEBPACK_IMPORTED_MODULE_1__["logger"].warn("discontinuity sliding from playlist, take drift into account");
                for (var _i2 = 0; _i2 < newFragments.length; _i2++) {
                  newFragments[_i2].cc += ccOffset;
                }
              }
              if (newDetails.skippedSegments) {
                newDetails.startCC = newDetails.fragments[0].cc;
              }
              mapPartIntersection(oldDetails.partList, newDetails.partList, function(oldPart, newPart) {
                newPart.elementaryStreams = oldPart.elementaryStreams;
                newPart.stats = oldPart.stats;
              });
              if (PTSFrag) {
                updateFragPTSDTS(newDetails, PTSFrag, PTSFrag.startPTS, PTSFrag.endPTS, PTSFrag.startDTS, PTSFrag.endDTS);
              } else {
                adjustSliding(oldDetails, newDetails);
              }
              if (newFragments.length) {
                newDetails.totalduration = newDetails.edge - newFragments[0].start;
              }
              newDetails.driftStartTime = oldDetails.driftStartTime;
              newDetails.driftStart = oldDetails.driftStart;
              var advancedDateTime = newDetails.advancedDateTime;
              if (newDetails.advanced && advancedDateTime) {
                var edge = newDetails.edge;
                if (!newDetails.driftStart) {
                  newDetails.driftStartTime = advancedDateTime;
                  newDetails.driftStart = edge;
                }
                newDetails.driftEndTime = advancedDateTime;
                newDetails.driftEnd = edge;
              } else {
                newDetails.driftEndTime = oldDetails.driftEndTime;
                newDetails.driftEnd = oldDetails.driftEnd;
                newDetails.advancedDateTime = oldDetails.advancedDateTime;
              }
            }
            function mapPartIntersection(oldParts, newParts, intersectionFn) {
              if (oldParts && newParts) {
                var delta = 0;
                for (var i3 = 0, len = oldParts.length; i3 <= len; i3++) {
                  var _oldPart = oldParts[i3];
                  var _newPart = newParts[i3 + delta];
                  if (_oldPart && _newPart && _oldPart.index === _newPart.index && _oldPart.fragment.sn === _newPart.fragment.sn) {
                    intersectionFn(_oldPart, _newPart);
                  } else {
                    delta--;
                  }
                }
              }
            }
            function mapFragmentIntersection(oldDetails, newDetails, intersectionFn) {
              var skippedSegments = newDetails.skippedSegments;
              var start = Math.max(oldDetails.startSN, newDetails.startSN) - newDetails.startSN;
              var end = (oldDetails.fragmentHint ? 1 : 0) + (skippedSegments ? newDetails.endSN : Math.min(oldDetails.endSN, newDetails.endSN)) - newDetails.startSN;
              var delta = newDetails.startSN - oldDetails.startSN;
              var newFrags = newDetails.fragmentHint ? newDetails.fragments.concat(newDetails.fragmentHint) : newDetails.fragments;
              var oldFrags = oldDetails.fragmentHint ? oldDetails.fragments.concat(oldDetails.fragmentHint) : oldDetails.fragments;
              for (var i3 = start; i3 <= end; i3++) {
                var _oldFrag = oldFrags[delta + i3];
                var _newFrag = newFrags[i3];
                if (skippedSegments && !_newFrag && i3 < skippedSegments) {
                  _newFrag = newDetails.fragments[i3] = _oldFrag;
                }
                if (_oldFrag && _newFrag) {
                  intersectionFn(_oldFrag, _newFrag);
                }
              }
            }
            function adjustSliding(oldDetails, newDetails) {
              var delta = newDetails.startSN + newDetails.skippedSegments - oldDetails.startSN;
              var oldFragments = oldDetails.fragments;
              if (delta < 0 || delta >= oldFragments.length) {
                return;
              }
              addSliding(newDetails, oldFragments[delta].start);
            }
            function addSliding(details, start) {
              if (start) {
                var fragments = details.fragments;
                for (var i3 = details.skippedSegments; i3 < fragments.length; i3++) {
                  fragments[i3].start += start;
                }
                if (details.fragmentHint) {
                  details.fragmentHint.start += start;
                }
              }
            }
            function computeReloadInterval(newDetails, stats) {
              var reloadInterval = 1e3 * newDetails.levelTargetDuration;
              var reloadIntervalAfterMiss = reloadInterval / 2;
              var timeSinceLastModified = newDetails.age;
              var useLastModified = timeSinceLastModified > 0 && timeSinceLastModified < reloadInterval * 3;
              var roundTrip = stats.loading.end - stats.loading.start;
              var estimatedTimeUntilUpdate;
              var availabilityDelay = newDetails.availabilityDelay;
              if (newDetails.updated === false) {
                if (useLastModified) {
                  var minRetry = 333 * newDetails.misses;
                  estimatedTimeUntilUpdate = Math.max(Math.min(reloadIntervalAfterMiss, roundTrip * 2), minRetry);
                  newDetails.availabilityDelay = (newDetails.availabilityDelay || 0) + estimatedTimeUntilUpdate;
                } else {
                  estimatedTimeUntilUpdate = reloadIntervalAfterMiss;
                }
              } else if (useLastModified) {
                availabilityDelay = Math.min(availabilityDelay || reloadInterval / 2, timeSinceLastModified);
                newDetails.availabilityDelay = availabilityDelay;
                estimatedTimeUntilUpdate = availabilityDelay + reloadInterval - timeSinceLastModified;
              } else {
                estimatedTimeUntilUpdate = reloadInterval - roundTrip;
              }
              return Math.round(estimatedTimeUntilUpdate);
            }
            function getFragmentWithSN(level, sn, fragCurrent) {
              if (!level || !level.details) {
                return null;
              }
              var levelDetails = level.details;
              var fragment = levelDetails.fragments[sn - levelDetails.startSN];
              if (fragment) {
                return fragment;
              }
              fragment = levelDetails.fragmentHint;
              if (fragment && fragment.sn === sn) {
                return fragment;
              }
              if (sn < levelDetails.startSN && fragCurrent && fragCurrent.sn === sn) {
                return fragCurrent;
              }
              return null;
            }
            function getPartWith(level, sn, partIndex) {
              if (!level || !level.details) {
                return null;
              }
              var partList = level.details.partList;
              if (partList) {
                for (var i3 = partList.length; i3--; ) {
                  var part = partList[i3];
                  if (part.index === partIndex && part.fragment.sn === sn) {
                    return part;
                  }
                }
              }
              return null;
            }
          },
          "./src/controller/stream-controller.ts": function(module2, __webpack_exports__, __webpack_require__) {
            "use strict";
            __webpack_require__.r(__webpack_exports__);
            __webpack_require__.d(__webpack_exports__, "default", function() {
              return StreamController;
            });
            var _home_runner_work_hls_js_hls_js_src_polyfills_number__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("./src/polyfills/number.ts");
            var _base_stream_controller__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("./src/controller/base-stream-controller.ts");
            var _is_supported__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__("./src/is-supported.ts");
            var _events__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__("./src/events.ts");
            var _utils_buffer_helper__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__("./src/utils/buffer-helper.ts");
            var _fragment_tracker__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__("./src/controller/fragment-tracker.ts");
            var _types_loader__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__("./src/types/loader.ts");
            var _loader_fragment__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__("./src/loader/fragment.ts");
            var _demux_transmuxer_interface__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__("./src/demux/transmuxer-interface.ts");
            var _types_transmuxer__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__("./src/types/transmuxer.ts");
            var _gap_controller__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__("./src/controller/gap-controller.ts");
            var _errors__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__("./src/errors.ts");
            var _utils_logger__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__("./src/utils/logger.ts");
            function _defineProperties(target, props) {
              for (var i3 = 0; i3 < props.length; i3++) {
                var descriptor = props[i3];
                descriptor.enumerable = descriptor.enumerable || false;
                descriptor.configurable = true;
                if ("value" in descriptor)
                  descriptor.writable = true;
                Object.defineProperty(target, descriptor.key, descriptor);
              }
            }
            function _createClass(Constructor, protoProps, staticProps) {
              if (protoProps)
                _defineProperties(Constructor.prototype, protoProps);
              if (staticProps)
                _defineProperties(Constructor, staticProps);
              return Constructor;
            }
            function _inheritsLoose(subClass, superClass) {
              subClass.prototype = Object.create(superClass.prototype);
              subClass.prototype.constructor = subClass;
              _setPrototypeOf(subClass, superClass);
            }
            function _setPrototypeOf(o3, p5) {
              _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf2(o4, p6) {
                o4.__proto__ = p6;
                return o4;
              };
              return _setPrototypeOf(o3, p5);
            }
            var TICK_INTERVAL = 100;
            var StreamController = /* @__PURE__ */ function(_BaseStreamController) {
              _inheritsLoose(StreamController2, _BaseStreamController);
              function StreamController2(hls, fragmentTracker) {
                var _this;
                _this = _BaseStreamController.call(this, hls, fragmentTracker, "[stream-controller]") || this;
                _this.audioCodecSwap = false;
                _this.gapController = null;
                _this.level = -1;
                _this._forceStartLoad = false;
                _this.altAudio = false;
                _this.audioOnly = false;
                _this.fragPlaying = null;
                _this.onvplaying = null;
                _this.onvseeked = null;
                _this.fragLastKbps = 0;
                _this.stalled = false;
                _this.couldBacktrack = false;
                _this.audioCodecSwitch = false;
                _this.videoBuffer = null;
                _this._registerListeners();
                return _this;
              }
              var _proto = StreamController2.prototype;
              _proto._registerListeners = function _registerListeners() {
                var hls = this.hls;
                hls.on(_events__WEBPACK_IMPORTED_MODULE_3__["Events"].MEDIA_ATTACHED, this.onMediaAttached, this);
                hls.on(_events__WEBPACK_IMPORTED_MODULE_3__["Events"].MEDIA_DETACHING, this.onMediaDetaching, this);
                hls.on(_events__WEBPACK_IMPORTED_MODULE_3__["Events"].MANIFEST_LOADING, this.onManifestLoading, this);
                hls.on(_events__WEBPACK_IMPORTED_MODULE_3__["Events"].MANIFEST_PARSED, this.onManifestParsed, this);
                hls.on(_events__WEBPACK_IMPORTED_MODULE_3__["Events"].LEVEL_LOADING, this.onLevelLoading, this);
                hls.on(_events__WEBPACK_IMPORTED_MODULE_3__["Events"].LEVEL_LOADED, this.onLevelLoaded, this);
                hls.on(_events__WEBPACK_IMPORTED_MODULE_3__["Events"].FRAG_LOAD_EMERGENCY_ABORTED, this.onFragLoadEmergencyAborted, this);
                hls.on(_events__WEBPACK_IMPORTED_MODULE_3__["Events"].ERROR, this.onError, this);
                hls.on(_events__WEBPACK_IMPORTED_MODULE_3__["Events"].AUDIO_TRACK_SWITCHING, this.onAudioTrackSwitching, this);
                hls.on(_events__WEBPACK_IMPORTED_MODULE_3__["Events"].AUDIO_TRACK_SWITCHED, this.onAudioTrackSwitched, this);
                hls.on(_events__WEBPACK_IMPORTED_MODULE_3__["Events"].BUFFER_CREATED, this.onBufferCreated, this);
                hls.on(_events__WEBPACK_IMPORTED_MODULE_3__["Events"].BUFFER_FLUSHED, this.onBufferFlushed, this);
                hls.on(_events__WEBPACK_IMPORTED_MODULE_3__["Events"].LEVELS_UPDATED, this.onLevelsUpdated, this);
                hls.on(_events__WEBPACK_IMPORTED_MODULE_3__["Events"].FRAG_BUFFERED, this.onFragBuffered, this);
              };
              _proto._unregisterListeners = function _unregisterListeners() {
                var hls = this.hls;
                hls.off(_events__WEBPACK_IMPORTED_MODULE_3__["Events"].MEDIA_ATTACHED, this.onMediaAttached, this);
                hls.off(_events__WEBPACK_IMPORTED_MODULE_3__["Events"].MEDIA_DETACHING, this.onMediaDetaching, this);
                hls.off(_events__WEBPACK_IMPORTED_MODULE_3__["Events"].MANIFEST_LOADING, this.onManifestLoading, this);
                hls.off(_events__WEBPACK_IMPORTED_MODULE_3__["Events"].MANIFEST_PARSED, this.onManifestParsed, this);
                hls.off(_events__WEBPACK_IMPORTED_MODULE_3__["Events"].LEVEL_LOADED, this.onLevelLoaded, this);
                hls.off(_events__WEBPACK_IMPORTED_MODULE_3__["Events"].FRAG_LOAD_EMERGENCY_ABORTED, this.onFragLoadEmergencyAborted, this);
                hls.off(_events__WEBPACK_IMPORTED_MODULE_3__["Events"].ERROR, this.onError, this);
                hls.off(_events__WEBPACK_IMPORTED_MODULE_3__["Events"].AUDIO_TRACK_SWITCHING, this.onAudioTrackSwitching, this);
                hls.off(_events__WEBPACK_IMPORTED_MODULE_3__["Events"].AUDIO_TRACK_SWITCHED, this.onAudioTrackSwitched, this);
                hls.off(_events__WEBPACK_IMPORTED_MODULE_3__["Events"].BUFFER_CREATED, this.onBufferCreated, this);
                hls.off(_events__WEBPACK_IMPORTED_MODULE_3__["Events"].BUFFER_FLUSHED, this.onBufferFlushed, this);
                hls.off(_events__WEBPACK_IMPORTED_MODULE_3__["Events"].LEVELS_UPDATED, this.onLevelsUpdated, this);
                hls.off(_events__WEBPACK_IMPORTED_MODULE_3__["Events"].FRAG_BUFFERED, this.onFragBuffered, this);
              };
              _proto.onHandlerDestroying = function onHandlerDestroying() {
                this._unregisterListeners();
                this.onMediaDetaching();
              };
              _proto.startLoad = function startLoad(startPosition) {
                if (this.levels) {
                  var lastCurrentTime = this.lastCurrentTime, hls = this.hls;
                  this.stopLoad();
                  this.setInterval(TICK_INTERVAL);
                  this.level = -1;
                  this.fragLoadError = 0;
                  if (!this.startFragRequested) {
                    var startLevel = hls.startLevel;
                    if (startLevel === -1) {
                      if (hls.config.testBandwidth) {
                        startLevel = 0;
                        this.bitrateTest = true;
                      } else {
                        startLevel = hls.nextAutoLevel;
                      }
                    }
                    this.level = hls.nextLoadLevel = startLevel;
                    this.loadedmetadata = false;
                  }
                  if (lastCurrentTime > 0 && startPosition === -1) {
                    this.log("Override startPosition with lastCurrentTime @" + lastCurrentTime.toFixed(3));
                    startPosition = lastCurrentTime;
                  }
                  this.state = _base_stream_controller__WEBPACK_IMPORTED_MODULE_1__["State"].IDLE;
                  this.nextLoadPosition = this.startPosition = this.lastCurrentTime = startPosition;
                  this.tick();
                } else {
                  this._forceStartLoad = true;
                  this.state = _base_stream_controller__WEBPACK_IMPORTED_MODULE_1__["State"].STOPPED;
                }
              };
              _proto.stopLoad = function stopLoad() {
                this._forceStartLoad = false;
                _BaseStreamController.prototype.stopLoad.call(this);
              };
              _proto.doTick = function doTick() {
                switch (this.state) {
                  case _base_stream_controller__WEBPACK_IMPORTED_MODULE_1__["State"].IDLE:
                    this.doTickIdle();
                    break;
                  case _base_stream_controller__WEBPACK_IMPORTED_MODULE_1__["State"].WAITING_LEVEL: {
                    var _levels$level;
                    var levels = this.levels, level = this.level;
                    var details = levels === null || levels === void 0 ? void 0 : (_levels$level = levels[level]) === null || _levels$level === void 0 ? void 0 : _levels$level.details;
                    if (details && (!details.live || this.levelLastLoaded === this.level)) {
                      if (this.waitForCdnTuneIn(details)) {
                        break;
                      }
                      this.state = _base_stream_controller__WEBPACK_IMPORTED_MODULE_1__["State"].IDLE;
                      break;
                    }
                    break;
                  }
                  case _base_stream_controller__WEBPACK_IMPORTED_MODULE_1__["State"].FRAG_LOADING_WAITING_RETRY:
                    {
                      var _this$media;
                      var now = self.performance.now();
                      var retryDate = this.retryDate;
                      if (!retryDate || now >= retryDate || (_this$media = this.media) !== null && _this$media !== void 0 && _this$media.seeking) {
                        this.log("retryDate reached, switch back to IDLE state");
                        this.state = _base_stream_controller__WEBPACK_IMPORTED_MODULE_1__["State"].IDLE;
                      }
                    }
                    break;
                  default:
                    break;
                }
                this.onTickEnd();
              };
              _proto.onTickEnd = function onTickEnd() {
                _BaseStreamController.prototype.onTickEnd.call(this);
                this.checkBuffer();
                this.checkFragmentChanged();
              };
              _proto.doTickIdle = function doTickIdle() {
                var _frag$decryptdata, _frag$decryptdata2;
                var hls = this.hls, levelLastLoaded = this.levelLastLoaded, levels = this.levels, media2 = this.media;
                var config2 = hls.config, level = hls.nextLoadLevel;
                if (levelLastLoaded === null || !media2 && (this.startFragRequested || !config2.startFragPrefetch)) {
                  return;
                }
                if (this.altAudio && this.audioOnly) {
                  return;
                }
                if (!levels || !levels[level]) {
                  return;
                }
                var levelInfo = levels[level];
                this.level = hls.nextLoadLevel = level;
                var levelDetails = levelInfo.details;
                if (!levelDetails || this.state === _base_stream_controller__WEBPACK_IMPORTED_MODULE_1__["State"].WAITING_LEVEL || levelDetails.live && this.levelLastLoaded !== level) {
                  this.state = _base_stream_controller__WEBPACK_IMPORTED_MODULE_1__["State"].WAITING_LEVEL;
                  return;
                }
                var bufferInfo = this.getFwdBufferInfo(this.mediaBuffer ? this.mediaBuffer : media2, _types_loader__WEBPACK_IMPORTED_MODULE_6__["PlaylistLevelType"].MAIN);
                if (bufferInfo === null) {
                  return;
                }
                var bufferLen = bufferInfo.len;
                var maxBufLen = this.getMaxBufferLength(levelInfo.maxBitrate);
                if (bufferLen >= maxBufLen) {
                  return;
                }
                if (this._streamEnded(bufferInfo, levelDetails)) {
                  var data = {};
                  if (this.altAudio) {
                    data.type = "video";
                  }
                  this.hls.trigger(_events__WEBPACK_IMPORTED_MODULE_3__["Events"].BUFFER_EOS, data);
                  this.state = _base_stream_controller__WEBPACK_IMPORTED_MODULE_1__["State"].ENDED;
                  return;
                }
                var targetBufferTime = bufferInfo.end;
                var frag = this.getNextFragment(targetBufferTime, levelDetails);
                if (this.couldBacktrack && !this.fragPrevious && frag && frag.sn !== "initSegment") {
                  var fragIdx = frag.sn - levelDetails.startSN;
                  if (fragIdx > 1) {
                    frag = levelDetails.fragments[fragIdx - 1];
                    this.fragmentTracker.removeFragment(frag);
                  }
                }
                if (frag && this.fragmentTracker.getState(frag) === _fragment_tracker__WEBPACK_IMPORTED_MODULE_5__["FragmentState"].OK && this.nextLoadPosition > targetBufferTime) {
                  var type = this.audioOnly && !this.altAudio ? _loader_fragment__WEBPACK_IMPORTED_MODULE_7__["ElementaryStreamTypes"].AUDIO : _loader_fragment__WEBPACK_IMPORTED_MODULE_7__["ElementaryStreamTypes"].VIDEO;
                  this.afterBufferFlushed(media2, type, _types_loader__WEBPACK_IMPORTED_MODULE_6__["PlaylistLevelType"].MAIN);
                  frag = this.getNextFragment(this.nextLoadPosition, levelDetails);
                }
                if (!frag) {
                  return;
                }
                if (frag.initSegment && !frag.initSegment.data && !this.bitrateTest) {
                  frag = frag.initSegment;
                }
                if (((_frag$decryptdata = frag.decryptdata) === null || _frag$decryptdata === void 0 ? void 0 : _frag$decryptdata.keyFormat) === "identity" && !((_frag$decryptdata2 = frag.decryptdata) !== null && _frag$decryptdata2 !== void 0 && _frag$decryptdata2.key)) {
                  this.loadKey(frag, levelDetails);
                } else {
                  this.loadFragment(frag, levelDetails, targetBufferTime);
                }
              };
              _proto.loadFragment = function loadFragment(frag, levelDetails, targetBufferTime) {
                var _this$media2;
                var fragState = this.fragmentTracker.getState(frag);
                this.fragCurrent = frag;
                if (fragState === _fragment_tracker__WEBPACK_IMPORTED_MODULE_5__["FragmentState"].BACKTRACKED) {
                  var data = this.fragmentTracker.getBacktrackData(frag);
                  if (data) {
                    this._handleFragmentLoadProgress(data);
                    this._handleFragmentLoadComplete(data);
                    return;
                  } else {
                    fragState = _fragment_tracker__WEBPACK_IMPORTED_MODULE_5__["FragmentState"].NOT_LOADED;
                  }
                }
                if (fragState === _fragment_tracker__WEBPACK_IMPORTED_MODULE_5__["FragmentState"].NOT_LOADED || fragState === _fragment_tracker__WEBPACK_IMPORTED_MODULE_5__["FragmentState"].PARTIAL) {
                  if (frag.sn === "initSegment") {
                    this._loadInitSegment(frag);
                  } else if (this.bitrateTest) {
                    frag.bitrateTest = true;
                    this.log("Fragment " + frag.sn + " of level " + frag.level + " is being downloaded to test bitrate and will not be buffered");
                    this._loadBitrateTestFrag(frag);
                  } else {
                    this.startFragRequested = true;
                    _BaseStreamController.prototype.loadFragment.call(this, frag, levelDetails, targetBufferTime);
                  }
                } else if (fragState === _fragment_tracker__WEBPACK_IMPORTED_MODULE_5__["FragmentState"].APPENDING) {
                  if (this.reduceMaxBufferLength(frag.duration)) {
                    this.fragmentTracker.removeFragment(frag);
                  }
                } else if (((_this$media2 = this.media) === null || _this$media2 === void 0 ? void 0 : _this$media2.buffered.length) === 0) {
                  this.fragmentTracker.removeAllFragments();
                }
              };
              _proto.getAppendedFrag = function getAppendedFrag(position) {
                var fragOrPart = this.fragmentTracker.getAppendedFrag(position, _types_loader__WEBPACK_IMPORTED_MODULE_6__["PlaylistLevelType"].MAIN);
                if (fragOrPart && "fragment" in fragOrPart) {
                  return fragOrPart.fragment;
                }
                return fragOrPart;
              };
              _proto.getBufferedFrag = function getBufferedFrag(position) {
                return this.fragmentTracker.getBufferedFrag(position, _types_loader__WEBPACK_IMPORTED_MODULE_6__["PlaylistLevelType"].MAIN);
              };
              _proto.followingBufferedFrag = function followingBufferedFrag(frag) {
                if (frag) {
                  return this.getBufferedFrag(frag.end + 0.5);
                }
                return null;
              };
              _proto.immediateLevelSwitch = function immediateLevelSwitch() {
                this.abortCurrentFrag();
                this.flushMainBuffer(0, Number.POSITIVE_INFINITY);
              };
              _proto.nextLevelSwitch = function nextLevelSwitch() {
                var levels = this.levels, media2 = this.media;
                if (media2 !== null && media2 !== void 0 && media2.readyState) {
                  var fetchdelay;
                  var fragPlayingCurrent = this.getAppendedFrag(media2.currentTime);
                  if (fragPlayingCurrent && fragPlayingCurrent.start > 1) {
                    this.flushMainBuffer(0, fragPlayingCurrent.start - 1);
                  }
                  if (!media2.paused && levels) {
                    var nextLevelId = this.hls.nextLoadLevel;
                    var nextLevel = levels[nextLevelId];
                    var fragLastKbps = this.fragLastKbps;
                    if (fragLastKbps && this.fragCurrent) {
                      fetchdelay = this.fragCurrent.duration * nextLevel.maxBitrate / (1e3 * fragLastKbps) + 1;
                    } else {
                      fetchdelay = 0;
                    }
                  } else {
                    fetchdelay = 0;
                  }
                  var bufferedFrag = this.getBufferedFrag(media2.currentTime + fetchdelay);
                  if (bufferedFrag) {
                    var nextBufferedFrag = this.followingBufferedFrag(bufferedFrag);
                    if (nextBufferedFrag) {
                      this.abortCurrentFrag();
                      var maxStart = nextBufferedFrag.maxStartPTS ? nextBufferedFrag.maxStartPTS : nextBufferedFrag.start;
                      var fragDuration = nextBufferedFrag.duration;
                      var startPts = Math.max(bufferedFrag.end, maxStart + Math.min(Math.max(fragDuration - this.config.maxFragLookUpTolerance, fragDuration * 0.5), fragDuration * 0.75));
                      this.flushMainBuffer(startPts, Number.POSITIVE_INFINITY);
                    }
                  }
                }
              };
              _proto.abortCurrentFrag = function abortCurrentFrag() {
                var fragCurrent = this.fragCurrent;
                this.fragCurrent = null;
                if (fragCurrent !== null && fragCurrent !== void 0 && fragCurrent.loader) {
                  fragCurrent.loader.abort();
                }
                if (this.state === _base_stream_controller__WEBPACK_IMPORTED_MODULE_1__["State"].KEY_LOADING) {
                  this.state = _base_stream_controller__WEBPACK_IMPORTED_MODULE_1__["State"].IDLE;
                }
                this.nextLoadPosition = this.getLoadPosition();
              };
              _proto.flushMainBuffer = function flushMainBuffer(startOffset, endOffset) {
                _BaseStreamController.prototype.flushMainBuffer.call(this, startOffset, endOffset, this.altAudio ? "video" : null);
              };
              _proto.onMediaAttached = function onMediaAttached(event, data) {
                _BaseStreamController.prototype.onMediaAttached.call(this, event, data);
                var media2 = data.media;
                this.onvplaying = this.onMediaPlaying.bind(this);
                this.onvseeked = this.onMediaSeeked.bind(this);
                media2.addEventListener("playing", this.onvplaying);
                media2.addEventListener("seeked", this.onvseeked);
                this.gapController = new _gap_controller__WEBPACK_IMPORTED_MODULE_10__["default"](this.config, media2, this.fragmentTracker, this.hls);
              };
              _proto.onMediaDetaching = function onMediaDetaching() {
                var media2 = this.media;
                if (media2) {
                  media2.removeEventListener("playing", this.onvplaying);
                  media2.removeEventListener("seeked", this.onvseeked);
                  this.onvplaying = this.onvseeked = null;
                  this.videoBuffer = null;
                }
                this.fragPlaying = null;
                if (this.gapController) {
                  this.gapController.destroy();
                  this.gapController = null;
                }
                _BaseStreamController.prototype.onMediaDetaching.call(this);
              };
              _proto.onMediaPlaying = function onMediaPlaying() {
                this.tick();
              };
              _proto.onMediaSeeked = function onMediaSeeked() {
                var media2 = this.media;
                var currentTime = media2 ? media2.currentTime : null;
                if (Object(_home_runner_work_hls_js_hls_js_src_polyfills_number__WEBPACK_IMPORTED_MODULE_0__["isFiniteNumber"])(currentTime)) {
                  this.log("Media seeked to " + currentTime.toFixed(3));
                }
                this.tick();
              };
              _proto.onManifestLoading = function onManifestLoading() {
                this.log("Trigger BUFFER_RESET");
                this.hls.trigger(_events__WEBPACK_IMPORTED_MODULE_3__["Events"].BUFFER_RESET, void 0);
                this.fragmentTracker.removeAllFragments();
                this.couldBacktrack = this.stalled = false;
                this.startPosition = this.lastCurrentTime = 0;
                this.fragPlaying = null;
              };
              _proto.onManifestParsed = function onManifestParsed(event, data) {
                var aac = false;
                var heaac = false;
                var codec;
                data.levels.forEach(function(level) {
                  codec = level.audioCodec;
                  if (codec) {
                    if (codec.indexOf("mp4a.40.2") !== -1) {
                      aac = true;
                    }
                    if (codec.indexOf("mp4a.40.5") !== -1) {
                      heaac = true;
                    }
                  }
                });
                this.audioCodecSwitch = aac && heaac && !Object(_is_supported__WEBPACK_IMPORTED_MODULE_2__["changeTypeSupported"])();
                if (this.audioCodecSwitch) {
                  this.log("Both AAC/HE-AAC audio found in levels; declaring level codec as HE-AAC");
                }
                this.levels = data.levels;
                this.startFragRequested = false;
              };
              _proto.onLevelLoading = function onLevelLoading(event, data) {
                var levels = this.levels;
                if (!levels || this.state !== _base_stream_controller__WEBPACK_IMPORTED_MODULE_1__["State"].IDLE) {
                  return;
                }
                var level = levels[data.level];
                if (!level.details || level.details.live && this.levelLastLoaded !== data.level || this.waitForCdnTuneIn(level.details)) {
                  this.state = _base_stream_controller__WEBPACK_IMPORTED_MODULE_1__["State"].WAITING_LEVEL;
                }
              };
              _proto.onLevelLoaded = function onLevelLoaded(event, data) {
                var _curLevel$details;
                var levels = this.levels;
                var newLevelId = data.level;
                var newDetails = data.details;
                var duration = newDetails.totalduration;
                if (!levels) {
                  this.warn("Levels were reset while loading level " + newLevelId);
                  return;
                }
                this.log("Level " + newLevelId + " loaded [" + newDetails.startSN + "," + newDetails.endSN + "], cc [" + newDetails.startCC + ", " + newDetails.endCC + "] duration:" + duration);
                var fragCurrent = this.fragCurrent;
                if (fragCurrent && (this.state === _base_stream_controller__WEBPACK_IMPORTED_MODULE_1__["State"].FRAG_LOADING || this.state === _base_stream_controller__WEBPACK_IMPORTED_MODULE_1__["State"].FRAG_LOADING_WAITING_RETRY)) {
                  if (fragCurrent.level !== data.level && fragCurrent.loader) {
                    this.state = _base_stream_controller__WEBPACK_IMPORTED_MODULE_1__["State"].IDLE;
                    fragCurrent.loader.abort();
                  }
                }
                var curLevel = levels[newLevelId];
                var sliding = 0;
                if (newDetails.live || (_curLevel$details = curLevel.details) !== null && _curLevel$details !== void 0 && _curLevel$details.live) {
                  if (!newDetails.fragments[0]) {
                    newDetails.deltaUpdateFailed = true;
                  }
                  if (newDetails.deltaUpdateFailed) {
                    return;
                  }
                  sliding = this.alignPlaylists(newDetails, curLevel.details);
                }
                curLevel.details = newDetails;
                this.levelLastLoaded = newLevelId;
                this.hls.trigger(_events__WEBPACK_IMPORTED_MODULE_3__["Events"].LEVEL_UPDATED, {
                  details: newDetails,
                  level: newLevelId
                });
                if (this.state === _base_stream_controller__WEBPACK_IMPORTED_MODULE_1__["State"].WAITING_LEVEL) {
                  if (this.waitForCdnTuneIn(newDetails)) {
                    return;
                  }
                  this.state = _base_stream_controller__WEBPACK_IMPORTED_MODULE_1__["State"].IDLE;
                }
                if (!this.startFragRequested) {
                  this.setStartPosition(newDetails, sliding);
                } else if (newDetails.live) {
                  this.synchronizeToLiveEdge(newDetails);
                }
                this.tick();
              };
              _proto._handleFragmentLoadProgress = function _handleFragmentLoadProgress(data) {
                var _frag$initSegment;
                var frag = data.frag, part = data.part, payload = data.payload;
                var levels = this.levels;
                if (!levels) {
                  this.warn("Levels were reset while fragment load was in progress. Fragment " + frag.sn + " of level " + frag.level + " will not be buffered");
                  return;
                }
                var currentLevel = levels[frag.level];
                var details = currentLevel.details;
                if (!details) {
                  this.warn("Dropping fragment " + frag.sn + " of level " + frag.level + " after level details were reset");
                  return;
                }
                var videoCodec = currentLevel.videoCodec;
                var accurateTimeOffset = details.PTSKnown || !details.live;
                var initSegmentData = (_frag$initSegment = frag.initSegment) === null || _frag$initSegment === void 0 ? void 0 : _frag$initSegment.data;
                var audioCodec = this._getAudioCodec(currentLevel);
                var transmuxer = this.transmuxer = this.transmuxer || new _demux_transmuxer_interface__WEBPACK_IMPORTED_MODULE_8__["default"](this.hls, _types_loader__WEBPACK_IMPORTED_MODULE_6__["PlaylistLevelType"].MAIN, this._handleTransmuxComplete.bind(this), this._handleTransmuxerFlush.bind(this));
                var partIndex = part ? part.index : -1;
                var partial = partIndex !== -1;
                var chunkMeta = new _types_transmuxer__WEBPACK_IMPORTED_MODULE_9__["ChunkMetadata"](frag.level, frag.sn, frag.stats.chunkCount, payload.byteLength, partIndex, partial);
                var initPTS = this.initPTS[frag.cc];
                transmuxer.push(payload, initSegmentData, audioCodec, videoCodec, frag, part, details.totalduration, accurateTimeOffset, chunkMeta, initPTS);
              };
              _proto.onAudioTrackSwitching = function onAudioTrackSwitching(event, data) {
                var fromAltAudio = this.altAudio;
                var altAudio = !!data.url;
                var trackId = data.id;
                if (!altAudio) {
                  if (this.mediaBuffer !== this.media) {
                    this.log("Switching on main audio, use media.buffered to schedule main fragment loading");
                    this.mediaBuffer = this.media;
                    var fragCurrent = this.fragCurrent;
                    if (fragCurrent !== null && fragCurrent !== void 0 && fragCurrent.loader) {
                      this.log("Switching to main audio track, cancel main fragment load");
                      fragCurrent.loader.abort();
                    }
                    this.resetTransmuxer();
                    this.resetLoadingState();
                  } else if (this.audioOnly) {
                    this.resetTransmuxer();
                  }
                  var hls = this.hls;
                  if (fromAltAudio) {
                    hls.trigger(_events__WEBPACK_IMPORTED_MODULE_3__["Events"].BUFFER_FLUSHING, {
                      startOffset: 0,
                      endOffset: Number.POSITIVE_INFINITY,
                      type: "audio"
                    });
                  }
                  hls.trigger(_events__WEBPACK_IMPORTED_MODULE_3__["Events"].AUDIO_TRACK_SWITCHED, {
                    id: trackId
                  });
                }
              };
              _proto.onAudioTrackSwitched = function onAudioTrackSwitched(event, data) {
                var trackId = data.id;
                var altAudio = !!this.hls.audioTracks[trackId].url;
                if (altAudio) {
                  var videoBuffer = this.videoBuffer;
                  if (videoBuffer && this.mediaBuffer !== videoBuffer) {
                    this.log("Switching on alternate audio, use video.buffered to schedule main fragment loading");
                    this.mediaBuffer = videoBuffer;
                  }
                }
                this.altAudio = altAudio;
                this.tick();
              };
              _proto.onBufferCreated = function onBufferCreated(event, data) {
                var tracks = data.tracks;
                var mediaTrack;
                var name;
                var alternate = false;
                for (var type in tracks) {
                  var track = tracks[type];
                  if (track.id === "main") {
                    name = type;
                    mediaTrack = track;
                    if (type === "video") {
                      var videoTrack = tracks[type];
                      if (videoTrack) {
                        this.videoBuffer = videoTrack.buffer;
                      }
                    }
                  } else {
                    alternate = true;
                  }
                }
                if (alternate && mediaTrack) {
                  this.log("Alternate track found, use " + name + ".buffered to schedule main fragment loading");
                  this.mediaBuffer = mediaTrack.buffer;
                } else {
                  this.mediaBuffer = this.media;
                }
              };
              _proto.onFragBuffered = function onFragBuffered(event, data) {
                var frag = data.frag, part = data.part;
                if (frag && frag.type !== _types_loader__WEBPACK_IMPORTED_MODULE_6__["PlaylistLevelType"].MAIN) {
                  return;
                }
                if (this.fragContextChanged(frag)) {
                  this.warn("Fragment " + frag.sn + (part ? " p: " + part.index : "") + " of level " + frag.level + " finished buffering, but was aborted. state: " + this.state);
                  if (this.state === _base_stream_controller__WEBPACK_IMPORTED_MODULE_1__["State"].PARSED) {
                    this.state = _base_stream_controller__WEBPACK_IMPORTED_MODULE_1__["State"].IDLE;
                  }
                  return;
                }
                var stats = part ? part.stats : frag.stats;
                this.fragLastKbps = Math.round(8 * stats.total / (stats.buffering.end - stats.loading.first));
                if (frag.sn !== "initSegment") {
                  this.fragPrevious = frag;
                }
                this.fragBufferedComplete(frag, part);
              };
              _proto.onError = function onError(event, data) {
                switch (data.details) {
                  case _errors__WEBPACK_IMPORTED_MODULE_11__["ErrorDetails"].FRAG_LOAD_ERROR:
                  case _errors__WEBPACK_IMPORTED_MODULE_11__["ErrorDetails"].FRAG_LOAD_TIMEOUT:
                  case _errors__WEBPACK_IMPORTED_MODULE_11__["ErrorDetails"].KEY_LOAD_ERROR:
                  case _errors__WEBPACK_IMPORTED_MODULE_11__["ErrorDetails"].KEY_LOAD_TIMEOUT:
                    this.onFragmentOrKeyLoadError(_types_loader__WEBPACK_IMPORTED_MODULE_6__["PlaylistLevelType"].MAIN, data);
                    break;
                  case _errors__WEBPACK_IMPORTED_MODULE_11__["ErrorDetails"].LEVEL_LOAD_ERROR:
                  case _errors__WEBPACK_IMPORTED_MODULE_11__["ErrorDetails"].LEVEL_LOAD_TIMEOUT:
                    if (this.state !== _base_stream_controller__WEBPACK_IMPORTED_MODULE_1__["State"].ERROR) {
                      if (data.fatal) {
                        this.warn("" + data.details);
                        this.state = _base_stream_controller__WEBPACK_IMPORTED_MODULE_1__["State"].ERROR;
                      } else {
                        if (!data.levelRetry && this.state === _base_stream_controller__WEBPACK_IMPORTED_MODULE_1__["State"].WAITING_LEVEL) {
                          this.state = _base_stream_controller__WEBPACK_IMPORTED_MODULE_1__["State"].IDLE;
                        }
                      }
                    }
                    break;
                  case _errors__WEBPACK_IMPORTED_MODULE_11__["ErrorDetails"].BUFFER_FULL_ERROR:
                    if (data.parent === "main" && (this.state === _base_stream_controller__WEBPACK_IMPORTED_MODULE_1__["State"].PARSING || this.state === _base_stream_controller__WEBPACK_IMPORTED_MODULE_1__["State"].PARSED)) {
                      var flushBuffer = true;
                      var bufferedInfo = this.getFwdBufferInfo(this.media, _types_loader__WEBPACK_IMPORTED_MODULE_6__["PlaylistLevelType"].MAIN);
                      if (bufferedInfo && bufferedInfo.len > 0.5) {
                        flushBuffer = !this.reduceMaxBufferLength(bufferedInfo.len);
                      }
                      if (flushBuffer) {
                        this.warn("buffer full error also media.currentTime is not buffered, flush main");
                        this.immediateLevelSwitch();
                      }
                      this.resetLoadingState();
                    }
                    break;
                  default:
                    break;
                }
              };
              _proto.checkBuffer = function checkBuffer() {
                var media2 = this.media, gapController = this.gapController;
                if (!media2 || !gapController || !media2.readyState) {
                  return;
                }
                var buffered = _utils_buffer_helper__WEBPACK_IMPORTED_MODULE_4__["BufferHelper"].getBuffered(media2);
                if (!this.loadedmetadata && buffered.length) {
                  this.loadedmetadata = true;
                  this.seekToStartPos();
                } else {
                  gapController.poll(this.lastCurrentTime);
                }
                this.lastCurrentTime = media2.currentTime;
              };
              _proto.onFragLoadEmergencyAborted = function onFragLoadEmergencyAborted() {
                this.state = _base_stream_controller__WEBPACK_IMPORTED_MODULE_1__["State"].IDLE;
                if (!this.loadedmetadata) {
                  this.startFragRequested = false;
                  this.nextLoadPosition = this.startPosition;
                }
                this.tickImmediate();
              };
              _proto.onBufferFlushed = function onBufferFlushed(event, _ref) {
                var type = _ref.type;
                if (type !== _loader_fragment__WEBPACK_IMPORTED_MODULE_7__["ElementaryStreamTypes"].AUDIO || this.audioOnly && !this.altAudio) {
                  var media2 = (type === _loader_fragment__WEBPACK_IMPORTED_MODULE_7__["ElementaryStreamTypes"].VIDEO ? this.videoBuffer : this.mediaBuffer) || this.media;
                  this.afterBufferFlushed(media2, type, _types_loader__WEBPACK_IMPORTED_MODULE_6__["PlaylistLevelType"].MAIN);
                }
              };
              _proto.onLevelsUpdated = function onLevelsUpdated(event, data) {
                this.levels = data.levels;
              };
              _proto.swapAudioCodec = function swapAudioCodec() {
                this.audioCodecSwap = !this.audioCodecSwap;
              };
              _proto.seekToStartPos = function seekToStartPos() {
                var media2 = this.media;
                var currentTime = media2.currentTime;
                var startPosition = this.startPosition;
                if (startPosition >= 0 && currentTime < startPosition) {
                  if (media2.seeking) {
                    _utils_logger__WEBPACK_IMPORTED_MODULE_12__["logger"].log("could not seek to " + startPosition + ", already seeking at " + currentTime);
                    return;
                  }
                  var buffered = _utils_buffer_helper__WEBPACK_IMPORTED_MODULE_4__["BufferHelper"].getBuffered(media2);
                  var bufferStart = buffered.length ? buffered.start(0) : 0;
                  var delta = bufferStart - startPosition;
                  if (delta > 0 && (delta < this.config.maxBufferHole || delta < this.config.maxFragLookUpTolerance)) {
                    _utils_logger__WEBPACK_IMPORTED_MODULE_12__["logger"].log("adjusting start position by " + delta + " to match buffer start");
                    startPosition += delta;
                    this.startPosition = startPosition;
                  }
                  this.log("seek to target start position " + startPosition + " from current time " + currentTime);
                  media2.currentTime = startPosition;
                }
              };
              _proto._getAudioCodec = function _getAudioCodec(currentLevel) {
                var audioCodec = this.config.defaultAudioCodec || currentLevel.audioCodec;
                if (this.audioCodecSwap && audioCodec) {
                  this.log("Swapping audio codec");
                  if (audioCodec.indexOf("mp4a.40.5") !== -1) {
                    audioCodec = "mp4a.40.2";
                  } else {
                    audioCodec = "mp4a.40.5";
                  }
                }
                return audioCodec;
              };
              _proto._loadBitrateTestFrag = function _loadBitrateTestFrag(frag) {
                var _this2 = this;
                this._doFragLoad(frag).then(function(data) {
                  var hls = _this2.hls;
                  if (!data || hls.nextLoadLevel || _this2.fragContextChanged(frag)) {
                    return;
                  }
                  _this2.fragLoadError = 0;
                  _this2.state = _base_stream_controller__WEBPACK_IMPORTED_MODULE_1__["State"].IDLE;
                  _this2.startFragRequested = false;
                  _this2.bitrateTest = false;
                  var stats = frag.stats;
                  stats.parsing.start = stats.parsing.end = stats.buffering.start = stats.buffering.end = self.performance.now();
                  hls.trigger(_events__WEBPACK_IMPORTED_MODULE_3__["Events"].FRAG_LOADED, data);
                });
              };
              _proto._handleTransmuxComplete = function _handleTransmuxComplete(transmuxResult) {
                var _id3$samples;
                var id = "main";
                var hls = this.hls;
                var remuxResult = transmuxResult.remuxResult, chunkMeta = transmuxResult.chunkMeta;
                var context = this.getCurrentContext(chunkMeta);
                if (!context) {
                  this.warn("The loading context changed while buffering fragment " + chunkMeta.sn + " of level " + chunkMeta.level + ". This chunk will not be buffered.");
                  this.resetLiveStartWhenNotLoaded(chunkMeta.level);
                  return;
                }
                var frag = context.frag, part = context.part, level = context.level;
                var video = remuxResult.video, text = remuxResult.text, id3 = remuxResult.id3, initSegment = remuxResult.initSegment;
                var audio = this.altAudio ? void 0 : remuxResult.audio;
                if (this.fragContextChanged(frag)) {
                  return;
                }
                this.state = _base_stream_controller__WEBPACK_IMPORTED_MODULE_1__["State"].PARSING;
                if (initSegment) {
                  if (initSegment.tracks) {
                    this._bufferInitSegment(level, initSegment.tracks, frag, chunkMeta);
                    hls.trigger(_events__WEBPACK_IMPORTED_MODULE_3__["Events"].FRAG_PARSING_INIT_SEGMENT, {
                      frag,
                      id,
                      tracks: initSegment.tracks
                    });
                  }
                  var initPTS = initSegment.initPTS;
                  var timescale = initSegment.timescale;
                  if (Object(_home_runner_work_hls_js_hls_js_src_polyfills_number__WEBPACK_IMPORTED_MODULE_0__["isFiniteNumber"])(initPTS)) {
                    this.initPTS[frag.cc] = initPTS;
                    hls.trigger(_events__WEBPACK_IMPORTED_MODULE_3__["Events"].INIT_PTS_FOUND, {
                      frag,
                      id,
                      initPTS,
                      timescale
                    });
                  }
                }
                if (video && remuxResult.independent !== false) {
                  if (level.details) {
                    var startPTS = video.startPTS, endPTS = video.endPTS, startDTS = video.startDTS, endDTS = video.endDTS;
                    if (part) {
                      part.elementaryStreams[video.type] = {
                        startPTS,
                        endPTS,
                        startDTS,
                        endDTS
                      };
                    } else {
                      if (video.firstKeyFrame && video.independent) {
                        this.couldBacktrack = true;
                      }
                      if (video.dropped && video.independent) {
                        var pos = this.getLoadPosition() + this.config.maxBufferHole;
                        if (pos < startPTS) {
                          this.backtrack(frag);
                          return;
                        }
                        frag.setElementaryStreamInfo(video.type, frag.start, endPTS, frag.start, endDTS, true);
                      }
                    }
                    frag.setElementaryStreamInfo(video.type, startPTS, endPTS, startDTS, endDTS);
                    this.bufferFragmentData(video, frag, part, chunkMeta);
                  }
                } else if (remuxResult.independent === false) {
                  this.backtrack(frag);
                  return;
                }
                if (audio) {
                  var _startPTS = audio.startPTS, _endPTS = audio.endPTS, _startDTS = audio.startDTS, _endDTS = audio.endDTS;
                  if (part) {
                    part.elementaryStreams[_loader_fragment__WEBPACK_IMPORTED_MODULE_7__["ElementaryStreamTypes"].AUDIO] = {
                      startPTS: _startPTS,
                      endPTS: _endPTS,
                      startDTS: _startDTS,
                      endDTS: _endDTS
                    };
                  }
                  frag.setElementaryStreamInfo(_loader_fragment__WEBPACK_IMPORTED_MODULE_7__["ElementaryStreamTypes"].AUDIO, _startPTS, _endPTS, _startDTS, _endDTS);
                  this.bufferFragmentData(audio, frag, part, chunkMeta);
                }
                if (id3 !== null && id3 !== void 0 && (_id3$samples = id3.samples) !== null && _id3$samples !== void 0 && _id3$samples.length) {
                  var emittedID3 = {
                    frag,
                    id,
                    samples: id3.samples
                  };
                  hls.trigger(_events__WEBPACK_IMPORTED_MODULE_3__["Events"].FRAG_PARSING_METADATA, emittedID3);
                }
                if (text) {
                  var emittedText = {
                    frag,
                    id,
                    samples: text.samples
                  };
                  hls.trigger(_events__WEBPACK_IMPORTED_MODULE_3__["Events"].FRAG_PARSING_USERDATA, emittedText);
                }
              };
              _proto._bufferInitSegment = function _bufferInitSegment(currentLevel, tracks, frag, chunkMeta) {
                var _this3 = this;
                if (this.state !== _base_stream_controller__WEBPACK_IMPORTED_MODULE_1__["State"].PARSING) {
                  return;
                }
                this.audioOnly = !!tracks.audio && !tracks.video;
                if (this.altAudio && !this.audioOnly) {
                  delete tracks.audio;
                }
                var audio = tracks.audio, video = tracks.video, audiovideo = tracks.audiovideo;
                if (audio) {
                  var audioCodec = currentLevel.audioCodec;
                  var ua = navigator.userAgent.toLowerCase();
                  if (this.audioCodecSwitch) {
                    if (audioCodec) {
                      if (audioCodec.indexOf("mp4a.40.5") !== -1) {
                        audioCodec = "mp4a.40.2";
                      } else {
                        audioCodec = "mp4a.40.5";
                      }
                    }
                    if (audio.metadata.channelCount !== 1 && ua.indexOf("firefox") === -1) {
                      audioCodec = "mp4a.40.5";
                    }
                  }
                  if (ua.indexOf("android") !== -1 && audio.container !== "audio/mpeg") {
                    audioCodec = "mp4a.40.2";
                    this.log("Android: force audio codec to " + audioCodec);
                  }
                  if (currentLevel.audioCodec && currentLevel.audioCodec !== audioCodec) {
                    this.log('Swapping manifest audio codec "' + currentLevel.audioCodec + '" for "' + audioCodec + '"');
                  }
                  audio.levelCodec = audioCodec;
                  audio.id = "main";
                  this.log("Init audio buffer, container:" + audio.container + ", codecs[selected/level/parsed]=[" + (audioCodec || "") + "/" + (currentLevel.audioCodec || "") + "/" + audio.codec + "]");
                }
                if (video) {
                  video.levelCodec = currentLevel.videoCodec;
                  video.id = "main";
                  this.log("Init video buffer, container:" + video.container + ", codecs[level/parsed]=[" + (currentLevel.videoCodec || "") + "/" + video.codec + "]");
                }
                if (audiovideo) {
                  this.log("Init audiovideo buffer, container:" + audiovideo.container + ", codecs[level/parsed]=[" + (currentLevel.attrs.CODECS || "") + "/" + audiovideo.codec + "]");
                }
                this.hls.trigger(_events__WEBPACK_IMPORTED_MODULE_3__["Events"].BUFFER_CODECS, tracks);
                Object.keys(tracks).forEach(function(trackName) {
                  var track = tracks[trackName];
                  var initSegment = track.initSegment;
                  if (initSegment !== null && initSegment !== void 0 && initSegment.byteLength) {
                    _this3.hls.trigger(_events__WEBPACK_IMPORTED_MODULE_3__["Events"].BUFFER_APPENDING, {
                      type: trackName,
                      data: initSegment,
                      frag,
                      part: null,
                      chunkMeta,
                      parent: frag.type
                    });
                  }
                });
                this.tick();
              };
              _proto.backtrack = function backtrack(frag) {
                this.couldBacktrack = true;
                this.resetTransmuxer();
                this.flushBufferGap(frag);
                var data = this.fragmentTracker.backtrack(frag);
                this.fragPrevious = null;
                this.nextLoadPosition = frag.start;
                if (data) {
                  this.resetFragmentLoading(frag);
                } else {
                  this.state = _base_stream_controller__WEBPACK_IMPORTED_MODULE_1__["State"].BACKTRACKING;
                }
              };
              _proto.checkFragmentChanged = function checkFragmentChanged() {
                var video = this.media;
                var fragPlayingCurrent = null;
                if (video && video.readyState > 1 && video.seeking === false) {
                  var currentTime = video.currentTime;
                  if (_utils_buffer_helper__WEBPACK_IMPORTED_MODULE_4__["BufferHelper"].isBuffered(video, currentTime)) {
                    fragPlayingCurrent = this.getAppendedFrag(currentTime);
                  } else if (_utils_buffer_helper__WEBPACK_IMPORTED_MODULE_4__["BufferHelper"].isBuffered(video, currentTime + 0.1)) {
                    fragPlayingCurrent = this.getAppendedFrag(currentTime + 0.1);
                  }
                  if (fragPlayingCurrent) {
                    var fragPlaying = this.fragPlaying;
                    var fragCurrentLevel = fragPlayingCurrent.level;
                    if (!fragPlaying || fragPlayingCurrent.sn !== fragPlaying.sn || fragPlaying.level !== fragCurrentLevel || fragPlayingCurrent.urlId !== fragPlaying.urlId) {
                      this.hls.trigger(_events__WEBPACK_IMPORTED_MODULE_3__["Events"].FRAG_CHANGED, {
                        frag: fragPlayingCurrent
                      });
                      if (!fragPlaying || fragPlaying.level !== fragCurrentLevel) {
                        this.hls.trigger(_events__WEBPACK_IMPORTED_MODULE_3__["Events"].LEVEL_SWITCHED, {
                          level: fragCurrentLevel
                        });
                      }
                      this.fragPlaying = fragPlayingCurrent;
                    }
                  }
                }
              };
              _createClass(StreamController2, [{
                key: "nextLevel",
                get: function get() {
                  var frag = this.nextBufferedFrag;
                  if (frag) {
                    return frag.level;
                  } else {
                    return -1;
                  }
                }
              }, {
                key: "currentLevel",
                get: function get() {
                  var media2 = this.media;
                  if (media2) {
                    var fragPlayingCurrent = this.getAppendedFrag(media2.currentTime);
                    if (fragPlayingCurrent) {
                      return fragPlayingCurrent.level;
                    }
                  }
                  return -1;
                }
              }, {
                key: "nextBufferedFrag",
                get: function get() {
                  var media2 = this.media;
                  if (media2) {
                    var fragPlayingCurrent = this.getAppendedFrag(media2.currentTime);
                    return this.followingBufferedFrag(fragPlayingCurrent);
                  } else {
                    return null;
                  }
                }
              }, {
                key: "forceStartLoad",
                get: function get() {
                  return this._forceStartLoad;
                }
              }]);
              return StreamController2;
            }(_base_stream_controller__WEBPACK_IMPORTED_MODULE_1__["default"]);
          },
          "./src/controller/subtitle-stream-controller.ts": function(module2, __webpack_exports__, __webpack_require__) {
            "use strict";
            __webpack_require__.r(__webpack_exports__);
            __webpack_require__.d(__webpack_exports__, "SubtitleStreamController", function() {
              return SubtitleStreamController;
            });
            var _events__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("./src/events.ts");
            var _utils_buffer_helper__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("./src/utils/buffer-helper.ts");
            var _fragment_finders__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__("./src/controller/fragment-finders.ts");
            var _utils_discontinuities__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__("./src/utils/discontinuities.ts");
            var _level_helper__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__("./src/controller/level-helper.ts");
            var _fragment_tracker__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__("./src/controller/fragment-tracker.ts");
            var _base_stream_controller__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__("./src/controller/base-stream-controller.ts");
            var _types_loader__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__("./src/types/loader.ts");
            var _types_level__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__("./src/types/level.ts");
            function _defineProperties(target, props) {
              for (var i3 = 0; i3 < props.length; i3++) {
                var descriptor = props[i3];
                descriptor.enumerable = descriptor.enumerable || false;
                descriptor.configurable = true;
                if ("value" in descriptor)
                  descriptor.writable = true;
                Object.defineProperty(target, descriptor.key, descriptor);
              }
            }
            function _createClass(Constructor, protoProps, staticProps) {
              if (protoProps)
                _defineProperties(Constructor.prototype, protoProps);
              if (staticProps)
                _defineProperties(Constructor, staticProps);
              return Constructor;
            }
            function _inheritsLoose(subClass, superClass) {
              subClass.prototype = Object.create(superClass.prototype);
              subClass.prototype.constructor = subClass;
              _setPrototypeOf(subClass, superClass);
            }
            function _setPrototypeOf(o3, p5) {
              _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf2(o4, p6) {
                o4.__proto__ = p6;
                return o4;
              };
              return _setPrototypeOf(o3, p5);
            }
            var TICK_INTERVAL = 500;
            var SubtitleStreamController = /* @__PURE__ */ function(_BaseStreamController) {
              _inheritsLoose(SubtitleStreamController2, _BaseStreamController);
              function SubtitleStreamController2(hls, fragmentTracker) {
                var _this;
                _this = _BaseStreamController.call(this, hls, fragmentTracker, "[subtitle-stream-controller]") || this;
                _this.levels = [];
                _this.currentTrackId = -1;
                _this.tracksBuffered = [];
                _this.mainDetails = null;
                _this._registerListeners();
                return _this;
              }
              var _proto = SubtitleStreamController2.prototype;
              _proto.onHandlerDestroying = function onHandlerDestroying() {
                this._unregisterListeners();
                this.mainDetails = null;
              };
              _proto._registerListeners = function _registerListeners() {
                var hls = this.hls;
                hls.on(_events__WEBPACK_IMPORTED_MODULE_0__["Events"].MEDIA_ATTACHED, this.onMediaAttached, this);
                hls.on(_events__WEBPACK_IMPORTED_MODULE_0__["Events"].MEDIA_DETACHING, this.onMediaDetaching, this);
                hls.on(_events__WEBPACK_IMPORTED_MODULE_0__["Events"].MANIFEST_LOADING, this.onManifestLoading, this);
                hls.on(_events__WEBPACK_IMPORTED_MODULE_0__["Events"].LEVEL_LOADED, this.onLevelLoaded, this);
                hls.on(_events__WEBPACK_IMPORTED_MODULE_0__["Events"].ERROR, this.onError, this);
                hls.on(_events__WEBPACK_IMPORTED_MODULE_0__["Events"].SUBTITLE_TRACKS_UPDATED, this.onSubtitleTracksUpdated, this);
                hls.on(_events__WEBPACK_IMPORTED_MODULE_0__["Events"].SUBTITLE_TRACK_SWITCH, this.onSubtitleTrackSwitch, this);
                hls.on(_events__WEBPACK_IMPORTED_MODULE_0__["Events"].SUBTITLE_TRACK_LOADED, this.onSubtitleTrackLoaded, this);
                hls.on(_events__WEBPACK_IMPORTED_MODULE_0__["Events"].SUBTITLE_FRAG_PROCESSED, this.onSubtitleFragProcessed, this);
                hls.on(_events__WEBPACK_IMPORTED_MODULE_0__["Events"].BUFFER_FLUSHING, this.onBufferFlushing, this);
              };
              _proto._unregisterListeners = function _unregisterListeners() {
                var hls = this.hls;
                hls.off(_events__WEBPACK_IMPORTED_MODULE_0__["Events"].MEDIA_ATTACHED, this.onMediaAttached, this);
                hls.off(_events__WEBPACK_IMPORTED_MODULE_0__["Events"].MEDIA_DETACHING, this.onMediaDetaching, this);
                hls.off(_events__WEBPACK_IMPORTED_MODULE_0__["Events"].MANIFEST_LOADING, this.onManifestLoading, this);
                hls.off(_events__WEBPACK_IMPORTED_MODULE_0__["Events"].LEVEL_LOADED, this.onLevelLoaded, this);
                hls.off(_events__WEBPACK_IMPORTED_MODULE_0__["Events"].ERROR, this.onError, this);
                hls.off(_events__WEBPACK_IMPORTED_MODULE_0__["Events"].SUBTITLE_TRACKS_UPDATED, this.onSubtitleTracksUpdated, this);
                hls.off(_events__WEBPACK_IMPORTED_MODULE_0__["Events"].SUBTITLE_TRACK_SWITCH, this.onSubtitleTrackSwitch, this);
                hls.off(_events__WEBPACK_IMPORTED_MODULE_0__["Events"].SUBTITLE_TRACK_LOADED, this.onSubtitleTrackLoaded, this);
                hls.off(_events__WEBPACK_IMPORTED_MODULE_0__["Events"].SUBTITLE_FRAG_PROCESSED, this.onSubtitleFragProcessed, this);
                hls.off(_events__WEBPACK_IMPORTED_MODULE_0__["Events"].BUFFER_FLUSHING, this.onBufferFlushing, this);
              };
              _proto.startLoad = function startLoad() {
                this.stopLoad();
                this.state = _base_stream_controller__WEBPACK_IMPORTED_MODULE_6__["State"].IDLE;
                this.setInterval(TICK_INTERVAL);
                this.tick();
              };
              _proto.onManifestLoading = function onManifestLoading() {
                this.mainDetails = null;
                this.fragmentTracker.removeAllFragments();
              };
              _proto.onLevelLoaded = function onLevelLoaded(event, data) {
                this.mainDetails = data.details;
              };
              _proto.onSubtitleFragProcessed = function onSubtitleFragProcessed(event, data) {
                var frag = data.frag, success = data.success;
                this.fragPrevious = frag;
                this.state = _base_stream_controller__WEBPACK_IMPORTED_MODULE_6__["State"].IDLE;
                if (!success) {
                  return;
                }
                var buffered = this.tracksBuffered[this.currentTrackId];
                if (!buffered) {
                  return;
                }
                var timeRange;
                var fragStart = frag.start;
                for (var i3 = 0; i3 < buffered.length; i3++) {
                  if (fragStart >= buffered[i3].start && fragStart <= buffered[i3].end) {
                    timeRange = buffered[i3];
                    break;
                  }
                }
                var fragEnd = frag.start + frag.duration;
                if (timeRange) {
                  timeRange.end = fragEnd;
                } else {
                  timeRange = {
                    start: fragStart,
                    end: fragEnd
                  };
                  buffered.push(timeRange);
                }
                this.fragmentTracker.fragBuffered(frag);
              };
              _proto.onBufferFlushing = function onBufferFlushing(event, data) {
                var startOffset = data.startOffset, endOffset = data.endOffset;
                if (startOffset === 0 && endOffset !== Number.POSITIVE_INFINITY) {
                  var currentTrackId = this.currentTrackId, levels = this.levels;
                  if (!levels.length || !levels[currentTrackId] || !levels[currentTrackId].details) {
                    return;
                  }
                  var trackDetails = levels[currentTrackId].details;
                  var targetDuration = trackDetails.targetduration;
                  var endOffsetSubtitles = endOffset - targetDuration;
                  if (endOffsetSubtitles <= 0) {
                    return;
                  }
                  data.endOffsetSubtitles = Math.max(0, endOffsetSubtitles);
                  this.tracksBuffered.forEach(function(buffered) {
                    for (var i3 = 0; i3 < buffered.length; ) {
                      if (buffered[i3].end <= endOffsetSubtitles) {
                        buffered.shift();
                        continue;
                      } else if (buffered[i3].start < endOffsetSubtitles) {
                        buffered[i3].start = endOffsetSubtitles;
                      } else {
                        break;
                      }
                      i3++;
                    }
                  });
                  this.fragmentTracker.removeFragmentsInRange(startOffset, endOffsetSubtitles, _types_loader__WEBPACK_IMPORTED_MODULE_7__["PlaylistLevelType"].SUBTITLE);
                }
              };
              _proto.onError = function onError(event, data) {
                var _this$fragCurrent;
                var frag = data.frag;
                if (!frag || frag.type !== _types_loader__WEBPACK_IMPORTED_MODULE_7__["PlaylistLevelType"].SUBTITLE) {
                  return;
                }
                if ((_this$fragCurrent = this.fragCurrent) !== null && _this$fragCurrent !== void 0 && _this$fragCurrent.loader) {
                  this.fragCurrent.loader.abort();
                }
                this.state = _base_stream_controller__WEBPACK_IMPORTED_MODULE_6__["State"].IDLE;
              };
              _proto.onSubtitleTracksUpdated = function onSubtitleTracksUpdated(event, _ref) {
                var _this2 = this;
                var subtitleTracks = _ref.subtitleTracks;
                this.tracksBuffered = [];
                this.levels = subtitleTracks.map(function(mediaPlaylist) {
                  return new _types_level__WEBPACK_IMPORTED_MODULE_8__["Level"](mediaPlaylist);
                });
                this.fragmentTracker.removeAllFragments();
                this.fragPrevious = null;
                this.levels.forEach(function(level) {
                  _this2.tracksBuffered[level.id] = [];
                });
                this.mediaBuffer = null;
              };
              _proto.onSubtitleTrackSwitch = function onSubtitleTrackSwitch(event, data) {
                this.currentTrackId = data.id;
                if (!this.levels.length || this.currentTrackId === -1) {
                  this.clearInterval();
                  return;
                }
                var currentTrack = this.levels[this.currentTrackId];
                if (currentTrack !== null && currentTrack !== void 0 && currentTrack.details) {
                  this.mediaBuffer = this.mediaBufferTimeRanges;
                } else {
                  this.mediaBuffer = null;
                }
                if (currentTrack) {
                  this.setInterval(TICK_INTERVAL);
                }
              };
              _proto.onSubtitleTrackLoaded = function onSubtitleTrackLoaded(event, data) {
                var _track$details;
                var newDetails = data.details, trackId = data.id;
                var currentTrackId = this.currentTrackId, levels = this.levels;
                if (!levels.length) {
                  return;
                }
                var track = levels[currentTrackId];
                if (trackId >= levels.length || trackId !== currentTrackId || !track) {
                  return;
                }
                this.mediaBuffer = this.mediaBufferTimeRanges;
                if (newDetails.live || (_track$details = track.details) !== null && _track$details !== void 0 && _track$details.live) {
                  var mainDetails = this.mainDetails;
                  if (newDetails.deltaUpdateFailed || !mainDetails) {
                    return;
                  }
                  var mainSlidingStartFragment = mainDetails.fragments[0];
                  if (!track.details) {
                    if (newDetails.hasProgramDateTime && mainDetails.hasProgramDateTime) {
                      Object(_utils_discontinuities__WEBPACK_IMPORTED_MODULE_3__["alignMediaPlaylistByPDT"])(newDetails, mainDetails);
                    } else if (mainSlidingStartFragment) {
                      Object(_level_helper__WEBPACK_IMPORTED_MODULE_4__["addSliding"])(newDetails, mainSlidingStartFragment.start);
                    }
                  } else {
                    var sliding = this.alignPlaylists(newDetails, track.details);
                    if (sliding === 0 && mainSlidingStartFragment) {
                      Object(_level_helper__WEBPACK_IMPORTED_MODULE_4__["addSliding"])(newDetails, mainSlidingStartFragment.start);
                    }
                  }
                }
                track.details = newDetails;
                this.levelLastLoaded = trackId;
                this.tick();
                if (newDetails.live && !this.fragCurrent && this.media && this.state === _base_stream_controller__WEBPACK_IMPORTED_MODULE_6__["State"].IDLE) {
                  var foundFrag = Object(_fragment_finders__WEBPACK_IMPORTED_MODULE_2__["findFragmentByPTS"])(null, newDetails.fragments, this.media.currentTime, 0);
                  if (!foundFrag) {
                    this.warn("Subtitle playlist not aligned with playback");
                    track.details = void 0;
                  }
                }
              };
              _proto._handleFragmentLoadComplete = function _handleFragmentLoadComplete(fragLoadedData) {
                var frag = fragLoadedData.frag, payload = fragLoadedData.payload;
                var decryptData = frag.decryptdata;
                var hls = this.hls;
                if (this.fragContextChanged(frag)) {
                  return;
                }
                if (payload && payload.byteLength > 0 && decryptData && decryptData.key && decryptData.iv && decryptData.method === "AES-128") {
                  var startTime = performance.now();
                  this.decrypter.webCryptoDecrypt(new Uint8Array(payload), decryptData.key.buffer, decryptData.iv.buffer).then(function(decryptedData) {
                    var endTime = performance.now();
                    hls.trigger(_events__WEBPACK_IMPORTED_MODULE_0__["Events"].FRAG_DECRYPTED, {
                      frag,
                      payload: decryptedData,
                      stats: {
                        tstart: startTime,
                        tdecrypt: endTime
                      }
                    });
                  });
                }
              };
              _proto.doTick = function doTick() {
                if (!this.media) {
                  this.state = _base_stream_controller__WEBPACK_IMPORTED_MODULE_6__["State"].IDLE;
                  return;
                }
                if (this.state === _base_stream_controller__WEBPACK_IMPORTED_MODULE_6__["State"].IDLE) {
                  var _foundFrag;
                  var currentTrackId = this.currentTrackId, levels = this.levels;
                  if (!levels.length || !levels[currentTrackId] || !levels[currentTrackId].details) {
                    return;
                  }
                  var trackDetails = levels[currentTrackId].details;
                  var targetDuration = trackDetails.targetduration;
                  var config2 = this.config, media2 = this.media;
                  var bufferedInfo = _utils_buffer_helper__WEBPACK_IMPORTED_MODULE_1__["BufferHelper"].bufferedInfo(this.mediaBufferTimeRanges, media2.currentTime - targetDuration, config2.maxBufferHole);
                  var targetBufferTime = bufferedInfo.end, bufferLen = bufferedInfo.len;
                  var maxBufLen = this.getMaxBufferLength() + targetDuration;
                  if (bufferLen > maxBufLen) {
                    return;
                  }
                  console.assert(trackDetails, "Subtitle track details are defined on idle subtitle stream controller tick");
                  var fragments = trackDetails.fragments;
                  var fragLen = fragments.length;
                  var end = trackDetails.edge;
                  var foundFrag;
                  var fragPrevious = this.fragPrevious;
                  if (targetBufferTime < end) {
                    var maxFragLookUpTolerance = config2.maxFragLookUpTolerance;
                    foundFrag = Object(_fragment_finders__WEBPACK_IMPORTED_MODULE_2__["findFragmentByPTS"])(fragPrevious, fragments, targetBufferTime, maxFragLookUpTolerance);
                    if (!foundFrag && fragPrevious && fragPrevious.start < fragments[0].start) {
                      foundFrag = fragments[0];
                    }
                  } else {
                    foundFrag = fragments[fragLen - 1];
                  }
                  if ((_foundFrag = foundFrag) !== null && _foundFrag !== void 0 && _foundFrag.encrypted) {
                    this.loadKey(foundFrag, trackDetails);
                  } else if (foundFrag && this.fragmentTracker.getState(foundFrag) === _fragment_tracker__WEBPACK_IMPORTED_MODULE_5__["FragmentState"].NOT_LOADED) {
                    this.loadFragment(foundFrag, trackDetails, targetBufferTime);
                  }
                }
              };
              _proto.loadFragment = function loadFragment(frag, levelDetails, targetBufferTime) {
                this.fragCurrent = frag;
                _BaseStreamController.prototype.loadFragment.call(this, frag, levelDetails, targetBufferTime);
              };
              _createClass(SubtitleStreamController2, [{
                key: "mediaBufferTimeRanges",
                get: function get() {
                  return this.tracksBuffered[this.currentTrackId] || [];
                }
              }]);
              return SubtitleStreamController2;
            }(_base_stream_controller__WEBPACK_IMPORTED_MODULE_6__["default"]);
          },
          "./src/controller/subtitle-track-controller.ts": function(module2, __webpack_exports__, __webpack_require__) {
            "use strict";
            __webpack_require__.r(__webpack_exports__);
            var _events__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("./src/events.ts");
            var _utils_texttrack_utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("./src/utils/texttrack-utils.ts");
            var _base_playlist_controller__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__("./src/controller/base-playlist-controller.ts");
            var _types_loader__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__("./src/types/loader.ts");
            function _defineProperties(target, props) {
              for (var i3 = 0; i3 < props.length; i3++) {
                var descriptor = props[i3];
                descriptor.enumerable = descriptor.enumerable || false;
                descriptor.configurable = true;
                if ("value" in descriptor)
                  descriptor.writable = true;
                Object.defineProperty(target, descriptor.key, descriptor);
              }
            }
            function _createClass(Constructor, protoProps, staticProps) {
              if (protoProps)
                _defineProperties(Constructor.prototype, protoProps);
              if (staticProps)
                _defineProperties(Constructor, staticProps);
              return Constructor;
            }
            function _inheritsLoose(subClass, superClass) {
              subClass.prototype = Object.create(superClass.prototype);
              subClass.prototype.constructor = subClass;
              _setPrototypeOf(subClass, superClass);
            }
            function _setPrototypeOf(o3, p5) {
              _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf2(o4, p6) {
                o4.__proto__ = p6;
                return o4;
              };
              return _setPrototypeOf(o3, p5);
            }
            var SubtitleTrackController = /* @__PURE__ */ function(_BasePlaylistControll) {
              _inheritsLoose(SubtitleTrackController2, _BasePlaylistControll);
              function SubtitleTrackController2(hls) {
                var _this;
                _this = _BasePlaylistControll.call(this, hls, "[subtitle-track-controller]") || this;
                _this.media = null;
                _this.tracks = [];
                _this.groupId = null;
                _this.tracksInGroup = [];
                _this.trackId = -1;
                _this.selectDefaultTrack = true;
                _this.queuedDefaultTrack = -1;
                _this.trackChangeListener = function() {
                  return _this.onTextTracksChanged();
                };
                _this.asyncPollTrackChange = function() {
                  return _this.pollTrackChange(0);
                };
                _this.useTextTrackPolling = false;
                _this.subtitlePollingInterval = -1;
                _this.subtitleDisplay = true;
                _this.registerListeners();
                return _this;
              }
              var _proto = SubtitleTrackController2.prototype;
              _proto.destroy = function destroy() {
                this.unregisterListeners();
                this.tracks.length = 0;
                this.tracksInGroup.length = 0;
                this.trackChangeListener = this.asyncPollTrackChange = null;
                _BasePlaylistControll.prototype.destroy.call(this);
              };
              _proto.registerListeners = function registerListeners() {
                var hls = this.hls;
                hls.on(_events__WEBPACK_IMPORTED_MODULE_0__["Events"].MEDIA_ATTACHED, this.onMediaAttached, this);
                hls.on(_events__WEBPACK_IMPORTED_MODULE_0__["Events"].MEDIA_DETACHING, this.onMediaDetaching, this);
                hls.on(_events__WEBPACK_IMPORTED_MODULE_0__["Events"].MANIFEST_LOADING, this.onManifestLoading, this);
                hls.on(_events__WEBPACK_IMPORTED_MODULE_0__["Events"].MANIFEST_PARSED, this.onManifestParsed, this);
                hls.on(_events__WEBPACK_IMPORTED_MODULE_0__["Events"].LEVEL_LOADING, this.onLevelLoading, this);
                hls.on(_events__WEBPACK_IMPORTED_MODULE_0__["Events"].LEVEL_SWITCHING, this.onLevelSwitching, this);
                hls.on(_events__WEBPACK_IMPORTED_MODULE_0__["Events"].SUBTITLE_TRACK_LOADED, this.onSubtitleTrackLoaded, this);
                hls.on(_events__WEBPACK_IMPORTED_MODULE_0__["Events"].ERROR, this.onError, this);
              };
              _proto.unregisterListeners = function unregisterListeners() {
                var hls = this.hls;
                hls.off(_events__WEBPACK_IMPORTED_MODULE_0__["Events"].MEDIA_ATTACHED, this.onMediaAttached, this);
                hls.off(_events__WEBPACK_IMPORTED_MODULE_0__["Events"].MEDIA_DETACHING, this.onMediaDetaching, this);
                hls.off(_events__WEBPACK_IMPORTED_MODULE_0__["Events"].MANIFEST_LOADING, this.onManifestLoading, this);
                hls.off(_events__WEBPACK_IMPORTED_MODULE_0__["Events"].MANIFEST_PARSED, this.onManifestParsed, this);
                hls.off(_events__WEBPACK_IMPORTED_MODULE_0__["Events"].LEVEL_LOADING, this.onLevelLoading, this);
                hls.off(_events__WEBPACK_IMPORTED_MODULE_0__["Events"].LEVEL_SWITCHING, this.onLevelSwitching, this);
                hls.off(_events__WEBPACK_IMPORTED_MODULE_0__["Events"].SUBTITLE_TRACK_LOADED, this.onSubtitleTrackLoaded, this);
                hls.off(_events__WEBPACK_IMPORTED_MODULE_0__["Events"].ERROR, this.onError, this);
              };
              _proto.onMediaAttached = function onMediaAttached(event, data) {
                this.media = data.media;
                if (!this.media) {
                  return;
                }
                if (this.queuedDefaultTrack > -1) {
                  this.subtitleTrack = this.queuedDefaultTrack;
                  this.queuedDefaultTrack = -1;
                }
                this.useTextTrackPolling = !(this.media.textTracks && "onchange" in this.media.textTracks);
                if (this.useTextTrackPolling) {
                  this.pollTrackChange(500);
                } else {
                  this.media.textTracks.addEventListener("change", this.asyncPollTrackChange);
                }
              };
              _proto.pollTrackChange = function pollTrackChange(timeout) {
                self.clearInterval(this.subtitlePollingInterval);
                this.subtitlePollingInterval = self.setInterval(this.trackChangeListener, timeout);
              };
              _proto.onMediaDetaching = function onMediaDetaching() {
                if (!this.media) {
                  return;
                }
                self.clearInterval(this.subtitlePollingInterval);
                if (!this.useTextTrackPolling) {
                  this.media.textTracks.removeEventListener("change", this.asyncPollTrackChange);
                }
                if (this.trackId > -1) {
                  this.queuedDefaultTrack = this.trackId;
                }
                var textTracks = filterSubtitleTracks(this.media.textTracks);
                textTracks.forEach(function(track) {
                  Object(_utils_texttrack_utils__WEBPACK_IMPORTED_MODULE_1__["clearCurrentCues"])(track);
                });
                this.subtitleTrack = -1;
                this.media = null;
              };
              _proto.onManifestLoading = function onManifestLoading() {
                this.tracks = [];
                this.groupId = null;
                this.tracksInGroup = [];
                this.trackId = -1;
                this.selectDefaultTrack = true;
              };
              _proto.onManifestParsed = function onManifestParsed(event, data) {
                this.tracks = data.subtitleTracks;
              };
              _proto.onSubtitleTrackLoaded = function onSubtitleTrackLoaded(event, data) {
                var id = data.id, details = data.details;
                var trackId = this.trackId;
                var currentTrack = this.tracksInGroup[trackId];
                if (!currentTrack) {
                  this.warn("Invalid subtitle track id " + id);
                  return;
                }
                var curDetails = currentTrack.details;
                currentTrack.details = data.details;
                this.log("subtitle track " + id + " loaded [" + details.startSN + "-" + details.endSN + "]");
                if (id === this.trackId) {
                  this.retryCount = 0;
                  this.playlistLoaded(id, data, curDetails);
                }
              };
              _proto.onLevelLoading = function onLevelLoading(event, data) {
                this.switchLevel(data.level);
              };
              _proto.onLevelSwitching = function onLevelSwitching(event, data) {
                this.switchLevel(data.level);
              };
              _proto.switchLevel = function switchLevel(levelIndex) {
                var levelInfo = this.hls.levels[levelIndex];
                if (!(levelInfo !== null && levelInfo !== void 0 && levelInfo.textGroupIds)) {
                  return;
                }
                var textGroupId = levelInfo.textGroupIds[levelInfo.urlId];
                if (this.groupId !== textGroupId) {
                  var lastTrack = this.tracksInGroup ? this.tracksInGroup[this.trackId] : void 0;
                  var subtitleTracks = this.tracks.filter(function(track) {
                    return !textGroupId || track.groupId === textGroupId;
                  });
                  this.tracksInGroup = subtitleTracks;
                  var initialTrackId = this.findTrackId(lastTrack === null || lastTrack === void 0 ? void 0 : lastTrack.name) || this.findTrackId();
                  this.groupId = textGroupId;
                  var subtitleTracksUpdated = {
                    subtitleTracks
                  };
                  this.log("Updating subtitle tracks, " + subtitleTracks.length + ' track(s) found in "' + textGroupId + '" group-id');
                  this.hls.trigger(_events__WEBPACK_IMPORTED_MODULE_0__["Events"].SUBTITLE_TRACKS_UPDATED, subtitleTracksUpdated);
                  if (initialTrackId !== -1) {
                    this.setSubtitleTrack(initialTrackId, lastTrack);
                  }
                }
              };
              _proto.findTrackId = function findTrackId(name) {
                var textTracks = this.tracksInGroup;
                for (var i3 = 0; i3 < textTracks.length; i3++) {
                  var track = textTracks[i3];
                  if (!this.selectDefaultTrack || track.default) {
                    if (!name || name === track.name) {
                      return track.id;
                    }
                  }
                }
                return -1;
              };
              _proto.onError = function onError(event, data) {
                _BasePlaylistControll.prototype.onError.call(this, event, data);
                if (data.fatal || !data.context) {
                  return;
                }
                if (data.context.type === _types_loader__WEBPACK_IMPORTED_MODULE_3__["PlaylistContextType"].SUBTITLE_TRACK && data.context.id === this.trackId && data.context.groupId === this.groupId) {
                  this.retryLoadingOrFail(data);
                }
              };
              _proto.loadPlaylist = function loadPlaylist(hlsUrlParameters) {
                var currentTrack = this.tracksInGroup[this.trackId];
                if (this.shouldLoadTrack(currentTrack)) {
                  var id = currentTrack.id;
                  var groupId = currentTrack.groupId;
                  var url = currentTrack.url;
                  if (hlsUrlParameters) {
                    try {
                      url = hlsUrlParameters.addDirectives(url);
                    } catch (error) {
                      this.warn("Could not construct new URL with HLS Delivery Directives: " + error);
                    }
                  }
                  this.log("Loading subtitle playlist for id " + id);
                  this.hls.trigger(_events__WEBPACK_IMPORTED_MODULE_0__["Events"].SUBTITLE_TRACK_LOADING, {
                    url,
                    id,
                    groupId,
                    deliveryDirectives: hlsUrlParameters || null
                  });
                }
              };
              _proto.toggleTrackModes = function toggleTrackModes(newId) {
                var _this2 = this;
                var media2 = this.media, subtitleDisplay = this.subtitleDisplay, trackId = this.trackId;
                if (!media2) {
                  return;
                }
                var textTracks = filterSubtitleTracks(media2.textTracks);
                var groupTracks = textTracks.filter(function(track) {
                  return track.groupId === _this2.groupId;
                });
                if (newId === -1) {
                  [].slice.call(textTracks).forEach(function(track) {
                    track.mode = "disabled";
                  });
                } else {
                  var oldTrack = groupTracks[trackId];
                  if (oldTrack) {
                    oldTrack.mode = "disabled";
                  }
                }
                var nextTrack = groupTracks[newId];
                if (nextTrack) {
                  nextTrack.mode = subtitleDisplay ? "showing" : "hidden";
                }
              };
              _proto.setSubtitleTrack = function setSubtitleTrack(newId, lastTrack) {
                var _tracks$newId;
                var tracks = this.tracksInGroup;
                if (!this.media) {
                  this.queuedDefaultTrack = newId;
                  return;
                }
                if (this.trackId !== newId) {
                  this.toggleTrackModes(newId);
                }
                if (this.trackId === newId && (newId === -1 || (_tracks$newId = tracks[newId]) !== null && _tracks$newId !== void 0 && _tracks$newId.details) || newId < -1 || newId >= tracks.length) {
                  return;
                }
                this.clearTimer();
                var track = tracks[newId];
                this.log("Switching to subtitle track " + newId);
                this.trackId = newId;
                if (track) {
                  var id = track.id, _track$groupId = track.groupId, groupId = _track$groupId === void 0 ? "" : _track$groupId, name = track.name, type = track.type, url = track.url;
                  this.hls.trigger(_events__WEBPACK_IMPORTED_MODULE_0__["Events"].SUBTITLE_TRACK_SWITCH, {
                    id,
                    groupId,
                    name,
                    type,
                    url
                  });
                  var hlsUrlParameters = this.switchParams(track.url, lastTrack === null || lastTrack === void 0 ? void 0 : lastTrack.details);
                  this.loadPlaylist(hlsUrlParameters);
                } else {
                  this.hls.trigger(_events__WEBPACK_IMPORTED_MODULE_0__["Events"].SUBTITLE_TRACK_SWITCH, {
                    id: newId
                  });
                }
              };
              _proto.onTextTracksChanged = function onTextTracksChanged() {
                if (!this.useTextTrackPolling) {
                  self.clearInterval(this.subtitlePollingInterval);
                }
                if (!this.media || !this.hls.config.renderTextTracksNatively) {
                  return;
                }
                var trackId = -1;
                var tracks = filterSubtitleTracks(this.media.textTracks);
                for (var id = 0; id < tracks.length; id++) {
                  if (tracks[id].mode === "hidden") {
                    trackId = id;
                  } else if (tracks[id].mode === "showing") {
                    trackId = id;
                    break;
                  }
                }
                if (this.subtitleTrack !== trackId) {
                  this.subtitleTrack = trackId;
                }
              };
              _createClass(SubtitleTrackController2, [{
                key: "subtitleTracks",
                get: function get() {
                  return this.tracksInGroup;
                }
              }, {
                key: "subtitleTrack",
                get: function get() {
                  return this.trackId;
                },
                set: function set(newId) {
                  this.selectDefaultTrack = false;
                  var lastTrack = this.tracksInGroup ? this.tracksInGroup[this.trackId] : void 0;
                  this.setSubtitleTrack(newId, lastTrack);
                }
              }]);
              return SubtitleTrackController2;
            }(_base_playlist_controller__WEBPACK_IMPORTED_MODULE_2__["default"]);
            function filterSubtitleTracks(textTrackList) {
              var tracks = [];
              for (var i3 = 0; i3 < textTrackList.length; i3++) {
                var track = textTrackList[i3];
                if (track.kind === "subtitles" && track.label) {
                  tracks.push(textTrackList[i3]);
                }
              }
              return tracks;
            }
            __webpack_exports__["default"] = SubtitleTrackController;
          },
          "./src/controller/timeline-controller.ts": function(module2, __webpack_exports__, __webpack_require__) {
            "use strict";
            __webpack_require__.r(__webpack_exports__);
            __webpack_require__.d(__webpack_exports__, "TimelineController", function() {
              return TimelineController;
            });
            var _home_runner_work_hls_js_hls_js_src_polyfills_number__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("./src/polyfills/number.ts");
            var _events__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("./src/events.ts");
            var _utils_cea_608_parser__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__("./src/utils/cea-608-parser.ts");
            var _utils_output_filter__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__("./src/utils/output-filter.ts");
            var _utils_webvtt_parser__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__("./src/utils/webvtt-parser.ts");
            var _utils_texttrack_utils__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__("./src/utils/texttrack-utils.ts");
            var _utils_imsc1_ttml_parser__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__("./src/utils/imsc1-ttml-parser.ts");
            var _types_loader__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__("./src/types/loader.ts");
            var _utils_logger__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__("./src/utils/logger.ts");
            var TimelineController = /* @__PURE__ */ function() {
              function TimelineController2(hls) {
                this.hls = void 0;
                this.media = null;
                this.config = void 0;
                this.enabled = true;
                this.Cues = void 0;
                this.textTracks = [];
                this.tracks = [];
                this.initPTS = [];
                this.timescale = [];
                this.unparsedVttFrags = [];
                this.captionsTracks = {};
                this.nonNativeCaptionsTracks = {};
                this.cea608Parser1 = void 0;
                this.cea608Parser2 = void 0;
                this.lastSn = -1;
                this.lastPartIndex = -1;
                this.prevCC = -1;
                this.vttCCs = newVTTCCs();
                this.captionsProperties = void 0;
                this.hls = hls;
                this.config = hls.config;
                this.Cues = hls.config.cueHandler;
                this.captionsProperties = {
                  textTrack1: {
                    label: this.config.captionsTextTrack1Label,
                    languageCode: this.config.captionsTextTrack1LanguageCode
                  },
                  textTrack2: {
                    label: this.config.captionsTextTrack2Label,
                    languageCode: this.config.captionsTextTrack2LanguageCode
                  },
                  textTrack3: {
                    label: this.config.captionsTextTrack3Label,
                    languageCode: this.config.captionsTextTrack3LanguageCode
                  },
                  textTrack4: {
                    label: this.config.captionsTextTrack4Label,
                    languageCode: this.config.captionsTextTrack4LanguageCode
                  }
                };
                if (this.config.enableCEA708Captions) {
                  var channel1 = new _utils_output_filter__WEBPACK_IMPORTED_MODULE_3__["default"](this, "textTrack1");
                  var channel2 = new _utils_output_filter__WEBPACK_IMPORTED_MODULE_3__["default"](this, "textTrack2");
                  var channel3 = new _utils_output_filter__WEBPACK_IMPORTED_MODULE_3__["default"](this, "textTrack3");
                  var channel4 = new _utils_output_filter__WEBPACK_IMPORTED_MODULE_3__["default"](this, "textTrack4");
                  this.cea608Parser1 = new _utils_cea_608_parser__WEBPACK_IMPORTED_MODULE_2__["default"](1, channel1, channel2);
                  this.cea608Parser2 = new _utils_cea_608_parser__WEBPACK_IMPORTED_MODULE_2__["default"](3, channel3, channel4);
                }
                hls.on(_events__WEBPACK_IMPORTED_MODULE_1__["Events"].MEDIA_ATTACHING, this.onMediaAttaching, this);
                hls.on(_events__WEBPACK_IMPORTED_MODULE_1__["Events"].MEDIA_DETACHING, this.onMediaDetaching, this);
                hls.on(_events__WEBPACK_IMPORTED_MODULE_1__["Events"].MANIFEST_LOADING, this.onManifestLoading, this);
                hls.on(_events__WEBPACK_IMPORTED_MODULE_1__["Events"].MANIFEST_LOADED, this.onManifestLoaded, this);
                hls.on(_events__WEBPACK_IMPORTED_MODULE_1__["Events"].SUBTITLE_TRACKS_UPDATED, this.onSubtitleTracksUpdated, this);
                hls.on(_events__WEBPACK_IMPORTED_MODULE_1__["Events"].FRAG_LOADING, this.onFragLoading, this);
                hls.on(_events__WEBPACK_IMPORTED_MODULE_1__["Events"].FRAG_LOADED, this.onFragLoaded, this);
                hls.on(_events__WEBPACK_IMPORTED_MODULE_1__["Events"].FRAG_PARSING_USERDATA, this.onFragParsingUserdata, this);
                hls.on(_events__WEBPACK_IMPORTED_MODULE_1__["Events"].FRAG_DECRYPTED, this.onFragDecrypted, this);
                hls.on(_events__WEBPACK_IMPORTED_MODULE_1__["Events"].INIT_PTS_FOUND, this.onInitPtsFound, this);
                hls.on(_events__WEBPACK_IMPORTED_MODULE_1__["Events"].SUBTITLE_TRACKS_CLEARED, this.onSubtitleTracksCleared, this);
                hls.on(_events__WEBPACK_IMPORTED_MODULE_1__["Events"].BUFFER_FLUSHING, this.onBufferFlushing, this);
              }
              var _proto = TimelineController2.prototype;
              _proto.destroy = function destroy() {
                var hls = this.hls;
                hls.off(_events__WEBPACK_IMPORTED_MODULE_1__["Events"].MEDIA_ATTACHING, this.onMediaAttaching, this);
                hls.off(_events__WEBPACK_IMPORTED_MODULE_1__["Events"].MEDIA_DETACHING, this.onMediaDetaching, this);
                hls.off(_events__WEBPACK_IMPORTED_MODULE_1__["Events"].MANIFEST_LOADING, this.onManifestLoading, this);
                hls.off(_events__WEBPACK_IMPORTED_MODULE_1__["Events"].MANIFEST_LOADED, this.onManifestLoaded, this);
                hls.off(_events__WEBPACK_IMPORTED_MODULE_1__["Events"].SUBTITLE_TRACKS_UPDATED, this.onSubtitleTracksUpdated, this);
                hls.off(_events__WEBPACK_IMPORTED_MODULE_1__["Events"].FRAG_LOADING, this.onFragLoading, this);
                hls.off(_events__WEBPACK_IMPORTED_MODULE_1__["Events"].FRAG_LOADED, this.onFragLoaded, this);
                hls.off(_events__WEBPACK_IMPORTED_MODULE_1__["Events"].FRAG_PARSING_USERDATA, this.onFragParsingUserdata, this);
                hls.off(_events__WEBPACK_IMPORTED_MODULE_1__["Events"].FRAG_DECRYPTED, this.onFragDecrypted, this);
                hls.off(_events__WEBPACK_IMPORTED_MODULE_1__["Events"].INIT_PTS_FOUND, this.onInitPtsFound, this);
                hls.off(_events__WEBPACK_IMPORTED_MODULE_1__["Events"].SUBTITLE_TRACKS_CLEARED, this.onSubtitleTracksCleared, this);
                hls.off(_events__WEBPACK_IMPORTED_MODULE_1__["Events"].BUFFER_FLUSHING, this.onBufferFlushing, this);
                this.hls = this.config = this.cea608Parser1 = this.cea608Parser2 = null;
              };
              _proto.addCues = function addCues(trackName, startTime, endTime, screen, cueRanges) {
                var merged = false;
                for (var i3 = cueRanges.length; i3--; ) {
                  var cueRange = cueRanges[i3];
                  var overlap = intersection(cueRange[0], cueRange[1], startTime, endTime);
                  if (overlap >= 0) {
                    cueRange[0] = Math.min(cueRange[0], startTime);
                    cueRange[1] = Math.max(cueRange[1], endTime);
                    merged = true;
                    if (overlap / (endTime - startTime) > 0.5) {
                      return;
                    }
                  }
                }
                if (!merged) {
                  cueRanges.push([startTime, endTime]);
                }
                if (this.config.renderTextTracksNatively) {
                  var track = this.captionsTracks[trackName];
                  this.Cues.newCue(track, startTime, endTime, screen);
                } else {
                  var cues = this.Cues.newCue(null, startTime, endTime, screen);
                  this.hls.trigger(_events__WEBPACK_IMPORTED_MODULE_1__["Events"].CUES_PARSED, {
                    type: "captions",
                    cues,
                    track: trackName
                  });
                }
              };
              _proto.onInitPtsFound = function onInitPtsFound(event, _ref) {
                var _this = this;
                var frag = _ref.frag, id = _ref.id, initPTS = _ref.initPTS, timescale = _ref.timescale;
                var unparsedVttFrags = this.unparsedVttFrags;
                if (id === "main") {
                  this.initPTS[frag.cc] = initPTS;
                  this.timescale[frag.cc] = timescale;
                }
                if (unparsedVttFrags.length) {
                  this.unparsedVttFrags = [];
                  unparsedVttFrags.forEach(function(frag2) {
                    _this.onFragLoaded(_events__WEBPACK_IMPORTED_MODULE_1__["Events"].FRAG_LOADED, frag2);
                  });
                }
              };
              _proto.getExistingTrack = function getExistingTrack(trackName) {
                var media2 = this.media;
                if (media2) {
                  for (var i3 = 0; i3 < media2.textTracks.length; i3++) {
                    var textTrack = media2.textTracks[i3];
                    if (textTrack[trackName]) {
                      return textTrack;
                    }
                  }
                }
                return null;
              };
              _proto.createCaptionsTrack = function createCaptionsTrack(trackName) {
                if (this.config.renderTextTracksNatively) {
                  this.createNativeTrack(trackName);
                } else {
                  this.createNonNativeTrack(trackName);
                }
              };
              _proto.createNativeTrack = function createNativeTrack(trackName) {
                if (this.captionsTracks[trackName]) {
                  return;
                }
                var captionsProperties = this.captionsProperties, captionsTracks = this.captionsTracks, media2 = this.media;
                var _captionsProperties$t = captionsProperties[trackName], label = _captionsProperties$t.label, languageCode = _captionsProperties$t.languageCode;
                var existingTrack = this.getExistingTrack(trackName);
                if (!existingTrack) {
                  var textTrack = this.createTextTrack("captions", label, languageCode);
                  if (textTrack) {
                    textTrack[trackName] = true;
                    captionsTracks[trackName] = textTrack;
                  }
                } else {
                  captionsTracks[trackName] = existingTrack;
                  Object(_utils_texttrack_utils__WEBPACK_IMPORTED_MODULE_5__["clearCurrentCues"])(captionsTracks[trackName]);
                  Object(_utils_texttrack_utils__WEBPACK_IMPORTED_MODULE_5__["sendAddTrackEvent"])(captionsTracks[trackName], media2);
                }
              };
              _proto.createNonNativeTrack = function createNonNativeTrack(trackName) {
                if (this.nonNativeCaptionsTracks[trackName]) {
                  return;
                }
                var trackProperties = this.captionsProperties[trackName];
                if (!trackProperties) {
                  return;
                }
                var label = trackProperties.label;
                var track = {
                  _id: trackName,
                  label,
                  kind: "captions",
                  default: trackProperties.media ? !!trackProperties.media.default : false,
                  closedCaptions: trackProperties.media
                };
                this.nonNativeCaptionsTracks[trackName] = track;
                this.hls.trigger(_events__WEBPACK_IMPORTED_MODULE_1__["Events"].NON_NATIVE_TEXT_TRACKS_FOUND, {
                  tracks: [track]
                });
              };
              _proto.createTextTrack = function createTextTrack(kind, label, lang) {
                var media2 = this.media;
                if (!media2) {
                  return;
                }
                return media2.addTextTrack(kind, label, lang);
              };
              _proto.onMediaAttaching = function onMediaAttaching(event, data) {
                this.media = data.media;
                this._cleanTracks();
              };
              _proto.onMediaDetaching = function onMediaDetaching() {
                var captionsTracks = this.captionsTracks;
                Object.keys(captionsTracks).forEach(function(trackName) {
                  Object(_utils_texttrack_utils__WEBPACK_IMPORTED_MODULE_5__["clearCurrentCues"])(captionsTracks[trackName]);
                  delete captionsTracks[trackName];
                });
                this.nonNativeCaptionsTracks = {};
              };
              _proto.onManifestLoading = function onManifestLoading() {
                this.lastSn = -1;
                this.lastPartIndex = -1;
                this.prevCC = -1;
                this.vttCCs = newVTTCCs();
                this._cleanTracks();
                this.tracks = [];
                this.captionsTracks = {};
                this.nonNativeCaptionsTracks = {};
                this.textTracks = [];
                this.unparsedVttFrags = this.unparsedVttFrags || [];
                this.initPTS = [];
                this.timescale = [];
                if (this.cea608Parser1 && this.cea608Parser2) {
                  this.cea608Parser1.reset();
                  this.cea608Parser2.reset();
                }
              };
              _proto._cleanTracks = function _cleanTracks() {
                var media2 = this.media;
                if (!media2) {
                  return;
                }
                var textTracks = media2.textTracks;
                if (textTracks) {
                  for (var i3 = 0; i3 < textTracks.length; i3++) {
                    Object(_utils_texttrack_utils__WEBPACK_IMPORTED_MODULE_5__["clearCurrentCues"])(textTracks[i3]);
                  }
                }
              };
              _proto.onSubtitleTracksUpdated = function onSubtitleTracksUpdated(event, data) {
                var _this2 = this;
                this.textTracks = [];
                var tracks = data.subtitleTracks || [];
                var hasIMSC1 = tracks.some(function(track) {
                  return track.textCodec === _utils_imsc1_ttml_parser__WEBPACK_IMPORTED_MODULE_6__["IMSC1_CODEC"];
                });
                if (this.config.enableWebVTT || hasIMSC1 && this.config.enableIMSC1) {
                  var sameTracks = this.tracks && tracks && this.tracks.length === tracks.length;
                  this.tracks = tracks || [];
                  if (this.config.renderTextTracksNatively) {
                    var inUseTracks = this.media ? this.media.textTracks : [];
                    this.tracks.forEach(function(track, index) {
                      var textTrack;
                      if (index < inUseTracks.length) {
                        var inUseTrack = null;
                        for (var i3 = 0; i3 < inUseTracks.length; i3++) {
                          if (canReuseVttTextTrack(inUseTracks[i3], track)) {
                            inUseTrack = inUseTracks[i3];
                            break;
                          }
                        }
                        if (inUseTrack) {
                          textTrack = inUseTrack;
                        }
                      }
                      if (textTrack) {
                        Object(_utils_texttrack_utils__WEBPACK_IMPORTED_MODULE_5__["clearCurrentCues"])(textTrack);
                      } else {
                        textTrack = _this2.createTextTrack("subtitles", track.name, track.lang);
                        if (textTrack) {
                          textTrack.mode = "disabled";
                        }
                      }
                      if (textTrack) {
                        textTrack.groupId = track.groupId;
                        _this2.textTracks.push(textTrack);
                      }
                    });
                  } else if (!sameTracks && this.tracks && this.tracks.length) {
                    var tracksList = this.tracks.map(function(track) {
                      return {
                        label: track.name,
                        kind: track.type.toLowerCase(),
                        default: track.default,
                        subtitleTrack: track
                      };
                    });
                    this.hls.trigger(_events__WEBPACK_IMPORTED_MODULE_1__["Events"].NON_NATIVE_TEXT_TRACKS_FOUND, {
                      tracks: tracksList
                    });
                  }
                }
              };
              _proto.onManifestLoaded = function onManifestLoaded(event, data) {
                var _this3 = this;
                if (this.config.enableCEA708Captions && data.captions) {
                  data.captions.forEach(function(captionsTrack) {
                    var instreamIdMatch = /(?:CC|SERVICE)([1-4])/.exec(captionsTrack.instreamId);
                    if (!instreamIdMatch) {
                      return;
                    }
                    var trackName = "textTrack" + instreamIdMatch[1];
                    var trackProperties = _this3.captionsProperties[trackName];
                    if (!trackProperties) {
                      return;
                    }
                    trackProperties.label = captionsTrack.name;
                    if (captionsTrack.lang) {
                      trackProperties.languageCode = captionsTrack.lang;
                    }
                    trackProperties.media = captionsTrack;
                  });
                }
              };
              _proto.onFragLoading = function onFragLoading(event, data) {
                var cea608Parser1 = this.cea608Parser1, cea608Parser2 = this.cea608Parser2, lastSn = this.lastSn, lastPartIndex = this.lastPartIndex;
                if (!this.enabled || !(cea608Parser1 && cea608Parser2)) {
                  return;
                }
                if (data.frag.type === _types_loader__WEBPACK_IMPORTED_MODULE_7__["PlaylistLevelType"].MAIN) {
                  var _data$part$index, _data$part;
                  var sn = data.frag.sn;
                  var partIndex = (_data$part$index = data === null || data === void 0 ? void 0 : (_data$part = data.part) === null || _data$part === void 0 ? void 0 : _data$part.index) != null ? _data$part$index : -1;
                  if (!(sn === lastSn + 1 || sn === lastSn && partIndex === lastPartIndex + 1)) {
                    cea608Parser1.reset();
                    cea608Parser2.reset();
                  }
                  this.lastSn = sn;
                  this.lastPartIndex = partIndex;
                }
              };
              _proto.onFragLoaded = function onFragLoaded(event, data) {
                var frag = data.frag, payload = data.payload;
                var initPTS = this.initPTS, unparsedVttFrags = this.unparsedVttFrags;
                if (frag.type === _types_loader__WEBPACK_IMPORTED_MODULE_7__["PlaylistLevelType"].SUBTITLE) {
                  if (payload.byteLength) {
                    if (!Object(_home_runner_work_hls_js_hls_js_src_polyfills_number__WEBPACK_IMPORTED_MODULE_0__["isFiniteNumber"])(initPTS[frag.cc])) {
                      unparsedVttFrags.push(data);
                      if (initPTS.length) {
                        this.hls.trigger(_events__WEBPACK_IMPORTED_MODULE_1__["Events"].SUBTITLE_FRAG_PROCESSED, {
                          success: false,
                          frag,
                          error: new Error("Missing initial subtitle PTS")
                        });
                      }
                      return;
                    }
                    var decryptData = frag.decryptdata;
                    var decrypted = "stats" in data;
                    if (decryptData == null || decryptData.key == null || decryptData.method !== "AES-128" || decrypted) {
                      var trackPlaylistMedia = this.tracks[frag.level];
                      var vttCCs = this.vttCCs;
                      if (!vttCCs[frag.cc]) {
                        vttCCs[frag.cc] = {
                          start: frag.start,
                          prevCC: this.prevCC,
                          new: true
                        };
                        this.prevCC = frag.cc;
                      }
                      if (trackPlaylistMedia && trackPlaylistMedia.textCodec === _utils_imsc1_ttml_parser__WEBPACK_IMPORTED_MODULE_6__["IMSC1_CODEC"]) {
                        this._parseIMSC1(frag, payload);
                      } else {
                        this._parseVTTs(frag, payload, vttCCs);
                      }
                    }
                  } else {
                    this.hls.trigger(_events__WEBPACK_IMPORTED_MODULE_1__["Events"].SUBTITLE_FRAG_PROCESSED, {
                      success: false,
                      frag,
                      error: new Error("Empty subtitle payload")
                    });
                  }
                }
              };
              _proto._parseIMSC1 = function _parseIMSC1(frag, payload) {
                var _this4 = this;
                var hls = this.hls;
                Object(_utils_imsc1_ttml_parser__WEBPACK_IMPORTED_MODULE_6__["parseIMSC1"])(payload, this.initPTS[frag.cc], this.timescale[frag.cc], function(cues) {
                  _this4._appendCues(cues, frag.level);
                  hls.trigger(_events__WEBPACK_IMPORTED_MODULE_1__["Events"].SUBTITLE_FRAG_PROCESSED, {
                    success: true,
                    frag
                  });
                }, function(error) {
                  _utils_logger__WEBPACK_IMPORTED_MODULE_8__["logger"].log("Failed to parse IMSC1: " + error);
                  hls.trigger(_events__WEBPACK_IMPORTED_MODULE_1__["Events"].SUBTITLE_FRAG_PROCESSED, {
                    success: false,
                    frag,
                    error
                  });
                });
              };
              _proto._parseVTTs = function _parseVTTs(frag, payload, vttCCs) {
                var _this5 = this;
                var hls = this.hls;
                Object(_utils_webvtt_parser__WEBPACK_IMPORTED_MODULE_4__["parseWebVTT"])(payload, this.initPTS[frag.cc], this.timescale[frag.cc], vttCCs, frag.cc, frag.start, function(cues) {
                  _this5._appendCues(cues, frag.level);
                  hls.trigger(_events__WEBPACK_IMPORTED_MODULE_1__["Events"].SUBTITLE_FRAG_PROCESSED, {
                    success: true,
                    frag
                  });
                }, function(error) {
                  _this5._fallbackToIMSC1(frag, payload);
                  _utils_logger__WEBPACK_IMPORTED_MODULE_8__["logger"].log("Failed to parse VTT cue: " + error);
                  hls.trigger(_events__WEBPACK_IMPORTED_MODULE_1__["Events"].SUBTITLE_FRAG_PROCESSED, {
                    success: false,
                    frag,
                    error
                  });
                });
              };
              _proto._fallbackToIMSC1 = function _fallbackToIMSC1(frag, payload) {
                var _this6 = this;
                var trackPlaylistMedia = this.tracks[frag.level];
                if (!trackPlaylistMedia.textCodec) {
                  Object(_utils_imsc1_ttml_parser__WEBPACK_IMPORTED_MODULE_6__["parseIMSC1"])(payload, this.initPTS[frag.cc], this.timescale[frag.cc], function() {
                    trackPlaylistMedia.textCodec = _utils_imsc1_ttml_parser__WEBPACK_IMPORTED_MODULE_6__["IMSC1_CODEC"];
                    _this6._parseIMSC1(frag, payload);
                  }, function() {
                    trackPlaylistMedia.textCodec = "wvtt";
                  });
                }
              };
              _proto._appendCues = function _appendCues(cues, fragLevel) {
                var hls = this.hls;
                if (this.config.renderTextTracksNatively) {
                  var textTrack = this.textTracks[fragLevel];
                  if (textTrack.mode === "disabled") {
                    return;
                  }
                  cues.forEach(function(cue) {
                    return Object(_utils_texttrack_utils__WEBPACK_IMPORTED_MODULE_5__["addCueToTrack"])(textTrack, cue);
                  });
                } else {
                  var currentTrack = this.tracks[fragLevel];
                  var track = currentTrack.default ? "default" : "subtitles" + fragLevel;
                  hls.trigger(_events__WEBPACK_IMPORTED_MODULE_1__["Events"].CUES_PARSED, {
                    type: "subtitles",
                    cues,
                    track
                  });
                }
              };
              _proto.onFragDecrypted = function onFragDecrypted(event, data) {
                var frag = data.frag;
                if (frag.type === _types_loader__WEBPACK_IMPORTED_MODULE_7__["PlaylistLevelType"].SUBTITLE) {
                  if (!Object(_home_runner_work_hls_js_hls_js_src_polyfills_number__WEBPACK_IMPORTED_MODULE_0__["isFiniteNumber"])(this.initPTS[frag.cc])) {
                    this.unparsedVttFrags.push(data);
                    return;
                  }
                  this.onFragLoaded(_events__WEBPACK_IMPORTED_MODULE_1__["Events"].FRAG_LOADED, data);
                }
              };
              _proto.onSubtitleTracksCleared = function onSubtitleTracksCleared() {
                this.tracks = [];
                this.captionsTracks = {};
              };
              _proto.onFragParsingUserdata = function onFragParsingUserdata(event, data) {
                var cea608Parser1 = this.cea608Parser1, cea608Parser2 = this.cea608Parser2;
                if (!this.enabled || !(cea608Parser1 && cea608Parser2)) {
                  return;
                }
                for (var i3 = 0; i3 < data.samples.length; i3++) {
                  var ccBytes = data.samples[i3].bytes;
                  if (ccBytes) {
                    var ccdatas = this.extractCea608Data(ccBytes);
                    cea608Parser1.addData(data.samples[i3].pts, ccdatas[0]);
                    cea608Parser2.addData(data.samples[i3].pts, ccdatas[1]);
                  }
                }
              };
              _proto.onBufferFlushing = function onBufferFlushing(event, _ref2) {
                var startOffset = _ref2.startOffset, endOffset = _ref2.endOffset, endOffsetSubtitles = _ref2.endOffsetSubtitles, type = _ref2.type;
                var media2 = this.media;
                if (!media2 || media2.currentTime < endOffset) {
                  return;
                }
                if (!type || type === "video") {
                  var captionsTracks = this.captionsTracks;
                  Object.keys(captionsTracks).forEach(function(trackName) {
                    return Object(_utils_texttrack_utils__WEBPACK_IMPORTED_MODULE_5__["removeCuesInRange"])(captionsTracks[trackName], startOffset, endOffset);
                  });
                }
                if (this.config.renderTextTracksNatively) {
                  if (startOffset === 0 && endOffsetSubtitles !== void 0) {
                    var textTracks = this.textTracks;
                    Object.keys(textTracks).forEach(function(trackName) {
                      return Object(_utils_texttrack_utils__WEBPACK_IMPORTED_MODULE_5__["removeCuesInRange"])(textTracks[trackName], startOffset, endOffsetSubtitles);
                    });
                  }
                }
              };
              _proto.extractCea608Data = function extractCea608Data(byteArray) {
                var count = byteArray[0] & 31;
                var position = 2;
                var actualCCBytes = [[], []];
                for (var j3 = 0; j3 < count; j3++) {
                  var tmpByte = byteArray[position++];
                  var ccbyte1 = 127 & byteArray[position++];
                  var ccbyte2 = 127 & byteArray[position++];
                  var ccValid = (4 & tmpByte) !== 0;
                  var ccType = 3 & tmpByte;
                  if (ccbyte1 === 0 && ccbyte2 === 0) {
                    continue;
                  }
                  if (ccValid) {
                    if (ccType === 0 || ccType === 1) {
                      actualCCBytes[ccType].push(ccbyte1);
                      actualCCBytes[ccType].push(ccbyte2);
                    }
                  }
                }
                return actualCCBytes;
              };
              return TimelineController2;
            }();
            function canReuseVttTextTrack(inUseTrack, manifestTrack) {
              return inUseTrack && inUseTrack.label === manifestTrack.name && !(inUseTrack.textTrack1 || inUseTrack.textTrack2);
            }
            function intersection(x1, x22, y1, y22) {
              return Math.min(x22, y22) - Math.max(x1, y1);
            }
            function newVTTCCs() {
              return {
                ccOffset: 0,
                presentationOffset: 0,
                0: {
                  start: 0,
                  prevCC: -1,
                  new: false
                }
              };
            }
          },
          "./src/crypt/aes-crypto.ts": function(module2, __webpack_exports__, __webpack_require__) {
            "use strict";
            __webpack_require__.r(__webpack_exports__);
            __webpack_require__.d(__webpack_exports__, "default", function() {
              return AESCrypto;
            });
            var AESCrypto = /* @__PURE__ */ function() {
              function AESCrypto2(subtle, iv) {
                this.subtle = void 0;
                this.aesIV = void 0;
                this.subtle = subtle;
                this.aesIV = iv;
              }
              var _proto = AESCrypto2.prototype;
              _proto.decrypt = function decrypt(data, key) {
                return this.subtle.decrypt({
                  name: "AES-CBC",
                  iv: this.aesIV
                }, key, data);
              };
              return AESCrypto2;
            }();
          },
          "./src/crypt/aes-decryptor.ts": function(module2, __webpack_exports__, __webpack_require__) {
            "use strict";
            __webpack_require__.r(__webpack_exports__);
            __webpack_require__.d(__webpack_exports__, "removePadding", function() {
              return removePadding;
            });
            __webpack_require__.d(__webpack_exports__, "default", function() {
              return AESDecryptor;
            });
            var _utils_typed_array__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("./src/utils/typed-array.ts");
            function removePadding(array) {
              var outputBytes = array.byteLength;
              var paddingBytes = outputBytes && new DataView(array.buffer).getUint8(outputBytes - 1);
              if (paddingBytes) {
                return Object(_utils_typed_array__WEBPACK_IMPORTED_MODULE_0__["sliceUint8"])(array, 0, outputBytes - paddingBytes);
              }
              return array;
            }
            var AESDecryptor = /* @__PURE__ */ function() {
              function AESDecryptor2() {
                this.rcon = [0, 1, 2, 4, 8, 16, 32, 64, 128, 27, 54];
                this.subMix = [new Uint32Array(256), new Uint32Array(256), new Uint32Array(256), new Uint32Array(256)];
                this.invSubMix = [new Uint32Array(256), new Uint32Array(256), new Uint32Array(256), new Uint32Array(256)];
                this.sBox = new Uint32Array(256);
                this.invSBox = new Uint32Array(256);
                this.key = new Uint32Array(0);
                this.ksRows = 0;
                this.keySize = 0;
                this.keySchedule = void 0;
                this.invKeySchedule = void 0;
                this.initTable();
              }
              var _proto = AESDecryptor2.prototype;
              _proto.uint8ArrayToUint32Array_ = function uint8ArrayToUint32Array_(arrayBuffer) {
                var view = new DataView(arrayBuffer);
                var newArray = new Uint32Array(4);
                for (var i3 = 0; i3 < 4; i3++) {
                  newArray[i3] = view.getUint32(i3 * 4);
                }
                return newArray;
              };
              _proto.initTable = function initTable() {
                var sBox = this.sBox;
                var invSBox = this.invSBox;
                var subMix = this.subMix;
                var subMix0 = subMix[0];
                var subMix1 = subMix[1];
                var subMix2 = subMix[2];
                var subMix3 = subMix[3];
                var invSubMix = this.invSubMix;
                var invSubMix0 = invSubMix[0];
                var invSubMix1 = invSubMix[1];
                var invSubMix2 = invSubMix[2];
                var invSubMix3 = invSubMix[3];
                var d3 = new Uint32Array(256);
                var x4 = 0;
                var xi = 0;
                var i3 = 0;
                for (i3 = 0; i3 < 256; i3++) {
                  if (i3 < 128) {
                    d3[i3] = i3 << 1;
                  } else {
                    d3[i3] = i3 << 1 ^ 283;
                  }
                }
                for (i3 = 0; i3 < 256; i3++) {
                  var sx = xi ^ xi << 1 ^ xi << 2 ^ xi << 3 ^ xi << 4;
                  sx = sx >>> 8 ^ sx & 255 ^ 99;
                  sBox[x4] = sx;
                  invSBox[sx] = x4;
                  var x22 = d3[x4];
                  var x42 = d3[x22];
                  var x8 = d3[x42];
                  var t4 = d3[sx] * 257 ^ sx * 16843008;
                  subMix0[x4] = t4 << 24 | t4 >>> 8;
                  subMix1[x4] = t4 << 16 | t4 >>> 16;
                  subMix2[x4] = t4 << 8 | t4 >>> 24;
                  subMix3[x4] = t4;
                  t4 = x8 * 16843009 ^ x42 * 65537 ^ x22 * 257 ^ x4 * 16843008;
                  invSubMix0[sx] = t4 << 24 | t4 >>> 8;
                  invSubMix1[sx] = t4 << 16 | t4 >>> 16;
                  invSubMix2[sx] = t4 << 8 | t4 >>> 24;
                  invSubMix3[sx] = t4;
                  if (!x4) {
                    x4 = xi = 1;
                  } else {
                    x4 = x22 ^ d3[d3[d3[x8 ^ x22]]];
                    xi ^= d3[d3[xi]];
                  }
                }
              };
              _proto.expandKey = function expandKey(keyBuffer) {
                var key = this.uint8ArrayToUint32Array_(keyBuffer);
                var sameKey = true;
                var offset = 0;
                while (offset < key.length && sameKey) {
                  sameKey = key[offset] === this.key[offset];
                  offset++;
                }
                if (sameKey) {
                  return;
                }
                this.key = key;
                var keySize = this.keySize = key.length;
                if (keySize !== 4 && keySize !== 6 && keySize !== 8) {
                  throw new Error("Invalid aes key size=" + keySize);
                }
                var ksRows = this.ksRows = (keySize + 6 + 1) * 4;
                var ksRow;
                var invKsRow;
                var keySchedule = this.keySchedule = new Uint32Array(ksRows);
                var invKeySchedule = this.invKeySchedule = new Uint32Array(ksRows);
                var sbox = this.sBox;
                var rcon = this.rcon;
                var invSubMix = this.invSubMix;
                var invSubMix0 = invSubMix[0];
                var invSubMix1 = invSubMix[1];
                var invSubMix2 = invSubMix[2];
                var invSubMix3 = invSubMix[3];
                var prev;
                var t4;
                for (ksRow = 0; ksRow < ksRows; ksRow++) {
                  if (ksRow < keySize) {
                    prev = keySchedule[ksRow] = key[ksRow];
                    continue;
                  }
                  t4 = prev;
                  if (ksRow % keySize === 0) {
                    t4 = t4 << 8 | t4 >>> 24;
                    t4 = sbox[t4 >>> 24] << 24 | sbox[t4 >>> 16 & 255] << 16 | sbox[t4 >>> 8 & 255] << 8 | sbox[t4 & 255];
                    t4 ^= rcon[ksRow / keySize | 0] << 24;
                  } else if (keySize > 6 && ksRow % keySize === 4) {
                    t4 = sbox[t4 >>> 24] << 24 | sbox[t4 >>> 16 & 255] << 16 | sbox[t4 >>> 8 & 255] << 8 | sbox[t4 & 255];
                  }
                  keySchedule[ksRow] = prev = (keySchedule[ksRow - keySize] ^ t4) >>> 0;
                }
                for (invKsRow = 0; invKsRow < ksRows; invKsRow++) {
                  ksRow = ksRows - invKsRow;
                  if (invKsRow & 3) {
                    t4 = keySchedule[ksRow];
                  } else {
                    t4 = keySchedule[ksRow - 4];
                  }
                  if (invKsRow < 4 || ksRow <= 4) {
                    invKeySchedule[invKsRow] = t4;
                  } else {
                    invKeySchedule[invKsRow] = invSubMix0[sbox[t4 >>> 24]] ^ invSubMix1[sbox[t4 >>> 16 & 255]] ^ invSubMix2[sbox[t4 >>> 8 & 255]] ^ invSubMix3[sbox[t4 & 255]];
                  }
                  invKeySchedule[invKsRow] = invKeySchedule[invKsRow] >>> 0;
                }
              };
              _proto.networkToHostOrderSwap = function networkToHostOrderSwap(word) {
                return word << 24 | (word & 65280) << 8 | (word & 16711680) >> 8 | word >>> 24;
              };
              _proto.decrypt = function decrypt(inputArrayBuffer, offset, aesIV) {
                var nRounds = this.keySize + 6;
                var invKeySchedule = this.invKeySchedule;
                var invSBOX = this.invSBox;
                var invSubMix = this.invSubMix;
                var invSubMix0 = invSubMix[0];
                var invSubMix1 = invSubMix[1];
                var invSubMix2 = invSubMix[2];
                var invSubMix3 = invSubMix[3];
                var initVector = this.uint8ArrayToUint32Array_(aesIV);
                var initVector0 = initVector[0];
                var initVector1 = initVector[1];
                var initVector2 = initVector[2];
                var initVector3 = initVector[3];
                var inputInt32 = new Int32Array(inputArrayBuffer);
                var outputInt32 = new Int32Array(inputInt32.length);
                var t0, t1, t22, t32;
                var s0, s1, s22, s32;
                var inputWords0, inputWords1, inputWords2, inputWords3;
                var ksRow, i3;
                var swapWord = this.networkToHostOrderSwap;
                while (offset < inputInt32.length) {
                  inputWords0 = swapWord(inputInt32[offset]);
                  inputWords1 = swapWord(inputInt32[offset + 1]);
                  inputWords2 = swapWord(inputInt32[offset + 2]);
                  inputWords3 = swapWord(inputInt32[offset + 3]);
                  s0 = inputWords0 ^ invKeySchedule[0];
                  s1 = inputWords3 ^ invKeySchedule[1];
                  s22 = inputWords2 ^ invKeySchedule[2];
                  s32 = inputWords1 ^ invKeySchedule[3];
                  ksRow = 4;
                  for (i3 = 1; i3 < nRounds; i3++) {
                    t0 = invSubMix0[s0 >>> 24] ^ invSubMix1[s1 >> 16 & 255] ^ invSubMix2[s22 >> 8 & 255] ^ invSubMix3[s32 & 255] ^ invKeySchedule[ksRow];
                    t1 = invSubMix0[s1 >>> 24] ^ invSubMix1[s22 >> 16 & 255] ^ invSubMix2[s32 >> 8 & 255] ^ invSubMix3[s0 & 255] ^ invKeySchedule[ksRow + 1];
                    t22 = invSubMix0[s22 >>> 24] ^ invSubMix1[s32 >> 16 & 255] ^ invSubMix2[s0 >> 8 & 255] ^ invSubMix3[s1 & 255] ^ invKeySchedule[ksRow + 2];
                    t32 = invSubMix0[s32 >>> 24] ^ invSubMix1[s0 >> 16 & 255] ^ invSubMix2[s1 >> 8 & 255] ^ invSubMix3[s22 & 255] ^ invKeySchedule[ksRow + 3];
                    s0 = t0;
                    s1 = t1;
                    s22 = t22;
                    s32 = t32;
                    ksRow = ksRow + 4;
                  }
                  t0 = invSBOX[s0 >>> 24] << 24 ^ invSBOX[s1 >> 16 & 255] << 16 ^ invSBOX[s22 >> 8 & 255] << 8 ^ invSBOX[s32 & 255] ^ invKeySchedule[ksRow];
                  t1 = invSBOX[s1 >>> 24] << 24 ^ invSBOX[s22 >> 16 & 255] << 16 ^ invSBOX[s32 >> 8 & 255] << 8 ^ invSBOX[s0 & 255] ^ invKeySchedule[ksRow + 1];
                  t22 = invSBOX[s22 >>> 24] << 24 ^ invSBOX[s32 >> 16 & 255] << 16 ^ invSBOX[s0 >> 8 & 255] << 8 ^ invSBOX[s1 & 255] ^ invKeySchedule[ksRow + 2];
                  t32 = invSBOX[s32 >>> 24] << 24 ^ invSBOX[s0 >> 16 & 255] << 16 ^ invSBOX[s1 >> 8 & 255] << 8 ^ invSBOX[s22 & 255] ^ invKeySchedule[ksRow + 3];
                  outputInt32[offset] = swapWord(t0 ^ initVector0);
                  outputInt32[offset + 1] = swapWord(t32 ^ initVector1);
                  outputInt32[offset + 2] = swapWord(t22 ^ initVector2);
                  outputInt32[offset + 3] = swapWord(t1 ^ initVector3);
                  initVector0 = inputWords0;
                  initVector1 = inputWords1;
                  initVector2 = inputWords2;
                  initVector3 = inputWords3;
                  offset = offset + 4;
                }
                return outputInt32.buffer;
              };
              return AESDecryptor2;
            }();
          },
          "./src/crypt/decrypter.ts": function(module2, __webpack_exports__, __webpack_require__) {
            "use strict";
            __webpack_require__.r(__webpack_exports__);
            __webpack_require__.d(__webpack_exports__, "default", function() {
              return Decrypter;
            });
            var _aes_crypto__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("./src/crypt/aes-crypto.ts");
            var _fast_aes_key__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("./src/crypt/fast-aes-key.ts");
            var _aes_decryptor__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__("./src/crypt/aes-decryptor.ts");
            var _utils_logger__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__("./src/utils/logger.ts");
            var _utils_mp4_tools__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__("./src/utils/mp4-tools.ts");
            var _utils_typed_array__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__("./src/utils/typed-array.ts");
            var CHUNK_SIZE = 16;
            var Decrypter = /* @__PURE__ */ function() {
              function Decrypter2(observer, config2, _temp) {
                var _ref = _temp === void 0 ? {} : _temp, _ref$removePKCS7Paddi = _ref.removePKCS7Padding, removePKCS7Padding = _ref$removePKCS7Paddi === void 0 ? true : _ref$removePKCS7Paddi;
                this.logEnabled = true;
                this.observer = void 0;
                this.config = void 0;
                this.removePKCS7Padding = void 0;
                this.subtle = null;
                this.softwareDecrypter = null;
                this.key = null;
                this.fastAesKey = null;
                this.remainderData = null;
                this.currentIV = null;
                this.currentResult = null;
                this.observer = observer;
                this.config = config2;
                this.removePKCS7Padding = removePKCS7Padding;
                if (removePKCS7Padding) {
                  try {
                    var browserCrypto = self.crypto;
                    if (browserCrypto) {
                      this.subtle = browserCrypto.subtle || browserCrypto.webkitSubtle;
                    }
                  } catch (e4) {
                  }
                }
                if (this.subtle === null) {
                  this.config.enableSoftwareAES = true;
                }
              }
              var _proto = Decrypter2.prototype;
              _proto.destroy = function destroy() {
                this.observer = null;
              };
              _proto.isSync = function isSync() {
                return this.config.enableSoftwareAES;
              };
              _proto.flush = function flush() {
                var currentResult = this.currentResult;
                if (!currentResult) {
                  this.reset();
                  return;
                }
                var data = new Uint8Array(currentResult);
                this.reset();
                if (this.removePKCS7Padding) {
                  return Object(_aes_decryptor__WEBPACK_IMPORTED_MODULE_2__["removePadding"])(data);
                }
                return data;
              };
              _proto.reset = function reset() {
                this.currentResult = null;
                this.currentIV = null;
                this.remainderData = null;
                if (this.softwareDecrypter) {
                  this.softwareDecrypter = null;
                }
              };
              _proto.decrypt = function decrypt(data, key, iv, callback) {
                if (this.config.enableSoftwareAES) {
                  this.softwareDecrypt(new Uint8Array(data), key, iv);
                  var decryptResult = this.flush();
                  if (decryptResult) {
                    callback(decryptResult.buffer);
                  }
                } else {
                  this.webCryptoDecrypt(new Uint8Array(data), key, iv).then(callback);
                }
              };
              _proto.softwareDecrypt = function softwareDecrypt(data, key, iv) {
                var currentIV = this.currentIV, currentResult = this.currentResult, remainderData = this.remainderData;
                this.logOnce("JS AES decrypt");
                if (remainderData) {
                  data = Object(_utils_mp4_tools__WEBPACK_IMPORTED_MODULE_4__["appendUint8Array"])(remainderData, data);
                  this.remainderData = null;
                }
                var currentChunk = this.getValidChunk(data);
                if (!currentChunk.length) {
                  return null;
                }
                if (currentIV) {
                  iv = currentIV;
                }
                var softwareDecrypter = this.softwareDecrypter;
                if (!softwareDecrypter) {
                  softwareDecrypter = this.softwareDecrypter = new _aes_decryptor__WEBPACK_IMPORTED_MODULE_2__["default"]();
                }
                softwareDecrypter.expandKey(key);
                var result = currentResult;
                this.currentResult = softwareDecrypter.decrypt(currentChunk.buffer, 0, iv);
                this.currentIV = Object(_utils_typed_array__WEBPACK_IMPORTED_MODULE_5__["sliceUint8"])(currentChunk, -16).buffer;
                if (!result) {
                  return null;
                }
                return result;
              };
              _proto.webCryptoDecrypt = function webCryptoDecrypt(data, key, iv) {
                var _this = this;
                var subtle = this.subtle;
                if (this.key !== key || !this.fastAesKey) {
                  this.key = key;
                  this.fastAesKey = new _fast_aes_key__WEBPACK_IMPORTED_MODULE_1__["default"](subtle, key);
                }
                return this.fastAesKey.expandKey().then(function(aesKey) {
                  if (!subtle) {
                    return Promise.reject(new Error("web crypto not initialized"));
                  }
                  var crypto2 = new _aes_crypto__WEBPACK_IMPORTED_MODULE_0__["default"](subtle, iv);
                  return crypto2.decrypt(data.buffer, aesKey);
                }).catch(function(err) {
                  return _this.onWebCryptoError(err, data, key, iv);
                });
              };
              _proto.onWebCryptoError = function onWebCryptoError(err, data, key, iv) {
                _utils_logger__WEBPACK_IMPORTED_MODULE_3__["logger"].warn("[decrypter.ts]: WebCrypto Error, disable WebCrypto API:", err);
                this.config.enableSoftwareAES = true;
                this.logEnabled = true;
                return this.softwareDecrypt(data, key, iv);
              };
              _proto.getValidChunk = function getValidChunk(data) {
                var currentChunk = data;
                var splitPoint = data.length - data.length % CHUNK_SIZE;
                if (splitPoint !== data.length) {
                  currentChunk = Object(_utils_typed_array__WEBPACK_IMPORTED_MODULE_5__["sliceUint8"])(data, 0, splitPoint);
                  this.remainderData = Object(_utils_typed_array__WEBPACK_IMPORTED_MODULE_5__["sliceUint8"])(data, splitPoint);
                }
                return currentChunk;
              };
              _proto.logOnce = function logOnce(msg) {
                if (!this.logEnabled) {
                  return;
                }
                _utils_logger__WEBPACK_IMPORTED_MODULE_3__["logger"].log("[decrypter.ts]: " + msg);
                this.logEnabled = false;
              };
              return Decrypter2;
            }();
          },
          "./src/crypt/fast-aes-key.ts": function(module2, __webpack_exports__, __webpack_require__) {
            "use strict";
            __webpack_require__.r(__webpack_exports__);
            __webpack_require__.d(__webpack_exports__, "default", function() {
              return FastAESKey;
            });
            var FastAESKey = /* @__PURE__ */ function() {
              function FastAESKey2(subtle, key) {
                this.subtle = void 0;
                this.key = void 0;
                this.subtle = subtle;
                this.key = key;
              }
              var _proto = FastAESKey2.prototype;
              _proto.expandKey = function expandKey() {
                return this.subtle.importKey("raw", this.key, {
                  name: "AES-CBC"
                }, false, ["encrypt", "decrypt"]);
              };
              return FastAESKey2;
            }();
          },
          "./src/demux/aacdemuxer.ts": function(module2, __webpack_exports__, __webpack_require__) {
            "use strict";
            __webpack_require__.r(__webpack_exports__);
            var _base_audio_demuxer__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("./src/demux/base-audio-demuxer.ts");
            var _adts__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("./src/demux/adts.ts");
            var _utils_logger__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__("./src/utils/logger.ts");
            var _demux_id3__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__("./src/demux/id3.ts");
            function _inheritsLoose(subClass, superClass) {
              subClass.prototype = Object.create(superClass.prototype);
              subClass.prototype.constructor = subClass;
              _setPrototypeOf(subClass, superClass);
            }
            function _setPrototypeOf(o3, p5) {
              _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf2(o4, p6) {
                o4.__proto__ = p6;
                return o4;
              };
              return _setPrototypeOf(o3, p5);
            }
            var AACDemuxer = /* @__PURE__ */ function(_BaseAudioDemuxer) {
              _inheritsLoose(AACDemuxer2, _BaseAudioDemuxer);
              function AACDemuxer2(observer, config2) {
                var _this;
                _this = _BaseAudioDemuxer.call(this) || this;
                _this.observer = void 0;
                _this.config = void 0;
                _this.observer = observer;
                _this.config = config2;
                return _this;
              }
              var _proto = AACDemuxer2.prototype;
              _proto.resetInitSegment = function resetInitSegment(audioCodec, videoCodec, duration) {
                _BaseAudioDemuxer.prototype.resetInitSegment.call(this, audioCodec, videoCodec, duration);
                this._audioTrack = {
                  container: "audio/adts",
                  type: "audio",
                  id: 2,
                  pid: -1,
                  sequenceNumber: 0,
                  isAAC: true,
                  samples: [],
                  manifestCodec: audioCodec,
                  duration,
                  inputTimeScale: 9e4,
                  dropped: 0
                };
              };
              AACDemuxer2.probe = function probe(data) {
                if (!data) {
                  return false;
                }
                var id3Data = _demux_id3__WEBPACK_IMPORTED_MODULE_3__["getID3Data"](data, 0) || [];
                var offset = id3Data.length;
                for (var length = data.length; offset < length; offset++) {
                  if (_adts__WEBPACK_IMPORTED_MODULE_1__["probe"](data, offset)) {
                    _utils_logger__WEBPACK_IMPORTED_MODULE_2__["logger"].log("ADTS sync word found !");
                    return true;
                  }
                }
                return false;
              };
              _proto.canParse = function canParse(data, offset) {
                return _adts__WEBPACK_IMPORTED_MODULE_1__["canParse"](data, offset);
              };
              _proto.appendFrame = function appendFrame(track, data, offset) {
                _adts__WEBPACK_IMPORTED_MODULE_1__["initTrackConfig"](track, this.observer, data, offset, track.manifestCodec);
                var frame = _adts__WEBPACK_IMPORTED_MODULE_1__["appendFrame"](track, data, offset, this.initPTS, this.frameIndex);
                if (frame && frame.missing === 0) {
                  return frame;
                }
              };
              return AACDemuxer2;
            }(_base_audio_demuxer__WEBPACK_IMPORTED_MODULE_0__["default"]);
            AACDemuxer.minProbeByteLength = 9;
            __webpack_exports__["default"] = AACDemuxer;
          },
          "./src/demux/adts.ts": function(module2, __webpack_exports__, __webpack_require__) {
            "use strict";
            __webpack_require__.r(__webpack_exports__);
            __webpack_require__.d(__webpack_exports__, "getAudioConfig", function() {
              return getAudioConfig;
            });
            __webpack_require__.d(__webpack_exports__, "isHeaderPattern", function() {
              return isHeaderPattern;
            });
            __webpack_require__.d(__webpack_exports__, "getHeaderLength", function() {
              return getHeaderLength;
            });
            __webpack_require__.d(__webpack_exports__, "getFullFrameLength", function() {
              return getFullFrameLength;
            });
            __webpack_require__.d(__webpack_exports__, "canGetFrameLength", function() {
              return canGetFrameLength;
            });
            __webpack_require__.d(__webpack_exports__, "isHeader", function() {
              return isHeader;
            });
            __webpack_require__.d(__webpack_exports__, "canParse", function() {
              return canParse;
            });
            __webpack_require__.d(__webpack_exports__, "probe", function() {
              return probe;
            });
            __webpack_require__.d(__webpack_exports__, "initTrackConfig", function() {
              return initTrackConfig;
            });
            __webpack_require__.d(__webpack_exports__, "getFrameDuration", function() {
              return getFrameDuration;
            });
            __webpack_require__.d(__webpack_exports__, "parseFrameHeader", function() {
              return parseFrameHeader;
            });
            __webpack_require__.d(__webpack_exports__, "appendFrame", function() {
              return appendFrame;
            });
            var _utils_logger__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("./src/utils/logger.ts");
            var _errors__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("./src/errors.ts");
            var _events__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__("./src/events.ts");
            function getAudioConfig(observer, data, offset, audioCodec) {
              var adtsObjectType;
              var adtsExtensionSamplingIndex;
              var adtsChanelConfig;
              var config2;
              var userAgent = navigator.userAgent.toLowerCase();
              var manifestCodec = audioCodec;
              var adtsSampleingRates = [96e3, 88200, 64e3, 48e3, 44100, 32e3, 24e3, 22050, 16e3, 12e3, 11025, 8e3, 7350];
              adtsObjectType = ((data[offset + 2] & 192) >>> 6) + 1;
              var adtsSamplingIndex = (data[offset + 2] & 60) >>> 2;
              if (adtsSamplingIndex > adtsSampleingRates.length - 1) {
                observer.trigger(_events__WEBPACK_IMPORTED_MODULE_2__["Events"].ERROR, {
                  type: _errors__WEBPACK_IMPORTED_MODULE_1__["ErrorTypes"].MEDIA_ERROR,
                  details: _errors__WEBPACK_IMPORTED_MODULE_1__["ErrorDetails"].FRAG_PARSING_ERROR,
                  fatal: true,
                  reason: "invalid ADTS sampling index:" + adtsSamplingIndex
                });
                return;
              }
              adtsChanelConfig = (data[offset + 2] & 1) << 2;
              adtsChanelConfig |= (data[offset + 3] & 192) >>> 6;
              _utils_logger__WEBPACK_IMPORTED_MODULE_0__["logger"].log("manifest codec:" + audioCodec + ", ADTS type:" + adtsObjectType + ", samplingIndex:" + adtsSamplingIndex);
              if (/firefox/i.test(userAgent)) {
                if (adtsSamplingIndex >= 6) {
                  adtsObjectType = 5;
                  config2 = new Array(4);
                  adtsExtensionSamplingIndex = adtsSamplingIndex - 3;
                } else {
                  adtsObjectType = 2;
                  config2 = new Array(2);
                  adtsExtensionSamplingIndex = adtsSamplingIndex;
                }
              } else if (userAgent.indexOf("android") !== -1) {
                adtsObjectType = 2;
                config2 = new Array(2);
                adtsExtensionSamplingIndex = adtsSamplingIndex;
              } else {
                adtsObjectType = 5;
                config2 = new Array(4);
                if (audioCodec && (audioCodec.indexOf("mp4a.40.29") !== -1 || audioCodec.indexOf("mp4a.40.5") !== -1) || !audioCodec && adtsSamplingIndex >= 6) {
                  adtsExtensionSamplingIndex = adtsSamplingIndex - 3;
                } else {
                  if (audioCodec && audioCodec.indexOf("mp4a.40.2") !== -1 && (adtsSamplingIndex >= 6 && adtsChanelConfig === 1 || /vivaldi/i.test(userAgent)) || !audioCodec && adtsChanelConfig === 1) {
                    adtsObjectType = 2;
                    config2 = new Array(2);
                  }
                  adtsExtensionSamplingIndex = adtsSamplingIndex;
                }
              }
              config2[0] = adtsObjectType << 3;
              config2[0] |= (adtsSamplingIndex & 14) >> 1;
              config2[1] |= (adtsSamplingIndex & 1) << 7;
              config2[1] |= adtsChanelConfig << 3;
              if (adtsObjectType === 5) {
                config2[1] |= (adtsExtensionSamplingIndex & 14) >> 1;
                config2[2] = (adtsExtensionSamplingIndex & 1) << 7;
                config2[2] |= 2 << 2;
                config2[3] = 0;
              }
              return {
                config: config2,
                samplerate: adtsSampleingRates[adtsSamplingIndex],
                channelCount: adtsChanelConfig,
                codec: "mp4a.40." + adtsObjectType,
                manifestCodec
              };
            }
            function isHeaderPattern(data, offset) {
              return data[offset] === 255 && (data[offset + 1] & 246) === 240;
            }
            function getHeaderLength(data, offset) {
              return data[offset + 1] & 1 ? 7 : 9;
            }
            function getFullFrameLength(data, offset) {
              return (data[offset + 3] & 3) << 11 | data[offset + 4] << 3 | (data[offset + 5] & 224) >>> 5;
            }
            function canGetFrameLength(data, offset) {
              return offset + 5 < data.length;
            }
            function isHeader(data, offset) {
              return offset + 1 < data.length && isHeaderPattern(data, offset);
            }
            function canParse(data, offset) {
              return canGetFrameLength(data, offset) && isHeaderPattern(data, offset) && getFullFrameLength(data, offset) <= data.length - offset;
            }
            function probe(data, offset) {
              if (isHeader(data, offset)) {
                var headerLength = getHeaderLength(data, offset);
                if (offset + headerLength >= data.length) {
                  return false;
                }
                var frameLength = getFullFrameLength(data, offset);
                if (frameLength <= headerLength) {
                  return false;
                }
                var newOffset = offset + frameLength;
                return newOffset === data.length || isHeader(data, newOffset);
              }
              return false;
            }
            function initTrackConfig(track, observer, data, offset, audioCodec) {
              if (!track.samplerate) {
                var config2 = getAudioConfig(observer, data, offset, audioCodec);
                if (!config2) {
                  return;
                }
                track.config = config2.config;
                track.samplerate = config2.samplerate;
                track.channelCount = config2.channelCount;
                track.codec = config2.codec;
                track.manifestCodec = config2.manifestCodec;
                _utils_logger__WEBPACK_IMPORTED_MODULE_0__["logger"].log("parsed codec:" + track.codec + ", rate:" + config2.samplerate + ", channels:" + config2.channelCount);
              }
            }
            function getFrameDuration(samplerate) {
              return 1024 * 9e4 / samplerate;
            }
            function parseFrameHeader(data, offset, pts, frameIndex, frameDuration) {
              var headerLength = getHeaderLength(data, offset);
              var frameLength = getFullFrameLength(data, offset);
              frameLength -= headerLength;
              if (frameLength > 0) {
                var stamp = pts + frameIndex * frameDuration;
                return {
                  headerLength,
                  frameLength,
                  stamp
                };
              }
            }
            function appendFrame(track, data, offset, pts, frameIndex) {
              var frameDuration = getFrameDuration(track.samplerate);
              var header = parseFrameHeader(data, offset, pts, frameIndex, frameDuration);
              if (header) {
                var frameLength = header.frameLength, headerLength = header.headerLength, stamp = header.stamp;
                var length = headerLength + frameLength;
                var missing = Math.max(0, offset + length - data.length);
                var unit;
                if (missing) {
                  unit = new Uint8Array(length - headerLength);
                  unit.set(data.subarray(offset + headerLength, data.length), 0);
                } else {
                  unit = data.subarray(offset + headerLength, offset + length);
                }
                var sample = {
                  unit,
                  pts: stamp
                };
                if (!missing) {
                  track.samples.push(sample);
                }
                return {
                  sample,
                  length,
                  missing
                };
              }
            }
          },
          "./src/demux/base-audio-demuxer.ts": function(module2, __webpack_exports__, __webpack_require__) {
            "use strict";
            __webpack_require__.r(__webpack_exports__);
            __webpack_require__.d(__webpack_exports__, "initPTSFn", function() {
              return initPTSFn;
            });
            var _home_runner_work_hls_js_hls_js_src_polyfills_number__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("./src/polyfills/number.ts");
            var _demux_id3__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("./src/demux/id3.ts");
            var _dummy_demuxed_track__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__("./src/demux/dummy-demuxed-track.ts");
            var _utils_mp4_tools__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__("./src/utils/mp4-tools.ts");
            var _utils_typed_array__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__("./src/utils/typed-array.ts");
            var BaseAudioDemuxer = /* @__PURE__ */ function() {
              function BaseAudioDemuxer2() {
                this._audioTrack = void 0;
                this._id3Track = void 0;
                this.frameIndex = 0;
                this.cachedData = null;
                this.initPTS = null;
              }
              var _proto = BaseAudioDemuxer2.prototype;
              _proto.resetInitSegment = function resetInitSegment(audioCodec, videoCodec, duration) {
                this._id3Track = {
                  type: "id3",
                  id: 3,
                  pid: -1,
                  inputTimeScale: 9e4,
                  sequenceNumber: 0,
                  samples: [],
                  dropped: 0
                };
              };
              _proto.resetTimeStamp = function resetTimeStamp() {
              };
              _proto.resetContiguity = function resetContiguity() {
              };
              _proto.canParse = function canParse(data, offset) {
                return false;
              };
              _proto.appendFrame = function appendFrame(track, data, offset) {
              };
              _proto.demux = function demux(data, timeOffset) {
                if (this.cachedData) {
                  data = Object(_utils_mp4_tools__WEBPACK_IMPORTED_MODULE_3__["appendUint8Array"])(this.cachedData, data);
                  this.cachedData = null;
                }
                var id3Data = _demux_id3__WEBPACK_IMPORTED_MODULE_1__["getID3Data"](data, 0);
                var offset = id3Data ? id3Data.length : 0;
                var lastDataIndex;
                var pts;
                var track = this._audioTrack;
                var id3Track = this._id3Track;
                var timestamp = id3Data ? _demux_id3__WEBPACK_IMPORTED_MODULE_1__["getTimeStamp"](id3Data) : void 0;
                var length = data.length;
                if (this.frameIndex === 0 || this.initPTS === null) {
                  this.initPTS = initPTSFn(timestamp, timeOffset);
                }
                if (id3Data && id3Data.length > 0) {
                  id3Track.samples.push({
                    pts: this.initPTS,
                    dts: this.initPTS,
                    data: id3Data
                  });
                }
                pts = this.initPTS;
                while (offset < length) {
                  if (this.canParse(data, offset)) {
                    var frame = this.appendFrame(track, data, offset);
                    if (frame) {
                      this.frameIndex++;
                      pts = frame.sample.pts;
                      offset += frame.length;
                      lastDataIndex = offset;
                    } else {
                      offset = length;
                    }
                  } else if (_demux_id3__WEBPACK_IMPORTED_MODULE_1__["canParse"](data, offset)) {
                    id3Data = _demux_id3__WEBPACK_IMPORTED_MODULE_1__["getID3Data"](data, offset);
                    id3Track.samples.push({
                      pts,
                      dts: pts,
                      data: id3Data
                    });
                    offset += id3Data.length;
                    lastDataIndex = offset;
                  } else {
                    offset++;
                  }
                  if (offset === length && lastDataIndex !== length) {
                    var partialData = Object(_utils_typed_array__WEBPACK_IMPORTED_MODULE_4__["sliceUint8"])(data, lastDataIndex);
                    if (this.cachedData) {
                      this.cachedData = Object(_utils_mp4_tools__WEBPACK_IMPORTED_MODULE_3__["appendUint8Array"])(this.cachedData, partialData);
                    } else {
                      this.cachedData = partialData;
                    }
                  }
                }
                return {
                  audioTrack: track,
                  avcTrack: Object(_dummy_demuxed_track__WEBPACK_IMPORTED_MODULE_2__["dummyTrack"])(),
                  id3Track,
                  textTrack: Object(_dummy_demuxed_track__WEBPACK_IMPORTED_MODULE_2__["dummyTrack"])()
                };
              };
              _proto.demuxSampleAes = function demuxSampleAes(data, keyData, timeOffset) {
                return Promise.reject(new Error("[" + this + "] This demuxer does not support Sample-AES decryption"));
              };
              _proto.flush = function flush(timeOffset) {
                var cachedData = this.cachedData;
                if (cachedData) {
                  this.cachedData = null;
                  this.demux(cachedData, 0);
                }
                this.frameIndex = 0;
                return {
                  audioTrack: this._audioTrack,
                  avcTrack: Object(_dummy_demuxed_track__WEBPACK_IMPORTED_MODULE_2__["dummyTrack"])(),
                  id3Track: this._id3Track,
                  textTrack: Object(_dummy_demuxed_track__WEBPACK_IMPORTED_MODULE_2__["dummyTrack"])()
                };
              };
              _proto.destroy = function destroy() {
              };
              return BaseAudioDemuxer2;
            }();
            var initPTSFn = function initPTSFn2(timestamp, timeOffset) {
              return Object(_home_runner_work_hls_js_hls_js_src_polyfills_number__WEBPACK_IMPORTED_MODULE_0__["isFiniteNumber"])(timestamp) ? timestamp * 90 : timeOffset * 9e4;
            };
            __webpack_exports__["default"] = BaseAudioDemuxer;
          },
          "./src/demux/chunk-cache.ts": function(module2, __webpack_exports__, __webpack_require__) {
            "use strict";
            __webpack_require__.r(__webpack_exports__);
            __webpack_require__.d(__webpack_exports__, "default", function() {
              return ChunkCache;
            });
            var ChunkCache = /* @__PURE__ */ function() {
              function ChunkCache2() {
                this.chunks = [];
                this.dataLength = 0;
              }
              var _proto = ChunkCache2.prototype;
              _proto.push = function push(chunk) {
                this.chunks.push(chunk);
                this.dataLength += chunk.length;
              };
              _proto.flush = function flush() {
                var chunks = this.chunks, dataLength = this.dataLength;
                var result;
                if (!chunks.length) {
                  return new Uint8Array(0);
                } else if (chunks.length === 1) {
                  result = chunks[0];
                } else {
                  result = concatUint8Arrays(chunks, dataLength);
                }
                this.reset();
                return result;
              };
              _proto.reset = function reset() {
                this.chunks.length = 0;
                this.dataLength = 0;
              };
              return ChunkCache2;
            }();
            function concatUint8Arrays(chunks, dataLength) {
              var result = new Uint8Array(dataLength);
              var offset = 0;
              for (var i3 = 0; i3 < chunks.length; i3++) {
                var chunk = chunks[i3];
                result.set(chunk, offset);
                offset += chunk.length;
              }
              return result;
            }
          },
          "./src/demux/dummy-demuxed-track.ts": function(module2, __webpack_exports__, __webpack_require__) {
            "use strict";
            __webpack_require__.r(__webpack_exports__);
            __webpack_require__.d(__webpack_exports__, "dummyTrack", function() {
              return dummyTrack;
            });
            function dummyTrack() {
              return {
                type: "",
                id: -1,
                pid: -1,
                inputTimeScale: 9e4,
                sequenceNumber: -1,
                samples: [],
                dropped: 0
              };
            }
          },
          "./src/demux/exp-golomb.ts": function(module2, __webpack_exports__, __webpack_require__) {
            "use strict";
            __webpack_require__.r(__webpack_exports__);
            var _utils_logger__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("./src/utils/logger.ts");
            var ExpGolomb = /* @__PURE__ */ function() {
              function ExpGolomb2(data) {
                this.data = void 0;
                this.bytesAvailable = void 0;
                this.word = void 0;
                this.bitsAvailable = void 0;
                this.data = data;
                this.bytesAvailable = data.byteLength;
                this.word = 0;
                this.bitsAvailable = 0;
              }
              var _proto = ExpGolomb2.prototype;
              _proto.loadWord = function loadWord() {
                var data = this.data;
                var bytesAvailable = this.bytesAvailable;
                var position = data.byteLength - bytesAvailable;
                var workingBytes = new Uint8Array(4);
                var availableBytes = Math.min(4, bytesAvailable);
                if (availableBytes === 0) {
                  throw new Error("no bytes available");
                }
                workingBytes.set(data.subarray(position, position + availableBytes));
                this.word = new DataView(workingBytes.buffer).getUint32(0);
                this.bitsAvailable = availableBytes * 8;
                this.bytesAvailable -= availableBytes;
              };
              _proto.skipBits = function skipBits(count) {
                var skipBytes;
                if (this.bitsAvailable > count) {
                  this.word <<= count;
                  this.bitsAvailable -= count;
                } else {
                  count -= this.bitsAvailable;
                  skipBytes = count >> 3;
                  count -= skipBytes >> 3;
                  this.bytesAvailable -= skipBytes;
                  this.loadWord();
                  this.word <<= count;
                  this.bitsAvailable -= count;
                }
              };
              _proto.readBits = function readBits(size) {
                var bits = Math.min(this.bitsAvailable, size);
                var valu = this.word >>> 32 - bits;
                if (size > 32) {
                  _utils_logger__WEBPACK_IMPORTED_MODULE_0__["logger"].error("Cannot read more than 32 bits at a time");
                }
                this.bitsAvailable -= bits;
                if (this.bitsAvailable > 0) {
                  this.word <<= bits;
                } else if (this.bytesAvailable > 0) {
                  this.loadWord();
                }
                bits = size - bits;
                if (bits > 0 && this.bitsAvailable) {
                  return valu << bits | this.readBits(bits);
                } else {
                  return valu;
                }
              };
              _proto.skipLZ = function skipLZ() {
                var leadingZeroCount;
                for (leadingZeroCount = 0; leadingZeroCount < this.bitsAvailable; ++leadingZeroCount) {
                  if ((this.word & 2147483648 >>> leadingZeroCount) !== 0) {
                    this.word <<= leadingZeroCount;
                    this.bitsAvailable -= leadingZeroCount;
                    return leadingZeroCount;
                  }
                }
                this.loadWord();
                return leadingZeroCount + this.skipLZ();
              };
              _proto.skipUEG = function skipUEG() {
                this.skipBits(1 + this.skipLZ());
              };
              _proto.skipEG = function skipEG() {
                this.skipBits(1 + this.skipLZ());
              };
              _proto.readUEG = function readUEG() {
                var clz = this.skipLZ();
                return this.readBits(clz + 1) - 1;
              };
              _proto.readEG = function readEG() {
                var valu = this.readUEG();
                if (1 & valu) {
                  return 1 + valu >>> 1;
                } else {
                  return -1 * (valu >>> 1);
                }
              };
              _proto.readBoolean = function readBoolean() {
                return this.readBits(1) === 1;
              };
              _proto.readUByte = function readUByte() {
                return this.readBits(8);
              };
              _proto.readUShort = function readUShort() {
                return this.readBits(16);
              };
              _proto.readUInt = function readUInt() {
                return this.readBits(32);
              };
              _proto.skipScalingList = function skipScalingList(count) {
                var lastScale = 8;
                var nextScale = 8;
                var deltaScale;
                for (var j3 = 0; j3 < count; j3++) {
                  if (nextScale !== 0) {
                    deltaScale = this.readEG();
                    nextScale = (lastScale + deltaScale + 256) % 256;
                  }
                  lastScale = nextScale === 0 ? lastScale : nextScale;
                }
              };
              _proto.readSPS = function readSPS() {
                var frameCropLeftOffset = 0;
                var frameCropRightOffset = 0;
                var frameCropTopOffset = 0;
                var frameCropBottomOffset = 0;
                var numRefFramesInPicOrderCntCycle;
                var scalingListCount;
                var i3;
                var readUByte = this.readUByte.bind(this);
                var readBits = this.readBits.bind(this);
                var readUEG = this.readUEG.bind(this);
                var readBoolean = this.readBoolean.bind(this);
                var skipBits = this.skipBits.bind(this);
                var skipEG = this.skipEG.bind(this);
                var skipUEG = this.skipUEG.bind(this);
                var skipScalingList = this.skipScalingList.bind(this);
                readUByte();
                var profileIdc = readUByte();
                readBits(5);
                skipBits(3);
                readUByte();
                skipUEG();
                if (profileIdc === 100 || profileIdc === 110 || profileIdc === 122 || profileIdc === 244 || profileIdc === 44 || profileIdc === 83 || profileIdc === 86 || profileIdc === 118 || profileIdc === 128) {
                  var chromaFormatIdc = readUEG();
                  if (chromaFormatIdc === 3) {
                    skipBits(1);
                  }
                  skipUEG();
                  skipUEG();
                  skipBits(1);
                  if (readBoolean()) {
                    scalingListCount = chromaFormatIdc !== 3 ? 8 : 12;
                    for (i3 = 0; i3 < scalingListCount; i3++) {
                      if (readBoolean()) {
                        if (i3 < 6) {
                          skipScalingList(16);
                        } else {
                          skipScalingList(64);
                        }
                      }
                    }
                  }
                }
                skipUEG();
                var picOrderCntType = readUEG();
                if (picOrderCntType === 0) {
                  readUEG();
                } else if (picOrderCntType === 1) {
                  skipBits(1);
                  skipEG();
                  skipEG();
                  numRefFramesInPicOrderCntCycle = readUEG();
                  for (i3 = 0; i3 < numRefFramesInPicOrderCntCycle; i3++) {
                    skipEG();
                  }
                }
                skipUEG();
                skipBits(1);
                var picWidthInMbsMinus1 = readUEG();
                var picHeightInMapUnitsMinus1 = readUEG();
                var frameMbsOnlyFlag = readBits(1);
                if (frameMbsOnlyFlag === 0) {
                  skipBits(1);
                }
                skipBits(1);
                if (readBoolean()) {
                  frameCropLeftOffset = readUEG();
                  frameCropRightOffset = readUEG();
                  frameCropTopOffset = readUEG();
                  frameCropBottomOffset = readUEG();
                }
                var pixelRatio = [1, 1];
                if (readBoolean()) {
                  if (readBoolean()) {
                    var aspectRatioIdc = readUByte();
                    switch (aspectRatioIdc) {
                      case 1:
                        pixelRatio = [1, 1];
                        break;
                      case 2:
                        pixelRatio = [12, 11];
                        break;
                      case 3:
                        pixelRatio = [10, 11];
                        break;
                      case 4:
                        pixelRatio = [16, 11];
                        break;
                      case 5:
                        pixelRatio = [40, 33];
                        break;
                      case 6:
                        pixelRatio = [24, 11];
                        break;
                      case 7:
                        pixelRatio = [20, 11];
                        break;
                      case 8:
                        pixelRatio = [32, 11];
                        break;
                      case 9:
                        pixelRatio = [80, 33];
                        break;
                      case 10:
                        pixelRatio = [18, 11];
                        break;
                      case 11:
                        pixelRatio = [15, 11];
                        break;
                      case 12:
                        pixelRatio = [64, 33];
                        break;
                      case 13:
                        pixelRatio = [160, 99];
                        break;
                      case 14:
                        pixelRatio = [4, 3];
                        break;
                      case 15:
                        pixelRatio = [3, 2];
                        break;
                      case 16:
                        pixelRatio = [2, 1];
                        break;
                      case 255: {
                        pixelRatio = [readUByte() << 8 | readUByte(), readUByte() << 8 | readUByte()];
                        break;
                      }
                    }
                  }
                }
                return {
                  width: Math.ceil((picWidthInMbsMinus1 + 1) * 16 - frameCropLeftOffset * 2 - frameCropRightOffset * 2),
                  height: (2 - frameMbsOnlyFlag) * (picHeightInMapUnitsMinus1 + 1) * 16 - (frameMbsOnlyFlag ? 2 : 4) * (frameCropTopOffset + frameCropBottomOffset),
                  pixelRatio
                };
              };
              _proto.readSliceType = function readSliceType() {
                this.readUByte();
                this.readUEG();
                return this.readUEG();
              };
              return ExpGolomb2;
            }();
            __webpack_exports__["default"] = ExpGolomb;
          },
          "./src/demux/id3.ts": function(module2, __webpack_exports__, __webpack_require__) {
            "use strict";
            __webpack_require__.r(__webpack_exports__);
            __webpack_require__.d(__webpack_exports__, "isHeader", function() {
              return isHeader;
            });
            __webpack_require__.d(__webpack_exports__, "isFooter", function() {
              return isFooter;
            });
            __webpack_require__.d(__webpack_exports__, "getID3Data", function() {
              return getID3Data;
            });
            __webpack_require__.d(__webpack_exports__, "canParse", function() {
              return canParse;
            });
            __webpack_require__.d(__webpack_exports__, "getTimeStamp", function() {
              return getTimeStamp;
            });
            __webpack_require__.d(__webpack_exports__, "isTimeStampFrame", function() {
              return isTimeStampFrame;
            });
            __webpack_require__.d(__webpack_exports__, "getID3Frames", function() {
              return getID3Frames;
            });
            __webpack_require__.d(__webpack_exports__, "decodeFrame", function() {
              return decodeFrame;
            });
            __webpack_require__.d(__webpack_exports__, "utf8ArrayToStr", function() {
              return utf8ArrayToStr;
            });
            __webpack_require__.d(__webpack_exports__, "testables", function() {
              return testables;
            });
            var isHeader = function isHeader2(data, offset) {
              if (offset + 10 <= data.length) {
                if (data[offset] === 73 && data[offset + 1] === 68 && data[offset + 2] === 51) {
                  if (data[offset + 3] < 255 && data[offset + 4] < 255) {
                    if (data[offset + 6] < 128 && data[offset + 7] < 128 && data[offset + 8] < 128 && data[offset + 9] < 128) {
                      return true;
                    }
                  }
                }
              }
              return false;
            };
            var isFooter = function isFooter2(data, offset) {
              if (offset + 10 <= data.length) {
                if (data[offset] === 51 && data[offset + 1] === 68 && data[offset + 2] === 73) {
                  if (data[offset + 3] < 255 && data[offset + 4] < 255) {
                    if (data[offset + 6] < 128 && data[offset + 7] < 128 && data[offset + 8] < 128 && data[offset + 9] < 128) {
                      return true;
                    }
                  }
                }
              }
              return false;
            };
            var getID3Data = function getID3Data2(data, offset) {
              var front = offset;
              var length = 0;
              while (isHeader(data, offset)) {
                length += 10;
                var size = readSize(data, offset + 6);
                length += size;
                if (isFooter(data, offset + 10)) {
                  length += 10;
                }
                offset += length;
              }
              if (length > 0) {
                return data.subarray(front, front + length);
              }
              return void 0;
            };
            var readSize = function readSize2(data, offset) {
              var size = 0;
              size = (data[offset] & 127) << 21;
              size |= (data[offset + 1] & 127) << 14;
              size |= (data[offset + 2] & 127) << 7;
              size |= data[offset + 3] & 127;
              return size;
            };
            var canParse = function canParse2(data, offset) {
              return isHeader(data, offset) && readSize(data, offset + 6) + 10 <= data.length - offset;
            };
            var getTimeStamp = function getTimeStamp2(data) {
              var frames = getID3Frames(data);
              for (var i3 = 0; i3 < frames.length; i3++) {
                var frame = frames[i3];
                if (isTimeStampFrame(frame)) {
                  return readTimeStamp(frame);
                }
              }
              return void 0;
            };
            var isTimeStampFrame = function isTimeStampFrame2(frame) {
              return frame && frame.key === "PRIV" && frame.info === "com.apple.streaming.transportStreamTimestamp";
            };
            var getFrameData = function getFrameData2(data) {
              var type = String.fromCharCode(data[0], data[1], data[2], data[3]);
              var size = readSize(data, 4);
              var offset = 10;
              return {
                type,
                size,
                data: data.subarray(offset, offset + size)
              };
            };
            var getID3Frames = function getID3Frames2(id3Data) {
              var offset = 0;
              var frames = [];
              while (isHeader(id3Data, offset)) {
                var size = readSize(id3Data, offset + 6);
                offset += 10;
                var end = offset + size;
                while (offset + 8 < end) {
                  var frameData = getFrameData(id3Data.subarray(offset));
                  var frame = decodeFrame(frameData);
                  if (frame) {
                    frames.push(frame);
                  }
                  offset += frameData.size + 10;
                }
                if (isFooter(id3Data, offset)) {
                  offset += 10;
                }
              }
              return frames;
            };
            var decodeFrame = function decodeFrame2(frame) {
              if (frame.type === "PRIV") {
                return decodePrivFrame(frame);
              } else if (frame.type[0] === "W") {
                return decodeURLFrame(frame);
              }
              return decodeTextFrame(frame);
            };
            var decodePrivFrame = function decodePrivFrame2(frame) {
              if (frame.size < 2) {
                return void 0;
              }
              var owner = utf8ArrayToStr(frame.data, true);
              var privateData = new Uint8Array(frame.data.subarray(owner.length + 1));
              return {
                key: frame.type,
                info: owner,
                data: privateData.buffer
              };
            };
            var decodeTextFrame = function decodeTextFrame2(frame) {
              if (frame.size < 2) {
                return void 0;
              }
              if (frame.type === "TXXX") {
                var index = 1;
                var description = utf8ArrayToStr(frame.data.subarray(index), true);
                index += description.length + 1;
                var value = utf8ArrayToStr(frame.data.subarray(index));
                return {
                  key: frame.type,
                  info: description,
                  data: value
                };
              }
              var text = utf8ArrayToStr(frame.data.subarray(1));
              return {
                key: frame.type,
                data: text
              };
            };
            var decodeURLFrame = function decodeURLFrame2(frame) {
              if (frame.type === "WXXX") {
                if (frame.size < 2) {
                  return void 0;
                }
                var index = 1;
                var description = utf8ArrayToStr(frame.data.subarray(index), true);
                index += description.length + 1;
                var value = utf8ArrayToStr(frame.data.subarray(index));
                return {
                  key: frame.type,
                  info: description,
                  data: value
                };
              }
              var url = utf8ArrayToStr(frame.data);
              return {
                key: frame.type,
                data: url
              };
            };
            var readTimeStamp = function readTimeStamp2(timeStampFrame) {
              if (timeStampFrame.data.byteLength === 8) {
                var data = new Uint8Array(timeStampFrame.data);
                var pts33Bit = data[3] & 1;
                var timestamp = (data[4] << 23) + (data[5] << 15) + (data[6] << 7) + data[7];
                timestamp /= 45;
                if (pts33Bit) {
                  timestamp += 4772185884e-2;
                }
                return Math.round(timestamp);
              }
              return void 0;
            };
            var utf8ArrayToStr = function utf8ArrayToStr2(array, exitOnNull) {
              if (exitOnNull === void 0) {
                exitOnNull = false;
              }
              var decoder2 = getTextDecoder();
              if (decoder2) {
                var decoded = decoder2.decode(array);
                if (exitOnNull) {
                  var idx = decoded.indexOf("\0");
                  return idx !== -1 ? decoded.substring(0, idx) : decoded;
                }
                return decoded.replace(/\0/g, "");
              }
              var len = array.length;
              var c4;
              var char2;
              var char3;
              var out = "";
              var i3 = 0;
              while (i3 < len) {
                c4 = array[i3++];
                if (c4 === 0 && exitOnNull) {
                  return out;
                } else if (c4 === 0 || c4 === 3) {
                  continue;
                }
                switch (c4 >> 4) {
                  case 0:
                  case 1:
                  case 2:
                  case 3:
                  case 4:
                  case 5:
                  case 6:
                  case 7:
                    out += String.fromCharCode(c4);
                    break;
                  case 12:
                  case 13:
                    char2 = array[i3++];
                    out += String.fromCharCode((c4 & 31) << 6 | char2 & 63);
                    break;
                  case 14:
                    char2 = array[i3++];
                    char3 = array[i3++];
                    out += String.fromCharCode((c4 & 15) << 12 | (char2 & 63) << 6 | (char3 & 63) << 0);
                    break;
                  default:
                }
              }
              return out;
            };
            var testables = {
              decodeTextFrame
            };
            var decoder;
            function getTextDecoder() {
              if (!decoder && typeof self.TextDecoder !== "undefined") {
                decoder = new self.TextDecoder("utf-8");
              }
              return decoder;
            }
          },
          "./src/demux/mp3demuxer.ts": function(module2, __webpack_exports__, __webpack_require__) {
            "use strict";
            __webpack_require__.r(__webpack_exports__);
            var _base_audio_demuxer__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("./src/demux/base-audio-demuxer.ts");
            var _demux_id3__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("./src/demux/id3.ts");
            var _utils_logger__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__("./src/utils/logger.ts");
            var _mpegaudio__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__("./src/demux/mpegaudio.ts");
            function _inheritsLoose(subClass, superClass) {
              subClass.prototype = Object.create(superClass.prototype);
              subClass.prototype.constructor = subClass;
              _setPrototypeOf(subClass, superClass);
            }
            function _setPrototypeOf(o3, p5) {
              _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf2(o4, p6) {
                o4.__proto__ = p6;
                return o4;
              };
              return _setPrototypeOf(o3, p5);
            }
            var MP3Demuxer = /* @__PURE__ */ function(_BaseAudioDemuxer) {
              _inheritsLoose(MP3Demuxer2, _BaseAudioDemuxer);
              function MP3Demuxer2() {
                return _BaseAudioDemuxer.apply(this, arguments) || this;
              }
              var _proto = MP3Demuxer2.prototype;
              _proto.resetInitSegment = function resetInitSegment(audioCodec, videoCodec, duration) {
                _BaseAudioDemuxer.prototype.resetInitSegment.call(this, audioCodec, videoCodec, duration);
                this._audioTrack = {
                  container: "audio/mpeg",
                  type: "audio",
                  id: 2,
                  pid: -1,
                  sequenceNumber: 0,
                  isAAC: false,
                  samples: [],
                  manifestCodec: audioCodec,
                  duration,
                  inputTimeScale: 9e4,
                  dropped: 0
                };
              };
              MP3Demuxer2.probe = function probe(data) {
                if (!data) {
                  return false;
                }
                var id3Data = _demux_id3__WEBPACK_IMPORTED_MODULE_1__["getID3Data"](data, 0) || [];
                var offset = id3Data.length;
                for (var length = data.length; offset < length; offset++) {
                  if (_mpegaudio__WEBPACK_IMPORTED_MODULE_3__["probe"](data, offset)) {
                    _utils_logger__WEBPACK_IMPORTED_MODULE_2__["logger"].log("MPEG Audio sync word found !");
                    return true;
                  }
                }
                return false;
              };
              _proto.canParse = function canParse(data, offset) {
                return _mpegaudio__WEBPACK_IMPORTED_MODULE_3__["canParse"](data, offset);
              };
              _proto.appendFrame = function appendFrame(track, data, offset) {
                if (this.initPTS === null) {
                  return;
                }
                return _mpegaudio__WEBPACK_IMPORTED_MODULE_3__["appendFrame"](track, data, offset, this.initPTS, this.frameIndex);
              };
              return MP3Demuxer2;
            }(_base_audio_demuxer__WEBPACK_IMPORTED_MODULE_0__["default"]);
            MP3Demuxer.minProbeByteLength = 4;
            __webpack_exports__["default"] = MP3Demuxer;
          },
          "./src/demux/mp4demuxer.ts": function(module2, __webpack_exports__, __webpack_require__) {
            "use strict";
            __webpack_require__.r(__webpack_exports__);
            var _utils_mp4_tools__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("./src/utils/mp4-tools.ts");
            var _dummy_demuxed_track__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("./src/demux/dummy-demuxed-track.ts");
            var MP4Demuxer = /* @__PURE__ */ function() {
              function MP4Demuxer2(observer, config2) {
                this.remainderData = null;
                this.config = void 0;
                this.config = config2;
              }
              var _proto = MP4Demuxer2.prototype;
              _proto.resetTimeStamp = function resetTimeStamp() {
              };
              _proto.resetInitSegment = function resetInitSegment() {
              };
              _proto.resetContiguity = function resetContiguity() {
              };
              MP4Demuxer2.probe = function probe(data) {
                return Object(_utils_mp4_tools__WEBPACK_IMPORTED_MODULE_0__["findBox"])({
                  data,
                  start: 0,
                  end: Math.min(data.length, 16384)
                }, ["moof"]).length > 0;
              };
              _proto.demux = function demux(data) {
                var avcSamples = data;
                var avcTrack = Object(_dummy_demuxed_track__WEBPACK_IMPORTED_MODULE_1__["dummyTrack"])();
                if (this.config.progressive) {
                  if (this.remainderData) {
                    avcSamples = Object(_utils_mp4_tools__WEBPACK_IMPORTED_MODULE_0__["appendUint8Array"])(this.remainderData, data);
                  }
                  var segmentedData = Object(_utils_mp4_tools__WEBPACK_IMPORTED_MODULE_0__["segmentValidRange"])(avcSamples);
                  this.remainderData = segmentedData.remainder;
                  avcTrack.samples = segmentedData.valid || new Uint8Array();
                } else {
                  avcTrack.samples = avcSamples;
                }
                return {
                  audioTrack: Object(_dummy_demuxed_track__WEBPACK_IMPORTED_MODULE_1__["dummyTrack"])(),
                  avcTrack,
                  id3Track: Object(_dummy_demuxed_track__WEBPACK_IMPORTED_MODULE_1__["dummyTrack"])(),
                  textTrack: Object(_dummy_demuxed_track__WEBPACK_IMPORTED_MODULE_1__["dummyTrack"])()
                };
              };
              _proto.flush = function flush() {
                var avcTrack = Object(_dummy_demuxed_track__WEBPACK_IMPORTED_MODULE_1__["dummyTrack"])();
                avcTrack.samples = this.remainderData || new Uint8Array();
                this.remainderData = null;
                return {
                  audioTrack: Object(_dummy_demuxed_track__WEBPACK_IMPORTED_MODULE_1__["dummyTrack"])(),
                  avcTrack,
                  id3Track: Object(_dummy_demuxed_track__WEBPACK_IMPORTED_MODULE_1__["dummyTrack"])(),
                  textTrack: Object(_dummy_demuxed_track__WEBPACK_IMPORTED_MODULE_1__["dummyTrack"])()
                };
              };
              _proto.demuxSampleAes = function demuxSampleAes(data, keyData, timeOffset) {
                return Promise.reject(new Error("The MP4 demuxer does not support SAMPLE-AES decryption"));
              };
              _proto.destroy = function destroy() {
              };
              return MP4Demuxer2;
            }();
            MP4Demuxer.minProbeByteLength = 1024;
            __webpack_exports__["default"] = MP4Demuxer;
          },
          "./src/demux/mpegaudio.ts": function(module2, __webpack_exports__, __webpack_require__) {
            "use strict";
            __webpack_require__.r(__webpack_exports__);
            __webpack_require__.d(__webpack_exports__, "appendFrame", function() {
              return appendFrame;
            });
            __webpack_require__.d(__webpack_exports__, "parseHeader", function() {
              return parseHeader;
            });
            __webpack_require__.d(__webpack_exports__, "isHeaderPattern", function() {
              return isHeaderPattern;
            });
            __webpack_require__.d(__webpack_exports__, "isHeader", function() {
              return isHeader;
            });
            __webpack_require__.d(__webpack_exports__, "canParse", function() {
              return canParse;
            });
            __webpack_require__.d(__webpack_exports__, "probe", function() {
              return probe;
            });
            var chromeVersion = null;
            var BitratesMap = [32, 64, 96, 128, 160, 192, 224, 256, 288, 320, 352, 384, 416, 448, 32, 48, 56, 64, 80, 96, 112, 128, 160, 192, 224, 256, 320, 384, 32, 40, 48, 56, 64, 80, 96, 112, 128, 160, 192, 224, 256, 320, 32, 48, 56, 64, 80, 96, 112, 128, 144, 160, 176, 192, 224, 256, 8, 16, 24, 32, 40, 48, 56, 64, 80, 96, 112, 128, 144, 160];
            var SamplingRateMap = [44100, 48e3, 32e3, 22050, 24e3, 16e3, 11025, 12e3, 8e3];
            var SamplesCoefficients = [
              [
                0,
                72,
                144,
                12
              ],
              [
                0,
                0,
                0,
                0
              ],
              [
                0,
                72,
                144,
                12
              ],
              [
                0,
                144,
                144,
                12
              ]
            ];
            var BytesInSlot = [
              0,
              1,
              1,
              4
            ];
            function appendFrame(track, data, offset, pts, frameIndex) {
              if (offset + 24 > data.length) {
                return;
              }
              var header = parseHeader(data, offset);
              if (header && offset + header.frameLength <= data.length) {
                var frameDuration = header.samplesPerFrame * 9e4 / header.sampleRate;
                var stamp = pts + frameIndex * frameDuration;
                var sample = {
                  unit: data.subarray(offset, offset + header.frameLength),
                  pts: stamp,
                  dts: stamp
                };
                track.config = [];
                track.channelCount = header.channelCount;
                track.samplerate = header.sampleRate;
                track.samples.push(sample);
                return {
                  sample,
                  length: header.frameLength,
                  missing: 0
                };
              }
            }
            function parseHeader(data, offset) {
              var mpegVersion = data[offset + 1] >> 3 & 3;
              var mpegLayer = data[offset + 1] >> 1 & 3;
              var bitRateIndex = data[offset + 2] >> 4 & 15;
              var sampleRateIndex = data[offset + 2] >> 2 & 3;
              if (mpegVersion !== 1 && bitRateIndex !== 0 && bitRateIndex !== 15 && sampleRateIndex !== 3) {
                var paddingBit = data[offset + 2] >> 1 & 1;
                var channelMode = data[offset + 3] >> 6;
                var columnInBitrates = mpegVersion === 3 ? 3 - mpegLayer : mpegLayer === 3 ? 3 : 4;
                var bitRate = BitratesMap[columnInBitrates * 14 + bitRateIndex - 1] * 1e3;
                var columnInSampleRates = mpegVersion === 3 ? 0 : mpegVersion === 2 ? 1 : 2;
                var sampleRate = SamplingRateMap[columnInSampleRates * 3 + sampleRateIndex];
                var channelCount = channelMode === 3 ? 1 : 2;
                var sampleCoefficient = SamplesCoefficients[mpegVersion][mpegLayer];
                var bytesInSlot = BytesInSlot[mpegLayer];
                var samplesPerFrame = sampleCoefficient * 8 * bytesInSlot;
                var frameLength = Math.floor(sampleCoefficient * bitRate / sampleRate + paddingBit) * bytesInSlot;
                if (chromeVersion === null) {
                  var userAgent = navigator.userAgent || "";
                  var result = userAgent.match(/Chrome\/(\d+)/i);
                  chromeVersion = result ? parseInt(result[1]) : 0;
                }
                var needChromeFix = !!chromeVersion && chromeVersion <= 87;
                if (needChromeFix && mpegLayer === 2 && bitRate >= 224e3 && channelMode === 0) {
                  data[offset + 3] = data[offset + 3] | 128;
                }
                return {
                  sampleRate,
                  channelCount,
                  frameLength,
                  samplesPerFrame
                };
              }
            }
            function isHeaderPattern(data, offset) {
              return data[offset] === 255 && (data[offset + 1] & 224) === 224 && (data[offset + 1] & 6) !== 0;
            }
            function isHeader(data, offset) {
              return offset + 1 < data.length && isHeaderPattern(data, offset);
            }
            function canParse(data, offset) {
              var headerSize = 4;
              return isHeaderPattern(data, offset) && headerSize <= data.length - offset;
            }
            function probe(data, offset) {
              if (offset + 1 < data.length && isHeaderPattern(data, offset)) {
                var headerLength = 4;
                var header = parseHeader(data, offset);
                var frameLength = headerLength;
                if (header !== null && header !== void 0 && header.frameLength) {
                  frameLength = header.frameLength;
                }
                var newOffset = offset + frameLength;
                return newOffset === data.length || isHeader(data, newOffset);
              }
              return false;
            }
          },
          "./src/demux/sample-aes.ts": function(module2, __webpack_exports__, __webpack_require__) {
            "use strict";
            __webpack_require__.r(__webpack_exports__);
            var _crypt_decrypter__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("./src/crypt/decrypter.ts");
            var _tsdemuxer__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("./src/demux/tsdemuxer.ts");
            var SampleAesDecrypter = /* @__PURE__ */ function() {
              function SampleAesDecrypter2(observer, config2, keyData) {
                this.keyData = void 0;
                this.decrypter = void 0;
                this.keyData = keyData;
                this.decrypter = new _crypt_decrypter__WEBPACK_IMPORTED_MODULE_0__["default"](observer, config2, {
                  removePKCS7Padding: false
                });
              }
              var _proto = SampleAesDecrypter2.prototype;
              _proto.decryptBuffer = function decryptBuffer(encryptedData, callback) {
                this.decrypter.decrypt(encryptedData, this.keyData.key.buffer, this.keyData.iv.buffer, callback);
              };
              _proto.decryptAacSample = function decryptAacSample(samples, sampleIndex, callback, sync) {
                var curUnit = samples[sampleIndex].unit;
                var encryptedData = curUnit.subarray(16, curUnit.length - curUnit.length % 16);
                var encryptedBuffer = encryptedData.buffer.slice(encryptedData.byteOffset, encryptedData.byteOffset + encryptedData.length);
                var localthis = this;
                this.decryptBuffer(encryptedBuffer, function(decryptedBuffer) {
                  var decryptedData = new Uint8Array(decryptedBuffer);
                  curUnit.set(decryptedData, 16);
                  if (!sync) {
                    localthis.decryptAacSamples(samples, sampleIndex + 1, callback);
                  }
                });
              };
              _proto.decryptAacSamples = function decryptAacSamples(samples, sampleIndex, callback) {
                for (; ; sampleIndex++) {
                  if (sampleIndex >= samples.length) {
                    callback();
                    return;
                  }
                  if (samples[sampleIndex].unit.length < 32) {
                    continue;
                  }
                  var sync = this.decrypter.isSync();
                  this.decryptAacSample(samples, sampleIndex, callback, sync);
                  if (!sync) {
                    return;
                  }
                }
              };
              _proto.getAvcEncryptedData = function getAvcEncryptedData(decodedData) {
                var encryptedDataLen = Math.floor((decodedData.length - 48) / 160) * 16 + 16;
                var encryptedData = new Int8Array(encryptedDataLen);
                var outputPos = 0;
                for (var inputPos = 32; inputPos < decodedData.length - 16; inputPos += 160, outputPos += 16) {
                  encryptedData.set(decodedData.subarray(inputPos, inputPos + 16), outputPos);
                }
                return encryptedData;
              };
              _proto.getAvcDecryptedUnit = function getAvcDecryptedUnit(decodedData, decryptedData) {
                var uint8DecryptedData = new Uint8Array(decryptedData);
                var inputPos = 0;
                for (var outputPos = 32; outputPos < decodedData.length - 16; outputPos += 160, inputPos += 16) {
                  decodedData.set(uint8DecryptedData.subarray(inputPos, inputPos + 16), outputPos);
                }
                return decodedData;
              };
              _proto.decryptAvcSample = function decryptAvcSample(samples, sampleIndex, unitIndex, callback, curUnit, sync) {
                var decodedData = Object(_tsdemuxer__WEBPACK_IMPORTED_MODULE_1__["discardEPB"])(curUnit.data);
                var encryptedData = this.getAvcEncryptedData(decodedData);
                var localthis = this;
                this.decryptBuffer(encryptedData.buffer, function(decryptedBuffer) {
                  curUnit.data = localthis.getAvcDecryptedUnit(decodedData, decryptedBuffer);
                  if (!sync) {
                    localthis.decryptAvcSamples(samples, sampleIndex, unitIndex + 1, callback);
                  }
                });
              };
              _proto.decryptAvcSamples = function decryptAvcSamples(samples, sampleIndex, unitIndex, callback) {
                if (samples instanceof Uint8Array) {
                  throw new Error("Cannot decrypt samples of type Uint8Array");
                }
                for (; ; sampleIndex++, unitIndex = 0) {
                  if (sampleIndex >= samples.length) {
                    callback();
                    return;
                  }
                  var curUnits = samples[sampleIndex].units;
                  for (; ; unitIndex++) {
                    if (unitIndex >= curUnits.length) {
                      break;
                    }
                    var curUnit = curUnits[unitIndex];
                    if (curUnit.data.length <= 48 || curUnit.type !== 1 && curUnit.type !== 5) {
                      continue;
                    }
                    var sync = this.decrypter.isSync();
                    this.decryptAvcSample(samples, sampleIndex, unitIndex, callback, curUnit, sync);
                    if (!sync) {
                      return;
                    }
                  }
                }
              };
              return SampleAesDecrypter2;
            }();
            __webpack_exports__["default"] = SampleAesDecrypter;
          },
          "./src/demux/transmuxer-interface.ts": function(module2, __webpack_exports__, __webpack_require__) {
            "use strict";
            __webpack_require__.r(__webpack_exports__);
            __webpack_require__.d(__webpack_exports__, "default", function() {
              return TransmuxerInterface;
            });
            var webworkify_webpack__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("./node_modules/webworkify-webpack/index.js");
            var webworkify_webpack__WEBPACK_IMPORTED_MODULE_0___default = /* @__PURE__ */ __webpack_require__.n(webworkify_webpack__WEBPACK_IMPORTED_MODULE_0__);
            var _events__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("./src/events.ts");
            var _demux_transmuxer__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__("./src/demux/transmuxer.ts");
            var _utils_logger__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__("./src/utils/logger.ts");
            var _errors__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__("./src/errors.ts");
            var _utils_mediasource_helper__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__("./src/utils/mediasource-helper.ts");
            var eventemitter3__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__("./node_modules/eventemitter3/index.js");
            var eventemitter3__WEBPACK_IMPORTED_MODULE_6___default = /* @__PURE__ */ __webpack_require__.n(eventemitter3__WEBPACK_IMPORTED_MODULE_6__);
            var MediaSource2 = Object(_utils_mediasource_helper__WEBPACK_IMPORTED_MODULE_5__["getMediaSource"])() || {
              isTypeSupported: function isTypeSupported() {
                return false;
              }
            };
            var TransmuxerInterface = /* @__PURE__ */ function() {
              function TransmuxerInterface2(hls, id, onTransmuxComplete, onFlush) {
                var _this = this;
                this.hls = void 0;
                this.id = void 0;
                this.observer = void 0;
                this.frag = null;
                this.part = null;
                this.worker = void 0;
                this.onwmsg = void 0;
                this.transmuxer = null;
                this.onTransmuxComplete = void 0;
                this.onFlush = void 0;
                this.hls = hls;
                this.id = id;
                this.onTransmuxComplete = onTransmuxComplete;
                this.onFlush = onFlush;
                var config2 = hls.config;
                var forwardMessage = function forwardMessage2(ev, data) {
                  data = data || {};
                  data.frag = _this.frag;
                  data.id = _this.id;
                  hls.trigger(ev, data);
                };
                this.observer = new eventemitter3__WEBPACK_IMPORTED_MODULE_6__["EventEmitter"]();
                this.observer.on(_events__WEBPACK_IMPORTED_MODULE_1__["Events"].FRAG_DECRYPTED, forwardMessage);
                this.observer.on(_events__WEBPACK_IMPORTED_MODULE_1__["Events"].ERROR, forwardMessage);
                var typeSupported = {
                  mp4: MediaSource2.isTypeSupported("video/mp4"),
                  mpeg: MediaSource2.isTypeSupported("audio/mpeg"),
                  mp3: MediaSource2.isTypeSupported('audio/mp4; codecs="mp3"')
                };
                var vendor = navigator.vendor;
                if (config2.enableWorker && typeof Worker !== "undefined") {
                  _utils_logger__WEBPACK_IMPORTED_MODULE_3__["logger"].log("demuxing in webworker");
                  var worker;
                  try {
                    worker = this.worker = webworkify_webpack__WEBPACK_IMPORTED_MODULE_0__("./src/demux/transmuxer-worker.ts");
                    this.onwmsg = this.onWorkerMessage.bind(this);
                    worker.addEventListener("message", this.onwmsg);
                    worker.onerror = function(event) {
                      hls.trigger(_events__WEBPACK_IMPORTED_MODULE_1__["Events"].ERROR, {
                        type: _errors__WEBPACK_IMPORTED_MODULE_4__["ErrorTypes"].OTHER_ERROR,
                        details: _errors__WEBPACK_IMPORTED_MODULE_4__["ErrorDetails"].INTERNAL_EXCEPTION,
                        fatal: true,
                        event: "demuxerWorker",
                        error: new Error(event.message + "  (" + event.filename + ":" + event.lineno + ")")
                      });
                    };
                    worker.postMessage({
                      cmd: "init",
                      typeSupported,
                      vendor,
                      id,
                      config: JSON.stringify(config2)
                    });
                  } catch (err) {
                    _utils_logger__WEBPACK_IMPORTED_MODULE_3__["logger"].warn("Error in worker:", err);
                    _utils_logger__WEBPACK_IMPORTED_MODULE_3__["logger"].error("Error while initializing DemuxerWorker, fallback to inline");
                    if (worker) {
                      self.URL.revokeObjectURL(worker.objectURL);
                    }
                    this.transmuxer = new _demux_transmuxer__WEBPACK_IMPORTED_MODULE_2__["default"](this.observer, typeSupported, config2, vendor, id);
                    this.worker = null;
                  }
                } else {
                  this.transmuxer = new _demux_transmuxer__WEBPACK_IMPORTED_MODULE_2__["default"](this.observer, typeSupported, config2, vendor, id);
                }
              }
              var _proto = TransmuxerInterface2.prototype;
              _proto.destroy = function destroy() {
                var w4 = this.worker;
                if (w4) {
                  w4.removeEventListener("message", this.onwmsg);
                  w4.terminate();
                  this.worker = null;
                } else {
                  var transmuxer = this.transmuxer;
                  if (transmuxer) {
                    transmuxer.destroy();
                    this.transmuxer = null;
                  }
                }
                var observer = this.observer;
                if (observer) {
                  observer.removeAllListeners();
                }
                this.observer = null;
              };
              _proto.push = function push(data, initSegmentData, audioCodec, videoCodec, frag, part, duration, accurateTimeOffset, chunkMeta, defaultInitPTS) {
                var _frag$initSegment, _lastFrag$initSegment, _this2 = this;
                chunkMeta.transmuxing.start = self.performance.now();
                var transmuxer = this.transmuxer, worker = this.worker;
                var timeOffset = part ? part.start : frag.start;
                var decryptdata = frag.decryptdata;
                var lastFrag = this.frag;
                var discontinuity = !(lastFrag && frag.cc === lastFrag.cc);
                var trackSwitch = !(lastFrag && chunkMeta.level === lastFrag.level);
                var snDiff = lastFrag ? chunkMeta.sn - lastFrag.sn : -1;
                var partDiff = this.part ? chunkMeta.part - this.part.index : 1;
                var contiguous = !trackSwitch && (snDiff === 1 || snDiff === 0 && partDiff === 1);
                var now = self.performance.now();
                if (trackSwitch || snDiff || frag.stats.parsing.start === 0) {
                  frag.stats.parsing.start = now;
                }
                if (part && (partDiff || !contiguous)) {
                  part.stats.parsing.start = now;
                }
                var initSegmentChange = !(lastFrag && ((_frag$initSegment = frag.initSegment) === null || _frag$initSegment === void 0 ? void 0 : _frag$initSegment.url) === ((_lastFrag$initSegment = lastFrag.initSegment) === null || _lastFrag$initSegment === void 0 ? void 0 : _lastFrag$initSegment.url));
                var state = new _demux_transmuxer__WEBPACK_IMPORTED_MODULE_2__["TransmuxState"](discontinuity, contiguous, accurateTimeOffset, trackSwitch, timeOffset, initSegmentChange);
                if (!contiguous || discontinuity || initSegmentChange) {
                  _utils_logger__WEBPACK_IMPORTED_MODULE_3__["logger"].log("[transmuxer-interface, " + frag.type + "]: Starting new transmux session for sn: " + chunkMeta.sn + " p: " + chunkMeta.part + " level: " + chunkMeta.level + " id: " + chunkMeta.id + "\n        discontinuity: " + discontinuity + "\n        trackSwitch: " + trackSwitch + "\n        contiguous: " + contiguous + "\n        accurateTimeOffset: " + accurateTimeOffset + "\n        timeOffset: " + timeOffset + "\n        initSegmentChange: " + initSegmentChange);
                  var config2 = new _demux_transmuxer__WEBPACK_IMPORTED_MODULE_2__["TransmuxConfig"](audioCodec, videoCodec, initSegmentData, duration, defaultInitPTS);
                  this.configureTransmuxer(config2);
                }
                this.frag = frag;
                this.part = part;
                if (worker) {
                  worker.postMessage({
                    cmd: "demux",
                    data,
                    decryptdata,
                    chunkMeta,
                    state
                  }, data instanceof ArrayBuffer ? [data] : []);
                } else if (transmuxer) {
                  var _transmuxResult = transmuxer.push(data, decryptdata, chunkMeta, state);
                  if (Object(_demux_transmuxer__WEBPACK_IMPORTED_MODULE_2__["isPromise"])(_transmuxResult)) {
                    _transmuxResult.then(function(data2) {
                      _this2.handleTransmuxComplete(data2);
                    });
                  } else {
                    this.handleTransmuxComplete(_transmuxResult);
                  }
                }
              };
              _proto.flush = function flush(chunkMeta) {
                var _this3 = this;
                chunkMeta.transmuxing.start = self.performance.now();
                var transmuxer = this.transmuxer, worker = this.worker;
                if (worker) {
                  worker.postMessage({
                    cmd: "flush",
                    chunkMeta
                  });
                } else if (transmuxer) {
                  var _transmuxResult2 = transmuxer.flush(chunkMeta);
                  if (Object(_demux_transmuxer__WEBPACK_IMPORTED_MODULE_2__["isPromise"])(_transmuxResult2)) {
                    _transmuxResult2.then(function(data) {
                      _this3.handleFlushResult(data, chunkMeta);
                    });
                  } else {
                    this.handleFlushResult(_transmuxResult2, chunkMeta);
                  }
                }
              };
              _proto.handleFlushResult = function handleFlushResult(results, chunkMeta) {
                var _this4 = this;
                results.forEach(function(result) {
                  _this4.handleTransmuxComplete(result);
                });
                this.onFlush(chunkMeta);
              };
              _proto.onWorkerMessage = function onWorkerMessage(ev) {
                var data = ev.data;
                var hls = this.hls;
                switch (data.event) {
                  case "init": {
                    self.URL.revokeObjectURL(this.worker.objectURL);
                    break;
                  }
                  case "transmuxComplete": {
                    this.handleTransmuxComplete(data.data);
                    break;
                  }
                  case "flush": {
                    this.onFlush(data.data);
                    break;
                  }
                  default: {
                    data.data = data.data || {};
                    data.data.frag = this.frag;
                    data.data.id = this.id;
                    hls.trigger(data.event, data.data);
                    break;
                  }
                }
              };
              _proto.configureTransmuxer = function configureTransmuxer(config2) {
                var worker = this.worker, transmuxer = this.transmuxer;
                if (worker) {
                  worker.postMessage({
                    cmd: "configure",
                    config: config2
                  });
                } else if (transmuxer) {
                  transmuxer.configure(config2);
                }
              };
              _proto.handleTransmuxComplete = function handleTransmuxComplete(result) {
                result.chunkMeta.transmuxing.end = self.performance.now();
                this.onTransmuxComplete(result);
              };
              return TransmuxerInterface2;
            }();
          },
          "./src/demux/transmuxer-worker.ts": function(module2, __webpack_exports__, __webpack_require__) {
            "use strict";
            __webpack_require__.r(__webpack_exports__);
            __webpack_require__.d(__webpack_exports__, "default", function() {
              return TransmuxerWorker;
            });
            var _demux_transmuxer__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("./src/demux/transmuxer.ts");
            var _events__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("./src/events.ts");
            var _utils_logger__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__("./src/utils/logger.ts");
            var eventemitter3__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__("./node_modules/eventemitter3/index.js");
            var eventemitter3__WEBPACK_IMPORTED_MODULE_3___default = /* @__PURE__ */ __webpack_require__.n(eventemitter3__WEBPACK_IMPORTED_MODULE_3__);
            function TransmuxerWorker(self2) {
              var observer = new eventemitter3__WEBPACK_IMPORTED_MODULE_3__["EventEmitter"]();
              var forwardMessage = function forwardMessage2(ev, data) {
                self2.postMessage({
                  event: ev,
                  data
                });
              };
              observer.on(_events__WEBPACK_IMPORTED_MODULE_1__["Events"].FRAG_DECRYPTED, forwardMessage);
              observer.on(_events__WEBPACK_IMPORTED_MODULE_1__["Events"].ERROR, forwardMessage);
              self2.addEventListener("message", function(ev) {
                var data = ev.data;
                switch (data.cmd) {
                  case "init": {
                    var config2 = JSON.parse(data.config);
                    self2.transmuxer = new _demux_transmuxer__WEBPACK_IMPORTED_MODULE_0__["default"](observer, data.typeSupported, config2, data.vendor, data.id);
                    Object(_utils_logger__WEBPACK_IMPORTED_MODULE_2__["enableLogs"])(config2.debug);
                    forwardMessage("init", null);
                    break;
                  }
                  case "configure": {
                    self2.transmuxer.configure(data.config);
                    break;
                  }
                  case "demux": {
                    var transmuxResult = self2.transmuxer.push(data.data, data.decryptdata, data.chunkMeta, data.state);
                    if (Object(_demux_transmuxer__WEBPACK_IMPORTED_MODULE_0__["isPromise"])(transmuxResult)) {
                      transmuxResult.then(function(data2) {
                        emitTransmuxComplete(self2, data2);
                      });
                    } else {
                      emitTransmuxComplete(self2, transmuxResult);
                    }
                    break;
                  }
                  case "flush": {
                    var id = data.chunkMeta;
                    var _transmuxResult = self2.transmuxer.flush(id);
                    if (Object(_demux_transmuxer__WEBPACK_IMPORTED_MODULE_0__["isPromise"])(_transmuxResult)) {
                      _transmuxResult.then(function(results) {
                        handleFlushResult(self2, results, id);
                      });
                    } else {
                      handleFlushResult(self2, _transmuxResult, id);
                    }
                    break;
                  }
                  default:
                    break;
                }
              });
            }
            function emitTransmuxComplete(self2, transmuxResult) {
              if (isEmptyResult(transmuxResult.remuxResult)) {
                return;
              }
              var transferable = [];
              var _transmuxResult$remux = transmuxResult.remuxResult, audio = _transmuxResult$remux.audio, video = _transmuxResult$remux.video;
              if (audio) {
                addToTransferable(transferable, audio);
              }
              if (video) {
                addToTransferable(transferable, video);
              }
              self2.postMessage({
                event: "transmuxComplete",
                data: transmuxResult
              }, transferable);
            }
            function addToTransferable(transferable, track) {
              if (track.data1) {
                transferable.push(track.data1.buffer);
              }
              if (track.data2) {
                transferable.push(track.data2.buffer);
              }
            }
            function handleFlushResult(self2, results, chunkMeta) {
              results.forEach(function(result) {
                emitTransmuxComplete(self2, result);
              });
              self2.postMessage({
                event: "flush",
                data: chunkMeta
              });
            }
            function isEmptyResult(remuxResult) {
              return !remuxResult.audio && !remuxResult.video && !remuxResult.text && !remuxResult.id3 && !remuxResult.initSegment;
            }
          },
          "./src/demux/transmuxer.ts": function(module2, __webpack_exports__, __webpack_require__) {
            "use strict";
            __webpack_require__.r(__webpack_exports__);
            __webpack_require__.d(__webpack_exports__, "default", function() {
              return Transmuxer;
            });
            __webpack_require__.d(__webpack_exports__, "isPromise", function() {
              return isPromise;
            });
            __webpack_require__.d(__webpack_exports__, "TransmuxConfig", function() {
              return TransmuxConfig;
            });
            __webpack_require__.d(__webpack_exports__, "TransmuxState", function() {
              return TransmuxState;
            });
            var _events__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("./src/events.ts");
            var _errors__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("./src/errors.ts");
            var _crypt_decrypter__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__("./src/crypt/decrypter.ts");
            var _demux_aacdemuxer__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__("./src/demux/aacdemuxer.ts");
            var _demux_mp4demuxer__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__("./src/demux/mp4demuxer.ts");
            var _demux_tsdemuxer__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__("./src/demux/tsdemuxer.ts");
            var _demux_mp3demuxer__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__("./src/demux/mp3demuxer.ts");
            var _remux_mp4_remuxer__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__("./src/remux/mp4-remuxer.ts");
            var _remux_passthrough_remuxer__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__("./src/remux/passthrough-remuxer.ts");
            var _chunk_cache__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__("./src/demux/chunk-cache.ts");
            var _utils_mp4_tools__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__("./src/utils/mp4-tools.ts");
            var _utils_logger__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__("./src/utils/logger.ts");
            var now;
            try {
              now = self.performance.now.bind(self.performance);
            } catch (err) {
              _utils_logger__WEBPACK_IMPORTED_MODULE_11__["logger"].debug("Unable to use Performance API on this environment");
              now = self.Date.now;
            }
            var muxConfig = [{
              demux: _demux_tsdemuxer__WEBPACK_IMPORTED_MODULE_5__["default"],
              remux: _remux_mp4_remuxer__WEBPACK_IMPORTED_MODULE_7__["default"]
            }, {
              demux: _demux_mp4demuxer__WEBPACK_IMPORTED_MODULE_4__["default"],
              remux: _remux_passthrough_remuxer__WEBPACK_IMPORTED_MODULE_8__["default"]
            }, {
              demux: _demux_aacdemuxer__WEBPACK_IMPORTED_MODULE_3__["default"],
              remux: _remux_mp4_remuxer__WEBPACK_IMPORTED_MODULE_7__["default"]
            }, {
              demux: _demux_mp3demuxer__WEBPACK_IMPORTED_MODULE_6__["default"],
              remux: _remux_mp4_remuxer__WEBPACK_IMPORTED_MODULE_7__["default"]
            }];
            var minProbeByteLength = 1024;
            muxConfig.forEach(function(_ref) {
              var demux = _ref.demux;
              minProbeByteLength = Math.max(minProbeByteLength, demux.minProbeByteLength);
            });
            var Transmuxer = /* @__PURE__ */ function() {
              function Transmuxer2(observer, typeSupported, config2, vendor, id) {
                this.observer = void 0;
                this.typeSupported = void 0;
                this.config = void 0;
                this.vendor = void 0;
                this.id = void 0;
                this.demuxer = void 0;
                this.remuxer = void 0;
                this.decrypter = void 0;
                this.probe = void 0;
                this.decryptionPromise = null;
                this.transmuxConfig = void 0;
                this.currentTransmuxState = void 0;
                this.cache = new _chunk_cache__WEBPACK_IMPORTED_MODULE_9__["default"]();
                this.observer = observer;
                this.typeSupported = typeSupported;
                this.config = config2;
                this.vendor = vendor;
                this.id = id;
              }
              var _proto = Transmuxer2.prototype;
              _proto.configure = function configure(transmuxConfig) {
                this.transmuxConfig = transmuxConfig;
                if (this.decrypter) {
                  this.decrypter.reset();
                }
              };
              _proto.push = function push(data, decryptdata, chunkMeta, state) {
                var _this = this;
                var stats = chunkMeta.transmuxing;
                stats.executeStart = now();
                var uintData = new Uint8Array(data);
                var cache = this.cache, config2 = this.config, currentTransmuxState = this.currentTransmuxState, transmuxConfig = this.transmuxConfig;
                if (state) {
                  this.currentTransmuxState = state;
                }
                var keyData = getEncryptionType(uintData, decryptdata);
                if (keyData && keyData.method === "AES-128") {
                  var decrypter = this.getDecrypter();
                  if (config2.enableSoftwareAES) {
                    var decryptedData = decrypter.softwareDecrypt(uintData, keyData.key.buffer, keyData.iv.buffer);
                    if (!decryptedData) {
                      stats.executeEnd = now();
                      return emptyResult(chunkMeta);
                    }
                    uintData = new Uint8Array(decryptedData);
                  } else {
                    this.decryptionPromise = decrypter.webCryptoDecrypt(uintData, keyData.key.buffer, keyData.iv.buffer).then(function(decryptedData2) {
                      var result2 = _this.push(decryptedData2, null, chunkMeta);
                      _this.decryptionPromise = null;
                      return result2;
                    });
                    return this.decryptionPromise;
                  }
                }
                var _ref2 = state || currentTransmuxState, contiguous = _ref2.contiguous, discontinuity = _ref2.discontinuity, trackSwitch = _ref2.trackSwitch, accurateTimeOffset = _ref2.accurateTimeOffset, timeOffset = _ref2.timeOffset, initSegmentChange = _ref2.initSegmentChange;
                var audioCodec = transmuxConfig.audioCodec, videoCodec = transmuxConfig.videoCodec, defaultInitPts = transmuxConfig.defaultInitPts, duration = transmuxConfig.duration, initSegmentData = transmuxConfig.initSegmentData;
                if (discontinuity || trackSwitch || initSegmentChange) {
                  this.resetInitSegment(initSegmentData, audioCodec, videoCodec, duration);
                }
                if (discontinuity || initSegmentChange) {
                  this.resetInitialTimestamp(defaultInitPts);
                }
                if (!contiguous) {
                  this.resetContiguity();
                }
                if (this.needsProbing(uintData, discontinuity, trackSwitch)) {
                  if (cache.dataLength) {
                    var cachedData = cache.flush();
                    uintData = Object(_utils_mp4_tools__WEBPACK_IMPORTED_MODULE_10__["appendUint8Array"])(cachedData, uintData);
                  }
                  this.configureTransmuxer(uintData, transmuxConfig);
                }
                var result = this.transmux(uintData, keyData, timeOffset, accurateTimeOffset, chunkMeta);
                var currentState = this.currentTransmuxState;
                currentState.contiguous = true;
                currentState.discontinuity = false;
                currentState.trackSwitch = false;
                stats.executeEnd = now();
                return result;
              };
              _proto.flush = function flush(chunkMeta) {
                var _this2 = this;
                var stats = chunkMeta.transmuxing;
                stats.executeStart = now();
                var decrypter = this.decrypter, cache = this.cache, currentTransmuxState = this.currentTransmuxState, decryptionPromise = this.decryptionPromise;
                if (decryptionPromise) {
                  return decryptionPromise.then(function() {
                    return _this2.flush(chunkMeta);
                  });
                }
                var transmuxResults = [];
                var timeOffset = currentTransmuxState.timeOffset;
                if (decrypter) {
                  var decryptedData = decrypter.flush();
                  if (decryptedData) {
                    transmuxResults.push(this.push(decryptedData, null, chunkMeta));
                  }
                }
                var bytesSeen = cache.dataLength;
                cache.reset();
                var demuxer = this.demuxer, remuxer = this.remuxer;
                if (!demuxer || !remuxer) {
                  if (bytesSeen >= minProbeByteLength) {
                    this.observer.emit(_events__WEBPACK_IMPORTED_MODULE_0__["Events"].ERROR, _events__WEBPACK_IMPORTED_MODULE_0__["Events"].ERROR, {
                      type: _errors__WEBPACK_IMPORTED_MODULE_1__["ErrorTypes"].MEDIA_ERROR,
                      details: _errors__WEBPACK_IMPORTED_MODULE_1__["ErrorDetails"].FRAG_PARSING_ERROR,
                      fatal: true,
                      reason: "no demux matching with content found"
                    });
                  }
                  stats.executeEnd = now();
                  return [emptyResult(chunkMeta)];
                }
                var demuxResultOrPromise = demuxer.flush(timeOffset);
                if (isPromise(demuxResultOrPromise)) {
                  return demuxResultOrPromise.then(function(demuxResult) {
                    _this2.flushRemux(transmuxResults, demuxResult, chunkMeta);
                    return transmuxResults;
                  });
                }
                this.flushRemux(transmuxResults, demuxResultOrPromise, chunkMeta);
                return transmuxResults;
              };
              _proto.flushRemux = function flushRemux(transmuxResults, demuxResult, chunkMeta) {
                var audioTrack = demuxResult.audioTrack, avcTrack = demuxResult.avcTrack, id3Track = demuxResult.id3Track, textTrack = demuxResult.textTrack;
                var _this$currentTransmux = this.currentTransmuxState, accurateTimeOffset = _this$currentTransmux.accurateTimeOffset, timeOffset = _this$currentTransmux.timeOffset;
                _utils_logger__WEBPACK_IMPORTED_MODULE_11__["logger"].log("[transmuxer.ts]: Flushed fragment " + chunkMeta.sn + (chunkMeta.part > -1 ? " p: " + chunkMeta.part : "") + " of level " + chunkMeta.level);
                var remuxResult = this.remuxer.remux(audioTrack, avcTrack, id3Track, textTrack, timeOffset, accurateTimeOffset, true, this.id);
                transmuxResults.push({
                  remuxResult,
                  chunkMeta
                });
                chunkMeta.transmuxing.executeEnd = now();
              };
              _proto.resetInitialTimestamp = function resetInitialTimestamp(defaultInitPts) {
                var demuxer = this.demuxer, remuxer = this.remuxer;
                if (!demuxer || !remuxer) {
                  return;
                }
                demuxer.resetTimeStamp(defaultInitPts);
                remuxer.resetTimeStamp(defaultInitPts);
              };
              _proto.resetContiguity = function resetContiguity() {
                var demuxer = this.demuxer, remuxer = this.remuxer;
                if (!demuxer || !remuxer) {
                  return;
                }
                demuxer.resetContiguity();
                remuxer.resetNextTimestamp();
              };
              _proto.resetInitSegment = function resetInitSegment(initSegmentData, audioCodec, videoCodec, duration) {
                var demuxer = this.demuxer, remuxer = this.remuxer;
                if (!demuxer || !remuxer) {
                  return;
                }
                demuxer.resetInitSegment(audioCodec, videoCodec, duration);
                remuxer.resetInitSegment(initSegmentData, audioCodec, videoCodec);
              };
              _proto.destroy = function destroy() {
                if (this.demuxer) {
                  this.demuxer.destroy();
                  this.demuxer = void 0;
                }
                if (this.remuxer) {
                  this.remuxer.destroy();
                  this.remuxer = void 0;
                }
              };
              _proto.transmux = function transmux(data, keyData, timeOffset, accurateTimeOffset, chunkMeta) {
                var result;
                if (keyData && keyData.method === "SAMPLE-AES") {
                  result = this.transmuxSampleAes(data, keyData, timeOffset, accurateTimeOffset, chunkMeta);
                } else {
                  result = this.transmuxUnencrypted(data, timeOffset, accurateTimeOffset, chunkMeta);
                }
                return result;
              };
              _proto.transmuxUnencrypted = function transmuxUnencrypted(data, timeOffset, accurateTimeOffset, chunkMeta) {
                var _demux = this.demuxer.demux(data, timeOffset, false, !this.config.progressive), audioTrack = _demux.audioTrack, avcTrack = _demux.avcTrack, id3Track = _demux.id3Track, textTrack = _demux.textTrack;
                var remuxResult = this.remuxer.remux(audioTrack, avcTrack, id3Track, textTrack, timeOffset, accurateTimeOffset, false, this.id);
                return {
                  remuxResult,
                  chunkMeta
                };
              };
              _proto.transmuxSampleAes = function transmuxSampleAes(data, decryptData, timeOffset, accurateTimeOffset, chunkMeta) {
                var _this3 = this;
                return this.demuxer.demuxSampleAes(data, decryptData, timeOffset).then(function(demuxResult) {
                  var remuxResult = _this3.remuxer.remux(demuxResult.audioTrack, demuxResult.avcTrack, demuxResult.id3Track, demuxResult.textTrack, timeOffset, accurateTimeOffset, false, _this3.id);
                  return {
                    remuxResult,
                    chunkMeta
                  };
                });
              };
              _proto.configureTransmuxer = function configureTransmuxer(data, transmuxConfig) {
                var config2 = this.config, observer = this.observer, typeSupported = this.typeSupported, vendor = this.vendor;
                var audioCodec = transmuxConfig.audioCodec, defaultInitPts = transmuxConfig.defaultInitPts, duration = transmuxConfig.duration, initSegmentData = transmuxConfig.initSegmentData, videoCodec = transmuxConfig.videoCodec;
                var mux;
                for (var i3 = 0, len = muxConfig.length; i3 < len; i3++) {
                  if (muxConfig[i3].demux.probe(data)) {
                    mux = muxConfig[i3];
                    break;
                  }
                }
                if (!mux) {
                  _utils_logger__WEBPACK_IMPORTED_MODULE_11__["logger"].warn("Failed to find demuxer by probing frag, treating as mp4 passthrough");
                  mux = {
                    demux: _demux_mp4demuxer__WEBPACK_IMPORTED_MODULE_4__["default"],
                    remux: _remux_passthrough_remuxer__WEBPACK_IMPORTED_MODULE_8__["default"]
                  };
                }
                var demuxer = this.demuxer;
                var remuxer = this.remuxer;
                var Remuxer = mux.remux;
                var Demuxer = mux.demux;
                if (!remuxer || !(remuxer instanceof Remuxer)) {
                  this.remuxer = new Remuxer(observer, config2, typeSupported, vendor);
                }
                if (!demuxer || !(demuxer instanceof Demuxer)) {
                  this.demuxer = new Demuxer(observer, config2, typeSupported);
                  this.probe = Demuxer.probe;
                }
                this.resetInitSegment(initSegmentData, audioCodec, videoCodec, duration);
                this.resetInitialTimestamp(defaultInitPts);
              };
              _proto.needsProbing = function needsProbing(data, discontinuity, trackSwitch) {
                return !this.demuxer || !this.remuxer || discontinuity || trackSwitch;
              };
              _proto.getDecrypter = function getDecrypter() {
                var decrypter = this.decrypter;
                if (!decrypter) {
                  decrypter = this.decrypter = new _crypt_decrypter__WEBPACK_IMPORTED_MODULE_2__["default"](this.observer, this.config);
                }
                return decrypter;
              };
              return Transmuxer2;
            }();
            function getEncryptionType(data, decryptData) {
              var encryptionType = null;
              if (data.byteLength > 0 && decryptData != null && decryptData.key != null && decryptData.iv !== null && decryptData.method != null) {
                encryptionType = decryptData;
              }
              return encryptionType;
            }
            var emptyResult = function emptyResult2(chunkMeta) {
              return {
                remuxResult: {},
                chunkMeta
              };
            };
            function isPromise(p5) {
              return "then" in p5 && p5.then instanceof Function;
            }
            var TransmuxConfig = function TransmuxConfig2(audioCodec, videoCodec, initSegmentData, duration, defaultInitPts) {
              this.audioCodec = void 0;
              this.videoCodec = void 0;
              this.initSegmentData = void 0;
              this.duration = void 0;
              this.defaultInitPts = void 0;
              this.audioCodec = audioCodec;
              this.videoCodec = videoCodec;
              this.initSegmentData = initSegmentData;
              this.duration = duration;
              this.defaultInitPts = defaultInitPts;
            };
            var TransmuxState = function TransmuxState2(discontinuity, contiguous, accurateTimeOffset, trackSwitch, timeOffset, initSegmentChange) {
              this.discontinuity = void 0;
              this.contiguous = void 0;
              this.accurateTimeOffset = void 0;
              this.trackSwitch = void 0;
              this.timeOffset = void 0;
              this.initSegmentChange = void 0;
              this.discontinuity = discontinuity;
              this.contiguous = contiguous;
              this.accurateTimeOffset = accurateTimeOffset;
              this.trackSwitch = trackSwitch;
              this.timeOffset = timeOffset;
              this.initSegmentChange = initSegmentChange;
            };
          },
          "./src/demux/tsdemuxer.ts": function(module2, __webpack_exports__, __webpack_require__) {
            "use strict";
            __webpack_require__.r(__webpack_exports__);
            __webpack_require__.d(__webpack_exports__, "discardEPB", function() {
              return discardEPB;
            });
            var _adts__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("./src/demux/adts.ts");
            var _mpegaudio__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("./src/demux/mpegaudio.ts");
            var _exp_golomb__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__("./src/demux/exp-golomb.ts");
            var _id3__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__("./src/demux/id3.ts");
            var _sample_aes__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__("./src/demux/sample-aes.ts");
            var _events__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__("./src/events.ts");
            var _utils_mp4_tools__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__("./src/utils/mp4-tools.ts");
            var _utils_logger__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__("./src/utils/logger.ts");
            var _errors__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__("./src/errors.ts");
            var RemuxerTrackIdConfig = {
              video: 1,
              audio: 2,
              id3: 3,
              text: 4
            };
            var TSDemuxer = /* @__PURE__ */ function() {
              function TSDemuxer2(observer, config2, typeSupported) {
                this.observer = void 0;
                this.config = void 0;
                this.typeSupported = void 0;
                this.sampleAes = null;
                this.pmtParsed = false;
                this.audioCodec = void 0;
                this.videoCodec = void 0;
                this._duration = 0;
                this.aacLastPTS = null;
                this._initPTS = null;
                this._initDTS = null;
                this._pmtId = -1;
                this._avcTrack = void 0;
                this._audioTrack = void 0;
                this._id3Track = void 0;
                this._txtTrack = void 0;
                this.aacOverFlow = null;
                this.avcSample = null;
                this.remainderData = null;
                this.observer = observer;
                this.config = config2;
                this.typeSupported = typeSupported;
              }
              TSDemuxer2.probe = function probe(data) {
                var syncOffset = TSDemuxer2.syncOffset(data);
                if (syncOffset < 0) {
                  return false;
                } else {
                  if (syncOffset) {
                    _utils_logger__WEBPACK_IMPORTED_MODULE_7__["logger"].warn("MPEG2-TS detected but first sync word found @ offset " + syncOffset + ", junk ahead ?");
                  }
                  return true;
                }
              };
              TSDemuxer2.syncOffset = function syncOffset(data) {
                var scanwindow = Math.min(1e3, data.length - 3 * 188);
                var i3 = 0;
                while (i3 < scanwindow) {
                  if (data[i3] === 71 && data[i3 + 188] === 71 && data[i3 + 2 * 188] === 71) {
                    return i3;
                  } else {
                    i3++;
                  }
                }
                return -1;
              };
              TSDemuxer2.createTrack = function createTrack(type, duration) {
                return {
                  container: type === "video" || type === "audio" ? "video/mp2t" : void 0,
                  type,
                  id: RemuxerTrackIdConfig[type],
                  pid: -1,
                  inputTimeScale: 9e4,
                  sequenceNumber: 0,
                  samples: [],
                  dropped: 0,
                  duration: type === "audio" ? duration : void 0
                };
              };
              var _proto = TSDemuxer2.prototype;
              _proto.resetInitSegment = function resetInitSegment(audioCodec, videoCodec, duration) {
                this.pmtParsed = false;
                this._pmtId = -1;
                this._avcTrack = TSDemuxer2.createTrack("video", duration);
                this._audioTrack = TSDemuxer2.createTrack("audio", duration);
                this._id3Track = TSDemuxer2.createTrack("id3", duration);
                this._txtTrack = TSDemuxer2.createTrack("text", duration);
                this._audioTrack.isAAC = true;
                this.aacOverFlow = null;
                this.aacLastPTS = null;
                this.avcSample = null;
                this.audioCodec = audioCodec;
                this.videoCodec = videoCodec;
                this._duration = duration;
              };
              _proto.resetTimeStamp = function resetTimeStamp() {
              };
              _proto.resetContiguity = function resetContiguity() {
                var _audioTrack = this._audioTrack, _avcTrack = this._avcTrack, _id3Track = this._id3Track;
                if (_audioTrack) {
                  _audioTrack.pesData = null;
                }
                if (_avcTrack) {
                  _avcTrack.pesData = null;
                }
                if (_id3Track) {
                  _id3Track.pesData = null;
                }
                this.aacOverFlow = null;
                this.aacLastPTS = null;
              };
              _proto.demux = function demux(data, timeOffset, isSampleAes, flush) {
                if (isSampleAes === void 0) {
                  isSampleAes = false;
                }
                if (flush === void 0) {
                  flush = false;
                }
                if (!isSampleAes) {
                  this.sampleAes = null;
                }
                var pes;
                var avcTrack = this._avcTrack;
                var audioTrack = this._audioTrack;
                var id3Track = this._id3Track;
                var avcId = avcTrack.pid;
                var avcData = avcTrack.pesData;
                var audioId = audioTrack.pid;
                var id3Id = id3Track.pid;
                var audioData = audioTrack.pesData;
                var id3Data = id3Track.pesData;
                var unknownPIDs = false;
                var pmtParsed = this.pmtParsed;
                var pmtId = this._pmtId;
                var len = data.length;
                if (this.remainderData) {
                  data = Object(_utils_mp4_tools__WEBPACK_IMPORTED_MODULE_6__["appendUint8Array"])(this.remainderData, data);
                  len = data.length;
                  this.remainderData = null;
                }
                if (len < 188 && !flush) {
                  this.remainderData = data;
                  return {
                    audioTrack,
                    avcTrack,
                    id3Track,
                    textTrack: this._txtTrack
                  };
                }
                var syncOffset = Math.max(0, TSDemuxer2.syncOffset(data));
                len -= (len + syncOffset) % 188;
                if (len < data.byteLength && !flush) {
                  this.remainderData = new Uint8Array(data.buffer, len, data.buffer.byteLength - len);
                }
                var tsPacketErrors = 0;
                for (var start = syncOffset; start < len; start += 188) {
                  if (data[start] === 71) {
                    var stt = !!(data[start + 1] & 64);
                    var pid = ((data[start + 1] & 31) << 8) + data[start + 2];
                    var atf = (data[start + 3] & 48) >> 4;
                    var offset = void 0;
                    if (atf > 1) {
                      offset = start + 5 + data[start + 4];
                      if (offset === start + 188) {
                        continue;
                      }
                    } else {
                      offset = start + 4;
                    }
                    switch (pid) {
                      case avcId:
                        if (stt) {
                          if (avcData && (pes = parsePES(avcData))) {
                            this.parseAVCPES(pes, false);
                          }
                          avcData = {
                            data: [],
                            size: 0
                          };
                        }
                        if (avcData) {
                          avcData.data.push(data.subarray(offset, start + 188));
                          avcData.size += start + 188 - offset;
                        }
                        break;
                      case audioId:
                        if (stt) {
                          if (audioData && (pes = parsePES(audioData))) {
                            if (audioTrack.isAAC) {
                              this.parseAACPES(pes);
                            } else {
                              this.parseMPEGPES(pes);
                            }
                          }
                          audioData = {
                            data: [],
                            size: 0
                          };
                        }
                        if (audioData) {
                          audioData.data.push(data.subarray(offset, start + 188));
                          audioData.size += start + 188 - offset;
                        }
                        break;
                      case id3Id:
                        if (stt) {
                          if (id3Data && (pes = parsePES(id3Data))) {
                            this.parseID3PES(pes);
                          }
                          id3Data = {
                            data: [],
                            size: 0
                          };
                        }
                        if (id3Data) {
                          id3Data.data.push(data.subarray(offset, start + 188));
                          id3Data.size += start + 188 - offset;
                        }
                        break;
                      case 0:
                        if (stt) {
                          offset += data[offset] + 1;
                        }
                        pmtId = this._pmtId = parsePAT(data, offset);
                        break;
                      case pmtId: {
                        if (stt) {
                          offset += data[offset] + 1;
                        }
                        var parsedPIDs = parsePMT(data, offset, this.typeSupported.mpeg === true || this.typeSupported.mp3 === true, isSampleAes);
                        avcId = parsedPIDs.avc;
                        if (avcId > 0) {
                          avcTrack.pid = avcId;
                        }
                        audioId = parsedPIDs.audio;
                        if (audioId > 0) {
                          audioTrack.pid = audioId;
                          audioTrack.isAAC = parsedPIDs.isAAC;
                        }
                        id3Id = parsedPIDs.id3;
                        if (id3Id > 0) {
                          id3Track.pid = id3Id;
                        }
                        if (unknownPIDs && !pmtParsed) {
                          _utils_logger__WEBPACK_IMPORTED_MODULE_7__["logger"].log("reparse from beginning");
                          unknownPIDs = false;
                          start = syncOffset - 188;
                        }
                        pmtParsed = this.pmtParsed = true;
                        break;
                      }
                      case 17:
                      case 8191:
                        break;
                      default:
                        unknownPIDs = true;
                        break;
                    }
                  } else {
                    tsPacketErrors++;
                  }
                }
                if (tsPacketErrors > 0) {
                  this.observer.emit(_events__WEBPACK_IMPORTED_MODULE_5__["Events"].ERROR, _events__WEBPACK_IMPORTED_MODULE_5__["Events"].ERROR, {
                    type: _errors__WEBPACK_IMPORTED_MODULE_8__["ErrorTypes"].MEDIA_ERROR,
                    details: _errors__WEBPACK_IMPORTED_MODULE_8__["ErrorDetails"].FRAG_PARSING_ERROR,
                    fatal: false,
                    reason: "Found " + tsPacketErrors + " TS packet/s that do not start with 0x47"
                  });
                }
                avcTrack.pesData = avcData;
                audioTrack.pesData = audioData;
                id3Track.pesData = id3Data;
                var demuxResult = {
                  audioTrack,
                  avcTrack,
                  id3Track,
                  textTrack: this._txtTrack
                };
                if (flush) {
                  this.extractRemainingSamples(demuxResult);
                }
                return demuxResult;
              };
              _proto.flush = function flush() {
                var remainderData = this.remainderData;
                this.remainderData = null;
                var result;
                if (remainderData) {
                  result = this.demux(remainderData, -1, false, true);
                } else {
                  result = {
                    audioTrack: this._audioTrack,
                    avcTrack: this._avcTrack,
                    textTrack: this._txtTrack,
                    id3Track: this._id3Track
                  };
                }
                this.extractRemainingSamples(result);
                if (this.sampleAes) {
                  return this.decrypt(result, this.sampleAes);
                }
                return result;
              };
              _proto.extractRemainingSamples = function extractRemainingSamples(demuxResult) {
                var audioTrack = demuxResult.audioTrack, avcTrack = demuxResult.avcTrack, id3Track = demuxResult.id3Track;
                var avcData = avcTrack.pesData;
                var audioData = audioTrack.pesData;
                var id3Data = id3Track.pesData;
                var pes;
                if (avcData && (pes = parsePES(avcData))) {
                  this.parseAVCPES(pes, true);
                  avcTrack.pesData = null;
                } else {
                  avcTrack.pesData = avcData;
                }
                if (audioData && (pes = parsePES(audioData))) {
                  if (audioTrack.isAAC) {
                    this.parseAACPES(pes);
                  } else {
                    this.parseMPEGPES(pes);
                  }
                  audioTrack.pesData = null;
                } else {
                  if (audioData !== null && audioData !== void 0 && audioData.size) {
                    _utils_logger__WEBPACK_IMPORTED_MODULE_7__["logger"].log("last AAC PES packet truncated,might overlap between fragments");
                  }
                  audioTrack.pesData = audioData;
                }
                if (id3Data && (pes = parsePES(id3Data))) {
                  this.parseID3PES(pes);
                  id3Track.pesData = null;
                } else {
                  id3Track.pesData = id3Data;
                }
              };
              _proto.demuxSampleAes = function demuxSampleAes(data, keyData, timeOffset) {
                var demuxResult = this.demux(data, timeOffset, true, !this.config.progressive);
                var sampleAes = this.sampleAes = new _sample_aes__WEBPACK_IMPORTED_MODULE_4__["default"](this.observer, this.config, keyData);
                return this.decrypt(demuxResult, sampleAes);
              };
              _proto.decrypt = function decrypt(demuxResult, sampleAes) {
                return new Promise(function(resolve) {
                  var audioTrack = demuxResult.audioTrack, avcTrack = demuxResult.avcTrack;
                  if (audioTrack.samples && audioTrack.isAAC) {
                    sampleAes.decryptAacSamples(audioTrack.samples, 0, function() {
                      if (avcTrack.samples) {
                        sampleAes.decryptAvcSamples(avcTrack.samples, 0, 0, function() {
                          resolve(demuxResult);
                        });
                      } else {
                        resolve(demuxResult);
                      }
                    });
                  } else if (avcTrack.samples) {
                    sampleAes.decryptAvcSamples(avcTrack.samples, 0, 0, function() {
                      resolve(demuxResult);
                    });
                  }
                });
              };
              _proto.destroy = function destroy() {
                this._initPTS = this._initDTS = null;
                this._duration = 0;
              };
              _proto.parseAVCPES = function parseAVCPES(pes, last) {
                var _this = this;
                var track = this._avcTrack;
                var units = this.parseAVCNALu(pes.data);
                var debug = false;
                var avcSample = this.avcSample;
                var push;
                var spsfound = false;
                pes.data = null;
                if (avcSample && units.length && !track.audFound) {
                  pushAccessUnit(avcSample, track);
                  avcSample = this.avcSample = createAVCSample(false, pes.pts, pes.dts, "");
                }
                units.forEach(function(unit) {
                  switch (unit.type) {
                    case 1: {
                      push = true;
                      if (!avcSample) {
                        avcSample = _this.avcSample = createAVCSample(true, pes.pts, pes.dts, "");
                      }
                      if (debug) {
                        avcSample.debug += "NDR ";
                      }
                      avcSample.frame = true;
                      var data = unit.data;
                      if (spsfound && data.length > 4) {
                        var sliceType = new _exp_golomb__WEBPACK_IMPORTED_MODULE_2__["default"](data).readSliceType();
                        if (sliceType === 2 || sliceType === 4 || sliceType === 7 || sliceType === 9) {
                          avcSample.key = true;
                        }
                      }
                      break;
                    }
                    case 5:
                      push = true;
                      if (!avcSample) {
                        avcSample = _this.avcSample = createAVCSample(true, pes.pts, pes.dts, "");
                      }
                      if (debug) {
                        avcSample.debug += "IDR ";
                      }
                      avcSample.key = true;
                      avcSample.frame = true;
                      break;
                    case 6: {
                      push = true;
                      if (debug && avcSample) {
                        avcSample.debug += "SEI ";
                      }
                      var expGolombDecoder = new _exp_golomb__WEBPACK_IMPORTED_MODULE_2__["default"](discardEPB(unit.data));
                      expGolombDecoder.readUByte();
                      var payloadType = 0;
                      var payloadSize = 0;
                      var endOfCaptions = false;
                      var b3 = 0;
                      while (!endOfCaptions && expGolombDecoder.bytesAvailable > 1) {
                        payloadType = 0;
                        do {
                          b3 = expGolombDecoder.readUByte();
                          payloadType += b3;
                        } while (b3 === 255);
                        payloadSize = 0;
                        do {
                          b3 = expGolombDecoder.readUByte();
                          payloadSize += b3;
                        } while (b3 === 255);
                        if (payloadType === 4 && expGolombDecoder.bytesAvailable !== 0) {
                          endOfCaptions = true;
                          var countryCode = expGolombDecoder.readUByte();
                          if (countryCode === 181) {
                            var providerCode = expGolombDecoder.readUShort();
                            if (providerCode === 49) {
                              var userStructure = expGolombDecoder.readUInt();
                              if (userStructure === 1195456820) {
                                var userDataType = expGolombDecoder.readUByte();
                                if (userDataType === 3) {
                                  var firstByte = expGolombDecoder.readUByte();
                                  var secondByte = expGolombDecoder.readUByte();
                                  var totalCCs = 31 & firstByte;
                                  var byteArray = [firstByte, secondByte];
                                  for (var i3 = 0; i3 < totalCCs; i3++) {
                                    byteArray.push(expGolombDecoder.readUByte());
                                    byteArray.push(expGolombDecoder.readUByte());
                                    byteArray.push(expGolombDecoder.readUByte());
                                  }
                                  insertSampleInOrder(_this._txtTrack.samples, {
                                    type: 3,
                                    pts: pes.pts,
                                    bytes: byteArray
                                  });
                                }
                              }
                            }
                          }
                        } else if (payloadType === 5 && expGolombDecoder.bytesAvailable !== 0) {
                          endOfCaptions = true;
                          if (payloadSize > 16) {
                            var uuidStrArray = [];
                            for (var _i = 0; _i < 16; _i++) {
                              uuidStrArray.push(expGolombDecoder.readUByte().toString(16));
                              if (_i === 3 || _i === 5 || _i === 7 || _i === 9) {
                                uuidStrArray.push("-");
                              }
                            }
                            var length = payloadSize - 16;
                            var userDataPayloadBytes = new Uint8Array(length);
                            for (var _i2 = 0; _i2 < length; _i2++) {
                              userDataPayloadBytes[_i2] = expGolombDecoder.readUByte();
                            }
                            insertSampleInOrder(_this._txtTrack.samples, {
                              pts: pes.pts,
                              payloadType,
                              uuid: uuidStrArray.join(""),
                              userData: Object(_id3__WEBPACK_IMPORTED_MODULE_3__["utf8ArrayToStr"])(userDataPayloadBytes),
                              userDataBytes: userDataPayloadBytes
                            });
                          }
                        } else if (payloadSize < expGolombDecoder.bytesAvailable) {
                          for (var _i3 = 0; _i3 < payloadSize; _i3++) {
                            expGolombDecoder.readUByte();
                          }
                        }
                      }
                      break;
                    }
                    case 7:
                      push = true;
                      spsfound = true;
                      if (debug && avcSample) {
                        avcSample.debug += "SPS ";
                      }
                      if (!track.sps) {
                        var _expGolombDecoder = new _exp_golomb__WEBPACK_IMPORTED_MODULE_2__["default"](unit.data);
                        var config2 = _expGolombDecoder.readSPS();
                        track.width = config2.width;
                        track.height = config2.height;
                        track.pixelRatio = config2.pixelRatio;
                        track.sps = [unit.data];
                        track.duration = _this._duration;
                        var codecarray = unit.data.subarray(1, 4);
                        var codecstring = "avc1.";
                        for (var _i4 = 0; _i4 < 3; _i4++) {
                          var h3 = codecarray[_i4].toString(16);
                          if (h3.length < 2) {
                            h3 = "0" + h3;
                          }
                          codecstring += h3;
                        }
                        track.codec = codecstring;
                      }
                      break;
                    case 8:
                      push = true;
                      if (debug && avcSample) {
                        avcSample.debug += "PPS ";
                      }
                      if (!track.pps) {
                        track.pps = [unit.data];
                      }
                      break;
                    case 9:
                      push = false;
                      track.audFound = true;
                      if (avcSample) {
                        pushAccessUnit(avcSample, track);
                      }
                      avcSample = _this.avcSample = createAVCSample(false, pes.pts, pes.dts, debug ? "AUD " : "");
                      break;
                    case 12:
                      push = false;
                      break;
                    default:
                      push = false;
                      if (avcSample) {
                        avcSample.debug += "unknown NAL " + unit.type + " ";
                      }
                      break;
                  }
                  if (avcSample && push) {
                    var _units = avcSample.units;
                    _units.push(unit);
                  }
                });
                if (last && avcSample) {
                  pushAccessUnit(avcSample, track);
                  this.avcSample = null;
                }
              };
              _proto.getLastNalUnit = function getLastNalUnit() {
                var _avcSample;
                var avcSample = this.avcSample;
                var lastUnit;
                if (!avcSample || avcSample.units.length === 0) {
                  var samples = this._avcTrack.samples;
                  avcSample = samples[samples.length - 1];
                }
                if ((_avcSample = avcSample) !== null && _avcSample !== void 0 && _avcSample.units) {
                  var units = avcSample.units;
                  lastUnit = units[units.length - 1];
                }
                return lastUnit;
              };
              _proto.parseAVCNALu = function parseAVCNALu(array) {
                var len = array.byteLength;
                var track = this._avcTrack;
                var state = track.naluState || 0;
                var lastState = state;
                var units = [];
                var i3 = 0;
                var value;
                var overflow;
                var unitType;
                var lastUnitStart = -1;
                var lastUnitType = 0;
                if (state === -1) {
                  lastUnitStart = 0;
                  lastUnitType = array[0] & 31;
                  state = 0;
                  i3 = 1;
                }
                while (i3 < len) {
                  value = array[i3++];
                  if (!state) {
                    state = value ? 0 : 1;
                    continue;
                  }
                  if (state === 1) {
                    state = value ? 0 : 2;
                    continue;
                  }
                  if (!value) {
                    state = 3;
                  } else if (value === 1) {
                    if (lastUnitStart >= 0) {
                      var unit = {
                        data: array.subarray(lastUnitStart, i3 - state - 1),
                        type: lastUnitType
                      };
                      units.push(unit);
                    } else {
                      var lastUnit = this.getLastNalUnit();
                      if (lastUnit) {
                        if (lastState && i3 <= 4 - lastState) {
                          if (lastUnit.state) {
                            lastUnit.data = lastUnit.data.subarray(0, lastUnit.data.byteLength - lastState);
                          }
                        }
                        overflow = i3 - state - 1;
                        if (overflow > 0) {
                          var tmp = new Uint8Array(lastUnit.data.byteLength + overflow);
                          tmp.set(lastUnit.data, 0);
                          tmp.set(array.subarray(0, overflow), lastUnit.data.byteLength);
                          lastUnit.data = tmp;
                          lastUnit.state = 0;
                        }
                      }
                    }
                    if (i3 < len) {
                      unitType = array[i3] & 31;
                      lastUnitStart = i3;
                      lastUnitType = unitType;
                      state = 0;
                    } else {
                      state = -1;
                    }
                  } else {
                    state = 0;
                  }
                }
                if (lastUnitStart >= 0 && state >= 0) {
                  var _unit = {
                    data: array.subarray(lastUnitStart, len),
                    type: lastUnitType,
                    state
                  };
                  units.push(_unit);
                }
                if (units.length === 0) {
                  var _lastUnit = this.getLastNalUnit();
                  if (_lastUnit) {
                    var _tmp = new Uint8Array(_lastUnit.data.byteLength + array.byteLength);
                    _tmp.set(_lastUnit.data, 0);
                    _tmp.set(array, _lastUnit.data.byteLength);
                    _lastUnit.data = _tmp;
                  }
                }
                track.naluState = state;
                return units;
              };
              _proto.parseAACPES = function parseAACPES(pes) {
                var startOffset = 0;
                var track = this._audioTrack;
                var aacOverFlow = this.aacOverFlow;
                var data = pes.data;
                if (aacOverFlow) {
                  this.aacOverFlow = null;
                  var sampleLength = aacOverFlow.sample.unit.byteLength;
                  var frameMissingBytes = Math.min(aacOverFlow.missing, sampleLength);
                  var frameOverflowBytes = sampleLength - frameMissingBytes;
                  aacOverFlow.sample.unit.set(data.subarray(0, frameMissingBytes), frameOverflowBytes);
                  track.samples.push(aacOverFlow.sample);
                  startOffset = aacOverFlow.missing;
                }
                var offset;
                var len;
                for (offset = startOffset, len = data.length; offset < len - 1; offset++) {
                  if (_adts__WEBPACK_IMPORTED_MODULE_0__["isHeader"](data, offset)) {
                    break;
                  }
                }
                if (offset !== startOffset) {
                  var reason;
                  var fatal;
                  if (offset < len - 1) {
                    reason = "AAC PES did not start with ADTS header,offset:" + offset;
                    fatal = false;
                  } else {
                    reason = "no ADTS header found in AAC PES";
                    fatal = true;
                  }
                  _utils_logger__WEBPACK_IMPORTED_MODULE_7__["logger"].warn("parsing error:" + reason);
                  this.observer.emit(_events__WEBPACK_IMPORTED_MODULE_5__["Events"].ERROR, _events__WEBPACK_IMPORTED_MODULE_5__["Events"].ERROR, {
                    type: _errors__WEBPACK_IMPORTED_MODULE_8__["ErrorTypes"].MEDIA_ERROR,
                    details: _errors__WEBPACK_IMPORTED_MODULE_8__["ErrorDetails"].FRAG_PARSING_ERROR,
                    fatal,
                    reason
                  });
                  if (fatal) {
                    return;
                  }
                }
                _adts__WEBPACK_IMPORTED_MODULE_0__["initTrackConfig"](track, this.observer, data, offset, this.audioCodec);
                var pts;
                if (pes.pts !== void 0) {
                  pts = pes.pts;
                } else if (aacOverFlow) {
                  var frameDuration = _adts__WEBPACK_IMPORTED_MODULE_0__["getFrameDuration"](track.samplerate);
                  pts = aacOverFlow.sample.pts + frameDuration;
                } else {
                  _utils_logger__WEBPACK_IMPORTED_MODULE_7__["logger"].warn("[tsdemuxer]: AAC PES unknown PTS");
                  return;
                }
                var frameIndex = 0;
                while (offset < len) {
                  if (_adts__WEBPACK_IMPORTED_MODULE_0__["isHeader"](data, offset)) {
                    if (offset + 5 < len) {
                      var frame = _adts__WEBPACK_IMPORTED_MODULE_0__["appendFrame"](track, data, offset, pts, frameIndex);
                      if (frame) {
                        if (frame.missing) {
                          this.aacOverFlow = frame;
                        } else {
                          offset += frame.length;
                          frameIndex++;
                          continue;
                        }
                      }
                    }
                    break;
                  } else {
                    offset++;
                  }
                }
              };
              _proto.parseMPEGPES = function parseMPEGPES(pes) {
                var data = pes.data;
                var length = data.length;
                var frameIndex = 0;
                var offset = 0;
                var pts = pes.pts;
                if (pts === void 0) {
                  _utils_logger__WEBPACK_IMPORTED_MODULE_7__["logger"].warn("[tsdemuxer]: MPEG PES unknown PTS");
                  return;
                }
                while (offset < length) {
                  if (_mpegaudio__WEBPACK_IMPORTED_MODULE_1__["isHeader"](data, offset)) {
                    var frame = _mpegaudio__WEBPACK_IMPORTED_MODULE_1__["appendFrame"](this._audioTrack, data, offset, pts, frameIndex);
                    if (frame) {
                      offset += frame.length;
                      frameIndex++;
                    } else {
                      break;
                    }
                  } else {
                    offset++;
                  }
                }
              };
              _proto.parseID3PES = function parseID3PES(pes) {
                if (pes.pts === void 0) {
                  _utils_logger__WEBPACK_IMPORTED_MODULE_7__["logger"].warn("[tsdemuxer]: ID3 PES unknown PTS");
                  return;
                }
                this._id3Track.samples.push(pes);
              };
              return TSDemuxer2;
            }();
            TSDemuxer.minProbeByteLength = 188;
            function createAVCSample(key, pts, dts, debug) {
              return {
                key,
                frame: false,
                pts,
                dts,
                units: [],
                debug,
                length: 0
              };
            }
            function parsePAT(data, offset) {
              return (data[offset + 10] & 31) << 8 | data[offset + 11];
            }
            function parsePMT(data, offset, mpegSupported, isSampleAes) {
              var result = {
                audio: -1,
                avc: -1,
                id3: -1,
                isAAC: true
              };
              var sectionLength = (data[offset + 1] & 15) << 8 | data[offset + 2];
              var tableEnd = offset + 3 + sectionLength - 4;
              var programInfoLength = (data[offset + 10] & 15) << 8 | data[offset + 11];
              offset += 12 + programInfoLength;
              while (offset < tableEnd) {
                var pid = (data[offset + 1] & 31) << 8 | data[offset + 2];
                switch (data[offset]) {
                  case 207:
                    if (!isSampleAes) {
                      _utils_logger__WEBPACK_IMPORTED_MODULE_7__["logger"].log("ADTS AAC with AES-128-CBC frame encryption found in unencrypted stream");
                      break;
                    }
                  case 15:
                    if (result.audio === -1) {
                      result.audio = pid;
                    }
                    break;
                  case 21:
                    if (result.id3 === -1) {
                      result.id3 = pid;
                    }
                    break;
                  case 219:
                    if (!isSampleAes) {
                      _utils_logger__WEBPACK_IMPORTED_MODULE_7__["logger"].log("H.264 with AES-128-CBC slice encryption found in unencrypted stream");
                      break;
                    }
                  case 27:
                    if (result.avc === -1) {
                      result.avc = pid;
                    }
                    break;
                  case 3:
                  case 4:
                    if (!mpegSupported) {
                      _utils_logger__WEBPACK_IMPORTED_MODULE_7__["logger"].log("MPEG audio found, not supported in this browser");
                    } else if (result.audio === -1) {
                      result.audio = pid;
                      result.isAAC = false;
                    }
                    break;
                  case 36:
                    _utils_logger__WEBPACK_IMPORTED_MODULE_7__["logger"].warn("Unsupported HEVC stream type found");
                    break;
                  default:
                    break;
                }
                offset += ((data[offset + 3] & 15) << 8 | data[offset + 4]) + 5;
              }
              return result;
            }
            function parsePES(stream) {
              var i3 = 0;
              var frag;
              var pesLen;
              var pesHdrLen;
              var pesPts;
              var pesDts;
              var data = stream.data;
              if (!stream || stream.size === 0) {
                return null;
              }
              while (data[0].length < 19 && data.length > 1) {
                var newData = new Uint8Array(data[0].length + data[1].length);
                newData.set(data[0]);
                newData.set(data[1], data[0].length);
                data[0] = newData;
                data.splice(1, 1);
              }
              frag = data[0];
              var pesPrefix = (frag[0] << 16) + (frag[1] << 8) + frag[2];
              if (pesPrefix === 1) {
                pesLen = (frag[4] << 8) + frag[5];
                if (pesLen && pesLen > stream.size - 6) {
                  return null;
                }
                var pesFlags = frag[7];
                if (pesFlags & 192) {
                  pesPts = (frag[9] & 14) * 536870912 + (frag[10] & 255) * 4194304 + (frag[11] & 254) * 16384 + (frag[12] & 255) * 128 + (frag[13] & 254) / 2;
                  if (pesFlags & 64) {
                    pesDts = (frag[14] & 14) * 536870912 + (frag[15] & 255) * 4194304 + (frag[16] & 254) * 16384 + (frag[17] & 255) * 128 + (frag[18] & 254) / 2;
                    if (pesPts - pesDts > 60 * 9e4) {
                      _utils_logger__WEBPACK_IMPORTED_MODULE_7__["logger"].warn(Math.round((pesPts - pesDts) / 9e4) + "s delta between PTS and DTS, align them");
                      pesPts = pesDts;
                    }
                  } else {
                    pesDts = pesPts;
                  }
                }
                pesHdrLen = frag[8];
                var payloadStartOffset = pesHdrLen + 9;
                if (stream.size <= payloadStartOffset) {
                  return null;
                }
                stream.size -= payloadStartOffset;
                var pesData = new Uint8Array(stream.size);
                for (var j3 = 0, dataLen = data.length; j3 < dataLen; j3++) {
                  frag = data[j3];
                  var len = frag.byteLength;
                  if (payloadStartOffset) {
                    if (payloadStartOffset > len) {
                      payloadStartOffset -= len;
                      continue;
                    } else {
                      frag = frag.subarray(payloadStartOffset);
                      len -= payloadStartOffset;
                      payloadStartOffset = 0;
                    }
                  }
                  pesData.set(frag, i3);
                  i3 += len;
                }
                if (pesLen) {
                  pesLen -= pesHdrLen + 3;
                }
                return {
                  data: pesData,
                  pts: pesPts,
                  dts: pesDts,
                  len: pesLen
                };
              }
              return null;
            }
            function pushAccessUnit(avcSample, avcTrack) {
              if (avcSample.units.length && avcSample.frame) {
                if (avcSample.pts === void 0) {
                  var samples = avcTrack.samples;
                  var nbSamples = samples.length;
                  if (nbSamples) {
                    var lastSample = samples[nbSamples - 1];
                    avcSample.pts = lastSample.pts;
                    avcSample.dts = lastSample.dts;
                  } else {
                    avcTrack.dropped++;
                    return;
                  }
                }
                avcTrack.samples.push(avcSample);
              }
              if (avcSample.debug.length) {
                _utils_logger__WEBPACK_IMPORTED_MODULE_7__["logger"].log(avcSample.pts + "/" + avcSample.dts + ":" + avcSample.debug);
              }
            }
            function insertSampleInOrder(arr, data) {
              var len = arr.length;
              if (len > 0) {
                if (data.pts >= arr[len - 1].pts) {
                  arr.push(data);
                } else {
                  for (var pos = len - 1; pos >= 0; pos--) {
                    if (data.pts < arr[pos].pts) {
                      arr.splice(pos, 0, data);
                      break;
                    }
                  }
                }
              } else {
                arr.push(data);
              }
            }
            function discardEPB(data) {
              var length = data.byteLength;
              var EPBPositions = [];
              var i3 = 1;
              while (i3 < length - 2) {
                if (data[i3] === 0 && data[i3 + 1] === 0 && data[i3 + 2] === 3) {
                  EPBPositions.push(i3 + 2);
                  i3 += 2;
                } else {
                  i3++;
                }
              }
              if (EPBPositions.length === 0) {
                return data;
              }
              var newLength = length - EPBPositions.length;
              var newData = new Uint8Array(newLength);
              var sourceIndex = 0;
              for (i3 = 0; i3 < newLength; sourceIndex++, i3++) {
                if (sourceIndex === EPBPositions[0]) {
                  sourceIndex++;
                  EPBPositions.shift();
                }
                newData[i3] = data[sourceIndex];
              }
              return newData;
            }
            __webpack_exports__["default"] = TSDemuxer;
          },
          "./src/errors.ts": function(module2, __webpack_exports__, __webpack_require__) {
            "use strict";
            __webpack_require__.r(__webpack_exports__);
            __webpack_require__.d(__webpack_exports__, "ErrorTypes", function() {
              return ErrorTypes;
            });
            __webpack_require__.d(__webpack_exports__, "ErrorDetails", function() {
              return ErrorDetails;
            });
            var ErrorTypes;
            (function(ErrorTypes2) {
              ErrorTypes2["NETWORK_ERROR"] = "networkError";
              ErrorTypes2["MEDIA_ERROR"] = "mediaError";
              ErrorTypes2["KEY_SYSTEM_ERROR"] = "keySystemError";
              ErrorTypes2["MUX_ERROR"] = "muxError";
              ErrorTypes2["OTHER_ERROR"] = "otherError";
            })(ErrorTypes || (ErrorTypes = {}));
            var ErrorDetails;
            (function(ErrorDetails2) {
              ErrorDetails2["KEY_SYSTEM_NO_KEYS"] = "keySystemNoKeys";
              ErrorDetails2["KEY_SYSTEM_NO_ACCESS"] = "keySystemNoAccess";
              ErrorDetails2["KEY_SYSTEM_NO_SESSION"] = "keySystemNoSession";
              ErrorDetails2["KEY_SYSTEM_LICENSE_REQUEST_FAILED"] = "keySystemLicenseRequestFailed";
              ErrorDetails2["KEY_SYSTEM_NO_INIT_DATA"] = "keySystemNoInitData";
              ErrorDetails2["MANIFEST_LOAD_ERROR"] = "manifestLoadError";
              ErrorDetails2["MANIFEST_LOAD_TIMEOUT"] = "manifestLoadTimeOut";
              ErrorDetails2["MANIFEST_PARSING_ERROR"] = "manifestParsingError";
              ErrorDetails2["MANIFEST_INCOMPATIBLE_CODECS_ERROR"] = "manifestIncompatibleCodecsError";
              ErrorDetails2["LEVEL_EMPTY_ERROR"] = "levelEmptyError";
              ErrorDetails2["LEVEL_LOAD_ERROR"] = "levelLoadError";
              ErrorDetails2["LEVEL_LOAD_TIMEOUT"] = "levelLoadTimeOut";
              ErrorDetails2["LEVEL_SWITCH_ERROR"] = "levelSwitchError";
              ErrorDetails2["AUDIO_TRACK_LOAD_ERROR"] = "audioTrackLoadError";
              ErrorDetails2["AUDIO_TRACK_LOAD_TIMEOUT"] = "audioTrackLoadTimeOut";
              ErrorDetails2["SUBTITLE_LOAD_ERROR"] = "subtitleTrackLoadError";
              ErrorDetails2["SUBTITLE_TRACK_LOAD_TIMEOUT"] = "subtitleTrackLoadTimeOut";
              ErrorDetails2["FRAG_LOAD_ERROR"] = "fragLoadError";
              ErrorDetails2["FRAG_LOAD_TIMEOUT"] = "fragLoadTimeOut";
              ErrorDetails2["FRAG_DECRYPT_ERROR"] = "fragDecryptError";
              ErrorDetails2["FRAG_PARSING_ERROR"] = "fragParsingError";
              ErrorDetails2["REMUX_ALLOC_ERROR"] = "remuxAllocError";
              ErrorDetails2["KEY_LOAD_ERROR"] = "keyLoadError";
              ErrorDetails2["KEY_LOAD_TIMEOUT"] = "keyLoadTimeOut";
              ErrorDetails2["BUFFER_ADD_CODEC_ERROR"] = "bufferAddCodecError";
              ErrorDetails2["BUFFER_INCOMPATIBLE_CODECS_ERROR"] = "bufferIncompatibleCodecsError";
              ErrorDetails2["BUFFER_APPEND_ERROR"] = "bufferAppendError";
              ErrorDetails2["BUFFER_APPENDING_ERROR"] = "bufferAppendingError";
              ErrorDetails2["BUFFER_STALLED_ERROR"] = "bufferStalledError";
              ErrorDetails2["BUFFER_FULL_ERROR"] = "bufferFullError";
              ErrorDetails2["BUFFER_SEEK_OVER_HOLE"] = "bufferSeekOverHole";
              ErrorDetails2["BUFFER_NUDGE_ON_STALL"] = "bufferNudgeOnStall";
              ErrorDetails2["INTERNAL_EXCEPTION"] = "internalException";
              ErrorDetails2["INTERNAL_ABORTED"] = "aborted";
              ErrorDetails2["UNKNOWN"] = "unknown";
            })(ErrorDetails || (ErrorDetails = {}));
          },
          "./src/events.ts": function(module2, __webpack_exports__, __webpack_require__) {
            "use strict";
            __webpack_require__.r(__webpack_exports__);
            __webpack_require__.d(__webpack_exports__, "Events", function() {
              return Events;
            });
            var Events;
            (function(Events2) {
              Events2["MEDIA_ATTACHING"] = "hlsMediaAttaching";
              Events2["MEDIA_ATTACHED"] = "hlsMediaAttached";
              Events2["MEDIA_DETACHING"] = "hlsMediaDetaching";
              Events2["MEDIA_DETACHED"] = "hlsMediaDetached";
              Events2["BUFFER_RESET"] = "hlsBufferReset";
              Events2["BUFFER_CODECS"] = "hlsBufferCodecs";
              Events2["BUFFER_CREATED"] = "hlsBufferCreated";
              Events2["BUFFER_APPENDING"] = "hlsBufferAppending";
              Events2["BUFFER_APPENDED"] = "hlsBufferAppended";
              Events2["BUFFER_EOS"] = "hlsBufferEos";
              Events2["BUFFER_FLUSHING"] = "hlsBufferFlushing";
              Events2["BUFFER_FLUSHED"] = "hlsBufferFlushed";
              Events2["MANIFEST_LOADING"] = "hlsManifestLoading";
              Events2["MANIFEST_LOADED"] = "hlsManifestLoaded";
              Events2["MANIFEST_PARSED"] = "hlsManifestParsed";
              Events2["LEVEL_SWITCHING"] = "hlsLevelSwitching";
              Events2["LEVEL_SWITCHED"] = "hlsLevelSwitched";
              Events2["LEVEL_LOADING"] = "hlsLevelLoading";
              Events2["LEVEL_LOADED"] = "hlsLevelLoaded";
              Events2["LEVEL_UPDATED"] = "hlsLevelUpdated";
              Events2["LEVEL_PTS_UPDATED"] = "hlsLevelPtsUpdated";
              Events2["LEVELS_UPDATED"] = "hlsLevelsUpdated";
              Events2["AUDIO_TRACKS_UPDATED"] = "hlsAudioTracksUpdated";
              Events2["AUDIO_TRACK_SWITCHING"] = "hlsAudioTrackSwitching";
              Events2["AUDIO_TRACK_SWITCHED"] = "hlsAudioTrackSwitched";
              Events2["AUDIO_TRACK_LOADING"] = "hlsAudioTrackLoading";
              Events2["AUDIO_TRACK_LOADED"] = "hlsAudioTrackLoaded";
              Events2["SUBTITLE_TRACKS_UPDATED"] = "hlsSubtitleTracksUpdated";
              Events2["SUBTITLE_TRACKS_CLEARED"] = "hlsSubtitleTracksCleared";
              Events2["SUBTITLE_TRACK_SWITCH"] = "hlsSubtitleTrackSwitch";
              Events2["SUBTITLE_TRACK_LOADING"] = "hlsSubtitleTrackLoading";
              Events2["SUBTITLE_TRACK_LOADED"] = "hlsSubtitleTrackLoaded";
              Events2["SUBTITLE_FRAG_PROCESSED"] = "hlsSubtitleFragProcessed";
              Events2["CUES_PARSED"] = "hlsCuesParsed";
              Events2["NON_NATIVE_TEXT_TRACKS_FOUND"] = "hlsNonNativeTextTracksFound";
              Events2["INIT_PTS_FOUND"] = "hlsInitPtsFound";
              Events2["FRAG_LOADING"] = "hlsFragLoading";
              Events2["FRAG_LOAD_EMERGENCY_ABORTED"] = "hlsFragLoadEmergencyAborted";
              Events2["FRAG_LOADED"] = "hlsFragLoaded";
              Events2["FRAG_DECRYPTED"] = "hlsFragDecrypted";
              Events2["FRAG_PARSING_INIT_SEGMENT"] = "hlsFragParsingInitSegment";
              Events2["FRAG_PARSING_USERDATA"] = "hlsFragParsingUserdata";
              Events2["FRAG_PARSING_METADATA"] = "hlsFragParsingMetadata";
              Events2["FRAG_PARSED"] = "hlsFragParsed";
              Events2["FRAG_BUFFERED"] = "hlsFragBuffered";
              Events2["FRAG_CHANGED"] = "hlsFragChanged";
              Events2["FPS_DROP"] = "hlsFpsDrop";
              Events2["FPS_DROP_LEVEL_CAPPING"] = "hlsFpsDropLevelCapping";
              Events2["ERROR"] = "hlsError";
              Events2["DESTROYING"] = "hlsDestroying";
              Events2["KEY_LOADING"] = "hlsKeyLoading";
              Events2["KEY_LOADED"] = "hlsKeyLoaded";
              Events2["LIVE_BACK_BUFFER_REACHED"] = "hlsLiveBackBufferReached";
              Events2["BACK_BUFFER_REACHED"] = "hlsBackBufferReached";
            })(Events || (Events = {}));
          },
          "./src/hls.ts": function(module2, __webpack_exports__, __webpack_require__) {
            "use strict";
            __webpack_require__.r(__webpack_exports__);
            __webpack_require__.d(__webpack_exports__, "default", function() {
              return Hls2;
            });
            var url_toolkit__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("./node_modules/url-toolkit/src/url-toolkit.js");
            var url_toolkit__WEBPACK_IMPORTED_MODULE_0___default = /* @__PURE__ */ __webpack_require__.n(url_toolkit__WEBPACK_IMPORTED_MODULE_0__);
            var _loader_playlist_loader__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("./src/loader/playlist-loader.ts");
            var _loader_key_loader__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__("./src/loader/key-loader.ts");
            var _controller_id3_track_controller__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__("./src/controller/id3-track-controller.ts");
            var _controller_latency_controller__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__("./src/controller/latency-controller.ts");
            var _controller_level_controller__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__("./src/controller/level-controller.ts");
            var _controller_fragment_tracker__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__("./src/controller/fragment-tracker.ts");
            var _controller_stream_controller__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__("./src/controller/stream-controller.ts");
            var _is_supported__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__("./src/is-supported.ts");
            var _utils_logger__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__("./src/utils/logger.ts");
            var _config__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__("./src/config.ts");
            var eventemitter3__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__("./node_modules/eventemitter3/index.js");
            var eventemitter3__WEBPACK_IMPORTED_MODULE_11___default = /* @__PURE__ */ __webpack_require__.n(eventemitter3__WEBPACK_IMPORTED_MODULE_11__);
            var _events__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__("./src/events.ts");
            var _errors__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__("./src/errors.ts");
            function _defineProperties(target, props) {
              for (var i3 = 0; i3 < props.length; i3++) {
                var descriptor = props[i3];
                descriptor.enumerable = descriptor.enumerable || false;
                descriptor.configurable = true;
                if ("value" in descriptor)
                  descriptor.writable = true;
                Object.defineProperty(target, descriptor.key, descriptor);
              }
            }
            function _createClass(Constructor, protoProps, staticProps) {
              if (protoProps)
                _defineProperties(Constructor.prototype, protoProps);
              if (staticProps)
                _defineProperties(Constructor, staticProps);
              return Constructor;
            }
            var Hls2 = /* @__PURE__ */ function() {
              Hls3.isSupported = function isSupported() {
                return Object(_is_supported__WEBPACK_IMPORTED_MODULE_8__["isSupported"])();
              };
              function Hls3(userConfig) {
                if (userConfig === void 0) {
                  userConfig = {};
                }
                this.config = void 0;
                this.userConfig = void 0;
                this.coreComponents = void 0;
                this.networkControllers = void 0;
                this._emitter = new eventemitter3__WEBPACK_IMPORTED_MODULE_11__["EventEmitter"]();
                this._autoLevelCapping = void 0;
                this.abrController = void 0;
                this.bufferController = void 0;
                this.capLevelController = void 0;
                this.latencyController = void 0;
                this.levelController = void 0;
                this.streamController = void 0;
                this.audioTrackController = void 0;
                this.subtitleTrackController = void 0;
                this.emeController = void 0;
                this.cmcdController = void 0;
                this._media = null;
                this.url = null;
                var config2 = this.config = Object(_config__WEBPACK_IMPORTED_MODULE_10__["mergeConfig"])(Hls3.DefaultConfig, userConfig);
                this.userConfig = userConfig;
                Object(_utils_logger__WEBPACK_IMPORTED_MODULE_9__["enableLogs"])(config2.debug);
                this._autoLevelCapping = -1;
                if (config2.progressive) {
                  Object(_config__WEBPACK_IMPORTED_MODULE_10__["enableStreamingMode"])(config2);
                }
                var ConfigAbrController = config2.abrController, ConfigBufferController = config2.bufferController, ConfigCapLevelController = config2.capLevelController, ConfigFpsController = config2.fpsController;
                var abrController = this.abrController = new ConfigAbrController(this);
                var bufferController = this.bufferController = new ConfigBufferController(this);
                var capLevelController = this.capLevelController = new ConfigCapLevelController(this);
                var fpsController = new ConfigFpsController(this);
                var playListLoader = new _loader_playlist_loader__WEBPACK_IMPORTED_MODULE_1__["default"](this);
                var keyLoader = new _loader_key_loader__WEBPACK_IMPORTED_MODULE_2__["default"](this);
                var id3TrackController = new _controller_id3_track_controller__WEBPACK_IMPORTED_MODULE_3__["default"](this);
                var levelController = this.levelController = new _controller_level_controller__WEBPACK_IMPORTED_MODULE_5__["default"](this);
                var fragmentTracker = new _controller_fragment_tracker__WEBPACK_IMPORTED_MODULE_6__["FragmentTracker"](this);
                var streamController = this.streamController = new _controller_stream_controller__WEBPACK_IMPORTED_MODULE_7__["default"](this, fragmentTracker);
                capLevelController.setStreamController(streamController);
                fpsController.setStreamController(streamController);
                var networkControllers = [levelController, streamController];
                this.networkControllers = networkControllers;
                var coreComponents = [playListLoader, keyLoader, abrController, bufferController, capLevelController, fpsController, id3TrackController, fragmentTracker];
                this.audioTrackController = this.createController(config2.audioTrackController, null, networkControllers);
                this.createController(config2.audioStreamController, fragmentTracker, networkControllers);
                this.subtitleTrackController = this.createController(config2.subtitleTrackController, null, networkControllers);
                this.createController(config2.subtitleStreamController, fragmentTracker, networkControllers);
                this.createController(config2.timelineController, null, coreComponents);
                this.emeController = this.createController(config2.emeController, null, coreComponents);
                this.cmcdController = this.createController(config2.cmcdController, null, coreComponents);
                this.latencyController = this.createController(_controller_latency_controller__WEBPACK_IMPORTED_MODULE_4__["default"], null, coreComponents);
                this.coreComponents = coreComponents;
              }
              var _proto = Hls3.prototype;
              _proto.createController = function createController(ControllerClass, fragmentTracker, components) {
                if (ControllerClass) {
                  var controllerInstance = fragmentTracker ? new ControllerClass(this, fragmentTracker) : new ControllerClass(this);
                  if (components) {
                    components.push(controllerInstance);
                  }
                  return controllerInstance;
                }
                return null;
              };
              _proto.on = function on(event, listener, context) {
                if (context === void 0) {
                  context = this;
                }
                this._emitter.on(event, listener, context);
              };
              _proto.once = function once(event, listener, context) {
                if (context === void 0) {
                  context = this;
                }
                this._emitter.once(event, listener, context);
              };
              _proto.removeAllListeners = function removeAllListeners(event) {
                this._emitter.removeAllListeners(event);
              };
              _proto.off = function off(event, listener, context, once) {
                if (context === void 0) {
                  context = this;
                }
                this._emitter.off(event, listener, context, once);
              };
              _proto.listeners = function listeners(event) {
                return this._emitter.listeners(event);
              };
              _proto.emit = function emit(event, name, eventObject) {
                return this._emitter.emit(event, name, eventObject);
              };
              _proto.trigger = function trigger(event, eventObject) {
                if (this.config.debug) {
                  return this.emit(event, event, eventObject);
                } else {
                  try {
                    return this.emit(event, event, eventObject);
                  } catch (e4) {
                    _utils_logger__WEBPACK_IMPORTED_MODULE_9__["logger"].error("An internal error happened while handling event " + event + '. Error message: "' + e4.message + '". Here is a stacktrace:', e4);
                    this.trigger(_events__WEBPACK_IMPORTED_MODULE_12__["Events"].ERROR, {
                      type: _errors__WEBPACK_IMPORTED_MODULE_13__["ErrorTypes"].OTHER_ERROR,
                      details: _errors__WEBPACK_IMPORTED_MODULE_13__["ErrorDetails"].INTERNAL_EXCEPTION,
                      fatal: false,
                      event,
                      error: e4
                    });
                  }
                }
                return false;
              };
              _proto.listenerCount = function listenerCount(event) {
                return this._emitter.listenerCount(event);
              };
              _proto.destroy = function destroy() {
                _utils_logger__WEBPACK_IMPORTED_MODULE_9__["logger"].log("destroy");
                this.trigger(_events__WEBPACK_IMPORTED_MODULE_12__["Events"].DESTROYING, void 0);
                this.detachMedia();
                this.removeAllListeners();
                this._autoLevelCapping = -1;
                this.url = null;
                this.networkControllers.forEach(function(component) {
                  return component.destroy();
                });
                this.networkControllers.length = 0;
                this.coreComponents.forEach(function(component) {
                  return component.destroy();
                });
                this.coreComponents.length = 0;
              };
              _proto.attachMedia = function attachMedia(media2) {
                _utils_logger__WEBPACK_IMPORTED_MODULE_9__["logger"].log("attachMedia");
                this._media = media2;
                this.trigger(_events__WEBPACK_IMPORTED_MODULE_12__["Events"].MEDIA_ATTACHING, {
                  media: media2
                });
              };
              _proto.detachMedia = function detachMedia() {
                _utils_logger__WEBPACK_IMPORTED_MODULE_9__["logger"].log("detachMedia");
                this.trigger(_events__WEBPACK_IMPORTED_MODULE_12__["Events"].MEDIA_DETACHING, void 0);
                this._media = null;
              };
              _proto.loadSource = function loadSource(url) {
                this.stopLoad();
                var media2 = this.media;
                var loadedSource = this.url;
                var loadingSource = this.url = url_toolkit__WEBPACK_IMPORTED_MODULE_0__["buildAbsoluteURL"](self.location.href, url, {
                  alwaysNormalize: true
                });
                _utils_logger__WEBPACK_IMPORTED_MODULE_9__["logger"].log("loadSource:" + loadingSource);
                if (media2 && loadedSource && loadedSource !== loadingSource && this.bufferController.hasSourceTypes()) {
                  this.detachMedia();
                  this.attachMedia(media2);
                }
                this.trigger(_events__WEBPACK_IMPORTED_MODULE_12__["Events"].MANIFEST_LOADING, {
                  url
                });
              };
              _proto.startLoad = function startLoad(startPosition) {
                if (startPosition === void 0) {
                  startPosition = -1;
                }
                _utils_logger__WEBPACK_IMPORTED_MODULE_9__["logger"].log("startLoad(" + startPosition + ")");
                this.networkControllers.forEach(function(controller) {
                  controller.startLoad(startPosition);
                });
              };
              _proto.stopLoad = function stopLoad() {
                _utils_logger__WEBPACK_IMPORTED_MODULE_9__["logger"].log("stopLoad");
                this.networkControllers.forEach(function(controller) {
                  controller.stopLoad();
                });
              };
              _proto.swapAudioCodec = function swapAudioCodec() {
                _utils_logger__WEBPACK_IMPORTED_MODULE_9__["logger"].log("swapAudioCodec");
                this.streamController.swapAudioCodec();
              };
              _proto.recoverMediaError = function recoverMediaError() {
                _utils_logger__WEBPACK_IMPORTED_MODULE_9__["logger"].log("recoverMediaError");
                var media2 = this._media;
                this.detachMedia();
                if (media2) {
                  this.attachMedia(media2);
                }
              };
              _proto.removeLevel = function removeLevel(levelIndex, urlId) {
                if (urlId === void 0) {
                  urlId = 0;
                }
                this.levelController.removeLevel(levelIndex, urlId);
              };
              _createClass(Hls3, [{
                key: "levels",
                get: function get() {
                  var levels = this.levelController.levels;
                  return levels ? levels : [];
                }
              }, {
                key: "currentLevel",
                get: function get() {
                  return this.streamController.currentLevel;
                },
                set: function set(newLevel) {
                  _utils_logger__WEBPACK_IMPORTED_MODULE_9__["logger"].log("set currentLevel:" + newLevel);
                  this.loadLevel = newLevel;
                  this.abrController.clearTimer();
                  this.streamController.immediateLevelSwitch();
                }
              }, {
                key: "nextLevel",
                get: function get() {
                  return this.streamController.nextLevel;
                },
                set: function set(newLevel) {
                  _utils_logger__WEBPACK_IMPORTED_MODULE_9__["logger"].log("set nextLevel:" + newLevel);
                  this.levelController.manualLevel = newLevel;
                  this.streamController.nextLevelSwitch();
                }
              }, {
                key: "loadLevel",
                get: function get() {
                  return this.levelController.level;
                },
                set: function set(newLevel) {
                  _utils_logger__WEBPACK_IMPORTED_MODULE_9__["logger"].log("set loadLevel:" + newLevel);
                  this.levelController.manualLevel = newLevel;
                }
              }, {
                key: "nextLoadLevel",
                get: function get() {
                  return this.levelController.nextLoadLevel;
                },
                set: function set(level) {
                  this.levelController.nextLoadLevel = level;
                }
              }, {
                key: "firstLevel",
                get: function get() {
                  return Math.max(this.levelController.firstLevel, this.minAutoLevel);
                },
                set: function set(newLevel) {
                  _utils_logger__WEBPACK_IMPORTED_MODULE_9__["logger"].log("set firstLevel:" + newLevel);
                  this.levelController.firstLevel = newLevel;
                }
              }, {
                key: "startLevel",
                get: function get() {
                  return this.levelController.startLevel;
                },
                set: function set(newLevel) {
                  _utils_logger__WEBPACK_IMPORTED_MODULE_9__["logger"].log("set startLevel:" + newLevel);
                  if (newLevel !== -1) {
                    newLevel = Math.max(newLevel, this.minAutoLevel);
                  }
                  this.levelController.startLevel = newLevel;
                }
              }, {
                key: "capLevelToPlayerSize",
                get: function get() {
                  return this.config.capLevelToPlayerSize;
                },
                set: function set(shouldStartCapping) {
                  var newCapLevelToPlayerSize = !!shouldStartCapping;
                  if (newCapLevelToPlayerSize !== this.config.capLevelToPlayerSize) {
                    if (newCapLevelToPlayerSize) {
                      this.capLevelController.startCapping();
                    } else {
                      this.capLevelController.stopCapping();
                      this.autoLevelCapping = -1;
                      this.streamController.nextLevelSwitch();
                    }
                    this.config.capLevelToPlayerSize = newCapLevelToPlayerSize;
                  }
                }
              }, {
                key: "autoLevelCapping",
                get: function get() {
                  return this._autoLevelCapping;
                },
                set: function set(newLevel) {
                  if (this._autoLevelCapping !== newLevel) {
                    _utils_logger__WEBPACK_IMPORTED_MODULE_9__["logger"].log("set autoLevelCapping:" + newLevel);
                    this._autoLevelCapping = newLevel;
                  }
                }
              }, {
                key: "bandwidthEstimate",
                get: function get() {
                  var bwEstimator = this.abrController.bwEstimator;
                  if (!bwEstimator) {
                    return NaN;
                  }
                  return bwEstimator.getEstimate();
                }
              }, {
                key: "autoLevelEnabled",
                get: function get() {
                  return this.levelController.manualLevel === -1;
                }
              }, {
                key: "manualLevel",
                get: function get() {
                  return this.levelController.manualLevel;
                }
              }, {
                key: "minAutoLevel",
                get: function get() {
                  var levels = this.levels, minAutoBitrate = this.config.minAutoBitrate;
                  if (!levels)
                    return 0;
                  var len = levels.length;
                  for (var i3 = 0; i3 < len; i3++) {
                    if (levels[i3].maxBitrate > minAutoBitrate) {
                      return i3;
                    }
                  }
                  return 0;
                }
              }, {
                key: "maxAutoLevel",
                get: function get() {
                  var levels = this.levels, autoLevelCapping = this.autoLevelCapping;
                  var maxAutoLevel;
                  if (autoLevelCapping === -1 && levels && levels.length) {
                    maxAutoLevel = levels.length - 1;
                  } else {
                    maxAutoLevel = autoLevelCapping;
                  }
                  return maxAutoLevel;
                }
              }, {
                key: "nextAutoLevel",
                get: function get() {
                  return Math.min(Math.max(this.abrController.nextAutoLevel, this.minAutoLevel), this.maxAutoLevel);
                },
                set: function set(nextLevel) {
                  this.abrController.nextAutoLevel = Math.max(this.minAutoLevel, nextLevel);
                }
              }, {
                key: "audioTracks",
                get: function get() {
                  var audioTrackController = this.audioTrackController;
                  return audioTrackController ? audioTrackController.audioTracks : [];
                }
              }, {
                key: "audioTrack",
                get: function get() {
                  var audioTrackController = this.audioTrackController;
                  return audioTrackController ? audioTrackController.audioTrack : -1;
                },
                set: function set(audioTrackId) {
                  var audioTrackController = this.audioTrackController;
                  if (audioTrackController) {
                    audioTrackController.audioTrack = audioTrackId;
                  }
                }
              }, {
                key: "subtitleTracks",
                get: function get() {
                  var subtitleTrackController = this.subtitleTrackController;
                  return subtitleTrackController ? subtitleTrackController.subtitleTracks : [];
                }
              }, {
                key: "subtitleTrack",
                get: function get() {
                  var subtitleTrackController = this.subtitleTrackController;
                  return subtitleTrackController ? subtitleTrackController.subtitleTrack : -1;
                },
                set: function set(subtitleTrackId) {
                  var subtitleTrackController = this.subtitleTrackController;
                  if (subtitleTrackController) {
                    subtitleTrackController.subtitleTrack = subtitleTrackId;
                  }
                }
              }, {
                key: "media",
                get: function get() {
                  return this._media;
                }
              }, {
                key: "subtitleDisplay",
                get: function get() {
                  var subtitleTrackController = this.subtitleTrackController;
                  return subtitleTrackController ? subtitleTrackController.subtitleDisplay : false;
                },
                set: function set(value) {
                  var subtitleTrackController = this.subtitleTrackController;
                  if (subtitleTrackController) {
                    subtitleTrackController.subtitleDisplay = value;
                  }
                }
              }, {
                key: "lowLatencyMode",
                get: function get() {
                  return this.config.lowLatencyMode;
                },
                set: function set(mode) {
                  this.config.lowLatencyMode = mode;
                }
              }, {
                key: "liveSyncPosition",
                get: function get() {
                  return this.latencyController.liveSyncPosition;
                }
              }, {
                key: "latency",
                get: function get() {
                  return this.latencyController.latency;
                }
              }, {
                key: "maxLatency",
                get: function get() {
                  return this.latencyController.maxLatency;
                }
              }, {
                key: "targetLatency",
                get: function get() {
                  return this.latencyController.targetLatency;
                }
              }, {
                key: "drift",
                get: function get() {
                  return this.latencyController.drift;
                }
              }, {
                key: "forceStartLoad",
                get: function get() {
                  return this.streamController.forceStartLoad;
                }
              }], [{
                key: "version",
                get: function get() {
                  return "1.1.5";
                }
              }, {
                key: "Events",
                get: function get() {
                  return _events__WEBPACK_IMPORTED_MODULE_12__["Events"];
                }
              }, {
                key: "ErrorTypes",
                get: function get() {
                  return _errors__WEBPACK_IMPORTED_MODULE_13__["ErrorTypes"];
                }
              }, {
                key: "ErrorDetails",
                get: function get() {
                  return _errors__WEBPACK_IMPORTED_MODULE_13__["ErrorDetails"];
                }
              }, {
                key: "DefaultConfig",
                get: function get() {
                  if (!Hls3.defaultConfig) {
                    return _config__WEBPACK_IMPORTED_MODULE_10__["hlsDefaultConfig"];
                  }
                  return Hls3.defaultConfig;
                },
                set: function set(defaultConfig) {
                  Hls3.defaultConfig = defaultConfig;
                }
              }]);
              return Hls3;
            }();
            Hls2.defaultConfig = void 0;
          },
          "./src/is-supported.ts": function(module2, __webpack_exports__, __webpack_require__) {
            "use strict";
            __webpack_require__.r(__webpack_exports__);
            __webpack_require__.d(__webpack_exports__, "isSupported", function() {
              return isSupported;
            });
            __webpack_require__.d(__webpack_exports__, "changeTypeSupported", function() {
              return changeTypeSupported;
            });
            var _utils_mediasource_helper__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("./src/utils/mediasource-helper.ts");
            function getSourceBuffer() {
              return self.SourceBuffer || self.WebKitSourceBuffer;
            }
            function isSupported() {
              var mediaSource = Object(_utils_mediasource_helper__WEBPACK_IMPORTED_MODULE_0__["getMediaSource"])();
              if (!mediaSource) {
                return false;
              }
              var sourceBuffer = getSourceBuffer();
              var isTypeSupported = mediaSource && typeof mediaSource.isTypeSupported === "function" && mediaSource.isTypeSupported('video/mp4; codecs="avc1.42E01E,mp4a.40.2"');
              var sourceBufferValidAPI = !sourceBuffer || sourceBuffer.prototype && typeof sourceBuffer.prototype.appendBuffer === "function" && typeof sourceBuffer.prototype.remove === "function";
              return !!isTypeSupported && !!sourceBufferValidAPI;
            }
            function changeTypeSupported() {
              var _sourceBuffer$prototy;
              var sourceBuffer = getSourceBuffer();
              return typeof (sourceBuffer === null || sourceBuffer === void 0 ? void 0 : (_sourceBuffer$prototy = sourceBuffer.prototype) === null || _sourceBuffer$prototy === void 0 ? void 0 : _sourceBuffer$prototy.changeType) === "function";
            }
          },
          "./src/loader/fragment-loader.ts": function(module2, __webpack_exports__, __webpack_require__) {
            "use strict";
            __webpack_require__.r(__webpack_exports__);
            __webpack_require__.d(__webpack_exports__, "default", function() {
              return FragmentLoader;
            });
            __webpack_require__.d(__webpack_exports__, "LoadError", function() {
              return LoadError;
            });
            var _home_runner_work_hls_js_hls_js_src_polyfills_number__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("./src/polyfills/number.ts");
            var _errors__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("./src/errors.ts");
            function _inheritsLoose(subClass, superClass) {
              subClass.prototype = Object.create(superClass.prototype);
              subClass.prototype.constructor = subClass;
              _setPrototypeOf(subClass, superClass);
            }
            function _wrapNativeSuper(Class) {
              var _cache = typeof Map === "function" ? /* @__PURE__ */ new Map() : void 0;
              _wrapNativeSuper = function _wrapNativeSuper2(Class2) {
                if (Class2 === null || !_isNativeFunction(Class2))
                  return Class2;
                if (typeof Class2 !== "function") {
                  throw new TypeError("Super expression must either be null or a function");
                }
                if (typeof _cache !== "undefined") {
                  if (_cache.has(Class2))
                    return _cache.get(Class2);
                  _cache.set(Class2, Wrapper7);
                }
                function Wrapper7() {
                  return _construct(Class2, arguments, _getPrototypeOf(this).constructor);
                }
                Wrapper7.prototype = Object.create(Class2.prototype, { constructor: { value: Wrapper7, enumerable: false, writable: true, configurable: true } });
                return _setPrototypeOf(Wrapper7, Class2);
              };
              return _wrapNativeSuper(Class);
            }
            function _construct(Parent, args, Class) {
              if (_isNativeReflectConstruct()) {
                _construct = Reflect.construct;
              } else {
                _construct = function _construct2(Parent2, args2, Class2) {
                  var a3 = [null];
                  a3.push.apply(a3, args2);
                  var Constructor = Function.bind.apply(Parent2, a3);
                  var instance = new Constructor();
                  if (Class2)
                    _setPrototypeOf(instance, Class2.prototype);
                  return instance;
                };
              }
              return _construct.apply(null, arguments);
            }
            function _isNativeReflectConstruct() {
              if (typeof Reflect === "undefined" || !Reflect.construct)
                return false;
              if (Reflect.construct.sham)
                return false;
              if (typeof Proxy === "function")
                return true;
              try {
                Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
                }));
                return true;
              } catch (e4) {
                return false;
              }
            }
            function _isNativeFunction(fn) {
              return Function.toString.call(fn).indexOf("[native code]") !== -1;
            }
            function _setPrototypeOf(o3, p5) {
              _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf2(o4, p6) {
                o4.__proto__ = p6;
                return o4;
              };
              return _setPrototypeOf(o3, p5);
            }
            function _getPrototypeOf(o3) {
              _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf2(o4) {
                return o4.__proto__ || Object.getPrototypeOf(o4);
              };
              return _getPrototypeOf(o3);
            }
            var MIN_CHUNK_SIZE = Math.pow(2, 17);
            var FragmentLoader = /* @__PURE__ */ function() {
              function FragmentLoader2(config2) {
                this.config = void 0;
                this.loader = null;
                this.partLoadTimeout = -1;
                this.config = config2;
              }
              var _proto = FragmentLoader2.prototype;
              _proto.destroy = function destroy() {
                if (this.loader) {
                  this.loader.destroy();
                  this.loader = null;
                }
              };
              _proto.abort = function abort() {
                if (this.loader) {
                  this.loader.abort();
                }
              };
              _proto.load = function load(frag, _onProgress) {
                var _this = this;
                var url = frag.url;
                if (!url) {
                  return Promise.reject(new LoadError({
                    type: _errors__WEBPACK_IMPORTED_MODULE_1__["ErrorTypes"].NETWORK_ERROR,
                    details: _errors__WEBPACK_IMPORTED_MODULE_1__["ErrorDetails"].FRAG_LOAD_ERROR,
                    fatal: false,
                    frag,
                    networkDetails: null
                  }, "Fragment does not have a " + (url ? "part list" : "url")));
                }
                this.abort();
                var config2 = this.config;
                var FragmentILoader = config2.fLoader;
                var DefaultILoader = config2.loader;
                return new Promise(function(resolve, reject) {
                  if (_this.loader) {
                    _this.loader.destroy();
                  }
                  var loader = _this.loader = frag.loader = FragmentILoader ? new FragmentILoader(config2) : new DefaultILoader(config2);
                  var loaderContext = createLoaderContext(frag);
                  var loaderConfig = {
                    timeout: config2.fragLoadingTimeOut,
                    maxRetry: 0,
                    retryDelay: 0,
                    maxRetryDelay: config2.fragLoadingMaxRetryTimeout,
                    highWaterMark: MIN_CHUNK_SIZE
                  };
                  frag.stats = loader.stats;
                  loader.load(loaderContext, loaderConfig, {
                    onSuccess: function onSuccess(response, stats, context, networkDetails) {
                      _this.resetLoader(frag, loader);
                      resolve({
                        frag,
                        part: null,
                        payload: response.data,
                        networkDetails
                      });
                    },
                    onError: function onError(response, context, networkDetails) {
                      _this.resetLoader(frag, loader);
                      reject(new LoadError({
                        type: _errors__WEBPACK_IMPORTED_MODULE_1__["ErrorTypes"].NETWORK_ERROR,
                        details: _errors__WEBPACK_IMPORTED_MODULE_1__["ErrorDetails"].FRAG_LOAD_ERROR,
                        fatal: false,
                        frag,
                        response,
                        networkDetails
                      }));
                    },
                    onAbort: function onAbort(stats, context, networkDetails) {
                      _this.resetLoader(frag, loader);
                      reject(new LoadError({
                        type: _errors__WEBPACK_IMPORTED_MODULE_1__["ErrorTypes"].NETWORK_ERROR,
                        details: _errors__WEBPACK_IMPORTED_MODULE_1__["ErrorDetails"].INTERNAL_ABORTED,
                        fatal: false,
                        frag,
                        networkDetails
                      }));
                    },
                    onTimeout: function onTimeout(response, context, networkDetails) {
                      _this.resetLoader(frag, loader);
                      reject(new LoadError({
                        type: _errors__WEBPACK_IMPORTED_MODULE_1__["ErrorTypes"].NETWORK_ERROR,
                        details: _errors__WEBPACK_IMPORTED_MODULE_1__["ErrorDetails"].FRAG_LOAD_TIMEOUT,
                        fatal: false,
                        frag,
                        networkDetails
                      }));
                    },
                    onProgress: function onProgress(stats, context, data, networkDetails) {
                      if (_onProgress) {
                        _onProgress({
                          frag,
                          part: null,
                          payload: data,
                          networkDetails
                        });
                      }
                    }
                  });
                });
              };
              _proto.loadPart = function loadPart(frag, part, onProgress) {
                var _this2 = this;
                this.abort();
                var config2 = this.config;
                var FragmentILoader = config2.fLoader;
                var DefaultILoader = config2.loader;
                return new Promise(function(resolve, reject) {
                  if (_this2.loader) {
                    _this2.loader.destroy();
                  }
                  var loader = _this2.loader = frag.loader = FragmentILoader ? new FragmentILoader(config2) : new DefaultILoader(config2);
                  var loaderContext = createLoaderContext(frag, part);
                  var loaderConfig = {
                    timeout: config2.fragLoadingTimeOut,
                    maxRetry: 0,
                    retryDelay: 0,
                    maxRetryDelay: config2.fragLoadingMaxRetryTimeout,
                    highWaterMark: MIN_CHUNK_SIZE
                  };
                  part.stats = loader.stats;
                  loader.load(loaderContext, loaderConfig, {
                    onSuccess: function onSuccess(response, stats, context, networkDetails) {
                      _this2.resetLoader(frag, loader);
                      _this2.updateStatsFromPart(frag, part);
                      var partLoadedData = {
                        frag,
                        part,
                        payload: response.data,
                        networkDetails
                      };
                      onProgress(partLoadedData);
                      resolve(partLoadedData);
                    },
                    onError: function onError(response, context, networkDetails) {
                      _this2.resetLoader(frag, loader);
                      reject(new LoadError({
                        type: _errors__WEBPACK_IMPORTED_MODULE_1__["ErrorTypes"].NETWORK_ERROR,
                        details: _errors__WEBPACK_IMPORTED_MODULE_1__["ErrorDetails"].FRAG_LOAD_ERROR,
                        fatal: false,
                        frag,
                        part,
                        response,
                        networkDetails
                      }));
                    },
                    onAbort: function onAbort(stats, context, networkDetails) {
                      frag.stats.aborted = part.stats.aborted;
                      _this2.resetLoader(frag, loader);
                      reject(new LoadError({
                        type: _errors__WEBPACK_IMPORTED_MODULE_1__["ErrorTypes"].NETWORK_ERROR,
                        details: _errors__WEBPACK_IMPORTED_MODULE_1__["ErrorDetails"].INTERNAL_ABORTED,
                        fatal: false,
                        frag,
                        part,
                        networkDetails
                      }));
                    },
                    onTimeout: function onTimeout(response, context, networkDetails) {
                      _this2.resetLoader(frag, loader);
                      reject(new LoadError({
                        type: _errors__WEBPACK_IMPORTED_MODULE_1__["ErrorTypes"].NETWORK_ERROR,
                        details: _errors__WEBPACK_IMPORTED_MODULE_1__["ErrorDetails"].FRAG_LOAD_TIMEOUT,
                        fatal: false,
                        frag,
                        part,
                        networkDetails
                      }));
                    }
                  });
                });
              };
              _proto.updateStatsFromPart = function updateStatsFromPart(frag, part) {
                var fragStats = frag.stats;
                var partStats = part.stats;
                var partTotal = partStats.total;
                fragStats.loaded += partStats.loaded;
                if (partTotal) {
                  var estTotalParts = Math.round(frag.duration / part.duration);
                  var estLoadedParts = Math.min(Math.round(fragStats.loaded / partTotal), estTotalParts);
                  var estRemainingParts = estTotalParts - estLoadedParts;
                  var estRemainingBytes = estRemainingParts * Math.round(fragStats.loaded / estLoadedParts);
                  fragStats.total = fragStats.loaded + estRemainingBytes;
                } else {
                  fragStats.total = Math.max(fragStats.loaded, fragStats.total);
                }
                var fragLoading = fragStats.loading;
                var partLoading = partStats.loading;
                if (fragLoading.start) {
                  fragLoading.first += partLoading.first - partLoading.start;
                } else {
                  fragLoading.start = partLoading.start;
                  fragLoading.first = partLoading.first;
                }
                fragLoading.end = partLoading.end;
              };
              _proto.resetLoader = function resetLoader(frag, loader) {
                frag.loader = null;
                if (this.loader === loader) {
                  self.clearTimeout(this.partLoadTimeout);
                  this.loader = null;
                }
                loader.destroy();
              };
              return FragmentLoader2;
            }();
            function createLoaderContext(frag, part) {
              if (part === void 0) {
                part = null;
              }
              var segment = part || frag;
              var loaderContext = {
                frag,
                part,
                responseType: "arraybuffer",
                url: segment.url,
                headers: {},
                rangeStart: 0,
                rangeEnd: 0
              };
              var start = segment.byteRangeStartOffset;
              var end = segment.byteRangeEndOffset;
              if (Object(_home_runner_work_hls_js_hls_js_src_polyfills_number__WEBPACK_IMPORTED_MODULE_0__["isFiniteNumber"])(start) && Object(_home_runner_work_hls_js_hls_js_src_polyfills_number__WEBPACK_IMPORTED_MODULE_0__["isFiniteNumber"])(end)) {
                loaderContext.rangeStart = start;
                loaderContext.rangeEnd = end;
              }
              return loaderContext;
            }
            var LoadError = /* @__PURE__ */ function(_Error) {
              _inheritsLoose(LoadError2, _Error);
              function LoadError2(data) {
                var _this3;
                for (var _len = arguments.length, params = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
                  params[_key - 1] = arguments[_key];
                }
                _this3 = _Error.call.apply(_Error, [this].concat(params)) || this;
                _this3.data = void 0;
                _this3.data = data;
                return _this3;
              }
              return LoadError2;
            }(/* @__PURE__ */ _wrapNativeSuper(Error));
          },
          "./src/loader/fragment.ts": function(module2, __webpack_exports__, __webpack_require__) {
            "use strict";
            __webpack_require__.r(__webpack_exports__);
            __webpack_require__.d(__webpack_exports__, "ElementaryStreamTypes", function() {
              return ElementaryStreamTypes;
            });
            __webpack_require__.d(__webpack_exports__, "BaseSegment", function() {
              return BaseSegment;
            });
            __webpack_require__.d(__webpack_exports__, "Fragment", function() {
              return Fragment4;
            });
            __webpack_require__.d(__webpack_exports__, "Part", function() {
              return Part;
            });
            var _home_runner_work_hls_js_hls_js_src_polyfills_number__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("./src/polyfills/number.ts");
            var url_toolkit__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("./node_modules/url-toolkit/src/url-toolkit.js");
            var url_toolkit__WEBPACK_IMPORTED_MODULE_1___default = /* @__PURE__ */ __webpack_require__.n(url_toolkit__WEBPACK_IMPORTED_MODULE_1__);
            var _utils_logger__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__("./src/utils/logger.ts");
            var _level_key__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__("./src/loader/level-key.ts");
            var _load_stats__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__("./src/loader/load-stats.ts");
            function _inheritsLoose(subClass, superClass) {
              subClass.prototype = Object.create(superClass.prototype);
              subClass.prototype.constructor = subClass;
              _setPrototypeOf(subClass, superClass);
            }
            function _setPrototypeOf(o3, p5) {
              _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf2(o4, p6) {
                o4.__proto__ = p6;
                return o4;
              };
              return _setPrototypeOf(o3, p5);
            }
            function _defineProperties(target, props) {
              for (var i3 = 0; i3 < props.length; i3++) {
                var descriptor = props[i3];
                descriptor.enumerable = descriptor.enumerable || false;
                descriptor.configurable = true;
                if ("value" in descriptor)
                  descriptor.writable = true;
                Object.defineProperty(target, descriptor.key, descriptor);
              }
            }
            function _createClass(Constructor, protoProps, staticProps) {
              if (protoProps)
                _defineProperties(Constructor.prototype, protoProps);
              if (staticProps)
                _defineProperties(Constructor, staticProps);
              return Constructor;
            }
            var ElementaryStreamTypes;
            (function(ElementaryStreamTypes2) {
              ElementaryStreamTypes2["AUDIO"] = "audio";
              ElementaryStreamTypes2["VIDEO"] = "video";
              ElementaryStreamTypes2["AUDIOVIDEO"] = "audiovideo";
            })(ElementaryStreamTypes || (ElementaryStreamTypes = {}));
            var BaseSegment = /* @__PURE__ */ function() {
              function BaseSegment2(baseurl) {
                var _this$elementaryStrea;
                this._byteRange = null;
                this._url = null;
                this.baseurl = void 0;
                this.relurl = void 0;
                this.elementaryStreams = (_this$elementaryStrea = {}, _this$elementaryStrea[ElementaryStreamTypes.AUDIO] = null, _this$elementaryStrea[ElementaryStreamTypes.VIDEO] = null, _this$elementaryStrea[ElementaryStreamTypes.AUDIOVIDEO] = null, _this$elementaryStrea);
                this.baseurl = baseurl;
              }
              var _proto = BaseSegment2.prototype;
              _proto.setByteRange = function setByteRange(value, previous) {
                var params = value.split("@", 2);
                var byteRange = [];
                if (params.length === 1) {
                  byteRange[0] = previous ? previous.byteRangeEndOffset : 0;
                } else {
                  byteRange[0] = parseInt(params[1]);
                }
                byteRange[1] = parseInt(params[0]) + byteRange[0];
                this._byteRange = byteRange;
              };
              _createClass(BaseSegment2, [{
                key: "byteRange",
                get: function get() {
                  if (!this._byteRange) {
                    return [];
                  }
                  return this._byteRange;
                }
              }, {
                key: "byteRangeStartOffset",
                get: function get() {
                  return this.byteRange[0];
                }
              }, {
                key: "byteRangeEndOffset",
                get: function get() {
                  return this.byteRange[1];
                }
              }, {
                key: "url",
                get: function get() {
                  if (!this._url && this.baseurl && this.relurl) {
                    this._url = Object(url_toolkit__WEBPACK_IMPORTED_MODULE_1__["buildAbsoluteURL"])(this.baseurl, this.relurl, {
                      alwaysNormalize: true
                    });
                  }
                  return this._url || "";
                },
                set: function set(value) {
                  this._url = value;
                }
              }]);
              return BaseSegment2;
            }();
            var Fragment4 = /* @__PURE__ */ function(_BaseSegment) {
              _inheritsLoose(Fragment5, _BaseSegment);
              function Fragment5(type, baseurl) {
                var _this;
                _this = _BaseSegment.call(this, baseurl) || this;
                _this._decryptdata = null;
                _this.rawProgramDateTime = null;
                _this.programDateTime = null;
                _this.tagList = [];
                _this.duration = 0;
                _this.sn = 0;
                _this.levelkey = void 0;
                _this.type = void 0;
                _this.loader = null;
                _this.level = -1;
                _this.cc = 0;
                _this.startPTS = void 0;
                _this.endPTS = void 0;
                _this.appendedPTS = void 0;
                _this.startDTS = void 0;
                _this.endDTS = void 0;
                _this.start = 0;
                _this.deltaPTS = void 0;
                _this.maxStartPTS = void 0;
                _this.minEndPTS = void 0;
                _this.stats = new _load_stats__WEBPACK_IMPORTED_MODULE_4__["LoadStats"]();
                _this.urlId = 0;
                _this.data = void 0;
                _this.bitrateTest = false;
                _this.title = null;
                _this.initSegment = null;
                _this.type = type;
                return _this;
              }
              var _proto2 = Fragment5.prototype;
              _proto2.createInitializationVector = function createInitializationVector(segmentNumber) {
                var uint8View = new Uint8Array(16);
                for (var i3 = 12; i3 < 16; i3++) {
                  uint8View[i3] = segmentNumber >> 8 * (15 - i3) & 255;
                }
                return uint8View;
              };
              _proto2.setDecryptDataFromLevelKey = function setDecryptDataFromLevelKey(levelkey, segmentNumber) {
                var decryptdata = levelkey;
                if ((levelkey === null || levelkey === void 0 ? void 0 : levelkey.method) === "AES-128" && levelkey.uri && !levelkey.iv) {
                  decryptdata = _level_key__WEBPACK_IMPORTED_MODULE_3__["LevelKey"].fromURI(levelkey.uri);
                  decryptdata.method = levelkey.method;
                  decryptdata.iv = this.createInitializationVector(segmentNumber);
                  decryptdata.keyFormat = "identity";
                }
                return decryptdata;
              };
              _proto2.setElementaryStreamInfo = function setElementaryStreamInfo(type, startPTS, endPTS, startDTS, endDTS, partial) {
                if (partial === void 0) {
                  partial = false;
                }
                var elementaryStreams = this.elementaryStreams;
                var info = elementaryStreams[type];
                if (!info) {
                  elementaryStreams[type] = {
                    startPTS,
                    endPTS,
                    startDTS,
                    endDTS,
                    partial
                  };
                  return;
                }
                info.startPTS = Math.min(info.startPTS, startPTS);
                info.endPTS = Math.max(info.endPTS, endPTS);
                info.startDTS = Math.min(info.startDTS, startDTS);
                info.endDTS = Math.max(info.endDTS, endDTS);
              };
              _proto2.clearElementaryStreamInfo = function clearElementaryStreamInfo() {
                var elementaryStreams = this.elementaryStreams;
                elementaryStreams[ElementaryStreamTypes.AUDIO] = null;
                elementaryStreams[ElementaryStreamTypes.VIDEO] = null;
                elementaryStreams[ElementaryStreamTypes.AUDIOVIDEO] = null;
              };
              _createClass(Fragment5, [{
                key: "decryptdata",
                get: function get() {
                  if (!this.levelkey && !this._decryptdata) {
                    return null;
                  }
                  if (!this._decryptdata && this.levelkey) {
                    var sn = this.sn;
                    if (typeof sn !== "number") {
                      if (this.levelkey && this.levelkey.method === "AES-128" && !this.levelkey.iv) {
                        _utils_logger__WEBPACK_IMPORTED_MODULE_2__["logger"].warn('missing IV for initialization segment with method="' + this.levelkey.method + '" - compliance issue');
                      }
                      sn = 0;
                    }
                    this._decryptdata = this.setDecryptDataFromLevelKey(this.levelkey, sn);
                  }
                  return this._decryptdata;
                }
              }, {
                key: "end",
                get: function get() {
                  return this.start + this.duration;
                }
              }, {
                key: "endProgramDateTime",
                get: function get() {
                  if (this.programDateTime === null) {
                    return null;
                  }
                  if (!Object(_home_runner_work_hls_js_hls_js_src_polyfills_number__WEBPACK_IMPORTED_MODULE_0__["isFiniteNumber"])(this.programDateTime)) {
                    return null;
                  }
                  var duration = !Object(_home_runner_work_hls_js_hls_js_src_polyfills_number__WEBPACK_IMPORTED_MODULE_0__["isFiniteNumber"])(this.duration) ? 0 : this.duration;
                  return this.programDateTime + duration * 1e3;
                }
              }, {
                key: "encrypted",
                get: function get() {
                  var _this$decryptdata;
                  if ((_this$decryptdata = this.decryptdata) !== null && _this$decryptdata !== void 0 && _this$decryptdata.keyFormat && this.decryptdata.uri) {
                    return true;
                  }
                  return false;
                }
              }]);
              return Fragment5;
            }(BaseSegment);
            var Part = /* @__PURE__ */ function(_BaseSegment2) {
              _inheritsLoose(Part2, _BaseSegment2);
              function Part2(partAttrs, frag, baseurl, index, previous) {
                var _this2;
                _this2 = _BaseSegment2.call(this, baseurl) || this;
                _this2.fragOffset = 0;
                _this2.duration = 0;
                _this2.gap = false;
                _this2.independent = false;
                _this2.relurl = void 0;
                _this2.fragment = void 0;
                _this2.index = void 0;
                _this2.stats = new _load_stats__WEBPACK_IMPORTED_MODULE_4__["LoadStats"]();
                _this2.duration = partAttrs.decimalFloatingPoint("DURATION");
                _this2.gap = partAttrs.bool("GAP");
                _this2.independent = partAttrs.bool("INDEPENDENT");
                _this2.relurl = partAttrs.enumeratedString("URI");
                _this2.fragment = frag;
                _this2.index = index;
                var byteRange = partAttrs.enumeratedString("BYTERANGE");
                if (byteRange) {
                  _this2.setByteRange(byteRange, previous);
                }
                if (previous) {
                  _this2.fragOffset = previous.fragOffset + previous.duration;
                }
                return _this2;
              }
              _createClass(Part2, [{
                key: "start",
                get: function get() {
                  return this.fragment.start + this.fragOffset;
                }
              }, {
                key: "end",
                get: function get() {
                  return this.start + this.duration;
                }
              }, {
                key: "loaded",
                get: function get() {
                  var elementaryStreams = this.elementaryStreams;
                  return !!(elementaryStreams.audio || elementaryStreams.video || elementaryStreams.audiovideo);
                }
              }]);
              return Part2;
            }(BaseSegment);
          },
          "./src/loader/key-loader.ts": function(module2, __webpack_exports__, __webpack_require__) {
            "use strict";
            __webpack_require__.r(__webpack_exports__);
            __webpack_require__.d(__webpack_exports__, "default", function() {
              return KeyLoader;
            });
            var _events__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("./src/events.ts");
            var _errors__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("./src/errors.ts");
            var _utils_logger__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__("./src/utils/logger.ts");
            var KeyLoader = /* @__PURE__ */ function() {
              function KeyLoader2(hls) {
                this.hls = void 0;
                this.loaders = {};
                this.decryptkey = null;
                this.decrypturl = null;
                this.hls = hls;
                this._registerListeners();
              }
              var _proto = KeyLoader2.prototype;
              _proto._registerListeners = function _registerListeners() {
                this.hls.on(_events__WEBPACK_IMPORTED_MODULE_0__["Events"].KEY_LOADING, this.onKeyLoading, this);
              };
              _proto._unregisterListeners = function _unregisterListeners() {
                this.hls.off(_events__WEBPACK_IMPORTED_MODULE_0__["Events"].KEY_LOADING, this.onKeyLoading);
              };
              _proto.destroy = function destroy() {
                this._unregisterListeners();
                for (var loaderName in this.loaders) {
                  var loader = this.loaders[loaderName];
                  if (loader) {
                    loader.destroy();
                  }
                }
                this.loaders = {};
              };
              _proto.onKeyLoading = function onKeyLoading(event, data) {
                var frag = data.frag;
                var type = frag.type;
                var loader = this.loaders[type];
                if (!frag.decryptdata) {
                  _utils_logger__WEBPACK_IMPORTED_MODULE_2__["logger"].warn("Missing decryption data on fragment in onKeyLoading");
                  return;
                }
                var uri = frag.decryptdata.uri;
                if (uri !== this.decrypturl || this.decryptkey === null) {
                  var config2 = this.hls.config;
                  if (loader) {
                    _utils_logger__WEBPACK_IMPORTED_MODULE_2__["logger"].warn("abort previous key loader for type:" + type);
                    loader.abort();
                  }
                  if (!uri) {
                    _utils_logger__WEBPACK_IMPORTED_MODULE_2__["logger"].warn("key uri is falsy");
                    return;
                  }
                  var Loader = config2.loader;
                  var fragLoader = frag.loader = this.loaders[type] = new Loader(config2);
                  this.decrypturl = uri;
                  this.decryptkey = null;
                  var loaderContext = {
                    url: uri,
                    frag,
                    responseType: "arraybuffer"
                  };
                  var loaderConfig = {
                    timeout: config2.fragLoadingTimeOut,
                    maxRetry: 0,
                    retryDelay: config2.fragLoadingRetryDelay,
                    maxRetryDelay: config2.fragLoadingMaxRetryTimeout,
                    highWaterMark: 0
                  };
                  var loaderCallbacks = {
                    onSuccess: this.loadsuccess.bind(this),
                    onError: this.loaderror.bind(this),
                    onTimeout: this.loadtimeout.bind(this)
                  };
                  fragLoader.load(loaderContext, loaderConfig, loaderCallbacks);
                } else if (this.decryptkey) {
                  frag.decryptdata.key = this.decryptkey;
                  this.hls.trigger(_events__WEBPACK_IMPORTED_MODULE_0__["Events"].KEY_LOADED, {
                    frag
                  });
                }
              };
              _proto.loadsuccess = function loadsuccess(response, stats, context) {
                var frag = context.frag;
                if (!frag.decryptdata) {
                  _utils_logger__WEBPACK_IMPORTED_MODULE_2__["logger"].error("after key load, decryptdata unset");
                  return;
                }
                this.decryptkey = frag.decryptdata.key = new Uint8Array(response.data);
                frag.loader = null;
                delete this.loaders[frag.type];
                this.hls.trigger(_events__WEBPACK_IMPORTED_MODULE_0__["Events"].KEY_LOADED, {
                  frag
                });
              };
              _proto.loaderror = function loaderror(response, context) {
                var frag = context.frag;
                var loader = frag.loader;
                if (loader) {
                  loader.abort();
                }
                delete this.loaders[frag.type];
                this.hls.trigger(_events__WEBPACK_IMPORTED_MODULE_0__["Events"].ERROR, {
                  type: _errors__WEBPACK_IMPORTED_MODULE_1__["ErrorTypes"].NETWORK_ERROR,
                  details: _errors__WEBPACK_IMPORTED_MODULE_1__["ErrorDetails"].KEY_LOAD_ERROR,
                  fatal: false,
                  frag,
                  response
                });
              };
              _proto.loadtimeout = function loadtimeout(stats, context) {
                var frag = context.frag;
                var loader = frag.loader;
                if (loader) {
                  loader.abort();
                }
                delete this.loaders[frag.type];
                this.hls.trigger(_events__WEBPACK_IMPORTED_MODULE_0__["Events"].ERROR, {
                  type: _errors__WEBPACK_IMPORTED_MODULE_1__["ErrorTypes"].NETWORK_ERROR,
                  details: _errors__WEBPACK_IMPORTED_MODULE_1__["ErrorDetails"].KEY_LOAD_TIMEOUT,
                  fatal: false,
                  frag
                });
              };
              return KeyLoader2;
            }();
          },
          "./src/loader/level-details.ts": function(module2, __webpack_exports__, __webpack_require__) {
            "use strict";
            __webpack_require__.r(__webpack_exports__);
            __webpack_require__.d(__webpack_exports__, "LevelDetails", function() {
              return LevelDetails;
            });
            var _home_runner_work_hls_js_hls_js_src_polyfills_number__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("./src/polyfills/number.ts");
            function _defineProperties(target, props) {
              for (var i3 = 0; i3 < props.length; i3++) {
                var descriptor = props[i3];
                descriptor.enumerable = descriptor.enumerable || false;
                descriptor.configurable = true;
                if ("value" in descriptor)
                  descriptor.writable = true;
                Object.defineProperty(target, descriptor.key, descriptor);
              }
            }
            function _createClass(Constructor, protoProps, staticProps) {
              if (protoProps)
                _defineProperties(Constructor.prototype, protoProps);
              if (staticProps)
                _defineProperties(Constructor, staticProps);
              return Constructor;
            }
            var DEFAULT_TARGET_DURATION = 10;
            var LevelDetails = /* @__PURE__ */ function() {
              function LevelDetails2(baseUrl) {
                this.PTSKnown = false;
                this.alignedSliding = false;
                this.averagetargetduration = void 0;
                this.endCC = 0;
                this.endSN = 0;
                this.fragments = void 0;
                this.fragmentHint = void 0;
                this.partList = null;
                this.live = true;
                this.ageHeader = 0;
                this.advancedDateTime = void 0;
                this.updated = true;
                this.advanced = true;
                this.availabilityDelay = void 0;
                this.misses = 0;
                this.needSidxRanges = false;
                this.startCC = 0;
                this.startSN = 0;
                this.startTimeOffset = null;
                this.targetduration = 0;
                this.totalduration = 0;
                this.type = null;
                this.url = void 0;
                this.m3u8 = "";
                this.version = null;
                this.canBlockReload = false;
                this.canSkipUntil = 0;
                this.canSkipDateRanges = false;
                this.skippedSegments = 0;
                this.recentlyRemovedDateranges = void 0;
                this.partHoldBack = 0;
                this.holdBack = 0;
                this.partTarget = 0;
                this.preloadHint = void 0;
                this.renditionReports = void 0;
                this.tuneInGoal = 0;
                this.deltaUpdateFailed = void 0;
                this.driftStartTime = 0;
                this.driftEndTime = 0;
                this.driftStart = 0;
                this.driftEnd = 0;
                this.fragments = [];
                this.url = baseUrl;
              }
              var _proto = LevelDetails2.prototype;
              _proto.reloaded = function reloaded(previous) {
                if (!previous) {
                  this.advanced = true;
                  this.updated = true;
                  return;
                }
                var partSnDiff = this.lastPartSn - previous.lastPartSn;
                var partIndexDiff = this.lastPartIndex - previous.lastPartIndex;
                this.updated = this.endSN !== previous.endSN || !!partIndexDiff || !!partSnDiff;
                this.advanced = this.endSN > previous.endSN || partSnDiff > 0 || partSnDiff === 0 && partIndexDiff > 0;
                if (this.updated || this.advanced) {
                  this.misses = Math.floor(previous.misses * 0.6);
                } else {
                  this.misses = previous.misses + 1;
                }
                this.availabilityDelay = previous.availabilityDelay;
              };
              _createClass(LevelDetails2, [{
                key: "hasProgramDateTime",
                get: function get() {
                  if (this.fragments.length) {
                    return Object(_home_runner_work_hls_js_hls_js_src_polyfills_number__WEBPACK_IMPORTED_MODULE_0__["isFiniteNumber"])(this.fragments[this.fragments.length - 1].programDateTime);
                  }
                  return false;
                }
              }, {
                key: "levelTargetDuration",
                get: function get() {
                  return this.averagetargetduration || this.targetduration || DEFAULT_TARGET_DURATION;
                }
              }, {
                key: "drift",
                get: function get() {
                  var runTime = this.driftEndTime - this.driftStartTime;
                  if (runTime > 0) {
                    var runDuration = this.driftEnd - this.driftStart;
                    return runDuration * 1e3 / runTime;
                  }
                  return 1;
                }
              }, {
                key: "edge",
                get: function get() {
                  return this.partEnd || this.fragmentEnd;
                }
              }, {
                key: "partEnd",
                get: function get() {
                  var _this$partList;
                  if ((_this$partList = this.partList) !== null && _this$partList !== void 0 && _this$partList.length) {
                    return this.partList[this.partList.length - 1].end;
                  }
                  return this.fragmentEnd;
                }
              }, {
                key: "fragmentEnd",
                get: function get() {
                  var _this$fragments;
                  if ((_this$fragments = this.fragments) !== null && _this$fragments !== void 0 && _this$fragments.length) {
                    return this.fragments[this.fragments.length - 1].end;
                  }
                  return 0;
                }
              }, {
                key: "age",
                get: function get() {
                  if (this.advancedDateTime) {
                    return Math.max(Date.now() - this.advancedDateTime, 0) / 1e3;
                  }
                  return 0;
                }
              }, {
                key: "lastPartIndex",
                get: function get() {
                  var _this$partList2;
                  if ((_this$partList2 = this.partList) !== null && _this$partList2 !== void 0 && _this$partList2.length) {
                    return this.partList[this.partList.length - 1].index;
                  }
                  return -1;
                }
              }, {
                key: "lastPartSn",
                get: function get() {
                  var _this$partList3;
                  if ((_this$partList3 = this.partList) !== null && _this$partList3 !== void 0 && _this$partList3.length) {
                    return this.partList[this.partList.length - 1].fragment.sn;
                  }
                  return this.endSN;
                }
              }]);
              return LevelDetails2;
            }();
          },
          "./src/loader/level-key.ts": function(module2, __webpack_exports__, __webpack_require__) {
            "use strict";
            __webpack_require__.r(__webpack_exports__);
            __webpack_require__.d(__webpack_exports__, "LevelKey", function() {
              return LevelKey;
            });
            var url_toolkit__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("./node_modules/url-toolkit/src/url-toolkit.js");
            var url_toolkit__WEBPACK_IMPORTED_MODULE_0___default = /* @__PURE__ */ __webpack_require__.n(url_toolkit__WEBPACK_IMPORTED_MODULE_0__);
            function _defineProperties(target, props) {
              for (var i3 = 0; i3 < props.length; i3++) {
                var descriptor = props[i3];
                descriptor.enumerable = descriptor.enumerable || false;
                descriptor.configurable = true;
                if ("value" in descriptor)
                  descriptor.writable = true;
                Object.defineProperty(target, descriptor.key, descriptor);
              }
            }
            function _createClass(Constructor, protoProps, staticProps) {
              if (protoProps)
                _defineProperties(Constructor.prototype, protoProps);
              if (staticProps)
                _defineProperties(Constructor, staticProps);
              return Constructor;
            }
            var LevelKey = /* @__PURE__ */ function() {
              LevelKey2.fromURL = function fromURL(baseUrl, relativeUrl) {
                return new LevelKey2(baseUrl, relativeUrl);
              };
              LevelKey2.fromURI = function fromURI(uri) {
                return new LevelKey2(uri);
              };
              function LevelKey2(absoluteOrBaseURI, relativeURL) {
                this._uri = null;
                this.method = null;
                this.keyFormat = null;
                this.keyFormatVersions = null;
                this.keyID = null;
                this.key = null;
                this.iv = null;
                if (relativeURL) {
                  this._uri = Object(url_toolkit__WEBPACK_IMPORTED_MODULE_0__["buildAbsoluteURL"])(absoluteOrBaseURI, relativeURL, {
                    alwaysNormalize: true
                  });
                } else {
                  this._uri = absoluteOrBaseURI;
                }
              }
              _createClass(LevelKey2, [{
                key: "uri",
                get: function get() {
                  return this._uri;
                }
              }]);
              return LevelKey2;
            }();
          },
          "./src/loader/load-stats.ts": function(module2, __webpack_exports__, __webpack_require__) {
            "use strict";
            __webpack_require__.r(__webpack_exports__);
            __webpack_require__.d(__webpack_exports__, "LoadStats", function() {
              return LoadStats;
            });
            var LoadStats = function LoadStats2() {
              this.aborted = false;
              this.loaded = 0;
              this.retry = 0;
              this.total = 0;
              this.chunkCount = 0;
              this.bwEstimate = 0;
              this.loading = {
                start: 0,
                first: 0,
                end: 0
              };
              this.parsing = {
                start: 0,
                end: 0
              };
              this.buffering = {
                start: 0,
                first: 0,
                end: 0
              };
            };
          },
          "./src/loader/m3u8-parser.ts": function(module2, __webpack_exports__, __webpack_require__) {
            "use strict";
            __webpack_require__.r(__webpack_exports__);
            __webpack_require__.d(__webpack_exports__, "default", function() {
              return M3U8Parser;
            });
            var _home_runner_work_hls_js_hls_js_src_polyfills_number__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("./src/polyfills/number.ts");
            var url_toolkit__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("./node_modules/url-toolkit/src/url-toolkit.js");
            var url_toolkit__WEBPACK_IMPORTED_MODULE_1___default = /* @__PURE__ */ __webpack_require__.n(url_toolkit__WEBPACK_IMPORTED_MODULE_1__);
            var _fragment__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__("./src/loader/fragment.ts");
            var _level_details__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__("./src/loader/level-details.ts");
            var _level_key__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__("./src/loader/level-key.ts");
            var _utils_attr_list__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__("./src/utils/attr-list.ts");
            var _utils_logger__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__("./src/utils/logger.ts");
            var _utils_codecs__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__("./src/utils/codecs.ts");
            var MASTER_PLAYLIST_REGEX = /#EXT-X-STREAM-INF:([^\r\n]*)(?:[\r\n](?:#[^\r\n]*)?)*([^\r\n]+)|#EXT-X-SESSION-DATA:([^\r\n]*)[\r\n]+/g;
            var MASTER_PLAYLIST_MEDIA_REGEX = /#EXT-X-MEDIA:(.*)/g;
            var LEVEL_PLAYLIST_REGEX_FAST = new RegExp([
              /#EXTINF:\s*(\d*(?:\.\d+)?)(?:,(.*)\s+)?/.source,
              /(?!#) *(\S[\S ]*)/.source,
              /#EXT-X-BYTERANGE:*(.+)/.source,
              /#EXT-X-PROGRAM-DATE-TIME:(.+)/.source,
              /#.*/.source
            ].join("|"), "g");
            var LEVEL_PLAYLIST_REGEX_SLOW = new RegExp([/#(EXTM3U)/.source, /#EXT-X-(PLAYLIST-TYPE):(.+)/.source, /#EXT-X-(MEDIA-SEQUENCE): *(\d+)/.source, /#EXT-X-(SKIP):(.+)/.source, /#EXT-X-(TARGETDURATION): *(\d+)/.source, /#EXT-X-(KEY):(.+)/.source, /#EXT-X-(START):(.+)/.source, /#EXT-X-(ENDLIST)/.source, /#EXT-X-(DISCONTINUITY-SEQ)UENCE: *(\d+)/.source, /#EXT-X-(DIS)CONTINUITY/.source, /#EXT-X-(VERSION):(\d+)/.source, /#EXT-X-(MAP):(.+)/.source, /#EXT-X-(SERVER-CONTROL):(.+)/.source, /#EXT-X-(PART-INF):(.+)/.source, /#EXT-X-(GAP)/.source, /#EXT-X-(BITRATE):\s*(\d+)/.source, /#EXT-X-(PART):(.+)/.source, /#EXT-X-(PRELOAD-HINT):(.+)/.source, /#EXT-X-(RENDITION-REPORT):(.+)/.source, /(#)([^:]*):(.*)/.source, /(#)(.*)(?:.*)\r?\n?/.source].join("|"));
            var MP4_REGEX_SUFFIX = /\.(mp4|m4s|m4v|m4a)$/i;
            function isMP4Url(url) {
              var _URLToolkit$parseURL$, _URLToolkit$parseURL;
              return MP4_REGEX_SUFFIX.test((_URLToolkit$parseURL$ = (_URLToolkit$parseURL = url_toolkit__WEBPACK_IMPORTED_MODULE_1__["parseURL"](url)) === null || _URLToolkit$parseURL === void 0 ? void 0 : _URLToolkit$parseURL.path) != null ? _URLToolkit$parseURL$ : "");
            }
            var M3U8Parser = /* @__PURE__ */ function() {
              function M3U8Parser2() {
              }
              M3U8Parser2.findGroup = function findGroup(groups, mediaGroupId) {
                for (var i3 = 0; i3 < groups.length; i3++) {
                  var group = groups[i3];
                  if (group.id === mediaGroupId) {
                    return group;
                  }
                }
              };
              M3U8Parser2.convertAVC1ToAVCOTI = function convertAVC1ToAVCOTI(codec) {
                var avcdata = codec.split(".");
                if (avcdata.length > 2) {
                  var result = avcdata.shift() + ".";
                  result += parseInt(avcdata.shift()).toString(16);
                  result += ("000" + parseInt(avcdata.shift()).toString(16)).substr(-4);
                  return result;
                }
                return codec;
              };
              M3U8Parser2.resolve = function resolve(url, baseUrl) {
                return url_toolkit__WEBPACK_IMPORTED_MODULE_1__["buildAbsoluteURL"](baseUrl, url, {
                  alwaysNormalize: true
                });
              };
              M3U8Parser2.parseMasterPlaylist = function parseMasterPlaylist(string, baseurl) {
                var levels = [];
                var sessionData = {};
                var hasSessionData = false;
                MASTER_PLAYLIST_REGEX.lastIndex = 0;
                var result;
                while ((result = MASTER_PLAYLIST_REGEX.exec(string)) != null) {
                  if (result[1]) {
                    var attrs = new _utils_attr_list__WEBPACK_IMPORTED_MODULE_5__["AttrList"](result[1]);
                    var level = {
                      attrs,
                      bitrate: attrs.decimalInteger("AVERAGE-BANDWIDTH") || attrs.decimalInteger("BANDWIDTH"),
                      name: attrs.NAME,
                      url: M3U8Parser2.resolve(result[2], baseurl)
                    };
                    var resolution = attrs.decimalResolution("RESOLUTION");
                    if (resolution) {
                      level.width = resolution.width;
                      level.height = resolution.height;
                    }
                    setCodecs((attrs.CODECS || "").split(/[ ,]+/).filter(function(c4) {
                      return c4;
                    }), level);
                    if (level.videoCodec && level.videoCodec.indexOf("avc1") !== -1) {
                      level.videoCodec = M3U8Parser2.convertAVC1ToAVCOTI(level.videoCodec);
                    }
                    levels.push(level);
                  } else if (result[3]) {
                    var sessionAttrs = new _utils_attr_list__WEBPACK_IMPORTED_MODULE_5__["AttrList"](result[3]);
                    if (sessionAttrs["DATA-ID"]) {
                      hasSessionData = true;
                      sessionData[sessionAttrs["DATA-ID"]] = sessionAttrs;
                    }
                  }
                }
                return {
                  levels,
                  sessionData: hasSessionData ? sessionData : null
                };
              };
              M3U8Parser2.parseMasterPlaylistMedia = function parseMasterPlaylistMedia(string, baseurl, type, groups) {
                if (groups === void 0) {
                  groups = [];
                }
                var result;
                var medias = [];
                var id = 0;
                MASTER_PLAYLIST_MEDIA_REGEX.lastIndex = 0;
                while ((result = MASTER_PLAYLIST_MEDIA_REGEX.exec(string)) !== null) {
                  var attrs = new _utils_attr_list__WEBPACK_IMPORTED_MODULE_5__["AttrList"](result[1]);
                  if (attrs.TYPE === type) {
                    var media2 = {
                      attrs,
                      bitrate: 0,
                      id: id++,
                      groupId: attrs["GROUP-ID"],
                      instreamId: attrs["INSTREAM-ID"],
                      name: attrs.NAME || attrs.LANGUAGE || "",
                      type,
                      default: attrs.bool("DEFAULT"),
                      autoselect: attrs.bool("AUTOSELECT"),
                      forced: attrs.bool("FORCED"),
                      lang: attrs.LANGUAGE,
                      url: attrs.URI ? M3U8Parser2.resolve(attrs.URI, baseurl) : ""
                    };
                    if (groups.length) {
                      var groupCodec = M3U8Parser2.findGroup(groups, media2.groupId) || groups[0];
                      assignCodec(media2, groupCodec, "audioCodec");
                      assignCodec(media2, groupCodec, "textCodec");
                    }
                    medias.push(media2);
                  }
                }
                return medias;
              };
              M3U8Parser2.parseLevelPlaylist = function parseLevelPlaylist(string, baseurl, id, type, levelUrlId) {
                var level = new _level_details__WEBPACK_IMPORTED_MODULE_3__["LevelDetails"](baseurl);
                var fragments = level.fragments;
                var currentInitSegment = null;
                var currentSN = 0;
                var currentPart = 0;
                var totalduration = 0;
                var discontinuityCounter = 0;
                var prevFrag = null;
                var frag = new _fragment__WEBPACK_IMPORTED_MODULE_2__["Fragment"](type, baseurl);
                var result;
                var i3;
                var levelkey;
                var firstPdtIndex = -1;
                var createNextFrag = false;
                LEVEL_PLAYLIST_REGEX_FAST.lastIndex = 0;
                level.m3u8 = string;
                while ((result = LEVEL_PLAYLIST_REGEX_FAST.exec(string)) !== null) {
                  if (createNextFrag) {
                    createNextFrag = false;
                    frag = new _fragment__WEBPACK_IMPORTED_MODULE_2__["Fragment"](type, baseurl);
                    frag.start = totalduration;
                    frag.sn = currentSN;
                    frag.cc = discontinuityCounter;
                    frag.level = id;
                    if (currentInitSegment) {
                      frag.initSegment = currentInitSegment;
                      frag.rawProgramDateTime = currentInitSegment.rawProgramDateTime;
                    }
                  }
                  var duration = result[1];
                  if (duration) {
                    frag.duration = parseFloat(duration);
                    var title = (" " + result[2]).slice(1);
                    frag.title = title || null;
                    frag.tagList.push(title ? ["INF", duration, title] : ["INF", duration]);
                  } else if (result[3]) {
                    if (Object(_home_runner_work_hls_js_hls_js_src_polyfills_number__WEBPACK_IMPORTED_MODULE_0__["isFiniteNumber"])(frag.duration)) {
                      frag.start = totalduration;
                      if (levelkey) {
                        frag.levelkey = levelkey;
                      }
                      frag.sn = currentSN;
                      frag.level = id;
                      frag.cc = discontinuityCounter;
                      frag.urlId = levelUrlId;
                      fragments.push(frag);
                      frag.relurl = (" " + result[3]).slice(1);
                      assignProgramDateTime(frag, prevFrag);
                      prevFrag = frag;
                      totalduration += frag.duration;
                      currentSN++;
                      currentPart = 0;
                      createNextFrag = true;
                    }
                  } else if (result[4]) {
                    var data = (" " + result[4]).slice(1);
                    if (prevFrag) {
                      frag.setByteRange(data, prevFrag);
                    } else {
                      frag.setByteRange(data);
                    }
                  } else if (result[5]) {
                    frag.rawProgramDateTime = (" " + result[5]).slice(1);
                    frag.tagList.push(["PROGRAM-DATE-TIME", frag.rawProgramDateTime]);
                    if (firstPdtIndex === -1) {
                      firstPdtIndex = fragments.length;
                    }
                  } else {
                    result = result[0].match(LEVEL_PLAYLIST_REGEX_SLOW);
                    if (!result) {
                      _utils_logger__WEBPACK_IMPORTED_MODULE_6__["logger"].warn("No matches on slow regex match for level playlist!");
                      continue;
                    }
                    for (i3 = 1; i3 < result.length; i3++) {
                      if (typeof result[i3] !== "undefined") {
                        break;
                      }
                    }
                    var tag = (" " + result[i3]).slice(1);
                    var value1 = (" " + result[i3 + 1]).slice(1);
                    var value2 = result[i3 + 2] ? (" " + result[i3 + 2]).slice(1) : "";
                    switch (tag) {
                      case "PLAYLIST-TYPE":
                        level.type = value1.toUpperCase();
                        break;
                      case "MEDIA-SEQUENCE":
                        currentSN = level.startSN = parseInt(value1);
                        break;
                      case "SKIP": {
                        var skipAttrs = new _utils_attr_list__WEBPACK_IMPORTED_MODULE_5__["AttrList"](value1);
                        var skippedSegments = skipAttrs.decimalInteger("SKIPPED-SEGMENTS");
                        if (Object(_home_runner_work_hls_js_hls_js_src_polyfills_number__WEBPACK_IMPORTED_MODULE_0__["isFiniteNumber"])(skippedSegments)) {
                          level.skippedSegments = skippedSegments;
                          for (var _i = skippedSegments; _i--; ) {
                            fragments.unshift(null);
                          }
                          currentSN += skippedSegments;
                        }
                        var recentlyRemovedDateranges = skipAttrs.enumeratedString("RECENTLY-REMOVED-DATERANGES");
                        if (recentlyRemovedDateranges) {
                          level.recentlyRemovedDateranges = recentlyRemovedDateranges.split("	");
                        }
                        break;
                      }
                      case "TARGETDURATION":
                        level.targetduration = parseFloat(value1);
                        break;
                      case "VERSION":
                        level.version = parseInt(value1);
                        break;
                      case "EXTM3U":
                        break;
                      case "ENDLIST":
                        level.live = false;
                        break;
                      case "#":
                        if (value1 || value2) {
                          frag.tagList.push(value2 ? [value1, value2] : [value1]);
                        }
                        break;
                      case "DIS":
                        discontinuityCounter++;
                      case "GAP":
                        frag.tagList.push([tag]);
                        break;
                      case "BITRATE":
                        frag.tagList.push([tag, value1]);
                        break;
                      case "DISCONTINUITY-SEQ":
                        discontinuityCounter = parseInt(value1);
                        break;
                      case "KEY": {
                        var _keyAttrs$enumeratedS;
                        var keyAttrs = new _utils_attr_list__WEBPACK_IMPORTED_MODULE_5__["AttrList"](value1);
                        var decryptmethod = keyAttrs.enumeratedString("METHOD");
                        var decrypturi = keyAttrs.URI;
                        var decryptiv = keyAttrs.hexadecimalInteger("IV");
                        var decryptkeyformatversions = keyAttrs.enumeratedString("KEYFORMATVERSIONS");
                        var decryptkeyid = keyAttrs.enumeratedString("KEYID");
                        var decryptkeyformat = (_keyAttrs$enumeratedS = keyAttrs.enumeratedString("KEYFORMAT")) != null ? _keyAttrs$enumeratedS : "identity";
                        var unsupportedKnownKeyformatsInManifest = [
                          "com.apple.streamingkeydelivery",
                          "com.microsoft.playready",
                          "urn:uuid:edef8ba9-79d6-4ace-a3c8-27dcd51d21ed",
                          "com.widevine"
                        ];
                        if (unsupportedKnownKeyformatsInManifest.indexOf(decryptkeyformat) > -1) {
                          _utils_logger__WEBPACK_IMPORTED_MODULE_6__["logger"].warn("Keyformat " + decryptkeyformat + " is not supported from the manifest");
                          continue;
                        } else if (decryptkeyformat !== "identity") {
                          continue;
                        }
                        if (decryptmethod) {
                          levelkey = _level_key__WEBPACK_IMPORTED_MODULE_4__["LevelKey"].fromURL(baseurl, decrypturi);
                          if (decrypturi && ["AES-128", "SAMPLE-AES", "SAMPLE-AES-CENC"].indexOf(decryptmethod) >= 0) {
                            levelkey.method = decryptmethod;
                            levelkey.keyFormat = decryptkeyformat;
                            if (decryptkeyid) {
                              levelkey.keyID = decryptkeyid;
                            }
                            if (decryptkeyformatversions) {
                              levelkey.keyFormatVersions = decryptkeyformatversions;
                            }
                            levelkey.iv = decryptiv;
                          }
                        }
                        break;
                      }
                      case "START": {
                        var startAttrs = new _utils_attr_list__WEBPACK_IMPORTED_MODULE_5__["AttrList"](value1);
                        var startTimeOffset = startAttrs.decimalFloatingPoint("TIME-OFFSET");
                        if (Object(_home_runner_work_hls_js_hls_js_src_polyfills_number__WEBPACK_IMPORTED_MODULE_0__["isFiniteNumber"])(startTimeOffset)) {
                          level.startTimeOffset = startTimeOffset;
                        }
                        break;
                      }
                      case "MAP": {
                        var mapAttrs = new _utils_attr_list__WEBPACK_IMPORTED_MODULE_5__["AttrList"](value1);
                        frag.relurl = mapAttrs.URI;
                        if (mapAttrs.BYTERANGE) {
                          frag.setByteRange(mapAttrs.BYTERANGE);
                        }
                        frag.level = id;
                        frag.sn = "initSegment";
                        if (levelkey) {
                          frag.levelkey = levelkey;
                        }
                        frag.initSegment = null;
                        currentInitSegment = frag;
                        createNextFrag = true;
                        break;
                      }
                      case "SERVER-CONTROL": {
                        var serverControlAttrs = new _utils_attr_list__WEBPACK_IMPORTED_MODULE_5__["AttrList"](value1);
                        level.canBlockReload = serverControlAttrs.bool("CAN-BLOCK-RELOAD");
                        level.canSkipUntil = serverControlAttrs.optionalFloat("CAN-SKIP-UNTIL", 0);
                        level.canSkipDateRanges = level.canSkipUntil > 0 && serverControlAttrs.bool("CAN-SKIP-DATERANGES");
                        level.partHoldBack = serverControlAttrs.optionalFloat("PART-HOLD-BACK", 0);
                        level.holdBack = serverControlAttrs.optionalFloat("HOLD-BACK", 0);
                        break;
                      }
                      case "PART-INF": {
                        var partInfAttrs = new _utils_attr_list__WEBPACK_IMPORTED_MODULE_5__["AttrList"](value1);
                        level.partTarget = partInfAttrs.decimalFloatingPoint("PART-TARGET");
                        break;
                      }
                      case "PART": {
                        var partList = level.partList;
                        if (!partList) {
                          partList = level.partList = [];
                        }
                        var previousFragmentPart = currentPart > 0 ? partList[partList.length - 1] : void 0;
                        var index = currentPart++;
                        var part = new _fragment__WEBPACK_IMPORTED_MODULE_2__["Part"](new _utils_attr_list__WEBPACK_IMPORTED_MODULE_5__["AttrList"](value1), frag, baseurl, index, previousFragmentPart);
                        partList.push(part);
                        frag.duration += part.duration;
                        break;
                      }
                      case "PRELOAD-HINT": {
                        var preloadHintAttrs = new _utils_attr_list__WEBPACK_IMPORTED_MODULE_5__["AttrList"](value1);
                        level.preloadHint = preloadHintAttrs;
                        break;
                      }
                      case "RENDITION-REPORT": {
                        var renditionReportAttrs = new _utils_attr_list__WEBPACK_IMPORTED_MODULE_5__["AttrList"](value1);
                        level.renditionReports = level.renditionReports || [];
                        level.renditionReports.push(renditionReportAttrs);
                        break;
                      }
                      default:
                        _utils_logger__WEBPACK_IMPORTED_MODULE_6__["logger"].warn("line parsed but not handled: " + result);
                        break;
                    }
                  }
                }
                if (prevFrag && !prevFrag.relurl) {
                  fragments.pop();
                  totalduration -= prevFrag.duration;
                  if (level.partList) {
                    level.fragmentHint = prevFrag;
                  }
                } else if (level.partList) {
                  assignProgramDateTime(frag, prevFrag);
                  frag.cc = discontinuityCounter;
                  level.fragmentHint = frag;
                }
                var fragmentLength = fragments.length;
                var firstFragment = fragments[0];
                var lastFragment = fragments[fragmentLength - 1];
                totalduration += level.skippedSegments * level.targetduration;
                if (totalduration > 0 && fragmentLength && lastFragment) {
                  level.averagetargetduration = totalduration / fragmentLength;
                  var lastSn = lastFragment.sn;
                  level.endSN = lastSn !== "initSegment" ? lastSn : 0;
                  if (firstFragment) {
                    level.startCC = firstFragment.cc;
                    if (!firstFragment.initSegment) {
                      if (level.fragments.every(function(frag2) {
                        return frag2.relurl && isMP4Url(frag2.relurl);
                      })) {
                        _utils_logger__WEBPACK_IMPORTED_MODULE_6__["logger"].warn("MP4 fragments found but no init segment (probably no MAP, incomplete M3U8), trying to fetch SIDX");
                        frag = new _fragment__WEBPACK_IMPORTED_MODULE_2__["Fragment"](type, baseurl);
                        frag.relurl = lastFragment.relurl;
                        frag.level = id;
                        frag.sn = "initSegment";
                        firstFragment.initSegment = frag;
                        level.needSidxRanges = true;
                      }
                    }
                  }
                } else {
                  level.endSN = 0;
                  level.startCC = 0;
                }
                if (level.fragmentHint) {
                  totalduration += level.fragmentHint.duration;
                }
                level.totalduration = totalduration;
                level.endCC = discontinuityCounter;
                if (firstPdtIndex > 0) {
                  backfillProgramDateTimes(fragments, firstPdtIndex);
                }
                return level;
              };
              return M3U8Parser2;
            }();
            function setCodecs(codecs, level) {
              ["video", "audio", "text"].forEach(function(type) {
                var filtered = codecs.filter(function(codec) {
                  return Object(_utils_codecs__WEBPACK_IMPORTED_MODULE_7__["isCodecType"])(codec, type);
                });
                if (filtered.length) {
                  var preferred = filtered.filter(function(codec) {
                    return codec.lastIndexOf("avc1", 0) === 0 || codec.lastIndexOf("mp4a", 0) === 0;
                  });
                  level[type + "Codec"] = preferred.length > 0 ? preferred[0] : filtered[0];
                  codecs = codecs.filter(function(codec) {
                    return filtered.indexOf(codec) === -1;
                  });
                }
              });
              level.unknownCodecs = codecs;
            }
            function assignCodec(media2, groupItem, codecProperty) {
              var codecValue = groupItem[codecProperty];
              if (codecValue) {
                media2[codecProperty] = codecValue;
              }
            }
            function backfillProgramDateTimes(fragments, firstPdtIndex) {
              var fragPrev = fragments[firstPdtIndex];
              for (var i3 = firstPdtIndex; i3--; ) {
                var frag = fragments[i3];
                if (!frag) {
                  return;
                }
                frag.programDateTime = fragPrev.programDateTime - frag.duration * 1e3;
                fragPrev = frag;
              }
            }
            function assignProgramDateTime(frag, prevFrag) {
              if (frag.rawProgramDateTime) {
                frag.programDateTime = Date.parse(frag.rawProgramDateTime);
              } else if (prevFrag !== null && prevFrag !== void 0 && prevFrag.programDateTime) {
                frag.programDateTime = prevFrag.endProgramDateTime;
              }
              if (!Object(_home_runner_work_hls_js_hls_js_src_polyfills_number__WEBPACK_IMPORTED_MODULE_0__["isFiniteNumber"])(frag.programDateTime)) {
                frag.programDateTime = null;
                frag.rawProgramDateTime = null;
              }
            }
          },
          "./src/loader/playlist-loader.ts": function(module2, __webpack_exports__, __webpack_require__) {
            "use strict";
            __webpack_require__.r(__webpack_exports__);
            var _home_runner_work_hls_js_hls_js_src_polyfills_number__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("./src/polyfills/number.ts");
            var _events__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("./src/events.ts");
            var _errors__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__("./src/errors.ts");
            var _utils_logger__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__("./src/utils/logger.ts");
            var _utils_mp4_tools__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__("./src/utils/mp4-tools.ts");
            var _m3u8_parser__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__("./src/loader/m3u8-parser.ts");
            var _types_loader__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__("./src/types/loader.ts");
            var _utils_attr_list__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__("./src/utils/attr-list.ts");
            function mapContextToLevelType(context) {
              var type = context.type;
              switch (type) {
                case _types_loader__WEBPACK_IMPORTED_MODULE_6__["PlaylistContextType"].AUDIO_TRACK:
                  return _types_loader__WEBPACK_IMPORTED_MODULE_6__["PlaylistLevelType"].AUDIO;
                case _types_loader__WEBPACK_IMPORTED_MODULE_6__["PlaylistContextType"].SUBTITLE_TRACK:
                  return _types_loader__WEBPACK_IMPORTED_MODULE_6__["PlaylistLevelType"].SUBTITLE;
                default:
                  return _types_loader__WEBPACK_IMPORTED_MODULE_6__["PlaylistLevelType"].MAIN;
              }
            }
            function getResponseUrl(response, context) {
              var url = response.url;
              if (url === void 0 || url.indexOf("data:") === 0) {
                url = context.url;
              }
              return url;
            }
            var PlaylistLoader = /* @__PURE__ */ function() {
              function PlaylistLoader2(hls) {
                this.hls = void 0;
                this.loaders = /* @__PURE__ */ Object.create(null);
                this.hls = hls;
                this.registerListeners();
              }
              var _proto = PlaylistLoader2.prototype;
              _proto.registerListeners = function registerListeners() {
                var hls = this.hls;
                hls.on(_events__WEBPACK_IMPORTED_MODULE_1__["Events"].MANIFEST_LOADING, this.onManifestLoading, this);
                hls.on(_events__WEBPACK_IMPORTED_MODULE_1__["Events"].LEVEL_LOADING, this.onLevelLoading, this);
                hls.on(_events__WEBPACK_IMPORTED_MODULE_1__["Events"].AUDIO_TRACK_LOADING, this.onAudioTrackLoading, this);
                hls.on(_events__WEBPACK_IMPORTED_MODULE_1__["Events"].SUBTITLE_TRACK_LOADING, this.onSubtitleTrackLoading, this);
              };
              _proto.unregisterListeners = function unregisterListeners() {
                var hls = this.hls;
                hls.off(_events__WEBPACK_IMPORTED_MODULE_1__["Events"].MANIFEST_LOADING, this.onManifestLoading, this);
                hls.off(_events__WEBPACK_IMPORTED_MODULE_1__["Events"].LEVEL_LOADING, this.onLevelLoading, this);
                hls.off(_events__WEBPACK_IMPORTED_MODULE_1__["Events"].AUDIO_TRACK_LOADING, this.onAudioTrackLoading, this);
                hls.off(_events__WEBPACK_IMPORTED_MODULE_1__["Events"].SUBTITLE_TRACK_LOADING, this.onSubtitleTrackLoading, this);
              };
              _proto.createInternalLoader = function createInternalLoader(context) {
                var config2 = this.hls.config;
                var PLoader = config2.pLoader;
                var Loader = config2.loader;
                var InternalLoader = PLoader || Loader;
                var loader = new InternalLoader(config2);
                context.loader = loader;
                this.loaders[context.type] = loader;
                return loader;
              };
              _proto.getInternalLoader = function getInternalLoader(context) {
                return this.loaders[context.type];
              };
              _proto.resetInternalLoader = function resetInternalLoader(contextType) {
                if (this.loaders[contextType]) {
                  delete this.loaders[contextType];
                }
              };
              _proto.destroyInternalLoaders = function destroyInternalLoaders() {
                for (var contextType in this.loaders) {
                  var loader = this.loaders[contextType];
                  if (loader) {
                    loader.destroy();
                  }
                  this.resetInternalLoader(contextType);
                }
              };
              _proto.destroy = function destroy() {
                this.unregisterListeners();
                this.destroyInternalLoaders();
              };
              _proto.onManifestLoading = function onManifestLoading(event, data) {
                var url = data.url;
                this.load({
                  id: null,
                  groupId: null,
                  level: 0,
                  responseType: "text",
                  type: _types_loader__WEBPACK_IMPORTED_MODULE_6__["PlaylistContextType"].MANIFEST,
                  url,
                  deliveryDirectives: null
                });
              };
              _proto.onLevelLoading = function onLevelLoading(event, data) {
                var id = data.id, level = data.level, url = data.url, deliveryDirectives = data.deliveryDirectives;
                this.load({
                  id,
                  groupId: null,
                  level,
                  responseType: "text",
                  type: _types_loader__WEBPACK_IMPORTED_MODULE_6__["PlaylistContextType"].LEVEL,
                  url,
                  deliveryDirectives
                });
              };
              _proto.onAudioTrackLoading = function onAudioTrackLoading(event, data) {
                var id = data.id, groupId = data.groupId, url = data.url, deliveryDirectives = data.deliveryDirectives;
                this.load({
                  id,
                  groupId,
                  level: null,
                  responseType: "text",
                  type: _types_loader__WEBPACK_IMPORTED_MODULE_6__["PlaylistContextType"].AUDIO_TRACK,
                  url,
                  deliveryDirectives
                });
              };
              _proto.onSubtitleTrackLoading = function onSubtitleTrackLoading(event, data) {
                var id = data.id, groupId = data.groupId, url = data.url, deliveryDirectives = data.deliveryDirectives;
                this.load({
                  id,
                  groupId,
                  level: null,
                  responseType: "text",
                  type: _types_loader__WEBPACK_IMPORTED_MODULE_6__["PlaylistContextType"].SUBTITLE_TRACK,
                  url,
                  deliveryDirectives
                });
              };
              _proto.load = function load(context) {
                var _context$deliveryDire;
                var config2 = this.hls.config;
                var loader = this.getInternalLoader(context);
                if (loader) {
                  var loaderContext = loader.context;
                  if (loaderContext && loaderContext.url === context.url) {
                    _utils_logger__WEBPACK_IMPORTED_MODULE_3__["logger"].trace("[playlist-loader]: playlist request ongoing");
                    return;
                  }
                  _utils_logger__WEBPACK_IMPORTED_MODULE_3__["logger"].log("[playlist-loader]: aborting previous loader for type: " + context.type);
                  loader.abort();
                }
                var maxRetry;
                var timeout;
                var retryDelay;
                var maxRetryDelay;
                switch (context.type) {
                  case _types_loader__WEBPACK_IMPORTED_MODULE_6__["PlaylistContextType"].MANIFEST:
                    maxRetry = config2.manifestLoadingMaxRetry;
                    timeout = config2.manifestLoadingTimeOut;
                    retryDelay = config2.manifestLoadingRetryDelay;
                    maxRetryDelay = config2.manifestLoadingMaxRetryTimeout;
                    break;
                  case _types_loader__WEBPACK_IMPORTED_MODULE_6__["PlaylistContextType"].LEVEL:
                  case _types_loader__WEBPACK_IMPORTED_MODULE_6__["PlaylistContextType"].AUDIO_TRACK:
                  case _types_loader__WEBPACK_IMPORTED_MODULE_6__["PlaylistContextType"].SUBTITLE_TRACK:
                    maxRetry = 0;
                    timeout = config2.levelLoadingTimeOut;
                    break;
                  default:
                    maxRetry = config2.levelLoadingMaxRetry;
                    timeout = config2.levelLoadingTimeOut;
                    retryDelay = config2.levelLoadingRetryDelay;
                    maxRetryDelay = config2.levelLoadingMaxRetryTimeout;
                    break;
                }
                loader = this.createInternalLoader(context);
                if ((_context$deliveryDire = context.deliveryDirectives) !== null && _context$deliveryDire !== void 0 && _context$deliveryDire.part) {
                  var levelDetails;
                  if (context.type === _types_loader__WEBPACK_IMPORTED_MODULE_6__["PlaylistContextType"].LEVEL && context.level !== null) {
                    levelDetails = this.hls.levels[context.level].details;
                  } else if (context.type === _types_loader__WEBPACK_IMPORTED_MODULE_6__["PlaylistContextType"].AUDIO_TRACK && context.id !== null) {
                    levelDetails = this.hls.audioTracks[context.id].details;
                  } else if (context.type === _types_loader__WEBPACK_IMPORTED_MODULE_6__["PlaylistContextType"].SUBTITLE_TRACK && context.id !== null) {
                    levelDetails = this.hls.subtitleTracks[context.id].details;
                  }
                  if (levelDetails) {
                    var partTarget = levelDetails.partTarget;
                    var targetDuration = levelDetails.targetduration;
                    if (partTarget && targetDuration) {
                      timeout = Math.min(Math.max(partTarget * 3, targetDuration * 0.8) * 1e3, timeout);
                    }
                  }
                }
                var loaderConfig = {
                  timeout,
                  maxRetry,
                  retryDelay,
                  maxRetryDelay,
                  highWaterMark: 0
                };
                var loaderCallbacks = {
                  onSuccess: this.loadsuccess.bind(this),
                  onError: this.loaderror.bind(this),
                  onTimeout: this.loadtimeout.bind(this)
                };
                loader.load(context, loaderConfig, loaderCallbacks);
              };
              _proto.loadsuccess = function loadsuccess(response, stats, context, networkDetails) {
                if (networkDetails === void 0) {
                  networkDetails = null;
                }
                if (context.isSidxRequest) {
                  this.handleSidxRequest(response, context);
                  this.handlePlaylistLoaded(response, stats, context, networkDetails);
                  return;
                }
                this.resetInternalLoader(context.type);
                var string = response.data;
                if (string.indexOf("#EXTM3U") !== 0) {
                  this.handleManifestParsingError(response, context, "no EXTM3U delimiter", networkDetails);
                  return;
                }
                stats.parsing.start = performance.now();
                if (string.indexOf("#EXTINF:") > 0 || string.indexOf("#EXT-X-TARGETDURATION:") > 0) {
                  this.handleTrackOrLevelPlaylist(response, stats, context, networkDetails);
                } else {
                  this.handleMasterPlaylist(response, stats, context, networkDetails);
                }
              };
              _proto.loaderror = function loaderror(response, context, networkDetails) {
                if (networkDetails === void 0) {
                  networkDetails = null;
                }
                this.handleNetworkError(context, networkDetails, false, response);
              };
              _proto.loadtimeout = function loadtimeout(stats, context, networkDetails) {
                if (networkDetails === void 0) {
                  networkDetails = null;
                }
                this.handleNetworkError(context, networkDetails, true);
              };
              _proto.handleMasterPlaylist = function handleMasterPlaylist(response, stats, context, networkDetails) {
                var hls = this.hls;
                var string = response.data;
                var url = getResponseUrl(response, context);
                var _M3U8Parser$parseMast = _m3u8_parser__WEBPACK_IMPORTED_MODULE_5__["default"].parseMasterPlaylist(string, url), levels = _M3U8Parser$parseMast.levels, sessionData = _M3U8Parser$parseMast.sessionData;
                if (!levels.length) {
                  this.handleManifestParsingError(response, context, "no level found in manifest", networkDetails);
                  return;
                }
                var audioGroups = levels.map(function(level) {
                  return {
                    id: level.attrs.AUDIO,
                    audioCodec: level.audioCodec
                  };
                });
                var subtitleGroups = levels.map(function(level) {
                  return {
                    id: level.attrs.SUBTITLES,
                    textCodec: level.textCodec
                  };
                });
                var audioTracks = _m3u8_parser__WEBPACK_IMPORTED_MODULE_5__["default"].parseMasterPlaylistMedia(string, url, "AUDIO", audioGroups);
                var subtitles = _m3u8_parser__WEBPACK_IMPORTED_MODULE_5__["default"].parseMasterPlaylistMedia(string, url, "SUBTITLES", subtitleGroups);
                var captions = _m3u8_parser__WEBPACK_IMPORTED_MODULE_5__["default"].parseMasterPlaylistMedia(string, url, "CLOSED-CAPTIONS");
                if (audioTracks.length) {
                  var embeddedAudioFound = audioTracks.some(function(audioTrack) {
                    return !audioTrack.url;
                  });
                  if (!embeddedAudioFound && levels[0].audioCodec && !levels[0].attrs.AUDIO) {
                    _utils_logger__WEBPACK_IMPORTED_MODULE_3__["logger"].log("[playlist-loader]: audio codec signaled in quality level, but no embedded audio track signaled, create one");
                    audioTracks.unshift({
                      type: "main",
                      name: "main",
                      default: false,
                      autoselect: false,
                      forced: false,
                      id: -1,
                      attrs: new _utils_attr_list__WEBPACK_IMPORTED_MODULE_7__["AttrList"]({}),
                      bitrate: 0,
                      url: ""
                    });
                  }
                }
                hls.trigger(_events__WEBPACK_IMPORTED_MODULE_1__["Events"].MANIFEST_LOADED, {
                  levels,
                  audioTracks,
                  subtitles,
                  captions,
                  url,
                  stats,
                  networkDetails,
                  sessionData
                });
              };
              _proto.handleTrackOrLevelPlaylist = function handleTrackOrLevelPlaylist(response, stats, context, networkDetails) {
                var hls = this.hls;
                var id = context.id, level = context.level, type = context.type;
                var url = getResponseUrl(response, context);
                var levelUrlId = Object(_home_runner_work_hls_js_hls_js_src_polyfills_number__WEBPACK_IMPORTED_MODULE_0__["isFiniteNumber"])(id) ? id : 0;
                var levelId = Object(_home_runner_work_hls_js_hls_js_src_polyfills_number__WEBPACK_IMPORTED_MODULE_0__["isFiniteNumber"])(level) ? level : levelUrlId;
                var levelType = mapContextToLevelType(context);
                var levelDetails = _m3u8_parser__WEBPACK_IMPORTED_MODULE_5__["default"].parseLevelPlaylist(response.data, url, levelId, levelType, levelUrlId);
                if (!levelDetails.fragments.length) {
                  hls.trigger(_events__WEBPACK_IMPORTED_MODULE_1__["Events"].ERROR, {
                    type: _errors__WEBPACK_IMPORTED_MODULE_2__["ErrorTypes"].NETWORK_ERROR,
                    details: _errors__WEBPACK_IMPORTED_MODULE_2__["ErrorDetails"].LEVEL_EMPTY_ERROR,
                    fatal: false,
                    url,
                    reason: "no fragments found in level",
                    level: typeof context.level === "number" ? context.level : void 0
                  });
                  return;
                }
                if (type === _types_loader__WEBPACK_IMPORTED_MODULE_6__["PlaylistContextType"].MANIFEST) {
                  var singleLevel = {
                    attrs: new _utils_attr_list__WEBPACK_IMPORTED_MODULE_7__["AttrList"]({}),
                    bitrate: 0,
                    details: levelDetails,
                    name: "",
                    url
                  };
                  hls.trigger(_events__WEBPACK_IMPORTED_MODULE_1__["Events"].MANIFEST_LOADED, {
                    levels: [singleLevel],
                    audioTracks: [],
                    url,
                    stats,
                    networkDetails,
                    sessionData: null
                  });
                }
                stats.parsing.end = performance.now();
                if (levelDetails.needSidxRanges) {
                  var _levelDetails$fragmen;
                  var sidxUrl = (_levelDetails$fragmen = levelDetails.fragments[0].initSegment) === null || _levelDetails$fragmen === void 0 ? void 0 : _levelDetails$fragmen.url;
                  this.load({
                    url: sidxUrl,
                    isSidxRequest: true,
                    type,
                    level,
                    levelDetails,
                    id,
                    groupId: null,
                    rangeStart: 0,
                    rangeEnd: 2048,
                    responseType: "arraybuffer",
                    deliveryDirectives: null
                  });
                  return;
                }
                context.levelDetails = levelDetails;
                this.handlePlaylistLoaded(response, stats, context, networkDetails);
              };
              _proto.handleSidxRequest = function handleSidxRequest(response, context) {
                var sidxInfo = Object(_utils_mp4_tools__WEBPACK_IMPORTED_MODULE_4__["parseSegmentIndex"])(new Uint8Array(response.data));
                if (!sidxInfo) {
                  return;
                }
                var sidxReferences = sidxInfo.references;
                var levelDetails = context.levelDetails;
                sidxReferences.forEach(function(segmentRef, index) {
                  var segRefInfo = segmentRef.info;
                  var frag = levelDetails.fragments[index];
                  if (frag.byteRange.length === 0) {
                    frag.setByteRange(String(1 + segRefInfo.end - segRefInfo.start) + "@" + String(segRefInfo.start));
                  }
                  if (frag.initSegment) {
                    frag.initSegment.setByteRange(String(sidxInfo.moovEndOffset) + "@0");
                  }
                });
              };
              _proto.handleManifestParsingError = function handleManifestParsingError(response, context, reason, networkDetails) {
                this.hls.trigger(_events__WEBPACK_IMPORTED_MODULE_1__["Events"].ERROR, {
                  type: _errors__WEBPACK_IMPORTED_MODULE_2__["ErrorTypes"].NETWORK_ERROR,
                  details: _errors__WEBPACK_IMPORTED_MODULE_2__["ErrorDetails"].MANIFEST_PARSING_ERROR,
                  fatal: context.type === _types_loader__WEBPACK_IMPORTED_MODULE_6__["PlaylistContextType"].MANIFEST,
                  url: response.url,
                  reason,
                  response,
                  context,
                  networkDetails
                });
              };
              _proto.handleNetworkError = function handleNetworkError(context, networkDetails, timeout, response) {
                if (timeout === void 0) {
                  timeout = false;
                }
                _utils_logger__WEBPACK_IMPORTED_MODULE_3__["logger"].warn("[playlist-loader]: A network " + (timeout ? "timeout" : "error") + " occurred while loading " + context.type + " level: " + context.level + " id: " + context.id + ' group-id: "' + context.groupId + '"');
                var details = _errors__WEBPACK_IMPORTED_MODULE_2__["ErrorDetails"].UNKNOWN;
                var fatal = false;
                var loader = this.getInternalLoader(context);
                switch (context.type) {
                  case _types_loader__WEBPACK_IMPORTED_MODULE_6__["PlaylistContextType"].MANIFEST:
                    details = timeout ? _errors__WEBPACK_IMPORTED_MODULE_2__["ErrorDetails"].MANIFEST_LOAD_TIMEOUT : _errors__WEBPACK_IMPORTED_MODULE_2__["ErrorDetails"].MANIFEST_LOAD_ERROR;
                    fatal = true;
                    break;
                  case _types_loader__WEBPACK_IMPORTED_MODULE_6__["PlaylistContextType"].LEVEL:
                    details = timeout ? _errors__WEBPACK_IMPORTED_MODULE_2__["ErrorDetails"].LEVEL_LOAD_TIMEOUT : _errors__WEBPACK_IMPORTED_MODULE_2__["ErrorDetails"].LEVEL_LOAD_ERROR;
                    fatal = false;
                    break;
                  case _types_loader__WEBPACK_IMPORTED_MODULE_6__["PlaylistContextType"].AUDIO_TRACK:
                    details = timeout ? _errors__WEBPACK_IMPORTED_MODULE_2__["ErrorDetails"].AUDIO_TRACK_LOAD_TIMEOUT : _errors__WEBPACK_IMPORTED_MODULE_2__["ErrorDetails"].AUDIO_TRACK_LOAD_ERROR;
                    fatal = false;
                    break;
                  case _types_loader__WEBPACK_IMPORTED_MODULE_6__["PlaylistContextType"].SUBTITLE_TRACK:
                    details = timeout ? _errors__WEBPACK_IMPORTED_MODULE_2__["ErrorDetails"].SUBTITLE_TRACK_LOAD_TIMEOUT : _errors__WEBPACK_IMPORTED_MODULE_2__["ErrorDetails"].SUBTITLE_LOAD_ERROR;
                    fatal = false;
                    break;
                }
                if (loader) {
                  this.resetInternalLoader(context.type);
                }
                var errorData = {
                  type: _errors__WEBPACK_IMPORTED_MODULE_2__["ErrorTypes"].NETWORK_ERROR,
                  details,
                  fatal,
                  url: context.url,
                  loader,
                  context,
                  networkDetails
                };
                if (response) {
                  errorData.response = response;
                }
                this.hls.trigger(_events__WEBPACK_IMPORTED_MODULE_1__["Events"].ERROR, errorData);
              };
              _proto.handlePlaylistLoaded = function handlePlaylistLoaded(response, stats, context, networkDetails) {
                var type = context.type, level = context.level, id = context.id, groupId = context.groupId, loader = context.loader, levelDetails = context.levelDetails, deliveryDirectives = context.deliveryDirectives;
                if (!(levelDetails !== null && levelDetails !== void 0 && levelDetails.targetduration)) {
                  this.handleManifestParsingError(response, context, "invalid target duration", networkDetails);
                  return;
                }
                if (!loader) {
                  return;
                }
                if (levelDetails.live) {
                  if (loader.getCacheAge) {
                    levelDetails.ageHeader = loader.getCacheAge() || 0;
                  }
                  if (!loader.getCacheAge || isNaN(levelDetails.ageHeader)) {
                    levelDetails.ageHeader = 0;
                  }
                }
                switch (type) {
                  case _types_loader__WEBPACK_IMPORTED_MODULE_6__["PlaylistContextType"].MANIFEST:
                  case _types_loader__WEBPACK_IMPORTED_MODULE_6__["PlaylistContextType"].LEVEL:
                    this.hls.trigger(_events__WEBPACK_IMPORTED_MODULE_1__["Events"].LEVEL_LOADED, {
                      details: levelDetails,
                      level: level || 0,
                      id: id || 0,
                      stats,
                      networkDetails,
                      deliveryDirectives
                    });
                    break;
                  case _types_loader__WEBPACK_IMPORTED_MODULE_6__["PlaylistContextType"].AUDIO_TRACK:
                    this.hls.trigger(_events__WEBPACK_IMPORTED_MODULE_1__["Events"].AUDIO_TRACK_LOADED, {
                      details: levelDetails,
                      id: id || 0,
                      groupId: groupId || "",
                      stats,
                      networkDetails,
                      deliveryDirectives
                    });
                    break;
                  case _types_loader__WEBPACK_IMPORTED_MODULE_6__["PlaylistContextType"].SUBTITLE_TRACK:
                    this.hls.trigger(_events__WEBPACK_IMPORTED_MODULE_1__["Events"].SUBTITLE_TRACK_LOADED, {
                      details: levelDetails,
                      id: id || 0,
                      groupId: groupId || "",
                      stats,
                      networkDetails,
                      deliveryDirectives
                    });
                    break;
                }
              };
              return PlaylistLoader2;
            }();
            __webpack_exports__["default"] = PlaylistLoader;
          },
          "./src/polyfills/number.ts": function(module2, __webpack_exports__, __webpack_require__) {
            "use strict";
            __webpack_require__.r(__webpack_exports__);
            __webpack_require__.d(__webpack_exports__, "isFiniteNumber", function() {
              return isFiniteNumber;
            });
            __webpack_require__.d(__webpack_exports__, "MAX_SAFE_INTEGER", function() {
              return MAX_SAFE_INTEGER;
            });
            var isFiniteNumber = Number.isFinite || function(value) {
              return typeof value === "number" && isFinite(value);
            };
            var MAX_SAFE_INTEGER = Number.MAX_SAFE_INTEGER || 9007199254740991;
          },
          "./src/remux/aac-helper.ts": function(module2, __webpack_exports__, __webpack_require__) {
            "use strict";
            __webpack_require__.r(__webpack_exports__);
            var AAC = /* @__PURE__ */ function() {
              function AAC2() {
              }
              AAC2.getSilentFrame = function getSilentFrame(codec, channelCount) {
                switch (codec) {
                  case "mp4a.40.2":
                    if (channelCount === 1) {
                      return new Uint8Array([0, 200, 0, 128, 35, 128]);
                    } else if (channelCount === 2) {
                      return new Uint8Array([33, 0, 73, 144, 2, 25, 0, 35, 128]);
                    } else if (channelCount === 3) {
                      return new Uint8Array([0, 200, 0, 128, 32, 132, 1, 38, 64, 8, 100, 0, 142]);
                    } else if (channelCount === 4) {
                      return new Uint8Array([0, 200, 0, 128, 32, 132, 1, 38, 64, 8, 100, 0, 128, 44, 128, 8, 2, 56]);
                    } else if (channelCount === 5) {
                      return new Uint8Array([0, 200, 0, 128, 32, 132, 1, 38, 64, 8, 100, 0, 130, 48, 4, 153, 0, 33, 144, 2, 56]);
                    } else if (channelCount === 6) {
                      return new Uint8Array([0, 200, 0, 128, 32, 132, 1, 38, 64, 8, 100, 0, 130, 48, 4, 153, 0, 33, 144, 2, 0, 178, 0, 32, 8, 224]);
                    }
                    break;
                  default:
                    if (channelCount === 1) {
                      return new Uint8Array([1, 64, 34, 128, 163, 78, 230, 128, 186, 8, 0, 0, 0, 28, 6, 241, 193, 10, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 94]);
                    } else if (channelCount === 2) {
                      return new Uint8Array([1, 64, 34, 128, 163, 94, 230, 128, 186, 8, 0, 0, 0, 0, 149, 0, 6, 241, 161, 10, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 94]);
                    } else if (channelCount === 3) {
                      return new Uint8Array([1, 64, 34, 128, 163, 94, 230, 128, 186, 8, 0, 0, 0, 0, 149, 0, 6, 241, 161, 10, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 94]);
                    }
                    break;
                }
                return void 0;
              };
              return AAC2;
            }();
            __webpack_exports__["default"] = AAC;
          },
          "./src/remux/mp4-generator.ts": function(module2, __webpack_exports__, __webpack_require__) {
            "use strict";
            __webpack_require__.r(__webpack_exports__);
            var UINT32_MAX = Math.pow(2, 32) - 1;
            var MP4 = /* @__PURE__ */ function() {
              function MP42() {
              }
              MP42.init = function init() {
                MP42.types = {
                  avc1: [],
                  avcC: [],
                  btrt: [],
                  dinf: [],
                  dref: [],
                  esds: [],
                  ftyp: [],
                  hdlr: [],
                  mdat: [],
                  mdhd: [],
                  mdia: [],
                  mfhd: [],
                  minf: [],
                  moof: [],
                  moov: [],
                  mp4a: [],
                  ".mp3": [],
                  mvex: [],
                  mvhd: [],
                  pasp: [],
                  sdtp: [],
                  stbl: [],
                  stco: [],
                  stsc: [],
                  stsd: [],
                  stsz: [],
                  stts: [],
                  tfdt: [],
                  tfhd: [],
                  traf: [],
                  trak: [],
                  trun: [],
                  trex: [],
                  tkhd: [],
                  vmhd: [],
                  smhd: []
                };
                var i3;
                for (i3 in MP42.types) {
                  if (MP42.types.hasOwnProperty(i3)) {
                    MP42.types[i3] = [i3.charCodeAt(0), i3.charCodeAt(1), i3.charCodeAt(2), i3.charCodeAt(3)];
                  }
                }
                var videoHdlr = new Uint8Array([
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  118,
                  105,
                  100,
                  101,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  86,
                  105,
                  100,
                  101,
                  111,
                  72,
                  97,
                  110,
                  100,
                  108,
                  101,
                  114,
                  0
                ]);
                var audioHdlr = new Uint8Array([
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  115,
                  111,
                  117,
                  110,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  83,
                  111,
                  117,
                  110,
                  100,
                  72,
                  97,
                  110,
                  100,
                  108,
                  101,
                  114,
                  0
                ]);
                MP42.HDLR_TYPES = {
                  video: videoHdlr,
                  audio: audioHdlr
                };
                var dref = new Uint8Array([
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  1,
                  0,
                  0,
                  0,
                  12,
                  117,
                  114,
                  108,
                  32,
                  0,
                  0,
                  0,
                  1
                ]);
                var stco = new Uint8Array([
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0
                ]);
                MP42.STTS = MP42.STSC = MP42.STCO = stco;
                MP42.STSZ = new Uint8Array([
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0
                ]);
                MP42.VMHD = new Uint8Array([
                  0,
                  0,
                  0,
                  1,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0
                ]);
                MP42.SMHD = new Uint8Array([
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0
                ]);
                MP42.STSD = new Uint8Array([
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  1
                ]);
                var majorBrand = new Uint8Array([105, 115, 111, 109]);
                var avc1Brand = new Uint8Array([97, 118, 99, 49]);
                var minorVersion = new Uint8Array([0, 0, 0, 1]);
                MP42.FTYP = MP42.box(MP42.types.ftyp, majorBrand, minorVersion, majorBrand, avc1Brand);
                MP42.DINF = MP42.box(MP42.types.dinf, MP42.box(MP42.types.dref, dref));
              };
              MP42.box = function box(type) {
                var size = 8;
                for (var _len = arguments.length, payload = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
                  payload[_key - 1] = arguments[_key];
                }
                var i3 = payload.length;
                var len = i3;
                while (i3--) {
                  size += payload[i3].byteLength;
                }
                var result = new Uint8Array(size);
                result[0] = size >> 24 & 255;
                result[1] = size >> 16 & 255;
                result[2] = size >> 8 & 255;
                result[3] = size & 255;
                result.set(type, 4);
                for (i3 = 0, size = 8; i3 < len; i3++) {
                  result.set(payload[i3], size);
                  size += payload[i3].byteLength;
                }
                return result;
              };
              MP42.hdlr = function hdlr(type) {
                return MP42.box(MP42.types.hdlr, MP42.HDLR_TYPES[type]);
              };
              MP42.mdat = function mdat(data) {
                return MP42.box(MP42.types.mdat, data);
              };
              MP42.mdhd = function mdhd(timescale, duration) {
                duration *= timescale;
                var upperWordDuration = Math.floor(duration / (UINT32_MAX + 1));
                var lowerWordDuration = Math.floor(duration % (UINT32_MAX + 1));
                return MP42.box(MP42.types.mdhd, new Uint8Array([
                  1,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  2,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  3,
                  timescale >> 24 & 255,
                  timescale >> 16 & 255,
                  timescale >> 8 & 255,
                  timescale & 255,
                  upperWordDuration >> 24,
                  upperWordDuration >> 16 & 255,
                  upperWordDuration >> 8 & 255,
                  upperWordDuration & 255,
                  lowerWordDuration >> 24,
                  lowerWordDuration >> 16 & 255,
                  lowerWordDuration >> 8 & 255,
                  lowerWordDuration & 255,
                  85,
                  196,
                  0,
                  0
                ]));
              };
              MP42.mdia = function mdia(track) {
                return MP42.box(MP42.types.mdia, MP42.mdhd(track.timescale, track.duration), MP42.hdlr(track.type), MP42.minf(track));
              };
              MP42.mfhd = function mfhd(sequenceNumber) {
                return MP42.box(MP42.types.mfhd, new Uint8Array([
                  0,
                  0,
                  0,
                  0,
                  sequenceNumber >> 24,
                  sequenceNumber >> 16 & 255,
                  sequenceNumber >> 8 & 255,
                  sequenceNumber & 255
                ]));
              };
              MP42.minf = function minf(track) {
                if (track.type === "audio") {
                  return MP42.box(MP42.types.minf, MP42.box(MP42.types.smhd, MP42.SMHD), MP42.DINF, MP42.stbl(track));
                } else {
                  return MP42.box(MP42.types.minf, MP42.box(MP42.types.vmhd, MP42.VMHD), MP42.DINF, MP42.stbl(track));
                }
              };
              MP42.moof = function moof(sn, baseMediaDecodeTime, track) {
                return MP42.box(MP42.types.moof, MP42.mfhd(sn), MP42.traf(track, baseMediaDecodeTime));
              };
              MP42.moov = function moov(tracks) {
                var i3 = tracks.length;
                var boxes = [];
                while (i3--) {
                  boxes[i3] = MP42.trak(tracks[i3]);
                }
                return MP42.box.apply(null, [MP42.types.moov, MP42.mvhd(tracks[0].timescale, tracks[0].duration)].concat(boxes).concat(MP42.mvex(tracks)));
              };
              MP42.mvex = function mvex(tracks) {
                var i3 = tracks.length;
                var boxes = [];
                while (i3--) {
                  boxes[i3] = MP42.trex(tracks[i3]);
                }
                return MP42.box.apply(null, [MP42.types.mvex].concat(boxes));
              };
              MP42.mvhd = function mvhd(timescale, duration) {
                duration *= timescale;
                var upperWordDuration = Math.floor(duration / (UINT32_MAX + 1));
                var lowerWordDuration = Math.floor(duration % (UINT32_MAX + 1));
                var bytes = new Uint8Array([
                  1,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  2,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  3,
                  timescale >> 24 & 255,
                  timescale >> 16 & 255,
                  timescale >> 8 & 255,
                  timescale & 255,
                  upperWordDuration >> 24,
                  upperWordDuration >> 16 & 255,
                  upperWordDuration >> 8 & 255,
                  upperWordDuration & 255,
                  lowerWordDuration >> 24,
                  lowerWordDuration >> 16 & 255,
                  lowerWordDuration >> 8 & 255,
                  lowerWordDuration & 255,
                  0,
                  1,
                  0,
                  0,
                  1,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  1,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  1,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  64,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  255,
                  255,
                  255,
                  255
                ]);
                return MP42.box(MP42.types.mvhd, bytes);
              };
              MP42.sdtp = function sdtp(track) {
                var samples = track.samples || [];
                var bytes = new Uint8Array(4 + samples.length);
                var i3;
                var flags;
                for (i3 = 0; i3 < samples.length; i3++) {
                  flags = samples[i3].flags;
                  bytes[i3 + 4] = flags.dependsOn << 4 | flags.isDependedOn << 2 | flags.hasRedundancy;
                }
                return MP42.box(MP42.types.sdtp, bytes);
              };
              MP42.stbl = function stbl(track) {
                return MP42.box(MP42.types.stbl, MP42.stsd(track), MP42.box(MP42.types.stts, MP42.STTS), MP42.box(MP42.types.stsc, MP42.STSC), MP42.box(MP42.types.stsz, MP42.STSZ), MP42.box(MP42.types.stco, MP42.STCO));
              };
              MP42.avc1 = function avc1(track) {
                var sps = [];
                var pps = [];
                var i3;
                var data;
                var len;
                for (i3 = 0; i3 < track.sps.length; i3++) {
                  data = track.sps[i3];
                  len = data.byteLength;
                  sps.push(len >>> 8 & 255);
                  sps.push(len & 255);
                  sps = sps.concat(Array.prototype.slice.call(data));
                }
                for (i3 = 0; i3 < track.pps.length; i3++) {
                  data = track.pps[i3];
                  len = data.byteLength;
                  pps.push(len >>> 8 & 255);
                  pps.push(len & 255);
                  pps = pps.concat(Array.prototype.slice.call(data));
                }
                var avcc = MP42.box(MP42.types.avcC, new Uint8Array([
                  1,
                  sps[3],
                  sps[4],
                  sps[5],
                  252 | 3,
                  224 | track.sps.length
                ].concat(sps).concat([
                  track.pps.length
                ]).concat(pps)));
                var width = track.width;
                var height = track.height;
                var hSpacing = track.pixelRatio[0];
                var vSpacing = track.pixelRatio[1];
                return MP42.box(MP42.types.avc1, new Uint8Array([
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  1,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  width >> 8 & 255,
                  width & 255,
                  height >> 8 & 255,
                  height & 255,
                  0,
                  72,
                  0,
                  0,
                  0,
                  72,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  1,
                  18,
                  100,
                  97,
                  105,
                  108,
                  121,
                  109,
                  111,
                  116,
                  105,
                  111,
                  110,
                  47,
                  104,
                  108,
                  115,
                  46,
                  106,
                  115,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  24,
                  17,
                  17
                ]), avcc, MP42.box(MP42.types.btrt, new Uint8Array([
                  0,
                  28,
                  156,
                  128,
                  0,
                  45,
                  198,
                  192,
                  0,
                  45,
                  198,
                  192
                ])), MP42.box(MP42.types.pasp, new Uint8Array([
                  hSpacing >> 24,
                  hSpacing >> 16 & 255,
                  hSpacing >> 8 & 255,
                  hSpacing & 255,
                  vSpacing >> 24,
                  vSpacing >> 16 & 255,
                  vSpacing >> 8 & 255,
                  vSpacing & 255
                ])));
              };
              MP42.esds = function esds(track) {
                var configlen = track.config.length;
                return new Uint8Array([
                  0,
                  0,
                  0,
                  0,
                  3,
                  23 + configlen,
                  0,
                  1,
                  0,
                  4,
                  15 + configlen,
                  64,
                  21,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  5
                ].concat([configlen]).concat(track.config).concat([6, 1, 2]));
              };
              MP42.mp4a = function mp4a(track) {
                var samplerate = track.samplerate;
                return MP42.box(MP42.types.mp4a, new Uint8Array([
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  1,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  track.channelCount,
                  0,
                  16,
                  0,
                  0,
                  0,
                  0,
                  samplerate >> 8 & 255,
                  samplerate & 255,
                  0,
                  0
                ]), MP42.box(MP42.types.esds, MP42.esds(track)));
              };
              MP42.mp3 = function mp3(track) {
                var samplerate = track.samplerate;
                return MP42.box(MP42.types[".mp3"], new Uint8Array([
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  1,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  track.channelCount,
                  0,
                  16,
                  0,
                  0,
                  0,
                  0,
                  samplerate >> 8 & 255,
                  samplerate & 255,
                  0,
                  0
                ]));
              };
              MP42.stsd = function stsd(track) {
                if (track.type === "audio") {
                  if (!track.isAAC && track.codec === "mp3") {
                    return MP42.box(MP42.types.stsd, MP42.STSD, MP42.mp3(track));
                  }
                  return MP42.box(MP42.types.stsd, MP42.STSD, MP42.mp4a(track));
                } else {
                  return MP42.box(MP42.types.stsd, MP42.STSD, MP42.avc1(track));
                }
              };
              MP42.tkhd = function tkhd(track) {
                var id = track.id;
                var duration = track.duration * track.timescale;
                var width = track.width;
                var height = track.height;
                var upperWordDuration = Math.floor(duration / (UINT32_MAX + 1));
                var lowerWordDuration = Math.floor(duration % (UINT32_MAX + 1));
                return MP42.box(MP42.types.tkhd, new Uint8Array([
                  1,
                  0,
                  0,
                  7,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  2,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  3,
                  id >> 24 & 255,
                  id >> 16 & 255,
                  id >> 8 & 255,
                  id & 255,
                  0,
                  0,
                  0,
                  0,
                  upperWordDuration >> 24,
                  upperWordDuration >> 16 & 255,
                  upperWordDuration >> 8 & 255,
                  upperWordDuration & 255,
                  lowerWordDuration >> 24,
                  lowerWordDuration >> 16 & 255,
                  lowerWordDuration >> 8 & 255,
                  lowerWordDuration & 255,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  1,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  1,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  64,
                  0,
                  0,
                  0,
                  width >> 8 & 255,
                  width & 255,
                  0,
                  0,
                  height >> 8 & 255,
                  height & 255,
                  0,
                  0
                ]));
              };
              MP42.traf = function traf(track, baseMediaDecodeTime) {
                var sampleDependencyTable = MP42.sdtp(track);
                var id = track.id;
                var upperWordBaseMediaDecodeTime = Math.floor(baseMediaDecodeTime / (UINT32_MAX + 1));
                var lowerWordBaseMediaDecodeTime = Math.floor(baseMediaDecodeTime % (UINT32_MAX + 1));
                return MP42.box(MP42.types.traf, MP42.box(MP42.types.tfhd, new Uint8Array([
                  0,
                  0,
                  0,
                  0,
                  id >> 24,
                  id >> 16 & 255,
                  id >> 8 & 255,
                  id & 255
                ])), MP42.box(MP42.types.tfdt, new Uint8Array([
                  1,
                  0,
                  0,
                  0,
                  upperWordBaseMediaDecodeTime >> 24,
                  upperWordBaseMediaDecodeTime >> 16 & 255,
                  upperWordBaseMediaDecodeTime >> 8 & 255,
                  upperWordBaseMediaDecodeTime & 255,
                  lowerWordBaseMediaDecodeTime >> 24,
                  lowerWordBaseMediaDecodeTime >> 16 & 255,
                  lowerWordBaseMediaDecodeTime >> 8 & 255,
                  lowerWordBaseMediaDecodeTime & 255
                ])), MP42.trun(track, sampleDependencyTable.length + 16 + 20 + 8 + 16 + 8 + 8), sampleDependencyTable);
              };
              MP42.trak = function trak(track) {
                track.duration = track.duration || 4294967295;
                return MP42.box(MP42.types.trak, MP42.tkhd(track), MP42.mdia(track));
              };
              MP42.trex = function trex(track) {
                var id = track.id;
                return MP42.box(MP42.types.trex, new Uint8Array([
                  0,
                  0,
                  0,
                  0,
                  id >> 24,
                  id >> 16 & 255,
                  id >> 8 & 255,
                  id & 255,
                  0,
                  0,
                  0,
                  1,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  1,
                  0,
                  1
                ]));
              };
              MP42.trun = function trun(track, offset) {
                var samples = track.samples || [];
                var len = samples.length;
                var arraylen = 12 + 16 * len;
                var array = new Uint8Array(arraylen);
                var i3;
                var sample;
                var duration;
                var size;
                var flags;
                var cts;
                offset += 8 + arraylen;
                array.set([
                  0,
                  0,
                  15,
                  1,
                  len >>> 24 & 255,
                  len >>> 16 & 255,
                  len >>> 8 & 255,
                  len & 255,
                  offset >>> 24 & 255,
                  offset >>> 16 & 255,
                  offset >>> 8 & 255,
                  offset & 255
                ], 0);
                for (i3 = 0; i3 < len; i3++) {
                  sample = samples[i3];
                  duration = sample.duration;
                  size = sample.size;
                  flags = sample.flags;
                  cts = sample.cts;
                  array.set([
                    duration >>> 24 & 255,
                    duration >>> 16 & 255,
                    duration >>> 8 & 255,
                    duration & 255,
                    size >>> 24 & 255,
                    size >>> 16 & 255,
                    size >>> 8 & 255,
                    size & 255,
                    flags.isLeading << 2 | flags.dependsOn,
                    flags.isDependedOn << 6 | flags.hasRedundancy << 4 | flags.paddingValue << 1 | flags.isNonSync,
                    flags.degradPrio & 240 << 8,
                    flags.degradPrio & 15,
                    cts >>> 24 & 255,
                    cts >>> 16 & 255,
                    cts >>> 8 & 255,
                    cts & 255
                  ], 12 + 16 * i3);
                }
                return MP42.box(MP42.types.trun, array);
              };
              MP42.initSegment = function initSegment(tracks) {
                if (!MP42.types) {
                  MP42.init();
                }
                var movie = MP42.moov(tracks);
                var result = new Uint8Array(MP42.FTYP.byteLength + movie.byteLength);
                result.set(MP42.FTYP);
                result.set(movie, MP42.FTYP.byteLength);
                return result;
              };
              return MP42;
            }();
            MP4.types = void 0;
            MP4.HDLR_TYPES = void 0;
            MP4.STTS = void 0;
            MP4.STSC = void 0;
            MP4.STCO = void 0;
            MP4.STSZ = void 0;
            MP4.VMHD = void 0;
            MP4.SMHD = void 0;
            MP4.STSD = void 0;
            MP4.FTYP = void 0;
            MP4.DINF = void 0;
            __webpack_exports__["default"] = MP4;
          },
          "./src/remux/mp4-remuxer.ts": function(module2, __webpack_exports__, __webpack_require__) {
            "use strict";
            __webpack_require__.r(__webpack_exports__);
            __webpack_require__.d(__webpack_exports__, "default", function() {
              return MP4Remuxer;
            });
            __webpack_require__.d(__webpack_exports__, "normalizePts", function() {
              return normalizePts;
            });
            var _home_runner_work_hls_js_hls_js_src_polyfills_number__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("./src/polyfills/number.ts");
            var _aac_helper__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("./src/remux/aac-helper.ts");
            var _mp4_generator__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__("./src/remux/mp4-generator.ts");
            var _events__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__("./src/events.ts");
            var _errors__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__("./src/errors.ts");
            var _utils_logger__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__("./src/utils/logger.ts");
            var _types_loader__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__("./src/types/loader.ts");
            var _utils_timescale_conversion__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__("./src/utils/timescale-conversion.ts");
            function _extends2() {
              _extends2 = Object.assign || function(target) {
                for (var i3 = 1; i3 < arguments.length; i3++) {
                  var source = arguments[i3];
                  for (var key in source) {
                    if (Object.prototype.hasOwnProperty.call(source, key)) {
                      target[key] = source[key];
                    }
                  }
                }
                return target;
              };
              return _extends2.apply(this, arguments);
            }
            var MAX_SILENT_FRAME_DURATION = 10 * 1e3;
            var AAC_SAMPLES_PER_FRAME = 1024;
            var MPEG_AUDIO_SAMPLE_PER_FRAME = 1152;
            var chromeVersion = null;
            var safariWebkitVersion = null;
            var requiresPositiveDts = false;
            var MP4Remuxer = /* @__PURE__ */ function() {
              function MP4Remuxer2(observer, config2, typeSupported, vendor) {
                if (vendor === void 0) {
                  vendor = "";
                }
                this.observer = void 0;
                this.config = void 0;
                this.typeSupported = void 0;
                this.ISGenerated = false;
                this._initPTS = void 0;
                this._initDTS = void 0;
                this.nextAvcDts = null;
                this.nextAudioPts = null;
                this.isAudioContiguous = false;
                this.isVideoContiguous = false;
                this.observer = observer;
                this.config = config2;
                this.typeSupported = typeSupported;
                this.ISGenerated = false;
                if (chromeVersion === null) {
                  var userAgent = navigator.userAgent || "";
                  var result = userAgent.match(/Chrome\/(\d+)/i);
                  chromeVersion = result ? parseInt(result[1]) : 0;
                }
                if (safariWebkitVersion === null) {
                  var _result = navigator.userAgent.match(/Safari\/(\d+)/i);
                  safariWebkitVersion = _result ? parseInt(_result[1]) : 0;
                }
                requiresPositiveDts = !!chromeVersion && chromeVersion < 75 || !!safariWebkitVersion && safariWebkitVersion < 600;
              }
              var _proto = MP4Remuxer2.prototype;
              _proto.destroy = function destroy() {
              };
              _proto.resetTimeStamp = function resetTimeStamp(defaultTimeStamp) {
                _utils_logger__WEBPACK_IMPORTED_MODULE_5__["logger"].log("[mp4-remuxer]: initPTS & initDTS reset");
                this._initPTS = this._initDTS = defaultTimeStamp;
              };
              _proto.resetNextTimestamp = function resetNextTimestamp() {
                _utils_logger__WEBPACK_IMPORTED_MODULE_5__["logger"].log("[mp4-remuxer]: reset next timestamp");
                this.isVideoContiguous = false;
                this.isAudioContiguous = false;
              };
              _proto.resetInitSegment = function resetInitSegment() {
                _utils_logger__WEBPACK_IMPORTED_MODULE_5__["logger"].log("[mp4-remuxer]: ISGenerated flag reset");
                this.ISGenerated = false;
              };
              _proto.getVideoStartPts = function getVideoStartPts(videoSamples) {
                var rolloverDetected = false;
                var startPTS = videoSamples.reduce(function(minPTS, sample) {
                  var delta = sample.pts - minPTS;
                  if (delta < -4294967296) {
                    rolloverDetected = true;
                    return normalizePts(minPTS, sample.pts);
                  } else if (delta > 0) {
                    return minPTS;
                  } else {
                    return sample.pts;
                  }
                }, videoSamples[0].pts);
                if (rolloverDetected) {
                  _utils_logger__WEBPACK_IMPORTED_MODULE_5__["logger"].debug("PTS rollover detected");
                }
                return startPTS;
              };
              _proto.remux = function remux(audioTrack, videoTrack, id3Track, textTrack, timeOffset, accurateTimeOffset, flush, playlistType) {
                var video;
                var audio;
                var initSegment;
                var text;
                var id3;
                var independent;
                var audioTimeOffset = timeOffset;
                var videoTimeOffset = timeOffset;
                var hasAudio = audioTrack.pid > -1;
                var hasVideo = videoTrack.pid > -1;
                var length = videoTrack.samples.length;
                var enoughAudioSamples = audioTrack.samples.length > 0;
                var enoughVideoSamples = length > 1;
                var canRemuxAvc = (!hasAudio || enoughAudioSamples) && (!hasVideo || enoughVideoSamples) || this.ISGenerated || flush;
                if (canRemuxAvc) {
                  if (!this.ISGenerated) {
                    initSegment = this.generateIS(audioTrack, videoTrack, timeOffset);
                  }
                  var isVideoContiguous = this.isVideoContiguous;
                  var firstKeyFrameIndex = -1;
                  if (enoughVideoSamples) {
                    firstKeyFrameIndex = findKeyframeIndex(videoTrack.samples);
                    if (!isVideoContiguous && this.config.forceKeyFrameOnDiscontinuity) {
                      independent = true;
                      if (firstKeyFrameIndex > 0) {
                        _utils_logger__WEBPACK_IMPORTED_MODULE_5__["logger"].warn("[mp4-remuxer]: Dropped " + firstKeyFrameIndex + " out of " + length + " video samples due to a missing keyframe");
                        var startPTS = this.getVideoStartPts(videoTrack.samples);
                        videoTrack.samples = videoTrack.samples.slice(firstKeyFrameIndex);
                        videoTrack.dropped += firstKeyFrameIndex;
                        videoTimeOffset += (videoTrack.samples[0].pts - startPTS) / (videoTrack.timescale || 9e4);
                      } else if (firstKeyFrameIndex === -1) {
                        _utils_logger__WEBPACK_IMPORTED_MODULE_5__["logger"].warn("[mp4-remuxer]: No keyframe found out of " + length + " video samples");
                        independent = false;
                      }
                    }
                  }
                  if (this.ISGenerated) {
                    if (enoughAudioSamples && enoughVideoSamples) {
                      var _startPTS = this.getVideoStartPts(videoTrack.samples);
                      var tsDelta = normalizePts(audioTrack.samples[0].pts, _startPTS) - _startPTS;
                      var audiovideoTimestampDelta = tsDelta / videoTrack.inputTimeScale;
                      audioTimeOffset += Math.max(0, audiovideoTimestampDelta);
                      videoTimeOffset += Math.max(0, -audiovideoTimestampDelta);
                    }
                    if (enoughAudioSamples) {
                      if (!audioTrack.samplerate) {
                        _utils_logger__WEBPACK_IMPORTED_MODULE_5__["logger"].warn("[mp4-remuxer]: regenerate InitSegment as audio detected");
                        initSegment = this.generateIS(audioTrack, videoTrack, timeOffset);
                      }
                      audio = this.remuxAudio(audioTrack, audioTimeOffset, this.isAudioContiguous, accurateTimeOffset, hasVideo || enoughVideoSamples || playlistType === _types_loader__WEBPACK_IMPORTED_MODULE_6__["PlaylistLevelType"].AUDIO ? videoTimeOffset : void 0);
                      if (enoughVideoSamples) {
                        var audioTrackLength = audio ? audio.endPTS - audio.startPTS : 0;
                        if (!videoTrack.inputTimeScale) {
                          _utils_logger__WEBPACK_IMPORTED_MODULE_5__["logger"].warn("[mp4-remuxer]: regenerate InitSegment as video detected");
                          initSegment = this.generateIS(audioTrack, videoTrack, timeOffset);
                        }
                        video = this.remuxVideo(videoTrack, videoTimeOffset, isVideoContiguous, audioTrackLength);
                      }
                    } else if (enoughVideoSamples) {
                      video = this.remuxVideo(videoTrack, videoTimeOffset, isVideoContiguous, 0);
                    }
                    if (video) {
                      video.firstKeyFrame = firstKeyFrameIndex;
                      video.independent = firstKeyFrameIndex !== -1;
                    }
                  }
                }
                if (this.ISGenerated) {
                  if (id3Track.samples.length) {
                    id3 = this.remuxID3(id3Track, timeOffset);
                  }
                  if (textTrack.samples.length) {
                    text = this.remuxText(textTrack, timeOffset);
                  }
                }
                return {
                  audio,
                  video,
                  initSegment,
                  independent,
                  text,
                  id3
                };
              };
              _proto.generateIS = function generateIS(audioTrack, videoTrack, timeOffset) {
                var audioSamples = audioTrack.samples;
                var videoSamples = videoTrack.samples;
                var typeSupported = this.typeSupported;
                var tracks = {};
                var computePTSDTS = !Object(_home_runner_work_hls_js_hls_js_src_polyfills_number__WEBPACK_IMPORTED_MODULE_0__["isFiniteNumber"])(this._initPTS);
                var container2 = "audio/mp4";
                var initPTS;
                var initDTS;
                var timescale;
                if (computePTSDTS) {
                  initPTS = initDTS = Infinity;
                }
                if (audioTrack.config && audioSamples.length) {
                  audioTrack.timescale = audioTrack.samplerate;
                  if (!audioTrack.isAAC) {
                    if (typeSupported.mpeg) {
                      container2 = "audio/mpeg";
                      audioTrack.codec = "";
                    } else if (typeSupported.mp3) {
                      audioTrack.codec = "mp3";
                    }
                  }
                  tracks.audio = {
                    id: "audio",
                    container: container2,
                    codec: audioTrack.codec,
                    initSegment: !audioTrack.isAAC && typeSupported.mpeg ? new Uint8Array(0) : _mp4_generator__WEBPACK_IMPORTED_MODULE_2__["default"].initSegment([audioTrack]),
                    metadata: {
                      channelCount: audioTrack.channelCount
                    }
                  };
                  if (computePTSDTS) {
                    timescale = audioTrack.inputTimeScale;
                    initPTS = initDTS = audioSamples[0].pts - Math.round(timescale * timeOffset);
                  }
                }
                if (videoTrack.sps && videoTrack.pps && videoSamples.length) {
                  videoTrack.timescale = videoTrack.inputTimeScale;
                  tracks.video = {
                    id: "main",
                    container: "video/mp4",
                    codec: videoTrack.codec,
                    initSegment: _mp4_generator__WEBPACK_IMPORTED_MODULE_2__["default"].initSegment([videoTrack]),
                    metadata: {
                      width: videoTrack.width,
                      height: videoTrack.height
                    }
                  };
                  if (computePTSDTS) {
                    timescale = videoTrack.inputTimeScale;
                    var startPTS = this.getVideoStartPts(videoSamples);
                    var startOffset = Math.round(timescale * timeOffset);
                    initDTS = Math.min(initDTS, normalizePts(videoSamples[0].dts, startPTS) - startOffset);
                    initPTS = Math.min(initPTS, startPTS - startOffset);
                  }
                }
                if (Object.keys(tracks).length) {
                  this.ISGenerated = true;
                  if (computePTSDTS) {
                    this._initPTS = initPTS;
                    this._initDTS = initDTS;
                  }
                  return {
                    tracks,
                    initPTS,
                    timescale
                  };
                }
              };
              _proto.remuxVideo = function remuxVideo(track, timeOffset, contiguous, audioTrackLength) {
                var timeScale = track.inputTimeScale;
                var inputSamples = track.samples;
                var outputSamples = [];
                var nbSamples = inputSamples.length;
                var initPTS = this._initPTS;
                var nextAvcDts = this.nextAvcDts;
                var offset = 8;
                var mp4SampleDuration;
                var firstDTS;
                var lastDTS;
                var minPTS = Number.POSITIVE_INFINITY;
                var maxPTS = Number.NEGATIVE_INFINITY;
                var ptsDtsShift = 0;
                var sortSamples = false;
                if (!contiguous || nextAvcDts === null) {
                  var pts = timeOffset * timeScale;
                  var cts = inputSamples[0].pts - normalizePts(inputSamples[0].dts, inputSamples[0].pts);
                  nextAvcDts = pts - cts;
                }
                for (var i3 = 0; i3 < nbSamples; i3++) {
                  var sample = inputSamples[i3];
                  sample.pts = normalizePts(sample.pts - initPTS, nextAvcDts);
                  sample.dts = normalizePts(sample.dts - initPTS, nextAvcDts);
                  if (sample.dts > sample.pts) {
                    var PTS_DTS_SHIFT_TOLERANCE_90KHZ = 9e4 * 0.2;
                    ptsDtsShift = Math.max(Math.min(ptsDtsShift, sample.pts - sample.dts), -1 * PTS_DTS_SHIFT_TOLERANCE_90KHZ);
                  }
                  if (sample.dts < inputSamples[i3 > 0 ? i3 - 1 : i3].dts) {
                    sortSamples = true;
                  }
                }
                if (sortSamples) {
                  inputSamples.sort(function(a3, b3) {
                    var deltadts = a3.dts - b3.dts;
                    var deltapts = a3.pts - b3.pts;
                    return deltadts || deltapts;
                  });
                }
                firstDTS = inputSamples[0].dts;
                lastDTS = inputSamples[inputSamples.length - 1].dts;
                var averageSampleDuration = Math.round((lastDTS - firstDTS) / (nbSamples - 1));
                if (ptsDtsShift < 0) {
                  if (ptsDtsShift < averageSampleDuration * -2) {
                    _utils_logger__WEBPACK_IMPORTED_MODULE_5__["logger"].warn("PTS < DTS detected in video samples, offsetting DTS from PTS by " + Object(_utils_timescale_conversion__WEBPACK_IMPORTED_MODULE_7__["toMsFromMpegTsClock"])(-averageSampleDuration, true) + " ms");
                    var lastDts = ptsDtsShift;
                    for (var _i = 0; _i < nbSamples; _i++) {
                      inputSamples[_i].dts = lastDts = Math.max(lastDts, inputSamples[_i].pts - averageSampleDuration);
                      inputSamples[_i].pts = Math.max(lastDts, inputSamples[_i].pts);
                    }
                  } else {
                    _utils_logger__WEBPACK_IMPORTED_MODULE_5__["logger"].warn("PTS < DTS detected in video samples, shifting DTS by " + Object(_utils_timescale_conversion__WEBPACK_IMPORTED_MODULE_7__["toMsFromMpegTsClock"])(ptsDtsShift, true) + " ms to overcome this issue");
                    for (var _i2 = 0; _i2 < nbSamples; _i2++) {
                      inputSamples[_i2].dts = inputSamples[_i2].dts + ptsDtsShift;
                    }
                  }
                  firstDTS = inputSamples[0].dts;
                }
                if (contiguous) {
                  var delta = firstDTS - nextAvcDts;
                  var foundHole = delta > averageSampleDuration;
                  var foundOverlap = delta < -1;
                  if (foundHole || foundOverlap) {
                    if (foundHole) {
                      _utils_logger__WEBPACK_IMPORTED_MODULE_5__["logger"].warn("AVC: " + Object(_utils_timescale_conversion__WEBPACK_IMPORTED_MODULE_7__["toMsFromMpegTsClock"])(delta, true) + " ms (" + delta + "dts) hole between fragments detected, filling it");
                    } else {
                      _utils_logger__WEBPACK_IMPORTED_MODULE_5__["logger"].warn("AVC: " + Object(_utils_timescale_conversion__WEBPACK_IMPORTED_MODULE_7__["toMsFromMpegTsClock"])(-delta, true) + " ms (" + delta + "dts) overlapping between fragments detected");
                    }
                    firstDTS = nextAvcDts;
                    var firstPTS = inputSamples[0].pts - delta;
                    inputSamples[0].dts = firstDTS;
                    inputSamples[0].pts = firstPTS;
                    _utils_logger__WEBPACK_IMPORTED_MODULE_5__["logger"].log("Video: First PTS/DTS adjusted: " + Object(_utils_timescale_conversion__WEBPACK_IMPORTED_MODULE_7__["toMsFromMpegTsClock"])(firstPTS, true) + "/" + Object(_utils_timescale_conversion__WEBPACK_IMPORTED_MODULE_7__["toMsFromMpegTsClock"])(firstDTS, true) + ", delta: " + Object(_utils_timescale_conversion__WEBPACK_IMPORTED_MODULE_7__["toMsFromMpegTsClock"])(delta, true) + " ms");
                  }
                }
                if (requiresPositiveDts) {
                  firstDTS = Math.max(0, firstDTS);
                }
                var nbNalu = 0;
                var naluLen = 0;
                for (var _i3 = 0; _i3 < nbSamples; _i3++) {
                  var _sample = inputSamples[_i3];
                  var units = _sample.units;
                  var nbUnits = units.length;
                  var sampleLen = 0;
                  for (var j3 = 0; j3 < nbUnits; j3++) {
                    sampleLen += units[j3].data.length;
                  }
                  naluLen += sampleLen;
                  nbNalu += nbUnits;
                  _sample.length = sampleLen;
                  _sample.dts = Math.max(_sample.dts, firstDTS);
                  _sample.pts = Math.max(_sample.pts, _sample.dts, 0);
                  minPTS = Math.min(_sample.pts, minPTS);
                  maxPTS = Math.max(_sample.pts, maxPTS);
                }
                lastDTS = inputSamples[nbSamples - 1].dts;
                var mdatSize = naluLen + 4 * nbNalu + 8;
                var mdat;
                try {
                  mdat = new Uint8Array(mdatSize);
                } catch (err) {
                  this.observer.emit(_events__WEBPACK_IMPORTED_MODULE_3__["Events"].ERROR, _events__WEBPACK_IMPORTED_MODULE_3__["Events"].ERROR, {
                    type: _errors__WEBPACK_IMPORTED_MODULE_4__["ErrorTypes"].MUX_ERROR,
                    details: _errors__WEBPACK_IMPORTED_MODULE_4__["ErrorDetails"].REMUX_ALLOC_ERROR,
                    fatal: false,
                    bytes: mdatSize,
                    reason: "fail allocating video mdat " + mdatSize
                  });
                  return;
                }
                var view = new DataView(mdat.buffer);
                view.setUint32(0, mdatSize);
                mdat.set(_mp4_generator__WEBPACK_IMPORTED_MODULE_2__["default"].types.mdat, 4);
                for (var _i4 = 0; _i4 < nbSamples; _i4++) {
                  var avcSample = inputSamples[_i4];
                  var avcSampleUnits = avcSample.units;
                  var mp4SampleLength = 0;
                  for (var _j = 0, _nbUnits = avcSampleUnits.length; _j < _nbUnits; _j++) {
                    var unit = avcSampleUnits[_j];
                    var unitData = unit.data;
                    var unitDataLen = unit.data.byteLength;
                    view.setUint32(offset, unitDataLen);
                    offset += 4;
                    mdat.set(unitData, offset);
                    offset += unitDataLen;
                    mp4SampleLength += 4 + unitDataLen;
                  }
                  if (_i4 < nbSamples - 1) {
                    mp4SampleDuration = inputSamples[_i4 + 1].dts - avcSample.dts;
                  } else {
                    var config2 = this.config;
                    var lastFrameDuration = avcSample.dts - inputSamples[_i4 > 0 ? _i4 - 1 : _i4].dts;
                    if (config2.stretchShortVideoTrack && this.nextAudioPts !== null) {
                      var gapTolerance = Math.floor(config2.maxBufferHole * timeScale);
                      var deltaToFrameEnd = (audioTrackLength ? minPTS + audioTrackLength * timeScale : this.nextAudioPts) - avcSample.pts;
                      if (deltaToFrameEnd > gapTolerance) {
                        mp4SampleDuration = deltaToFrameEnd - lastFrameDuration;
                        if (mp4SampleDuration < 0) {
                          mp4SampleDuration = lastFrameDuration;
                        }
                        _utils_logger__WEBPACK_IMPORTED_MODULE_5__["logger"].log("[mp4-remuxer]: It is approximately " + deltaToFrameEnd / 90 + " ms to the next segment; using duration " + mp4SampleDuration / 90 + " ms for the last video frame.");
                      } else {
                        mp4SampleDuration = lastFrameDuration;
                      }
                    } else {
                      mp4SampleDuration = lastFrameDuration;
                    }
                  }
                  var compositionTimeOffset = Math.round(avcSample.pts - avcSample.dts);
                  outputSamples.push(new Mp4Sample(avcSample.key, mp4SampleDuration, mp4SampleLength, compositionTimeOffset));
                }
                if (outputSamples.length && chromeVersion && chromeVersion < 70) {
                  var flags = outputSamples[0].flags;
                  flags.dependsOn = 2;
                  flags.isNonSync = 0;
                }
                console.assert(mp4SampleDuration !== void 0, "mp4SampleDuration must be computed");
                this.nextAvcDts = nextAvcDts = lastDTS + mp4SampleDuration;
                this.isVideoContiguous = true;
                var moof = _mp4_generator__WEBPACK_IMPORTED_MODULE_2__["default"].moof(track.sequenceNumber++, firstDTS, _extends2({}, track, {
                  samples: outputSamples
                }));
                var type = "video";
                var data = {
                  data1: moof,
                  data2: mdat,
                  startPTS: minPTS / timeScale,
                  endPTS: (maxPTS + mp4SampleDuration) / timeScale,
                  startDTS: firstDTS / timeScale,
                  endDTS: nextAvcDts / timeScale,
                  type,
                  hasAudio: false,
                  hasVideo: true,
                  nb: outputSamples.length,
                  dropped: track.dropped
                };
                track.samples = [];
                track.dropped = 0;
                console.assert(mdat.length, "MDAT length must not be zero");
                return data;
              };
              _proto.remuxAudio = function remuxAudio(track, timeOffset, contiguous, accurateTimeOffset, videoTimeOffset) {
                var inputTimeScale = track.inputTimeScale;
                var mp4timeScale = track.samplerate ? track.samplerate : inputTimeScale;
                var scaleFactor = inputTimeScale / mp4timeScale;
                var mp4SampleDuration = track.isAAC ? AAC_SAMPLES_PER_FRAME : MPEG_AUDIO_SAMPLE_PER_FRAME;
                var inputSampleDuration = mp4SampleDuration * scaleFactor;
                var initPTS = this._initPTS;
                var rawMPEG = !track.isAAC && this.typeSupported.mpeg;
                var outputSamples = [];
                var inputSamples = track.samples;
                var offset = rawMPEG ? 0 : 8;
                var nextAudioPts = this.nextAudioPts || -1;
                var timeOffsetMpegTS = timeOffset * inputTimeScale;
                this.isAudioContiguous = contiguous = contiguous || inputSamples.length && nextAudioPts > 0 && (accurateTimeOffset && Math.abs(timeOffsetMpegTS - nextAudioPts) < 9e3 || Math.abs(normalizePts(inputSamples[0].pts - initPTS, timeOffsetMpegTS) - nextAudioPts) < 20 * inputSampleDuration);
                inputSamples.forEach(function(sample2) {
                  sample2.pts = normalizePts(sample2.pts - initPTS, timeOffsetMpegTS);
                });
                if (!contiguous || nextAudioPts < 0) {
                  inputSamples = inputSamples.filter(function(sample2) {
                    return sample2.pts >= 0;
                  });
                  if (!inputSamples.length) {
                    return;
                  }
                  if (videoTimeOffset === 0) {
                    nextAudioPts = 0;
                  } else if (accurateTimeOffset) {
                    nextAudioPts = Math.max(0, timeOffsetMpegTS);
                  } else {
                    nextAudioPts = inputSamples[0].pts;
                  }
                }
                if (track.isAAC) {
                  var alignedWithVideo = videoTimeOffset !== void 0;
                  var maxAudioFramesDrift = this.config.maxAudioFramesDrift;
                  for (var i3 = 0, nextPts = nextAudioPts; i3 < inputSamples.length; i3++) {
                    var sample = inputSamples[i3];
                    var pts = sample.pts;
                    var delta = pts - nextPts;
                    var duration = Math.abs(1e3 * delta / inputTimeScale);
                    if (delta <= -maxAudioFramesDrift * inputSampleDuration && alignedWithVideo) {
                      if (i3 === 0) {
                        _utils_logger__WEBPACK_IMPORTED_MODULE_5__["logger"].warn("Audio frame @ " + (pts / inputTimeScale).toFixed(3) + "s overlaps nextAudioPts by " + Math.round(1e3 * delta / inputTimeScale) + " ms.");
                        this.nextAudioPts = nextAudioPts = nextPts = pts;
                      }
                    } else if (delta >= maxAudioFramesDrift * inputSampleDuration && duration < MAX_SILENT_FRAME_DURATION && alignedWithVideo) {
                      var missing = Math.round(delta / inputSampleDuration);
                      nextPts = pts - missing * inputSampleDuration;
                      if (nextPts < 0) {
                        missing--;
                        nextPts += inputSampleDuration;
                      }
                      if (i3 === 0) {
                        this.nextAudioPts = nextAudioPts = nextPts;
                      }
                      _utils_logger__WEBPACK_IMPORTED_MODULE_5__["logger"].warn("[mp4-remuxer]: Injecting " + missing + " audio frame @ " + (nextPts / inputTimeScale).toFixed(3) + "s due to " + Math.round(1e3 * delta / inputTimeScale) + " ms gap.");
                      for (var j3 = 0; j3 < missing; j3++) {
                        var newStamp = Math.max(nextPts, 0);
                        var fillFrame = _aac_helper__WEBPACK_IMPORTED_MODULE_1__["default"].getSilentFrame(track.manifestCodec || track.codec, track.channelCount);
                        if (!fillFrame) {
                          _utils_logger__WEBPACK_IMPORTED_MODULE_5__["logger"].log("[mp4-remuxer]: Unable to get silent frame for given audio codec; duplicating last frame instead.");
                          fillFrame = sample.unit.subarray();
                        }
                        inputSamples.splice(i3, 0, {
                          unit: fillFrame,
                          pts: newStamp
                        });
                        nextPts += inputSampleDuration;
                        i3++;
                      }
                    }
                    sample.pts = nextPts;
                    nextPts += inputSampleDuration;
                  }
                }
                var firstPTS = null;
                var lastPTS = null;
                var mdat;
                var mdatSize = 0;
                var sampleLength = inputSamples.length;
                while (sampleLength--) {
                  mdatSize += inputSamples[sampleLength].unit.byteLength;
                }
                for (var _j2 = 0, _nbSamples = inputSamples.length; _j2 < _nbSamples; _j2++) {
                  var audioSample = inputSamples[_j2];
                  var unit = audioSample.unit;
                  var _pts = audioSample.pts;
                  if (lastPTS !== null) {
                    var prevSample = outputSamples[_j2 - 1];
                    prevSample.duration = Math.round((_pts - lastPTS) / scaleFactor);
                  } else {
                    if (contiguous && track.isAAC) {
                      _pts = nextAudioPts;
                    }
                    firstPTS = _pts;
                    if (mdatSize > 0) {
                      mdatSize += offset;
                      try {
                        mdat = new Uint8Array(mdatSize);
                      } catch (err) {
                        this.observer.emit(_events__WEBPACK_IMPORTED_MODULE_3__["Events"].ERROR, _events__WEBPACK_IMPORTED_MODULE_3__["Events"].ERROR, {
                          type: _errors__WEBPACK_IMPORTED_MODULE_4__["ErrorTypes"].MUX_ERROR,
                          details: _errors__WEBPACK_IMPORTED_MODULE_4__["ErrorDetails"].REMUX_ALLOC_ERROR,
                          fatal: false,
                          bytes: mdatSize,
                          reason: "fail allocating audio mdat " + mdatSize
                        });
                        return;
                      }
                      if (!rawMPEG) {
                        var view = new DataView(mdat.buffer);
                        view.setUint32(0, mdatSize);
                        mdat.set(_mp4_generator__WEBPACK_IMPORTED_MODULE_2__["default"].types.mdat, 4);
                      }
                    } else {
                      return;
                    }
                  }
                  mdat.set(unit, offset);
                  var unitLen = unit.byteLength;
                  offset += unitLen;
                  outputSamples.push(new Mp4Sample(true, mp4SampleDuration, unitLen, 0));
                  lastPTS = _pts;
                }
                var nbSamples = outputSamples.length;
                if (!nbSamples) {
                  return;
                }
                var lastSample = outputSamples[outputSamples.length - 1];
                this.nextAudioPts = nextAudioPts = lastPTS + scaleFactor * lastSample.duration;
                var moof = rawMPEG ? new Uint8Array(0) : _mp4_generator__WEBPACK_IMPORTED_MODULE_2__["default"].moof(track.sequenceNumber++, firstPTS / scaleFactor, _extends2({}, track, {
                  samples: outputSamples
                }));
                track.samples = [];
                var start = firstPTS / inputTimeScale;
                var end = nextAudioPts / inputTimeScale;
                var type = "audio";
                var audioData = {
                  data1: moof,
                  data2: mdat,
                  startPTS: start,
                  endPTS: end,
                  startDTS: start,
                  endDTS: end,
                  type,
                  hasAudio: true,
                  hasVideo: false,
                  nb: nbSamples
                };
                this.isAudioContiguous = true;
                console.assert(mdat.length, "MDAT length must not be zero");
                return audioData;
              };
              _proto.remuxEmptyAudio = function remuxEmptyAudio(track, timeOffset, contiguous, videoData) {
                var inputTimeScale = track.inputTimeScale;
                var mp4timeScale = track.samplerate ? track.samplerate : inputTimeScale;
                var scaleFactor = inputTimeScale / mp4timeScale;
                var nextAudioPts = this.nextAudioPts;
                var startDTS = (nextAudioPts !== null ? nextAudioPts : videoData.startDTS * inputTimeScale) + this._initDTS;
                var endDTS = videoData.endDTS * inputTimeScale + this._initDTS;
                var frameDuration = scaleFactor * AAC_SAMPLES_PER_FRAME;
                var nbSamples = Math.ceil((endDTS - startDTS) / frameDuration);
                var silentFrame = _aac_helper__WEBPACK_IMPORTED_MODULE_1__["default"].getSilentFrame(track.manifestCodec || track.codec, track.channelCount);
                _utils_logger__WEBPACK_IMPORTED_MODULE_5__["logger"].warn("[mp4-remuxer]: remux empty Audio");
                if (!silentFrame) {
                  _utils_logger__WEBPACK_IMPORTED_MODULE_5__["logger"].trace("[mp4-remuxer]: Unable to remuxEmptyAudio since we were unable to get a silent frame for given audio codec");
                  return;
                }
                var samples = [];
                for (var i3 = 0; i3 < nbSamples; i3++) {
                  var stamp = startDTS + i3 * frameDuration;
                  samples.push({
                    unit: silentFrame,
                    pts: stamp,
                    dts: stamp
                  });
                }
                track.samples = samples;
                return this.remuxAudio(track, timeOffset, contiguous, false);
              };
              _proto.remuxID3 = function remuxID3(track, timeOffset) {
                var length = track.samples.length;
                if (!length) {
                  return;
                }
                var inputTimeScale = track.inputTimeScale;
                var initPTS = this._initPTS;
                var initDTS = this._initDTS;
                for (var index = 0; index < length; index++) {
                  var sample = track.samples[index];
                  sample.pts = normalizePts(sample.pts - initPTS, timeOffset * inputTimeScale) / inputTimeScale;
                  sample.dts = normalizePts(sample.dts - initDTS, timeOffset * inputTimeScale) / inputTimeScale;
                }
                var samples = track.samples;
                track.samples = [];
                return {
                  samples
                };
              };
              _proto.remuxText = function remuxText(track, timeOffset) {
                var length = track.samples.length;
                if (!length) {
                  return;
                }
                var inputTimeScale = track.inputTimeScale;
                var initPTS = this._initPTS;
                for (var index = 0; index < length; index++) {
                  var sample = track.samples[index];
                  sample.pts = normalizePts(sample.pts - initPTS, timeOffset * inputTimeScale) / inputTimeScale;
                }
                track.samples.sort(function(a3, b3) {
                  return a3.pts - b3.pts;
                });
                var samples = track.samples;
                track.samples = [];
                return {
                  samples
                };
              };
              return MP4Remuxer2;
            }();
            function normalizePts(value, reference) {
              var offset;
              if (reference === null) {
                return value;
              }
              if (reference < value) {
                offset = -8589934592;
              } else {
                offset = 8589934592;
              }
              while (Math.abs(value - reference) > 4294967296) {
                value += offset;
              }
              return value;
            }
            function findKeyframeIndex(samples) {
              for (var i3 = 0; i3 < samples.length; i3++) {
                if (samples[i3].key) {
                  return i3;
                }
              }
              return -1;
            }
            var Mp4Sample = function Mp4Sample2(isKeyframe, duration, size, cts) {
              this.size = void 0;
              this.duration = void 0;
              this.cts = void 0;
              this.flags = void 0;
              this.duration = duration;
              this.size = size;
              this.cts = cts;
              this.flags = new Mp4SampleFlags(isKeyframe);
            };
            var Mp4SampleFlags = function Mp4SampleFlags2(isKeyframe) {
              this.isLeading = 0;
              this.isDependedOn = 0;
              this.hasRedundancy = 0;
              this.degradPrio = 0;
              this.dependsOn = 1;
              this.isNonSync = 1;
              this.dependsOn = isKeyframe ? 2 : 1;
              this.isNonSync = isKeyframe ? 0 : 1;
            };
          },
          "./src/remux/passthrough-remuxer.ts": function(module2, __webpack_exports__, __webpack_require__) {
            "use strict";
            __webpack_require__.r(__webpack_exports__);
            var _home_runner_work_hls_js_hls_js_src_polyfills_number__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("./src/polyfills/number.ts");
            var _utils_mp4_tools__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("./src/utils/mp4-tools.ts");
            var _loader_fragment__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__("./src/loader/fragment.ts");
            var _utils_logger__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__("./src/utils/logger.ts");
            var PassThroughRemuxer = /* @__PURE__ */ function() {
              function PassThroughRemuxer2() {
                this.emitInitSegment = false;
                this.audioCodec = void 0;
                this.videoCodec = void 0;
                this.initData = void 0;
                this.initPTS = void 0;
                this.initTracks = void 0;
                this.lastEndDTS = null;
              }
              var _proto = PassThroughRemuxer2.prototype;
              _proto.destroy = function destroy() {
              };
              _proto.resetTimeStamp = function resetTimeStamp(defaultInitPTS) {
                this.initPTS = defaultInitPTS;
                this.lastEndDTS = null;
              };
              _proto.resetNextTimestamp = function resetNextTimestamp() {
                this.lastEndDTS = null;
              };
              _proto.resetInitSegment = function resetInitSegment(initSegment, audioCodec, videoCodec) {
                this.audioCodec = audioCodec;
                this.videoCodec = videoCodec;
                this.generateInitSegment(initSegment);
                this.emitInitSegment = true;
              };
              _proto.generateInitSegment = function generateInitSegment(initSegment) {
                var audioCodec = this.audioCodec, videoCodec = this.videoCodec;
                if (!initSegment || !initSegment.byteLength) {
                  this.initTracks = void 0;
                  this.initData = void 0;
                  return;
                }
                var initData = this.initData = Object(_utils_mp4_tools__WEBPACK_IMPORTED_MODULE_1__["parseInitSegment"])(initSegment);
                if (!audioCodec) {
                  audioCodec = getParsedTrackCodec(initData.audio, _loader_fragment__WEBPACK_IMPORTED_MODULE_2__["ElementaryStreamTypes"].AUDIO);
                }
                if (!videoCodec) {
                  videoCodec = getParsedTrackCodec(initData.video, _loader_fragment__WEBPACK_IMPORTED_MODULE_2__["ElementaryStreamTypes"].VIDEO);
                }
                var tracks = {};
                if (initData.audio && initData.video) {
                  tracks.audiovideo = {
                    container: "video/mp4",
                    codec: audioCodec + "," + videoCodec,
                    initSegment,
                    id: "main"
                  };
                } else if (initData.audio) {
                  tracks.audio = {
                    container: "audio/mp4",
                    codec: audioCodec,
                    initSegment,
                    id: "audio"
                  };
                } else if (initData.video) {
                  tracks.video = {
                    container: "video/mp4",
                    codec: videoCodec,
                    initSegment,
                    id: "main"
                  };
                } else {
                  _utils_logger__WEBPACK_IMPORTED_MODULE_3__["logger"].warn("[passthrough-remuxer.ts]: initSegment does not contain moov or trak boxes.");
                }
                this.initTracks = tracks;
              };
              _proto.remux = function remux(audioTrack, videoTrack, id3Track, textTrack, timeOffset) {
                var initPTS = this.initPTS, lastEndDTS = this.lastEndDTS;
                var result = {
                  audio: void 0,
                  video: void 0,
                  text: textTrack,
                  id3: id3Track,
                  initSegment: void 0
                };
                if (!Object(_home_runner_work_hls_js_hls_js_src_polyfills_number__WEBPACK_IMPORTED_MODULE_0__["isFiniteNumber"])(lastEndDTS)) {
                  lastEndDTS = this.lastEndDTS = timeOffset || 0;
                }
                var data = videoTrack.samples;
                if (!data || !data.length) {
                  return result;
                }
                var initSegment = {
                  initPTS: void 0,
                  timescale: 1
                };
                var initData = this.initData;
                if (!initData || !initData.length) {
                  this.generateInitSegment(data);
                  initData = this.initData;
                }
                if (!initData || !initData.length) {
                  _utils_logger__WEBPACK_IMPORTED_MODULE_3__["logger"].warn("[passthrough-remuxer.ts]: Failed to generate initSegment.");
                  return result;
                }
                if (this.emitInitSegment) {
                  initSegment.tracks = this.initTracks;
                  this.emitInitSegment = false;
                }
                if (!Object(_home_runner_work_hls_js_hls_js_src_polyfills_number__WEBPACK_IMPORTED_MODULE_0__["isFiniteNumber"])(initPTS)) {
                  this.initPTS = initSegment.initPTS = initPTS = computeInitPTS(initData, data, lastEndDTS);
                }
                var duration = Object(_utils_mp4_tools__WEBPACK_IMPORTED_MODULE_1__["getDuration"])(data, initData);
                var startDTS = lastEndDTS;
                var endDTS = duration + startDTS;
                Object(_utils_mp4_tools__WEBPACK_IMPORTED_MODULE_1__["offsetStartDTS"])(initData, data, initPTS);
                if (duration > 0) {
                  this.lastEndDTS = endDTS;
                } else {
                  _utils_logger__WEBPACK_IMPORTED_MODULE_3__["logger"].warn("Duration parsed from mp4 should be greater than zero");
                  this.resetNextTimestamp();
                }
                var hasAudio = !!initData.audio;
                var hasVideo = !!initData.video;
                var type = "";
                if (hasAudio) {
                  type += "audio";
                }
                if (hasVideo) {
                  type += "video";
                }
                var track = {
                  data1: data,
                  startPTS: startDTS,
                  startDTS,
                  endPTS: endDTS,
                  endDTS,
                  type,
                  hasAudio,
                  hasVideo,
                  nb: 1,
                  dropped: 0
                };
                result.audio = track.type === "audio" ? track : void 0;
                result.video = track.type !== "audio" ? track : void 0;
                result.text = textTrack;
                result.id3 = id3Track;
                result.initSegment = initSegment;
                return result;
              };
              return PassThroughRemuxer2;
            }();
            var computeInitPTS = function computeInitPTS2(initData, data, timeOffset) {
              return Object(_utils_mp4_tools__WEBPACK_IMPORTED_MODULE_1__["getStartDTS"])(initData, data) - timeOffset;
            };
            function getParsedTrackCodec(track, type) {
              var parsedCodec = track === null || track === void 0 ? void 0 : track.codec;
              if (parsedCodec && parsedCodec.length > 4) {
                return parsedCodec;
              }
              if (parsedCodec === "hvc1") {
                return "hvc1.1.c.L120.90";
              }
              if (parsedCodec === "av01") {
                return "av01.0.04M.08";
              }
              if (parsedCodec === "avc1" || type === _loader_fragment__WEBPACK_IMPORTED_MODULE_2__["ElementaryStreamTypes"].VIDEO) {
                return "avc1.42e01e";
              }
              return "mp4a.40.5";
            }
            __webpack_exports__["default"] = PassThroughRemuxer;
          },
          "./src/task-loop.ts": function(module2, __webpack_exports__, __webpack_require__) {
            "use strict";
            __webpack_require__.r(__webpack_exports__);
            __webpack_require__.d(__webpack_exports__, "default", function() {
              return TaskLoop;
            });
            var TaskLoop = /* @__PURE__ */ function() {
              function TaskLoop2() {
                this._boundTick = void 0;
                this._tickTimer = null;
                this._tickInterval = null;
                this._tickCallCount = 0;
                this._boundTick = this.tick.bind(this);
              }
              var _proto = TaskLoop2.prototype;
              _proto.destroy = function destroy() {
                this.onHandlerDestroying();
                this.onHandlerDestroyed();
              };
              _proto.onHandlerDestroying = function onHandlerDestroying() {
                this.clearNextTick();
                this.clearInterval();
              };
              _proto.onHandlerDestroyed = function onHandlerDestroyed() {
              };
              _proto.hasInterval = function hasInterval() {
                return !!this._tickInterval;
              };
              _proto.hasNextTick = function hasNextTick() {
                return !!this._tickTimer;
              };
              _proto.setInterval = function setInterval2(millis) {
                if (!this._tickInterval) {
                  this._tickInterval = self.setInterval(this._boundTick, millis);
                  return true;
                }
                return false;
              };
              _proto.clearInterval = function clearInterval2() {
                if (this._tickInterval) {
                  self.clearInterval(this._tickInterval);
                  this._tickInterval = null;
                  return true;
                }
                return false;
              };
              _proto.clearNextTick = function clearNextTick() {
                if (this._tickTimer) {
                  self.clearTimeout(this._tickTimer);
                  this._tickTimer = null;
                  return true;
                }
                return false;
              };
              _proto.tick = function tick() {
                this._tickCallCount++;
                if (this._tickCallCount === 1) {
                  this.doTick();
                  if (this._tickCallCount > 1) {
                    this.tickImmediate();
                  }
                  this._tickCallCount = 0;
                }
              };
              _proto.tickImmediate = function tickImmediate() {
                this.clearNextTick();
                this._tickTimer = self.setTimeout(this._boundTick, 0);
              };
              _proto.doTick = function doTick() {
              };
              return TaskLoop2;
            }();
          },
          "./src/types/cmcd.ts": function(module2, __webpack_exports__, __webpack_require__) {
            "use strict";
            __webpack_require__.r(__webpack_exports__);
            __webpack_require__.d(__webpack_exports__, "CMCDVersion", function() {
              return CMCDVersion;
            });
            __webpack_require__.d(__webpack_exports__, "CMCDObjectType", function() {
              return CMCDObjectType;
            });
            __webpack_require__.d(__webpack_exports__, "CMCDStreamingFormat", function() {
              return CMCDStreamingFormat;
            });
            __webpack_require__.d(__webpack_exports__, "CMCDStreamType", function() {
              return CMCDStreamType;
            });
            var CMCDVersion = 1;
            var CMCDObjectType;
            (function(CMCDObjectType2) {
              CMCDObjectType2["MANIFEST"] = "m";
              CMCDObjectType2["AUDIO"] = "a";
              CMCDObjectType2["VIDEO"] = "v";
              CMCDObjectType2["MUXED"] = "av";
              CMCDObjectType2["INIT"] = "i";
              CMCDObjectType2["CAPTION"] = "c";
              CMCDObjectType2["TIMED_TEXT"] = "tt";
              CMCDObjectType2["KEY"] = "k";
              CMCDObjectType2["OTHER"] = "o";
            })(CMCDObjectType || (CMCDObjectType = {}));
            var CMCDStreamingFormat;
            (function(CMCDStreamingFormat2) {
              CMCDStreamingFormat2["DASH"] = "d";
              CMCDStreamingFormat2["HLS"] = "h";
              CMCDStreamingFormat2["SMOOTH"] = "s";
              CMCDStreamingFormat2["OTHER"] = "o";
            })(CMCDStreamingFormat || (CMCDStreamingFormat = {}));
            var CMCDStreamType;
            (function(CMCDStreamType2) {
              CMCDStreamType2["VOD"] = "v";
              CMCDStreamType2["LIVE"] = "l";
            })(CMCDStreamType || (CMCDStreamType = {}));
          },
          "./src/types/level.ts": function(module2, __webpack_exports__, __webpack_require__) {
            "use strict";
            __webpack_require__.r(__webpack_exports__);
            __webpack_require__.d(__webpack_exports__, "HlsSkip", function() {
              return HlsSkip;
            });
            __webpack_require__.d(__webpack_exports__, "getSkipValue", function() {
              return getSkipValue;
            });
            __webpack_require__.d(__webpack_exports__, "HlsUrlParameters", function() {
              return HlsUrlParameters;
            });
            __webpack_require__.d(__webpack_exports__, "Level", function() {
              return Level;
            });
            function _defineProperties(target, props) {
              for (var i3 = 0; i3 < props.length; i3++) {
                var descriptor = props[i3];
                descriptor.enumerable = descriptor.enumerable || false;
                descriptor.configurable = true;
                if ("value" in descriptor)
                  descriptor.writable = true;
                Object.defineProperty(target, descriptor.key, descriptor);
              }
            }
            function _createClass(Constructor, protoProps, staticProps) {
              if (protoProps)
                _defineProperties(Constructor.prototype, protoProps);
              if (staticProps)
                _defineProperties(Constructor, staticProps);
              return Constructor;
            }
            var HlsSkip;
            (function(HlsSkip2) {
              HlsSkip2["No"] = "";
              HlsSkip2["Yes"] = "YES";
              HlsSkip2["v2"] = "v2";
            })(HlsSkip || (HlsSkip = {}));
            function getSkipValue(details, msn) {
              var canSkipUntil = details.canSkipUntil, canSkipDateRanges = details.canSkipDateRanges, endSN = details.endSN;
              var snChangeGoal = msn !== void 0 ? msn - endSN : 0;
              if (canSkipUntil && snChangeGoal < canSkipUntil) {
                if (canSkipDateRanges) {
                  return HlsSkip.v2;
                }
                return HlsSkip.Yes;
              }
              return HlsSkip.No;
            }
            var HlsUrlParameters = /* @__PURE__ */ function() {
              function HlsUrlParameters2(msn, part, skip) {
                this.msn = void 0;
                this.part = void 0;
                this.skip = void 0;
                this.msn = msn;
                this.part = part;
                this.skip = skip;
              }
              var _proto = HlsUrlParameters2.prototype;
              _proto.addDirectives = function addDirectives(uri) {
                var url = new self.URL(uri);
                if (this.msn !== void 0) {
                  url.searchParams.set("_HLS_msn", this.msn.toString());
                }
                if (this.part !== void 0) {
                  url.searchParams.set("_HLS_part", this.part.toString());
                }
                if (this.skip) {
                  url.searchParams.set("_HLS_skip", this.skip);
                }
                return url.toString();
              };
              return HlsUrlParameters2;
            }();
            var Level = /* @__PURE__ */ function() {
              function Level2(data) {
                this.attrs = void 0;
                this.audioCodec = void 0;
                this.bitrate = void 0;
                this.codecSet = void 0;
                this.height = void 0;
                this.id = void 0;
                this.name = void 0;
                this.videoCodec = void 0;
                this.width = void 0;
                this.unknownCodecs = void 0;
                this.audioGroupIds = void 0;
                this.details = void 0;
                this.fragmentError = 0;
                this.loadError = 0;
                this.loaded = void 0;
                this.realBitrate = 0;
                this.textGroupIds = void 0;
                this.url = void 0;
                this._urlId = 0;
                this.url = [data.url];
                this.attrs = data.attrs;
                this.bitrate = data.bitrate;
                if (data.details) {
                  this.details = data.details;
                }
                this.id = data.id || 0;
                this.name = data.name;
                this.width = data.width || 0;
                this.height = data.height || 0;
                this.audioCodec = data.audioCodec;
                this.videoCodec = data.videoCodec;
                this.unknownCodecs = data.unknownCodecs;
                this.codecSet = [data.videoCodec, data.audioCodec].filter(function(c4) {
                  return c4;
                }).join(",").replace(/\.[^.,]+/g, "");
              }
              _createClass(Level2, [{
                key: "maxBitrate",
                get: function get() {
                  return Math.max(this.realBitrate, this.bitrate);
                }
              }, {
                key: "uri",
                get: function get() {
                  return this.url[this._urlId] || "";
                }
              }, {
                key: "urlId",
                get: function get() {
                  return this._urlId;
                },
                set: function set(value) {
                  var newValue = value % this.url.length;
                  if (this._urlId !== newValue) {
                    this.details = void 0;
                    this._urlId = newValue;
                  }
                }
              }]);
              return Level2;
            }();
          },
          "./src/types/loader.ts": function(module2, __webpack_exports__, __webpack_require__) {
            "use strict";
            __webpack_require__.r(__webpack_exports__);
            __webpack_require__.d(__webpack_exports__, "PlaylistContextType", function() {
              return PlaylistContextType;
            });
            __webpack_require__.d(__webpack_exports__, "PlaylistLevelType", function() {
              return PlaylistLevelType;
            });
            var PlaylistContextType;
            (function(PlaylistContextType2) {
              PlaylistContextType2["MANIFEST"] = "manifest";
              PlaylistContextType2["LEVEL"] = "level";
              PlaylistContextType2["AUDIO_TRACK"] = "audioTrack";
              PlaylistContextType2["SUBTITLE_TRACK"] = "subtitleTrack";
            })(PlaylistContextType || (PlaylistContextType = {}));
            var PlaylistLevelType;
            (function(PlaylistLevelType2) {
              PlaylistLevelType2["MAIN"] = "main";
              PlaylistLevelType2["AUDIO"] = "audio";
              PlaylistLevelType2["SUBTITLE"] = "subtitle";
            })(PlaylistLevelType || (PlaylistLevelType = {}));
          },
          "./src/types/transmuxer.ts": function(module2, __webpack_exports__, __webpack_require__) {
            "use strict";
            __webpack_require__.r(__webpack_exports__);
            __webpack_require__.d(__webpack_exports__, "ChunkMetadata", function() {
              return ChunkMetadata;
            });
            var ChunkMetadata = function ChunkMetadata2(level, sn, id, size, part, partial) {
              if (size === void 0) {
                size = 0;
              }
              if (part === void 0) {
                part = -1;
              }
              if (partial === void 0) {
                partial = false;
              }
              this.level = void 0;
              this.sn = void 0;
              this.part = void 0;
              this.id = void 0;
              this.size = void 0;
              this.partial = void 0;
              this.transmuxing = getNewPerformanceTiming();
              this.buffering = {
                audio: getNewPerformanceTiming(),
                video: getNewPerformanceTiming(),
                audiovideo: getNewPerformanceTiming()
              };
              this.level = level;
              this.sn = sn;
              this.id = id;
              this.size = size;
              this.part = part;
              this.partial = partial;
            };
            function getNewPerformanceTiming() {
              return {
                start: 0,
                executeStart: 0,
                executeEnd: 0,
                end: 0
              };
            }
          },
          "./src/utils/attr-list.ts": function(module2, __webpack_exports__, __webpack_require__) {
            "use strict";
            __webpack_require__.r(__webpack_exports__);
            __webpack_require__.d(__webpack_exports__, "AttrList", function() {
              return AttrList;
            });
            var DECIMAL_RESOLUTION_REGEX = /^(\d+)x(\d+)$/;
            var ATTR_LIST_REGEX = /\s*(.+?)\s*=((?:\".*?\")|.*?)(?:,|$)/g;
            var AttrList = /* @__PURE__ */ function() {
              function AttrList2(attrs) {
                if (typeof attrs === "string") {
                  attrs = AttrList2.parseAttrList(attrs);
                }
                for (var attr in attrs) {
                  if (attrs.hasOwnProperty(attr)) {
                    this[attr] = attrs[attr];
                  }
                }
              }
              var _proto = AttrList2.prototype;
              _proto.decimalInteger = function decimalInteger(attrName) {
                var intValue = parseInt(this[attrName], 10);
                if (intValue > Number.MAX_SAFE_INTEGER) {
                  return Infinity;
                }
                return intValue;
              };
              _proto.hexadecimalInteger = function hexadecimalInteger(attrName) {
                if (this[attrName]) {
                  var stringValue = (this[attrName] || "0x").slice(2);
                  stringValue = (stringValue.length & 1 ? "0" : "") + stringValue;
                  var value = new Uint8Array(stringValue.length / 2);
                  for (var i3 = 0; i3 < stringValue.length / 2; i3++) {
                    value[i3] = parseInt(stringValue.slice(i3 * 2, i3 * 2 + 2), 16);
                  }
                  return value;
                } else {
                  return null;
                }
              };
              _proto.hexadecimalIntegerAsNumber = function hexadecimalIntegerAsNumber(attrName) {
                var intValue = parseInt(this[attrName], 16);
                if (intValue > Number.MAX_SAFE_INTEGER) {
                  return Infinity;
                }
                return intValue;
              };
              _proto.decimalFloatingPoint = function decimalFloatingPoint(attrName) {
                return parseFloat(this[attrName]);
              };
              _proto.optionalFloat = function optionalFloat(attrName, defaultValue2) {
                var value = this[attrName];
                return value ? parseFloat(value) : defaultValue2;
              };
              _proto.enumeratedString = function enumeratedString(attrName) {
                return this[attrName];
              };
              _proto.bool = function bool(attrName) {
                return this[attrName] === "YES";
              };
              _proto.decimalResolution = function decimalResolution(attrName) {
                var res = DECIMAL_RESOLUTION_REGEX.exec(this[attrName]);
                if (res === null) {
                  return void 0;
                }
                return {
                  width: parseInt(res[1], 10),
                  height: parseInt(res[2], 10)
                };
              };
              AttrList2.parseAttrList = function parseAttrList(input) {
                var match;
                var attrs = {};
                var quote = '"';
                ATTR_LIST_REGEX.lastIndex = 0;
                while ((match = ATTR_LIST_REGEX.exec(input)) !== null) {
                  var value = match[2];
                  if (value.indexOf(quote) === 0 && value.lastIndexOf(quote) === value.length - 1) {
                    value = value.slice(1, -1);
                  }
                  attrs[match[1]] = value;
                }
                return attrs;
              };
              return AttrList2;
            }();
          },
          "./src/utils/binary-search.ts": function(module2, __webpack_exports__, __webpack_require__) {
            "use strict";
            __webpack_require__.r(__webpack_exports__);
            var BinarySearch = {
              search: function search(list, comparisonFn) {
                var minIndex = 0;
                var maxIndex = list.length - 1;
                var currentIndex = null;
                var currentElement = null;
                while (minIndex <= maxIndex) {
                  currentIndex = (minIndex + maxIndex) / 2 | 0;
                  currentElement = list[currentIndex];
                  var comparisonResult = comparisonFn(currentElement);
                  if (comparisonResult > 0) {
                    minIndex = currentIndex + 1;
                  } else if (comparisonResult < 0) {
                    maxIndex = currentIndex - 1;
                  } else {
                    return currentElement;
                  }
                }
                return null;
              }
            };
            __webpack_exports__["default"] = BinarySearch;
          },
          "./src/utils/buffer-helper.ts": function(module2, __webpack_exports__, __webpack_require__) {
            "use strict";
            __webpack_require__.r(__webpack_exports__);
            __webpack_require__.d(__webpack_exports__, "BufferHelper", function() {
              return BufferHelper;
            });
            var _logger__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("./src/utils/logger.ts");
            var noopBuffered = {
              length: 0,
              start: function start() {
                return 0;
              },
              end: function end() {
                return 0;
              }
            };
            var BufferHelper = /* @__PURE__ */ function() {
              function BufferHelper2() {
              }
              BufferHelper2.isBuffered = function isBuffered(media2, position) {
                try {
                  if (media2) {
                    var buffered = BufferHelper2.getBuffered(media2);
                    for (var i3 = 0; i3 < buffered.length; i3++) {
                      if (position >= buffered.start(i3) && position <= buffered.end(i3)) {
                        return true;
                      }
                    }
                  }
                } catch (error) {
                }
                return false;
              };
              BufferHelper2.bufferInfo = function bufferInfo(media2, pos, maxHoleDuration) {
                try {
                  if (media2) {
                    var vbuffered = BufferHelper2.getBuffered(media2);
                    var buffered = [];
                    var i3;
                    for (i3 = 0; i3 < vbuffered.length; i3++) {
                      buffered.push({
                        start: vbuffered.start(i3),
                        end: vbuffered.end(i3)
                      });
                    }
                    return this.bufferedInfo(buffered, pos, maxHoleDuration);
                  }
                } catch (error) {
                }
                return {
                  len: 0,
                  start: pos,
                  end: pos,
                  nextStart: void 0
                };
              };
              BufferHelper2.bufferedInfo = function bufferedInfo(buffered, pos, maxHoleDuration) {
                pos = Math.max(0, pos);
                buffered.sort(function(a3, b3) {
                  var diff = a3.start - b3.start;
                  if (diff) {
                    return diff;
                  } else {
                    return b3.end - a3.end;
                  }
                });
                var buffered2 = [];
                if (maxHoleDuration) {
                  for (var i3 = 0; i3 < buffered.length; i3++) {
                    var buf2len = buffered2.length;
                    if (buf2len) {
                      var buf2end = buffered2[buf2len - 1].end;
                      if (buffered[i3].start - buf2end < maxHoleDuration) {
                        if (buffered[i3].end > buf2end) {
                          buffered2[buf2len - 1].end = buffered[i3].end;
                        }
                      } else {
                        buffered2.push(buffered[i3]);
                      }
                    } else {
                      buffered2.push(buffered[i3]);
                    }
                  }
                } else {
                  buffered2 = buffered;
                }
                var bufferLen = 0;
                var bufferStartNext;
                var bufferStart = pos;
                var bufferEnd = pos;
                for (var _i = 0; _i < buffered2.length; _i++) {
                  var start = buffered2[_i].start;
                  var end = buffered2[_i].end;
                  if (pos + maxHoleDuration >= start && pos < end) {
                    bufferStart = start;
                    bufferEnd = end;
                    bufferLen = bufferEnd - pos;
                  } else if (pos + maxHoleDuration < start) {
                    bufferStartNext = start;
                    break;
                  }
                }
                return {
                  len: bufferLen,
                  start: bufferStart || 0,
                  end: bufferEnd || 0,
                  nextStart: bufferStartNext
                };
              };
              BufferHelper2.getBuffered = function getBuffered(media2) {
                try {
                  return media2.buffered;
                } catch (e4) {
                  _logger__WEBPACK_IMPORTED_MODULE_0__["logger"].log("failed to get media.buffered", e4);
                  return noopBuffered;
                }
              };
              return BufferHelper2;
            }();
          },
          "./src/utils/cea-608-parser.ts": function(module2, __webpack_exports__, __webpack_require__) {
            "use strict";
            __webpack_require__.r(__webpack_exports__);
            __webpack_require__.d(__webpack_exports__, "Row", function() {
              return Row;
            });
            __webpack_require__.d(__webpack_exports__, "CaptionScreen", function() {
              return CaptionScreen;
            });
            var _utils_logger__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("./src/utils/logger.ts");
            var specialCea608CharsCodes = {
              42: 225,
              92: 233,
              94: 237,
              95: 243,
              96: 250,
              123: 231,
              124: 247,
              125: 209,
              126: 241,
              127: 9608,
              128: 174,
              129: 176,
              130: 189,
              131: 191,
              132: 8482,
              133: 162,
              134: 163,
              135: 9834,
              136: 224,
              137: 32,
              138: 232,
              139: 226,
              140: 234,
              141: 238,
              142: 244,
              143: 251,
              144: 193,
              145: 201,
              146: 211,
              147: 218,
              148: 220,
              149: 252,
              150: 8216,
              151: 161,
              152: 42,
              153: 8217,
              154: 9473,
              155: 169,
              156: 8480,
              157: 8226,
              158: 8220,
              159: 8221,
              160: 192,
              161: 194,
              162: 199,
              163: 200,
              164: 202,
              165: 203,
              166: 235,
              167: 206,
              168: 207,
              169: 239,
              170: 212,
              171: 217,
              172: 249,
              173: 219,
              174: 171,
              175: 187,
              176: 195,
              177: 227,
              178: 205,
              179: 204,
              180: 236,
              181: 210,
              182: 242,
              183: 213,
              184: 245,
              185: 123,
              186: 125,
              187: 92,
              188: 94,
              189: 95,
              190: 124,
              191: 8764,
              192: 196,
              193: 228,
              194: 214,
              195: 246,
              196: 223,
              197: 165,
              198: 164,
              199: 9475,
              200: 197,
              201: 229,
              202: 216,
              203: 248,
              204: 9487,
              205: 9491,
              206: 9495,
              207: 9499
            };
            var getCharForByte = function getCharForByte2(_byte) {
              var charCode = _byte;
              if (specialCea608CharsCodes.hasOwnProperty(_byte)) {
                charCode = specialCea608CharsCodes[_byte];
              }
              return String.fromCharCode(charCode);
            };
            var NR_ROWS = 15;
            var NR_COLS = 100;
            var rowsLowCh1 = {
              17: 1,
              18: 3,
              21: 5,
              22: 7,
              23: 9,
              16: 11,
              19: 12,
              20: 14
            };
            var rowsHighCh1 = {
              17: 2,
              18: 4,
              21: 6,
              22: 8,
              23: 10,
              19: 13,
              20: 15
            };
            var rowsLowCh2 = {
              25: 1,
              26: 3,
              29: 5,
              30: 7,
              31: 9,
              24: 11,
              27: 12,
              28: 14
            };
            var rowsHighCh2 = {
              25: 2,
              26: 4,
              29: 6,
              30: 8,
              31: 10,
              27: 13,
              28: 15
            };
            var backgroundColors = ["white", "green", "blue", "cyan", "red", "yellow", "magenta", "black", "transparent"];
            var VerboseLevel;
            (function(VerboseLevel2) {
              VerboseLevel2[VerboseLevel2["ERROR"] = 0] = "ERROR";
              VerboseLevel2[VerboseLevel2["TEXT"] = 1] = "TEXT";
              VerboseLevel2[VerboseLevel2["WARNING"] = 2] = "WARNING";
              VerboseLevel2[VerboseLevel2["INFO"] = 2] = "INFO";
              VerboseLevel2[VerboseLevel2["DEBUG"] = 3] = "DEBUG";
              VerboseLevel2[VerboseLevel2["DATA"] = 3] = "DATA";
            })(VerboseLevel || (VerboseLevel = {}));
            var CaptionsLogger = /* @__PURE__ */ function() {
              function CaptionsLogger2() {
                this.time = null;
                this.verboseLevel = VerboseLevel.ERROR;
              }
              var _proto = CaptionsLogger2.prototype;
              _proto.log = function log(severity, msg) {
                if (this.verboseLevel >= severity) {
                  _utils_logger__WEBPACK_IMPORTED_MODULE_0__["logger"].log(this.time + " [" + severity + "] " + msg);
                }
              };
              return CaptionsLogger2;
            }();
            var numArrayToHexArray = function numArrayToHexArray2(numArray) {
              var hexArray = [];
              for (var j3 = 0; j3 < numArray.length; j3++) {
                hexArray.push(numArray[j3].toString(16));
              }
              return hexArray;
            };
            var PenState = /* @__PURE__ */ function() {
              function PenState2(foreground, underline, italics, background, flash) {
                this.foreground = void 0;
                this.underline = void 0;
                this.italics = void 0;
                this.background = void 0;
                this.flash = void 0;
                this.foreground = foreground || "white";
                this.underline = underline || false;
                this.italics = italics || false;
                this.background = background || "black";
                this.flash = flash || false;
              }
              var _proto2 = PenState2.prototype;
              _proto2.reset = function reset() {
                this.foreground = "white";
                this.underline = false;
                this.italics = false;
                this.background = "black";
                this.flash = false;
              };
              _proto2.setStyles = function setStyles(styles) {
                var attribs = ["foreground", "underline", "italics", "background", "flash"];
                for (var i3 = 0; i3 < attribs.length; i3++) {
                  var style = attribs[i3];
                  if (styles.hasOwnProperty(style)) {
                    this[style] = styles[style];
                  }
                }
              };
              _proto2.isDefault = function isDefault() {
                return this.foreground === "white" && !this.underline && !this.italics && this.background === "black" && !this.flash;
              };
              _proto2.equals = function equals(other) {
                return this.foreground === other.foreground && this.underline === other.underline && this.italics === other.italics && this.background === other.background && this.flash === other.flash;
              };
              _proto2.copy = function copy(newPenState) {
                this.foreground = newPenState.foreground;
                this.underline = newPenState.underline;
                this.italics = newPenState.italics;
                this.background = newPenState.background;
                this.flash = newPenState.flash;
              };
              _proto2.toString = function toString() {
                return "color=" + this.foreground + ", underline=" + this.underline + ", italics=" + this.italics + ", background=" + this.background + ", flash=" + this.flash;
              };
              return PenState2;
            }();
            var StyledUnicodeChar = /* @__PURE__ */ function() {
              function StyledUnicodeChar2(uchar, foreground, underline, italics, background, flash) {
                this.uchar = void 0;
                this.penState = void 0;
                this.uchar = uchar || " ";
                this.penState = new PenState(foreground, underline, italics, background, flash);
              }
              var _proto3 = StyledUnicodeChar2.prototype;
              _proto3.reset = function reset() {
                this.uchar = " ";
                this.penState.reset();
              };
              _proto3.setChar = function setChar(uchar, newPenState) {
                this.uchar = uchar;
                this.penState.copy(newPenState);
              };
              _proto3.setPenState = function setPenState(newPenState) {
                this.penState.copy(newPenState);
              };
              _proto3.equals = function equals(other) {
                return this.uchar === other.uchar && this.penState.equals(other.penState);
              };
              _proto3.copy = function copy(newChar) {
                this.uchar = newChar.uchar;
                this.penState.copy(newChar.penState);
              };
              _proto3.isEmpty = function isEmpty() {
                return this.uchar === " " && this.penState.isDefault();
              };
              return StyledUnicodeChar2;
            }();
            var Row = /* @__PURE__ */ function() {
              function Row2(logger) {
                this.chars = void 0;
                this.pos = void 0;
                this.currPenState = void 0;
                this.cueStartTime = void 0;
                this.logger = void 0;
                this.chars = [];
                for (var i3 = 0; i3 < NR_COLS; i3++) {
                  this.chars.push(new StyledUnicodeChar());
                }
                this.logger = logger;
                this.pos = 0;
                this.currPenState = new PenState();
              }
              var _proto4 = Row2.prototype;
              _proto4.equals = function equals(other) {
                var equal = true;
                for (var i3 = 0; i3 < NR_COLS; i3++) {
                  if (!this.chars[i3].equals(other.chars[i3])) {
                    equal = false;
                    break;
                  }
                }
                return equal;
              };
              _proto4.copy = function copy(other) {
                for (var i3 = 0; i3 < NR_COLS; i3++) {
                  this.chars[i3].copy(other.chars[i3]);
                }
              };
              _proto4.isEmpty = function isEmpty() {
                var empty = true;
                for (var i3 = 0; i3 < NR_COLS; i3++) {
                  if (!this.chars[i3].isEmpty()) {
                    empty = false;
                    break;
                  }
                }
                return empty;
              };
              _proto4.setCursor = function setCursor(absPos) {
                if (this.pos !== absPos) {
                  this.pos = absPos;
                }
                if (this.pos < 0) {
                  this.logger.log(VerboseLevel.DEBUG, "Negative cursor position " + this.pos);
                  this.pos = 0;
                } else if (this.pos > NR_COLS) {
                  this.logger.log(VerboseLevel.DEBUG, "Too large cursor position " + this.pos);
                  this.pos = NR_COLS;
                }
              };
              _proto4.moveCursor = function moveCursor(relPos) {
                var newPos = this.pos + relPos;
                if (relPos > 1) {
                  for (var i3 = this.pos + 1; i3 < newPos + 1; i3++) {
                    this.chars[i3].setPenState(this.currPenState);
                  }
                }
                this.setCursor(newPos);
              };
              _proto4.backSpace = function backSpace() {
                this.moveCursor(-1);
                this.chars[this.pos].setChar(" ", this.currPenState);
              };
              _proto4.insertChar = function insertChar(_byte2) {
                if (_byte2 >= 144) {
                  this.backSpace();
                }
                var _char = getCharForByte(_byte2);
                if (this.pos >= NR_COLS) {
                  this.logger.log(VerboseLevel.ERROR, "Cannot insert " + _byte2.toString(16) + " (" + _char + ") at position " + this.pos + ". Skipping it!");
                  return;
                }
                this.chars[this.pos].setChar(_char, this.currPenState);
                this.moveCursor(1);
              };
              _proto4.clearFromPos = function clearFromPos(startPos) {
                var i3;
                for (i3 = startPos; i3 < NR_COLS; i3++) {
                  this.chars[i3].reset();
                }
              };
              _proto4.clear = function clear() {
                this.clearFromPos(0);
                this.pos = 0;
                this.currPenState.reset();
              };
              _proto4.clearToEndOfRow = function clearToEndOfRow() {
                this.clearFromPos(this.pos);
              };
              _proto4.getTextString = function getTextString() {
                var chars = [];
                var empty = true;
                for (var i3 = 0; i3 < NR_COLS; i3++) {
                  var _char2 = this.chars[i3].uchar;
                  if (_char2 !== " ") {
                    empty = false;
                  }
                  chars.push(_char2);
                }
                if (empty) {
                  return "";
                } else {
                  return chars.join("");
                }
              };
              _proto4.setPenStyles = function setPenStyles(styles) {
                this.currPenState.setStyles(styles);
                var currChar = this.chars[this.pos];
                currChar.setPenState(this.currPenState);
              };
              return Row2;
            }();
            var CaptionScreen = /* @__PURE__ */ function() {
              function CaptionScreen2(logger) {
                this.rows = void 0;
                this.currRow = void 0;
                this.nrRollUpRows = void 0;
                this.lastOutputScreen = void 0;
                this.logger = void 0;
                this.rows = [];
                for (var i3 = 0; i3 < NR_ROWS; i3++) {
                  this.rows.push(new Row(logger));
                }
                this.logger = logger;
                this.currRow = NR_ROWS - 1;
                this.nrRollUpRows = null;
                this.lastOutputScreen = null;
                this.reset();
              }
              var _proto5 = CaptionScreen2.prototype;
              _proto5.reset = function reset() {
                for (var i3 = 0; i3 < NR_ROWS; i3++) {
                  this.rows[i3].clear();
                }
                this.currRow = NR_ROWS - 1;
              };
              _proto5.equals = function equals(other) {
                var equal = true;
                for (var i3 = 0; i3 < NR_ROWS; i3++) {
                  if (!this.rows[i3].equals(other.rows[i3])) {
                    equal = false;
                    break;
                  }
                }
                return equal;
              };
              _proto5.copy = function copy(other) {
                for (var i3 = 0; i3 < NR_ROWS; i3++) {
                  this.rows[i3].copy(other.rows[i3]);
                }
              };
              _proto5.isEmpty = function isEmpty() {
                var empty = true;
                for (var i3 = 0; i3 < NR_ROWS; i3++) {
                  if (!this.rows[i3].isEmpty()) {
                    empty = false;
                    break;
                  }
                }
                return empty;
              };
              _proto5.backSpace = function backSpace() {
                var row = this.rows[this.currRow];
                row.backSpace();
              };
              _proto5.clearToEndOfRow = function clearToEndOfRow() {
                var row = this.rows[this.currRow];
                row.clearToEndOfRow();
              };
              _proto5.insertChar = function insertChar(_char3) {
                var row = this.rows[this.currRow];
                row.insertChar(_char3);
              };
              _proto5.setPen = function setPen(styles) {
                var row = this.rows[this.currRow];
                row.setPenStyles(styles);
              };
              _proto5.moveCursor = function moveCursor(relPos) {
                var row = this.rows[this.currRow];
                row.moveCursor(relPos);
              };
              _proto5.setCursor = function setCursor(absPos) {
                this.logger.log(VerboseLevel.INFO, "setCursor: " + absPos);
                var row = this.rows[this.currRow];
                row.setCursor(absPos);
              };
              _proto5.setPAC = function setPAC(pacData) {
                this.logger.log(VerboseLevel.INFO, "pacData = " + JSON.stringify(pacData));
                var newRow = pacData.row - 1;
                if (this.nrRollUpRows && newRow < this.nrRollUpRows - 1) {
                  newRow = this.nrRollUpRows - 1;
                }
                if (this.nrRollUpRows && this.currRow !== newRow) {
                  for (var i3 = 0; i3 < NR_ROWS; i3++) {
                    this.rows[i3].clear();
                  }
                  var topRowIndex = this.currRow + 1 - this.nrRollUpRows;
                  var lastOutputScreen = this.lastOutputScreen;
                  if (lastOutputScreen) {
                    var prevLineTime = lastOutputScreen.rows[topRowIndex].cueStartTime;
                    var time = this.logger.time;
                    if (prevLineTime && time !== null && prevLineTime < time) {
                      for (var _i = 0; _i < this.nrRollUpRows; _i++) {
                        this.rows[newRow - this.nrRollUpRows + _i + 1].copy(lastOutputScreen.rows[topRowIndex + _i]);
                      }
                    }
                  }
                }
                this.currRow = newRow;
                var row = this.rows[this.currRow];
                if (pacData.indent !== null) {
                  var indent = pacData.indent;
                  var prevPos = Math.max(indent - 1, 0);
                  row.setCursor(pacData.indent);
                  pacData.color = row.chars[prevPos].penState.foreground;
                }
                var styles = {
                  foreground: pacData.color,
                  underline: pacData.underline,
                  italics: pacData.italics,
                  background: "black",
                  flash: false
                };
                this.setPen(styles);
              };
              _proto5.setBkgData = function setBkgData(bkgData) {
                this.logger.log(VerboseLevel.INFO, "bkgData = " + JSON.stringify(bkgData));
                this.backSpace();
                this.setPen(bkgData);
                this.insertChar(32);
              };
              _proto5.setRollUpRows = function setRollUpRows(nrRows) {
                this.nrRollUpRows = nrRows;
              };
              _proto5.rollUp = function rollUp() {
                if (this.nrRollUpRows === null) {
                  this.logger.log(VerboseLevel.DEBUG, "roll_up but nrRollUpRows not set yet");
                  return;
                }
                this.logger.log(VerboseLevel.TEXT, this.getDisplayText());
                var topRowIndex = this.currRow + 1 - this.nrRollUpRows;
                var topRow = this.rows.splice(topRowIndex, 1)[0];
                topRow.clear();
                this.rows.splice(this.currRow, 0, topRow);
                this.logger.log(VerboseLevel.INFO, "Rolling up");
              };
              _proto5.getDisplayText = function getDisplayText(asOneRow) {
                asOneRow = asOneRow || false;
                var displayText = [];
                var text = "";
                var rowNr = -1;
                for (var i3 = 0; i3 < NR_ROWS; i3++) {
                  var rowText = this.rows[i3].getTextString();
                  if (rowText) {
                    rowNr = i3 + 1;
                    if (asOneRow) {
                      displayText.push("Row " + rowNr + ": '" + rowText + "'");
                    } else {
                      displayText.push(rowText.trim());
                    }
                  }
                }
                if (displayText.length > 0) {
                  if (asOneRow) {
                    text = "[" + displayText.join(" | ") + "]";
                  } else {
                    text = displayText.join("\n");
                  }
                }
                return text;
              };
              _proto5.getTextAndFormat = function getTextAndFormat() {
                return this.rows;
              };
              return CaptionScreen2;
            }();
            var Cea608Channel = /* @__PURE__ */ function() {
              function Cea608Channel2(channelNumber, outputFilter, logger) {
                this.chNr = void 0;
                this.outputFilter = void 0;
                this.mode = void 0;
                this.verbose = void 0;
                this.displayedMemory = void 0;
                this.nonDisplayedMemory = void 0;
                this.lastOutputScreen = void 0;
                this.currRollUpRow = void 0;
                this.writeScreen = void 0;
                this.cueStartTime = void 0;
                this.logger = void 0;
                this.chNr = channelNumber;
                this.outputFilter = outputFilter;
                this.mode = null;
                this.verbose = 0;
                this.displayedMemory = new CaptionScreen(logger);
                this.nonDisplayedMemory = new CaptionScreen(logger);
                this.lastOutputScreen = new CaptionScreen(logger);
                this.currRollUpRow = this.displayedMemory.rows[NR_ROWS - 1];
                this.writeScreen = this.displayedMemory;
                this.mode = null;
                this.cueStartTime = null;
                this.logger = logger;
              }
              var _proto6 = Cea608Channel2.prototype;
              _proto6.reset = function reset() {
                this.mode = null;
                this.displayedMemory.reset();
                this.nonDisplayedMemory.reset();
                this.lastOutputScreen.reset();
                this.outputFilter.reset();
                this.currRollUpRow = this.displayedMemory.rows[NR_ROWS - 1];
                this.writeScreen = this.displayedMemory;
                this.mode = null;
                this.cueStartTime = null;
              };
              _proto6.getHandler = function getHandler() {
                return this.outputFilter;
              };
              _proto6.setHandler = function setHandler(newHandler) {
                this.outputFilter = newHandler;
              };
              _proto6.setPAC = function setPAC(pacData) {
                this.writeScreen.setPAC(pacData);
              };
              _proto6.setBkgData = function setBkgData(bkgData) {
                this.writeScreen.setBkgData(bkgData);
              };
              _proto6.setMode = function setMode(newMode) {
                if (newMode === this.mode) {
                  return;
                }
                this.mode = newMode;
                this.logger.log(VerboseLevel.INFO, "MODE=" + newMode);
                if (this.mode === "MODE_POP-ON") {
                  this.writeScreen = this.nonDisplayedMemory;
                } else {
                  this.writeScreen = this.displayedMemory;
                  this.writeScreen.reset();
                }
                if (this.mode !== "MODE_ROLL-UP") {
                  this.displayedMemory.nrRollUpRows = null;
                  this.nonDisplayedMemory.nrRollUpRows = null;
                }
                this.mode = newMode;
              };
              _proto6.insertChars = function insertChars(chars) {
                for (var i3 = 0; i3 < chars.length; i3++) {
                  this.writeScreen.insertChar(chars[i3]);
                }
                var screen = this.writeScreen === this.displayedMemory ? "DISP" : "NON_DISP";
                this.logger.log(VerboseLevel.INFO, screen + ": " + this.writeScreen.getDisplayText(true));
                if (this.mode === "MODE_PAINT-ON" || this.mode === "MODE_ROLL-UP") {
                  this.logger.log(VerboseLevel.TEXT, "DISPLAYED: " + this.displayedMemory.getDisplayText(true));
                  this.outputDataUpdate();
                }
              };
              _proto6.ccRCL = function ccRCL() {
                this.logger.log(VerboseLevel.INFO, "RCL - Resume Caption Loading");
                this.setMode("MODE_POP-ON");
              };
              _proto6.ccBS = function ccBS() {
                this.logger.log(VerboseLevel.INFO, "BS - BackSpace");
                if (this.mode === "MODE_TEXT") {
                  return;
                }
                this.writeScreen.backSpace();
                if (this.writeScreen === this.displayedMemory) {
                  this.outputDataUpdate();
                }
              };
              _proto6.ccAOF = function ccAOF() {
              };
              _proto6.ccAON = function ccAON() {
              };
              _proto6.ccDER = function ccDER() {
                this.logger.log(VerboseLevel.INFO, "DER- Delete to End of Row");
                this.writeScreen.clearToEndOfRow();
                this.outputDataUpdate();
              };
              _proto6.ccRU = function ccRU(nrRows) {
                this.logger.log(VerboseLevel.INFO, "RU(" + nrRows + ") - Roll Up");
                this.writeScreen = this.displayedMemory;
                this.setMode("MODE_ROLL-UP");
                this.writeScreen.setRollUpRows(nrRows);
              };
              _proto6.ccFON = function ccFON() {
                this.logger.log(VerboseLevel.INFO, "FON - Flash On");
                this.writeScreen.setPen({
                  flash: true
                });
              };
              _proto6.ccRDC = function ccRDC() {
                this.logger.log(VerboseLevel.INFO, "RDC - Resume Direct Captioning");
                this.setMode("MODE_PAINT-ON");
              };
              _proto6.ccTR = function ccTR() {
                this.logger.log(VerboseLevel.INFO, "TR");
                this.setMode("MODE_TEXT");
              };
              _proto6.ccRTD = function ccRTD() {
                this.logger.log(VerboseLevel.INFO, "RTD");
                this.setMode("MODE_TEXT");
              };
              _proto6.ccEDM = function ccEDM() {
                this.logger.log(VerboseLevel.INFO, "EDM - Erase Displayed Memory");
                this.displayedMemory.reset();
                this.outputDataUpdate(true);
              };
              _proto6.ccCR = function ccCR() {
                this.logger.log(VerboseLevel.INFO, "CR - Carriage Return");
                this.writeScreen.rollUp();
                this.outputDataUpdate(true);
              };
              _proto6.ccENM = function ccENM() {
                this.logger.log(VerboseLevel.INFO, "ENM - Erase Non-displayed Memory");
                this.nonDisplayedMemory.reset();
              };
              _proto6.ccEOC = function ccEOC() {
                this.logger.log(VerboseLevel.INFO, "EOC - End Of Caption");
                if (this.mode === "MODE_POP-ON") {
                  var tmp = this.displayedMemory;
                  this.displayedMemory = this.nonDisplayedMemory;
                  this.nonDisplayedMemory = tmp;
                  this.writeScreen = this.nonDisplayedMemory;
                  this.logger.log(VerboseLevel.TEXT, "DISP: " + this.displayedMemory.getDisplayText());
                }
                this.outputDataUpdate(true);
              };
              _proto6.ccTO = function ccTO(nrCols) {
                this.logger.log(VerboseLevel.INFO, "TO(" + nrCols + ") - Tab Offset");
                this.writeScreen.moveCursor(nrCols);
              };
              _proto6.ccMIDROW = function ccMIDROW(secondByte) {
                var styles = {
                  flash: false
                };
                styles.underline = secondByte % 2 === 1;
                styles.italics = secondByte >= 46;
                if (!styles.italics) {
                  var colorIndex = Math.floor(secondByte / 2) - 16;
                  var colors = ["white", "green", "blue", "cyan", "red", "yellow", "magenta"];
                  styles.foreground = colors[colorIndex];
                } else {
                  styles.foreground = "white";
                }
                this.logger.log(VerboseLevel.INFO, "MIDROW: " + JSON.stringify(styles));
                this.writeScreen.setPen(styles);
              };
              _proto6.outputDataUpdate = function outputDataUpdate(dispatch) {
                if (dispatch === void 0) {
                  dispatch = false;
                }
                var time = this.logger.time;
                if (time === null) {
                  return;
                }
                if (this.outputFilter) {
                  if (this.cueStartTime === null && !this.displayedMemory.isEmpty()) {
                    this.cueStartTime = time;
                  } else {
                    if (!this.displayedMemory.equals(this.lastOutputScreen)) {
                      this.outputFilter.newCue(this.cueStartTime, time, this.lastOutputScreen);
                      if (dispatch && this.outputFilter.dispatchCue) {
                        this.outputFilter.dispatchCue();
                      }
                      this.cueStartTime = this.displayedMemory.isEmpty() ? null : time;
                    }
                  }
                  this.lastOutputScreen.copy(this.displayedMemory);
                }
              };
              _proto6.cueSplitAtTime = function cueSplitAtTime(t4) {
                if (this.outputFilter) {
                  if (!this.displayedMemory.isEmpty()) {
                    if (this.outputFilter.newCue) {
                      this.outputFilter.newCue(this.cueStartTime, t4, this.displayedMemory);
                    }
                    this.cueStartTime = t4;
                  }
                }
              };
              return Cea608Channel2;
            }();
            var Cea608Parser = /* @__PURE__ */ function() {
              function Cea608Parser2(field, out1, out2) {
                this.channels = void 0;
                this.currentChannel = 0;
                this.cmdHistory = void 0;
                this.logger = void 0;
                var logger = new CaptionsLogger();
                this.channels = [null, new Cea608Channel(field, out1, logger), new Cea608Channel(field + 1, out2, logger)];
                this.cmdHistory = createCmdHistory();
                this.logger = logger;
              }
              var _proto7 = Cea608Parser2.prototype;
              _proto7.getHandler = function getHandler(channel) {
                return this.channels[channel].getHandler();
              };
              _proto7.setHandler = function setHandler(channel, newHandler) {
                this.channels[channel].setHandler(newHandler);
              };
              _proto7.addData = function addData(time, byteList) {
                var cmdFound;
                var a3;
                var b3;
                var charsFound = false;
                this.logger.time = time;
                for (var i3 = 0; i3 < byteList.length; i3 += 2) {
                  a3 = byteList[i3] & 127;
                  b3 = byteList[i3 + 1] & 127;
                  if (a3 === 0 && b3 === 0) {
                    continue;
                  } else {
                    this.logger.log(VerboseLevel.DATA, "[" + numArrayToHexArray([byteList[i3], byteList[i3 + 1]]) + "] -> (" + numArrayToHexArray([a3, b3]) + ")");
                  }
                  cmdFound = this.parseCmd(a3, b3);
                  if (!cmdFound) {
                    cmdFound = this.parseMidrow(a3, b3);
                  }
                  if (!cmdFound) {
                    cmdFound = this.parsePAC(a3, b3);
                  }
                  if (!cmdFound) {
                    cmdFound = this.parseBackgroundAttributes(a3, b3);
                  }
                  if (!cmdFound) {
                    charsFound = this.parseChars(a3, b3);
                    if (charsFound) {
                      var currChNr = this.currentChannel;
                      if (currChNr && currChNr > 0) {
                        var channel = this.channels[currChNr];
                        channel.insertChars(charsFound);
                      } else {
                        this.logger.log(VerboseLevel.WARNING, "No channel found yet. TEXT-MODE?");
                      }
                    }
                  }
                  if (!cmdFound && !charsFound) {
                    this.logger.log(VerboseLevel.WARNING, "Couldn't parse cleaned data " + numArrayToHexArray([a3, b3]) + " orig: " + numArrayToHexArray([byteList[i3], byteList[i3 + 1]]));
                  }
                }
              };
              _proto7.parseCmd = function parseCmd(a3, b3) {
                var cmdHistory = this.cmdHistory;
                var cond1 = (a3 === 20 || a3 === 28 || a3 === 21 || a3 === 29) && b3 >= 32 && b3 <= 47;
                var cond2 = (a3 === 23 || a3 === 31) && b3 >= 33 && b3 <= 35;
                if (!(cond1 || cond2)) {
                  return false;
                }
                if (hasCmdRepeated(a3, b3, cmdHistory)) {
                  setLastCmd(null, null, cmdHistory);
                  this.logger.log(VerboseLevel.DEBUG, "Repeated command (" + numArrayToHexArray([a3, b3]) + ") is dropped");
                  return true;
                }
                var chNr = a3 === 20 || a3 === 21 || a3 === 23 ? 1 : 2;
                var channel = this.channels[chNr];
                if (a3 === 20 || a3 === 21 || a3 === 28 || a3 === 29) {
                  if (b3 === 32) {
                    channel.ccRCL();
                  } else if (b3 === 33) {
                    channel.ccBS();
                  } else if (b3 === 34) {
                    channel.ccAOF();
                  } else if (b3 === 35) {
                    channel.ccAON();
                  } else if (b3 === 36) {
                    channel.ccDER();
                  } else if (b3 === 37) {
                    channel.ccRU(2);
                  } else if (b3 === 38) {
                    channel.ccRU(3);
                  } else if (b3 === 39) {
                    channel.ccRU(4);
                  } else if (b3 === 40) {
                    channel.ccFON();
                  } else if (b3 === 41) {
                    channel.ccRDC();
                  } else if (b3 === 42) {
                    channel.ccTR();
                  } else if (b3 === 43) {
                    channel.ccRTD();
                  } else if (b3 === 44) {
                    channel.ccEDM();
                  } else if (b3 === 45) {
                    channel.ccCR();
                  } else if (b3 === 46) {
                    channel.ccENM();
                  } else if (b3 === 47) {
                    channel.ccEOC();
                  }
                } else {
                  channel.ccTO(b3 - 32);
                }
                setLastCmd(a3, b3, cmdHistory);
                this.currentChannel = chNr;
                return true;
              };
              _proto7.parseMidrow = function parseMidrow(a3, b3) {
                var chNr = 0;
                if ((a3 === 17 || a3 === 25) && b3 >= 32 && b3 <= 47) {
                  if (a3 === 17) {
                    chNr = 1;
                  } else {
                    chNr = 2;
                  }
                  if (chNr !== this.currentChannel) {
                    this.logger.log(VerboseLevel.ERROR, "Mismatch channel in midrow parsing");
                    return false;
                  }
                  var channel = this.channels[chNr];
                  if (!channel) {
                    return false;
                  }
                  channel.ccMIDROW(b3);
                  this.logger.log(VerboseLevel.DEBUG, "MIDROW (" + numArrayToHexArray([a3, b3]) + ")");
                  return true;
                }
                return false;
              };
              _proto7.parsePAC = function parsePAC(a3, b3) {
                var row;
                var cmdHistory = this.cmdHistory;
                var case1 = (a3 >= 17 && a3 <= 23 || a3 >= 25 && a3 <= 31) && b3 >= 64 && b3 <= 127;
                var case2 = (a3 === 16 || a3 === 24) && b3 >= 64 && b3 <= 95;
                if (!(case1 || case2)) {
                  return false;
                }
                if (hasCmdRepeated(a3, b3, cmdHistory)) {
                  setLastCmd(null, null, cmdHistory);
                  return true;
                }
                var chNr = a3 <= 23 ? 1 : 2;
                if (b3 >= 64 && b3 <= 95) {
                  row = chNr === 1 ? rowsLowCh1[a3] : rowsLowCh2[a3];
                } else {
                  row = chNr === 1 ? rowsHighCh1[a3] : rowsHighCh2[a3];
                }
                var channel = this.channels[chNr];
                if (!channel) {
                  return false;
                }
                channel.setPAC(this.interpretPAC(row, b3));
                setLastCmd(a3, b3, cmdHistory);
                this.currentChannel = chNr;
                return true;
              };
              _proto7.interpretPAC = function interpretPAC(row, _byte3) {
                var pacIndex;
                var pacData = {
                  color: null,
                  italics: false,
                  indent: null,
                  underline: false,
                  row
                };
                if (_byte3 > 95) {
                  pacIndex = _byte3 - 96;
                } else {
                  pacIndex = _byte3 - 64;
                }
                pacData.underline = (pacIndex & 1) === 1;
                if (pacIndex <= 13) {
                  pacData.color = ["white", "green", "blue", "cyan", "red", "yellow", "magenta", "white"][Math.floor(pacIndex / 2)];
                } else if (pacIndex <= 15) {
                  pacData.italics = true;
                  pacData.color = "white";
                } else {
                  pacData.indent = Math.floor((pacIndex - 16) / 2) * 4;
                }
                return pacData;
              };
              _proto7.parseChars = function parseChars(a3, b3) {
                var channelNr;
                var charCodes = null;
                var charCode1 = null;
                if (a3 >= 25) {
                  channelNr = 2;
                  charCode1 = a3 - 8;
                } else {
                  channelNr = 1;
                  charCode1 = a3;
                }
                if (charCode1 >= 17 && charCode1 <= 19) {
                  var oneCode;
                  if (charCode1 === 17) {
                    oneCode = b3 + 80;
                  } else if (charCode1 === 18) {
                    oneCode = b3 + 112;
                  } else {
                    oneCode = b3 + 144;
                  }
                  this.logger.log(VerboseLevel.INFO, "Special char '" + getCharForByte(oneCode) + "' in channel " + channelNr);
                  charCodes = [oneCode];
                } else if (a3 >= 32 && a3 <= 127) {
                  charCodes = b3 === 0 ? [a3] : [a3, b3];
                }
                if (charCodes) {
                  var hexCodes = numArrayToHexArray(charCodes);
                  this.logger.log(VerboseLevel.DEBUG, "Char codes =  " + hexCodes.join(","));
                  setLastCmd(a3, b3, this.cmdHistory);
                }
                return charCodes;
              };
              _proto7.parseBackgroundAttributes = function parseBackgroundAttributes(a3, b3) {
                var case1 = (a3 === 16 || a3 === 24) && b3 >= 32 && b3 <= 47;
                var case2 = (a3 === 23 || a3 === 31) && b3 >= 45 && b3 <= 47;
                if (!(case1 || case2)) {
                  return false;
                }
                var index;
                var bkgData = {};
                if (a3 === 16 || a3 === 24) {
                  index = Math.floor((b3 - 32) / 2);
                  bkgData.background = backgroundColors[index];
                  if (b3 % 2 === 1) {
                    bkgData.background = bkgData.background + "_semi";
                  }
                } else if (b3 === 45) {
                  bkgData.background = "transparent";
                } else {
                  bkgData.foreground = "black";
                  if (b3 === 47) {
                    bkgData.underline = true;
                  }
                }
                var chNr = a3 <= 23 ? 1 : 2;
                var channel = this.channels[chNr];
                channel.setBkgData(bkgData);
                setLastCmd(a3, b3, this.cmdHistory);
                return true;
              };
              _proto7.reset = function reset() {
                for (var i3 = 0; i3 < Object.keys(this.channels).length; i3++) {
                  var channel = this.channels[i3];
                  if (channel) {
                    channel.reset();
                  }
                }
                this.cmdHistory = createCmdHistory();
              };
              _proto7.cueSplitAtTime = function cueSplitAtTime(t4) {
                for (var i3 = 0; i3 < this.channels.length; i3++) {
                  var channel = this.channels[i3];
                  if (channel) {
                    channel.cueSplitAtTime(t4);
                  }
                }
              };
              return Cea608Parser2;
            }();
            function setLastCmd(a3, b3, cmdHistory) {
              cmdHistory.a = a3;
              cmdHistory.b = b3;
            }
            function hasCmdRepeated(a3, b3, cmdHistory) {
              return cmdHistory.a === a3 && cmdHistory.b === b3;
            }
            function createCmdHistory() {
              return {
                a: null,
                b: null
              };
            }
            __webpack_exports__["default"] = Cea608Parser;
          },
          "./src/utils/codecs.ts": function(module2, __webpack_exports__, __webpack_require__) {
            "use strict";
            __webpack_require__.r(__webpack_exports__);
            __webpack_require__.d(__webpack_exports__, "isCodecType", function() {
              return isCodecType;
            });
            __webpack_require__.d(__webpack_exports__, "isCodecSupportedInMp4", function() {
              return isCodecSupportedInMp4;
            });
            var sampleEntryCodesISO = {
              audio: {
                a3ds: true,
                "ac-3": true,
                "ac-4": true,
                alac: true,
                alaw: true,
                dra1: true,
                "dts+": true,
                "dts-": true,
                dtsc: true,
                dtse: true,
                dtsh: true,
                "ec-3": true,
                enca: true,
                g719: true,
                g726: true,
                m4ae: true,
                mha1: true,
                mha2: true,
                mhm1: true,
                mhm2: true,
                mlpa: true,
                mp4a: true,
                "raw ": true,
                Opus: true,
                samr: true,
                sawb: true,
                sawp: true,
                sevc: true,
                sqcp: true,
                ssmv: true,
                twos: true,
                ulaw: true
              },
              video: {
                avc1: true,
                avc2: true,
                avc3: true,
                avc4: true,
                avcp: true,
                av01: true,
                drac: true,
                dvav: true,
                dvhe: true,
                encv: true,
                hev1: true,
                hvc1: true,
                mjp2: true,
                mp4v: true,
                mvc1: true,
                mvc2: true,
                mvc3: true,
                mvc4: true,
                resv: true,
                rv60: true,
                s263: true,
                svc1: true,
                svc2: true,
                "vc-1": true,
                vp08: true,
                vp09: true
              },
              text: {
                stpp: true,
                wvtt: true
              }
            };
            function isCodecType(codec, type) {
              var typeCodes = sampleEntryCodesISO[type];
              return !!typeCodes && typeCodes[codec.slice(0, 4)] === true;
            }
            function isCodecSupportedInMp4(codec, type) {
              return MediaSource.isTypeSupported((type || "video") + '/mp4;codecs="' + codec + '"');
            }
          },
          "./src/utils/cues.ts": function(module2, __webpack_exports__, __webpack_require__) {
            "use strict";
            __webpack_require__.r(__webpack_exports__);
            var _vttparser__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("./src/utils/vttparser.ts");
            var _webvtt_parser__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("./src/utils/webvtt-parser.ts");
            var _texttrack_utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__("./src/utils/texttrack-utils.ts");
            var WHITESPACE_CHAR = /\s/;
            var Cues = {
              newCue: function newCue(track, startTime, endTime, captionScreen) {
                var result = [];
                var row;
                var cue;
                var indenting;
                var indent;
                var text;
                var Cue2 = self.VTTCue || self.TextTrackCue;
                for (var r3 = 0; r3 < captionScreen.rows.length; r3++) {
                  row = captionScreen.rows[r3];
                  indenting = true;
                  indent = 0;
                  text = "";
                  if (!row.isEmpty()) {
                    for (var c4 = 0; c4 < row.chars.length; c4++) {
                      if (WHITESPACE_CHAR.test(row.chars[c4].uchar) && indenting) {
                        indent++;
                      } else {
                        text += row.chars[c4].uchar;
                        indenting = false;
                      }
                    }
                    row.cueStartTime = startTime;
                    if (startTime === endTime) {
                      endTime += 1e-4;
                    }
                    if (indent >= 16) {
                      indent--;
                    } else {
                      indent++;
                    }
                    var cueText = Object(_vttparser__WEBPACK_IMPORTED_MODULE_0__["fixLineBreaks"])(text.trim());
                    var id = Object(_webvtt_parser__WEBPACK_IMPORTED_MODULE_1__["generateCueId"])(startTime, endTime, cueText);
                    if (!track || !track.cues || !track.cues.getCueById(id)) {
                      cue = new Cue2(startTime, endTime, cueText);
                      cue.id = id;
                      cue.line = r3 + 1;
                      cue.align = "left";
                      cue.position = 10 + Math.min(80, Math.floor(indent * 8 / 32) * 10);
                      result.push(cue);
                    }
                  }
                }
                if (track && result.length) {
                  result.sort(function(cueA, cueB) {
                    if (cueA.line === "auto" || cueB.line === "auto") {
                      return 0;
                    }
                    if (cueA.line > 8 && cueB.line > 8) {
                      return cueB.line - cueA.line;
                    }
                    return cueA.line - cueB.line;
                  });
                  result.forEach(function(cue2) {
                    return Object(_texttrack_utils__WEBPACK_IMPORTED_MODULE_2__["addCueToTrack"])(track, cue2);
                  });
                }
                return result;
              }
            };
            __webpack_exports__["default"] = Cues;
          },
          "./src/utils/discontinuities.ts": function(module2, __webpack_exports__, __webpack_require__) {
            "use strict";
            __webpack_require__.r(__webpack_exports__);
            __webpack_require__.d(__webpack_exports__, "findFirstFragWithCC", function() {
              return findFirstFragWithCC;
            });
            __webpack_require__.d(__webpack_exports__, "shouldAlignOnDiscontinuities", function() {
              return shouldAlignOnDiscontinuities;
            });
            __webpack_require__.d(__webpack_exports__, "findDiscontinuousReferenceFrag", function() {
              return findDiscontinuousReferenceFrag;
            });
            __webpack_require__.d(__webpack_exports__, "adjustSlidingStart", function() {
              return adjustSlidingStart;
            });
            __webpack_require__.d(__webpack_exports__, "alignStream", function() {
              return alignStream;
            });
            __webpack_require__.d(__webpack_exports__, "alignPDT", function() {
              return alignPDT;
            });
            __webpack_require__.d(__webpack_exports__, "alignFragmentByPDTDelta", function() {
              return alignFragmentByPDTDelta;
            });
            __webpack_require__.d(__webpack_exports__, "alignMediaPlaylistByPDT", function() {
              return alignMediaPlaylistByPDT;
            });
            var _home_runner_work_hls_js_hls_js_src_polyfills_number__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("./src/polyfills/number.ts");
            var _logger__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("./src/utils/logger.ts");
            var _controller_level_helper__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__("./src/controller/level-helper.ts");
            function findFirstFragWithCC(fragments, cc) {
              var firstFrag = null;
              for (var i3 = 0, len = fragments.length; i3 < len; i3++) {
                var currentFrag = fragments[i3];
                if (currentFrag && currentFrag.cc === cc) {
                  firstFrag = currentFrag;
                  break;
                }
              }
              return firstFrag;
            }
            function shouldAlignOnDiscontinuities(lastFrag, lastLevel, details) {
              if (lastLevel.details) {
                if (details.endCC > details.startCC || lastFrag && lastFrag.cc < details.startCC) {
                  return true;
                }
              }
              return false;
            }
            function findDiscontinuousReferenceFrag(prevDetails, curDetails) {
              var prevFrags = prevDetails.fragments;
              var curFrags = curDetails.fragments;
              if (!curFrags.length || !prevFrags.length) {
                _logger__WEBPACK_IMPORTED_MODULE_1__["logger"].log("No fragments to align");
                return;
              }
              var prevStartFrag = findFirstFragWithCC(prevFrags, curFrags[0].cc);
              if (!prevStartFrag || prevStartFrag && !prevStartFrag.startPTS) {
                _logger__WEBPACK_IMPORTED_MODULE_1__["logger"].log("No frag in previous level to align on");
                return;
              }
              return prevStartFrag;
            }
            function adjustFragmentStart(frag, sliding) {
              if (frag) {
                var start = frag.start + sliding;
                frag.start = frag.startPTS = start;
                frag.endPTS = start + frag.duration;
              }
            }
            function adjustSlidingStart(sliding, details) {
              var fragments = details.fragments;
              for (var i3 = 0, len = fragments.length; i3 < len; i3++) {
                adjustFragmentStart(fragments[i3], sliding);
              }
              if (details.fragmentHint) {
                adjustFragmentStart(details.fragmentHint, sliding);
              }
              details.alignedSliding = true;
            }
            function alignStream(lastFrag, lastLevel, details) {
              if (!lastLevel) {
                return;
              }
              alignDiscontinuities(lastFrag, details, lastLevel);
              if (!details.alignedSliding && lastLevel.details) {
                alignPDT(details, lastLevel.details);
              }
              if (!details.alignedSliding && lastLevel.details && !details.skippedSegments) {
                Object(_controller_level_helper__WEBPACK_IMPORTED_MODULE_2__["adjustSliding"])(lastLevel.details, details);
              }
            }
            function alignDiscontinuities(lastFrag, details, lastLevel) {
              if (shouldAlignOnDiscontinuities(lastFrag, lastLevel, details)) {
                var referenceFrag = findDiscontinuousReferenceFrag(lastLevel.details, details);
                if (referenceFrag && Object(_home_runner_work_hls_js_hls_js_src_polyfills_number__WEBPACK_IMPORTED_MODULE_0__["isFiniteNumber"])(referenceFrag.start)) {
                  _logger__WEBPACK_IMPORTED_MODULE_1__["logger"].log("Adjusting PTS using last level due to CC increase within current level " + details.url);
                  adjustSlidingStart(referenceFrag.start, details);
                }
              }
            }
            function alignPDT(details, lastDetails) {
              if (!lastDetails.fragments.length || !details.hasProgramDateTime || !lastDetails.hasProgramDateTime) {
                return;
              }
              var lastPDT = lastDetails.fragments[0].programDateTime;
              var newPDT = details.fragments[0].programDateTime;
              var sliding = (newPDT - lastPDT) / 1e3 + lastDetails.fragments[0].start;
              if (sliding && Object(_home_runner_work_hls_js_hls_js_src_polyfills_number__WEBPACK_IMPORTED_MODULE_0__["isFiniteNumber"])(sliding)) {
                _logger__WEBPACK_IMPORTED_MODULE_1__["logger"].log("Adjusting PTS using programDateTime delta " + (newPDT - lastPDT) + "ms, sliding:" + sliding.toFixed(3) + " " + details.url + " ");
                adjustSlidingStart(sliding, details);
              }
            }
            function alignFragmentByPDTDelta(frag, delta) {
              var programDateTime = frag.programDateTime;
              if (!programDateTime)
                return;
              var start = (programDateTime - delta) / 1e3;
              frag.start = frag.startPTS = start;
              frag.endPTS = start + frag.duration;
            }
            function alignMediaPlaylistByPDT(details, refDetails) {
              if (!refDetails.fragments.length || !details.hasProgramDateTime || !refDetails.hasProgramDateTime) {
                return;
              }
              var refPDT = refDetails.fragments[0].programDateTime;
              var refStart = refDetails.fragments[0].start;
              var delta = refPDT - refStart * 1e3;
              details.fragments.forEach(function(frag) {
                alignFragmentByPDTDelta(frag, delta);
              });
              if (details.fragmentHint) {
                alignFragmentByPDTDelta(details.fragmentHint, delta);
              }
              details.alignedSliding = true;
            }
          },
          "./src/utils/ewma-bandwidth-estimator.ts": function(module2, __webpack_exports__, __webpack_require__) {
            "use strict";
            __webpack_require__.r(__webpack_exports__);
            var _utils_ewma__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("./src/utils/ewma.ts");
            var EwmaBandWidthEstimator = /* @__PURE__ */ function() {
              function EwmaBandWidthEstimator2(slow, fast, defaultEstimate) {
                this.defaultEstimate_ = void 0;
                this.minWeight_ = void 0;
                this.minDelayMs_ = void 0;
                this.slow_ = void 0;
                this.fast_ = void 0;
                this.defaultEstimate_ = defaultEstimate;
                this.minWeight_ = 1e-3;
                this.minDelayMs_ = 50;
                this.slow_ = new _utils_ewma__WEBPACK_IMPORTED_MODULE_0__["default"](slow);
                this.fast_ = new _utils_ewma__WEBPACK_IMPORTED_MODULE_0__["default"](fast);
              }
              var _proto = EwmaBandWidthEstimator2.prototype;
              _proto.update = function update(slow, fast) {
                var slow_ = this.slow_, fast_ = this.fast_;
                if (this.slow_.halfLife !== slow) {
                  this.slow_ = new _utils_ewma__WEBPACK_IMPORTED_MODULE_0__["default"](slow, slow_.getEstimate(), slow_.getTotalWeight());
                }
                if (this.fast_.halfLife !== fast) {
                  this.fast_ = new _utils_ewma__WEBPACK_IMPORTED_MODULE_0__["default"](fast, fast_.getEstimate(), fast_.getTotalWeight());
                }
              };
              _proto.sample = function sample(durationMs, numBytes) {
                durationMs = Math.max(durationMs, this.minDelayMs_);
                var numBits = 8 * numBytes;
                var durationS = durationMs / 1e3;
                var bandwidthInBps = numBits / durationS;
                this.fast_.sample(durationS, bandwidthInBps);
                this.slow_.sample(durationS, bandwidthInBps);
              };
              _proto.canEstimate = function canEstimate() {
                var fast = this.fast_;
                return fast && fast.getTotalWeight() >= this.minWeight_;
              };
              _proto.getEstimate = function getEstimate() {
                if (this.canEstimate()) {
                  return Math.min(this.fast_.getEstimate(), this.slow_.getEstimate());
                } else {
                  return this.defaultEstimate_;
                }
              };
              _proto.destroy = function destroy() {
              };
              return EwmaBandWidthEstimator2;
            }();
            __webpack_exports__["default"] = EwmaBandWidthEstimator;
          },
          "./src/utils/ewma.ts": function(module2, __webpack_exports__, __webpack_require__) {
            "use strict";
            __webpack_require__.r(__webpack_exports__);
            var EWMA = /* @__PURE__ */ function() {
              function EWMA2(halfLife, estimate, weight) {
                if (estimate === void 0) {
                  estimate = 0;
                }
                if (weight === void 0) {
                  weight = 0;
                }
                this.halfLife = void 0;
                this.alpha_ = void 0;
                this.estimate_ = void 0;
                this.totalWeight_ = void 0;
                this.halfLife = halfLife;
                this.alpha_ = halfLife ? Math.exp(Math.log(0.5) / halfLife) : 0;
                this.estimate_ = estimate;
                this.totalWeight_ = weight;
              }
              var _proto = EWMA2.prototype;
              _proto.sample = function sample(weight, value) {
                var adjAlpha = Math.pow(this.alpha_, weight);
                this.estimate_ = value * (1 - adjAlpha) + adjAlpha * this.estimate_;
                this.totalWeight_ += weight;
              };
              _proto.getTotalWeight = function getTotalWeight() {
                return this.totalWeight_;
              };
              _proto.getEstimate = function getEstimate() {
                if (this.alpha_) {
                  var zeroFactor = 1 - Math.pow(this.alpha_, this.totalWeight_);
                  if (zeroFactor) {
                    return this.estimate_ / zeroFactor;
                  }
                }
                return this.estimate_;
              };
              return EWMA2;
            }();
            __webpack_exports__["default"] = EWMA;
          },
          "./src/utils/fetch-loader.ts": function(module2, __webpack_exports__, __webpack_require__) {
            "use strict";
            __webpack_require__.r(__webpack_exports__);
            __webpack_require__.d(__webpack_exports__, "fetchSupported", function() {
              return fetchSupported;
            });
            var _home_runner_work_hls_js_hls_js_src_polyfills_number__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("./src/polyfills/number.ts");
            var _loader_load_stats__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("./src/loader/load-stats.ts");
            var _demux_chunk_cache__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__("./src/demux/chunk-cache.ts");
            function _inheritsLoose(subClass, superClass) {
              subClass.prototype = Object.create(superClass.prototype);
              subClass.prototype.constructor = subClass;
              _setPrototypeOf(subClass, superClass);
            }
            function _wrapNativeSuper(Class) {
              var _cache = typeof Map === "function" ? /* @__PURE__ */ new Map() : void 0;
              _wrapNativeSuper = function _wrapNativeSuper2(Class2) {
                if (Class2 === null || !_isNativeFunction(Class2))
                  return Class2;
                if (typeof Class2 !== "function") {
                  throw new TypeError("Super expression must either be null or a function");
                }
                if (typeof _cache !== "undefined") {
                  if (_cache.has(Class2))
                    return _cache.get(Class2);
                  _cache.set(Class2, Wrapper7);
                }
                function Wrapper7() {
                  return _construct(Class2, arguments, _getPrototypeOf(this).constructor);
                }
                Wrapper7.prototype = Object.create(Class2.prototype, { constructor: { value: Wrapper7, enumerable: false, writable: true, configurable: true } });
                return _setPrototypeOf(Wrapper7, Class2);
              };
              return _wrapNativeSuper(Class);
            }
            function _construct(Parent, args, Class) {
              if (_isNativeReflectConstruct()) {
                _construct = Reflect.construct;
              } else {
                _construct = function _construct2(Parent2, args2, Class2) {
                  var a3 = [null];
                  a3.push.apply(a3, args2);
                  var Constructor = Function.bind.apply(Parent2, a3);
                  var instance = new Constructor();
                  if (Class2)
                    _setPrototypeOf(instance, Class2.prototype);
                  return instance;
                };
              }
              return _construct.apply(null, arguments);
            }
            function _isNativeReflectConstruct() {
              if (typeof Reflect === "undefined" || !Reflect.construct)
                return false;
              if (Reflect.construct.sham)
                return false;
              if (typeof Proxy === "function")
                return true;
              try {
                Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
                }));
                return true;
              } catch (e4) {
                return false;
              }
            }
            function _isNativeFunction(fn) {
              return Function.toString.call(fn).indexOf("[native code]") !== -1;
            }
            function _setPrototypeOf(o3, p5) {
              _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf2(o4, p6) {
                o4.__proto__ = p6;
                return o4;
              };
              return _setPrototypeOf(o3, p5);
            }
            function _getPrototypeOf(o3) {
              _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf2(o4) {
                return o4.__proto__ || Object.getPrototypeOf(o4);
              };
              return _getPrototypeOf(o3);
            }
            function _extends2() {
              _extends2 = Object.assign || function(target) {
                for (var i3 = 1; i3 < arguments.length; i3++) {
                  var source = arguments[i3];
                  for (var key in source) {
                    if (Object.prototype.hasOwnProperty.call(source, key)) {
                      target[key] = source[key];
                    }
                  }
                }
                return target;
              };
              return _extends2.apply(this, arguments);
            }
            function fetchSupported() {
              if (self.fetch && self.AbortController && self.ReadableStream && self.Request) {
                try {
                  new self.ReadableStream({});
                  return true;
                } catch (e4) {
                }
              }
              return false;
            }
            var FetchLoader = /* @__PURE__ */ function() {
              function FetchLoader2(config2) {
                this.fetchSetup = void 0;
                this.requestTimeout = void 0;
                this.request = void 0;
                this.response = void 0;
                this.controller = void 0;
                this.context = void 0;
                this.config = null;
                this.callbacks = null;
                this.stats = void 0;
                this.loader = null;
                this.fetchSetup = config2.fetchSetup || getRequest;
                this.controller = new self.AbortController();
                this.stats = new _loader_load_stats__WEBPACK_IMPORTED_MODULE_1__["LoadStats"]();
              }
              var _proto = FetchLoader2.prototype;
              _proto.destroy = function destroy() {
                this.loader = this.callbacks = null;
                this.abortInternal();
              };
              _proto.abortInternal = function abortInternal() {
                var response = this.response;
                if (!response || !response.ok) {
                  this.stats.aborted = true;
                  this.controller.abort();
                }
              };
              _proto.abort = function abort() {
                var _this$callbacks;
                this.abortInternal();
                if ((_this$callbacks = this.callbacks) !== null && _this$callbacks !== void 0 && _this$callbacks.onAbort) {
                  this.callbacks.onAbort(this.stats, this.context, this.response);
                }
              };
              _proto.load = function load(context, config2, callbacks) {
                var _this = this;
                var stats = this.stats;
                if (stats.loading.start) {
                  throw new Error("Loader can only be used once.");
                }
                stats.loading.start = self.performance.now();
                var initParams = getRequestParameters(context, this.controller.signal);
                var onProgress = callbacks.onProgress;
                var isArrayBuffer = context.responseType === "arraybuffer";
                var LENGTH = isArrayBuffer ? "byteLength" : "length";
                this.context = context;
                this.config = config2;
                this.callbacks = callbacks;
                this.request = this.fetchSetup(context, initParams);
                self.clearTimeout(this.requestTimeout);
                this.requestTimeout = self.setTimeout(function() {
                  _this.abortInternal();
                  callbacks.onTimeout(stats, context, _this.response);
                }, config2.timeout);
                self.fetch(this.request).then(function(response) {
                  _this.response = _this.loader = response;
                  if (!response.ok) {
                    var status = response.status, statusText = response.statusText;
                    throw new FetchError(statusText || "fetch, bad network response", status, response);
                  }
                  stats.loading.first = Math.max(self.performance.now(), stats.loading.start);
                  stats.total = parseInt(response.headers.get("Content-Length") || "0");
                  if (onProgress && Object(_home_runner_work_hls_js_hls_js_src_polyfills_number__WEBPACK_IMPORTED_MODULE_0__["isFiniteNumber"])(config2.highWaterMark)) {
                    return _this.loadProgressively(response, stats, context, config2.highWaterMark, onProgress);
                  }
                  if (isArrayBuffer) {
                    return response.arrayBuffer();
                  }
                  return response.text();
                }).then(function(responseData) {
                  var response = _this.response;
                  self.clearTimeout(_this.requestTimeout);
                  stats.loading.end = Math.max(self.performance.now(), stats.loading.first);
                  stats.loaded = stats.total = responseData[LENGTH];
                  var loaderResponse = {
                    url: response.url,
                    data: responseData
                  };
                  if (onProgress && !Object(_home_runner_work_hls_js_hls_js_src_polyfills_number__WEBPACK_IMPORTED_MODULE_0__["isFiniteNumber"])(config2.highWaterMark)) {
                    onProgress(stats, context, responseData, response);
                  }
                  callbacks.onSuccess(loaderResponse, stats, context, response);
                }).catch(function(error) {
                  self.clearTimeout(_this.requestTimeout);
                  if (stats.aborted) {
                    return;
                  }
                  var code = error.code || 0;
                  callbacks.onError({
                    code,
                    text: error.message
                  }, context, error.details);
                });
              };
              _proto.getCacheAge = function getCacheAge() {
                var result = null;
                if (this.response) {
                  var ageHeader = this.response.headers.get("age");
                  result = ageHeader ? parseFloat(ageHeader) : null;
                }
                return result;
              };
              _proto.loadProgressively = function loadProgressively(response, stats, context, highWaterMark, onProgress) {
                if (highWaterMark === void 0) {
                  highWaterMark = 0;
                }
                var chunkCache = new _demux_chunk_cache__WEBPACK_IMPORTED_MODULE_2__["default"]();
                var reader = response.body.getReader();
                var pump = function pump2() {
                  return reader.read().then(function(data) {
                    if (data.done) {
                      if (chunkCache.dataLength) {
                        onProgress(stats, context, chunkCache.flush(), response);
                      }
                      return Promise.resolve(new ArrayBuffer(0));
                    }
                    var chunk = data.value;
                    var len = chunk.length;
                    stats.loaded += len;
                    if (len < highWaterMark || chunkCache.dataLength) {
                      chunkCache.push(chunk);
                      if (chunkCache.dataLength >= highWaterMark) {
                        onProgress(stats, context, chunkCache.flush(), response);
                      }
                    } else {
                      onProgress(stats, context, chunk, response);
                    }
                    return pump2();
                  }).catch(function() {
                    return Promise.reject();
                  });
                };
                return pump();
              };
              return FetchLoader2;
            }();
            function getRequestParameters(context, signal) {
              var initParams = {
                method: "GET",
                mode: "cors",
                credentials: "same-origin",
                signal,
                headers: new self.Headers(_extends2({}, context.headers))
              };
              if (context.rangeEnd) {
                initParams.headers.set("Range", "bytes=" + context.rangeStart + "-" + String(context.rangeEnd - 1));
              }
              return initParams;
            }
            function getRequest(context, initParams) {
              return new self.Request(context.url, initParams);
            }
            var FetchError = /* @__PURE__ */ function(_Error) {
              _inheritsLoose(FetchError2, _Error);
              function FetchError2(message, code, details) {
                var _this2;
                _this2 = _Error.call(this, message) || this;
                _this2.code = void 0;
                _this2.details = void 0;
                _this2.code = code;
                _this2.details = details;
                return _this2;
              }
              return FetchError2;
            }(/* @__PURE__ */ _wrapNativeSuper(Error));
            __webpack_exports__["default"] = FetchLoader;
          },
          "./src/utils/imsc1-ttml-parser.ts": function(module2, __webpack_exports__, __webpack_require__) {
            "use strict";
            __webpack_require__.r(__webpack_exports__);
            __webpack_require__.d(__webpack_exports__, "IMSC1_CODEC", function() {
              return IMSC1_CODEC;
            });
            __webpack_require__.d(__webpack_exports__, "parseIMSC1", function() {
              return parseIMSC1;
            });
            var _mp4_tools__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("./src/utils/mp4-tools.ts");
            var _vttparser__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("./src/utils/vttparser.ts");
            var _vttcue__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__("./src/utils/vttcue.ts");
            var _demux_id3__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__("./src/demux/id3.ts");
            var _timescale_conversion__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__("./src/utils/timescale-conversion.ts");
            var _webvtt_parser__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__("./src/utils/webvtt-parser.ts");
            function _extends2() {
              _extends2 = Object.assign || function(target) {
                for (var i3 = 1; i3 < arguments.length; i3++) {
                  var source = arguments[i3];
                  for (var key in source) {
                    if (Object.prototype.hasOwnProperty.call(source, key)) {
                      target[key] = source[key];
                    }
                  }
                }
                return target;
              };
              return _extends2.apply(this, arguments);
            }
            var IMSC1_CODEC = "stpp.ttml.im1t";
            var HMSF_REGEX = /^(\d{2,}):(\d{2}):(\d{2}):(\d{2})\.?(\d+)?$/;
            var TIME_UNIT_REGEX = /^(\d*(?:\.\d*)?)(h|m|s|ms|f|t)$/;
            var textAlignToLineAlign = {
              left: "start",
              center: "center",
              right: "end",
              start: "start",
              end: "end"
            };
            function parseIMSC1(payload, initPTS, timescale, callBack, errorCallBack) {
              var results = Object(_mp4_tools__WEBPACK_IMPORTED_MODULE_0__["findBox"])(new Uint8Array(payload), ["mdat"]);
              if (results.length === 0) {
                errorCallBack(new Error("Could not parse IMSC1 mdat"));
                return;
              }
              var mdat = results[0];
              var ttml = Object(_demux_id3__WEBPACK_IMPORTED_MODULE_3__["utf8ArrayToStr"])(new Uint8Array(payload, mdat.start, mdat.end - mdat.start));
              var syncTime = Object(_timescale_conversion__WEBPACK_IMPORTED_MODULE_4__["toTimescaleFromScale"])(initPTS, 1, timescale);
              try {
                callBack(parseTTML(ttml, syncTime));
              } catch (error) {
                errorCallBack(error);
              }
            }
            function parseTTML(ttml, syncTime) {
              var parser = new DOMParser();
              var xmlDoc = parser.parseFromString(ttml, "text/xml");
              var tt3 = xmlDoc.getElementsByTagName("tt")[0];
              if (!tt3) {
                throw new Error("Invalid ttml");
              }
              var defaultRateInfo = {
                frameRate: 30,
                subFrameRate: 1,
                frameRateMultiplier: 0,
                tickRate: 0
              };
              var rateInfo = Object.keys(defaultRateInfo).reduce(function(result, key) {
                result[key] = tt3.getAttribute("ttp:" + key) || defaultRateInfo[key];
                return result;
              }, {});
              var trim = tt3.getAttribute("xml:space") !== "preserve";
              var styleElements = collectionToDictionary(getElementCollection(tt3, "styling", "style"));
              var regionElements = collectionToDictionary(getElementCollection(tt3, "layout", "region"));
              var cueElements = getElementCollection(tt3, "body", "[begin]");
              return [].map.call(cueElements, function(cueElement) {
                var cueText = getTextContent(cueElement, trim);
                if (!cueText || !cueElement.hasAttribute("begin")) {
                  return null;
                }
                var startTime = parseTtmlTime(cueElement.getAttribute("begin"), rateInfo);
                var duration = parseTtmlTime(cueElement.getAttribute("dur"), rateInfo);
                var endTime = parseTtmlTime(cueElement.getAttribute("end"), rateInfo);
                if (startTime === null) {
                  throw timestampParsingError(cueElement);
                }
                if (endTime === null) {
                  if (duration === null) {
                    throw timestampParsingError(cueElement);
                  }
                  endTime = startTime + duration;
                }
                var cue = new _vttcue__WEBPACK_IMPORTED_MODULE_2__["default"](startTime - syncTime, endTime - syncTime, cueText);
                cue.id = Object(_webvtt_parser__WEBPACK_IMPORTED_MODULE_5__["generateCueId"])(cue.startTime, cue.endTime, cue.text);
                var region = regionElements[cueElement.getAttribute("region")];
                var style = styleElements[cueElement.getAttribute("style")];
                cue.position = 10;
                cue.size = 80;
                var styles = getTtmlStyles(region, style);
                var textAlign = styles.textAlign;
                if (textAlign) {
                  var lineAlign = textAlignToLineAlign[textAlign];
                  if (lineAlign) {
                    cue.lineAlign = lineAlign;
                  }
                  cue.align = textAlign;
                }
                _extends2(cue, styles);
                return cue;
              }).filter(function(cue) {
                return cue !== null;
              });
            }
            function getElementCollection(fromElement, parentName, childName) {
              var parent = fromElement.getElementsByTagName(parentName)[0];
              if (parent) {
                return [].slice.call(parent.querySelectorAll(childName));
              }
              return [];
            }
            function collectionToDictionary(elementsWithId) {
              return elementsWithId.reduce(function(dict, element) {
                var id = element.getAttribute("xml:id");
                if (id) {
                  dict[id] = element;
                }
                return dict;
              }, {});
            }
            function getTextContent(element, trim) {
              return [].slice.call(element.childNodes).reduce(function(str, node, i3) {
                var _node$childNodes;
                if (node.nodeName === "br" && i3) {
                  return str + "\n";
                }
                if ((_node$childNodes = node.childNodes) !== null && _node$childNodes !== void 0 && _node$childNodes.length) {
                  return getTextContent(node, trim);
                } else if (trim) {
                  return str + node.textContent.trim().replace(/\s+/g, " ");
                }
                return str + node.textContent;
              }, "");
            }
            function getTtmlStyles(region, style) {
              var ttsNs = "http://www.w3.org/ns/ttml#styling";
              var styleAttributes = [
                "displayAlign",
                "textAlign",
                "color",
                "backgroundColor",
                "fontSize",
                "fontFamily"
              ];
              return styleAttributes.reduce(function(styles, name) {
                var value = getAttributeNS(style, ttsNs, name) || getAttributeNS(region, ttsNs, name);
                if (value) {
                  styles[name] = value;
                }
                return styles;
              }, {});
            }
            function getAttributeNS(element, ns, name) {
              return element.hasAttributeNS(ns, name) ? element.getAttributeNS(ns, name) : null;
            }
            function timestampParsingError(node) {
              return new Error("Could not parse ttml timestamp " + node);
            }
            function parseTtmlTime(timeAttributeValue, rateInfo) {
              if (!timeAttributeValue) {
                return null;
              }
              var seconds = Object(_vttparser__WEBPACK_IMPORTED_MODULE_1__["parseTimeStamp"])(timeAttributeValue);
              if (seconds === null) {
                if (HMSF_REGEX.test(timeAttributeValue)) {
                  seconds = parseHoursMinutesSecondsFrames(timeAttributeValue, rateInfo);
                } else if (TIME_UNIT_REGEX.test(timeAttributeValue)) {
                  seconds = parseTimeUnits(timeAttributeValue, rateInfo);
                }
              }
              return seconds;
            }
            function parseHoursMinutesSecondsFrames(timeAttributeValue, rateInfo) {
              var m3 = HMSF_REGEX.exec(timeAttributeValue);
              var frames = (m3[4] | 0) + (m3[5] | 0) / rateInfo.subFrameRate;
              return (m3[1] | 0) * 3600 + (m3[2] | 0) * 60 + (m3[3] | 0) + frames / rateInfo.frameRate;
            }
            function parseTimeUnits(timeAttributeValue, rateInfo) {
              var m3 = TIME_UNIT_REGEX.exec(timeAttributeValue);
              var value = Number(m3[1]);
              var unit = m3[2];
              switch (unit) {
                case "h":
                  return value * 3600;
                case "m":
                  return value * 60;
                case "ms":
                  return value * 1e3;
                case "f":
                  return value / rateInfo.frameRate;
                case "t":
                  return value / rateInfo.tickRate;
              }
              return value;
            }
          },
          "./src/utils/logger.ts": function(module2, __webpack_exports__, __webpack_require__) {
            "use strict";
            __webpack_require__.r(__webpack_exports__);
            __webpack_require__.d(__webpack_exports__, "enableLogs", function() {
              return enableLogs;
            });
            __webpack_require__.d(__webpack_exports__, "logger", function() {
              return logger;
            });
            var noop = function noop2() {
            };
            var fakeLogger = {
              trace: noop,
              debug: noop,
              log: noop,
              warn: noop,
              info: noop,
              error: noop
            };
            var exportedLogger = fakeLogger;
            function consolePrintFn(type) {
              var func = self.console[type];
              if (func) {
                return func.bind(self.console, "[" + type + "] >");
              }
              return noop;
            }
            function exportLoggerFunctions(debugConfig) {
              for (var _len = arguments.length, functions = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
                functions[_key - 1] = arguments[_key];
              }
              functions.forEach(function(type) {
                exportedLogger[type] = debugConfig[type] ? debugConfig[type].bind(debugConfig) : consolePrintFn(type);
              });
            }
            function enableLogs(debugConfig) {
              if (self.console && debugConfig === true || typeof debugConfig === "object") {
                exportLoggerFunctions(debugConfig, "debug", "log", "info", "warn", "error");
                try {
                  exportedLogger.log();
                } catch (e4) {
                  exportedLogger = fakeLogger;
                }
              } else {
                exportedLogger = fakeLogger;
              }
            }
            var logger = exportedLogger;
          },
          "./src/utils/mediakeys-helper.ts": function(module2, __webpack_exports__, __webpack_require__) {
            "use strict";
            __webpack_require__.r(__webpack_exports__);
            __webpack_require__.d(__webpack_exports__, "KeySystems", function() {
              return KeySystems;
            });
            __webpack_require__.d(__webpack_exports__, "requestMediaKeySystemAccess", function() {
              return requestMediaKeySystemAccess;
            });
            var KeySystems;
            (function(KeySystems2) {
              KeySystems2["WIDEVINE"] = "com.widevine.alpha";
              KeySystems2["PLAYREADY"] = "com.microsoft.playready";
            })(KeySystems || (KeySystems = {}));
            var requestMediaKeySystemAccess = function() {
              if (typeof self !== "undefined" && self.navigator && self.navigator.requestMediaKeySystemAccess) {
                return self.navigator.requestMediaKeySystemAccess.bind(self.navigator);
              } else {
                return null;
              }
            }();
          },
          "./src/utils/mediasource-helper.ts": function(module2, __webpack_exports__, __webpack_require__) {
            "use strict";
            __webpack_require__.r(__webpack_exports__);
            __webpack_require__.d(__webpack_exports__, "getMediaSource", function() {
              return getMediaSource;
            });
            function getMediaSource() {
              return self.MediaSource || self.WebKitMediaSource;
            }
          },
          "./src/utils/mp4-tools.ts": function(module2, __webpack_exports__, __webpack_require__) {
            "use strict";
            __webpack_require__.r(__webpack_exports__);
            __webpack_require__.d(__webpack_exports__, "bin2str", function() {
              return bin2str;
            });
            __webpack_require__.d(__webpack_exports__, "readUint16", function() {
              return readUint16;
            });
            __webpack_require__.d(__webpack_exports__, "readUint32", function() {
              return readUint32;
            });
            __webpack_require__.d(__webpack_exports__, "writeUint32", function() {
              return writeUint32;
            });
            __webpack_require__.d(__webpack_exports__, "findBox", function() {
              return findBox;
            });
            __webpack_require__.d(__webpack_exports__, "parseSegmentIndex", function() {
              return parseSegmentIndex;
            });
            __webpack_require__.d(__webpack_exports__, "parseInitSegment", function() {
              return parseInitSegment;
            });
            __webpack_require__.d(__webpack_exports__, "getStartDTS", function() {
              return getStartDTS;
            });
            __webpack_require__.d(__webpack_exports__, "getDuration", function() {
              return getDuration;
            });
            __webpack_require__.d(__webpack_exports__, "computeRawDurationFromSamples", function() {
              return computeRawDurationFromSamples;
            });
            __webpack_require__.d(__webpack_exports__, "offsetStartDTS", function() {
              return offsetStartDTS;
            });
            __webpack_require__.d(__webpack_exports__, "segmentValidRange", function() {
              return segmentValidRange;
            });
            __webpack_require__.d(__webpack_exports__, "appendUint8Array", function() {
              return appendUint8Array;
            });
            var _typed_array__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("./src/utils/typed-array.ts");
            var _loader_fragment__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("./src/loader/fragment.ts");
            var UINT32_MAX = Math.pow(2, 32) - 1;
            var push = [].push;
            function bin2str(data) {
              return String.fromCharCode.apply(null, data);
            }
            function readUint16(buffer, offset) {
              if ("data" in buffer) {
                offset += buffer.start;
                buffer = buffer.data;
              }
              var val = buffer[offset] << 8 | buffer[offset + 1];
              return val < 0 ? 65536 + val : val;
            }
            function readUint32(buffer, offset) {
              if ("data" in buffer) {
                offset += buffer.start;
                buffer = buffer.data;
              }
              var val = buffer[offset] << 24 | buffer[offset + 1] << 16 | buffer[offset + 2] << 8 | buffer[offset + 3];
              return val < 0 ? 4294967296 + val : val;
            }
            function writeUint32(buffer, offset, value) {
              if ("data" in buffer) {
                offset += buffer.start;
                buffer = buffer.data;
              }
              buffer[offset] = value >> 24;
              buffer[offset + 1] = value >> 16 & 255;
              buffer[offset + 2] = value >> 8 & 255;
              buffer[offset + 3] = value & 255;
            }
            function findBox(input, path) {
              var results = [];
              if (!path.length) {
                return results;
              }
              var data;
              var start;
              var end;
              if ("data" in input) {
                data = input.data;
                start = input.start;
                end = input.end;
              } else {
                data = input;
                start = 0;
                end = data.byteLength;
              }
              for (var i3 = start; i3 < end; ) {
                var size = readUint32(data, i3);
                var type = bin2str(data.subarray(i3 + 4, i3 + 8));
                var endbox = size > 1 ? i3 + size : end;
                if (type === path[0]) {
                  if (path.length === 1) {
                    results.push({
                      data,
                      start: i3 + 8,
                      end: endbox
                    });
                  } else {
                    var subresults = findBox({
                      data,
                      start: i3 + 8,
                      end: endbox
                    }, path.slice(1));
                    if (subresults.length) {
                      push.apply(results, subresults);
                    }
                  }
                }
                i3 = endbox;
              }
              return results;
            }
            function parseSegmentIndex(initSegment) {
              var moovBox = findBox(initSegment, ["moov"]);
              var moov = moovBox[0];
              var moovEndOffset = moov ? moov.end : null;
              var sidxBox = findBox(initSegment, ["sidx"]);
              if (!sidxBox || !sidxBox[0]) {
                return null;
              }
              var references = [];
              var sidx = sidxBox[0];
              var version = sidx.data[0];
              var index = version === 0 ? 8 : 16;
              var timescale = readUint32(sidx, index);
              index += 4;
              var earliestPresentationTime = 0;
              var firstOffset = 0;
              if (version === 0) {
                index += 8;
              } else {
                index += 16;
              }
              index += 2;
              var startByte = sidx.end + firstOffset;
              var referencesCount = readUint16(sidx, index);
              index += 2;
              for (var i3 = 0; i3 < referencesCount; i3++) {
                var referenceIndex = index;
                var referenceInfo = readUint32(sidx, referenceIndex);
                referenceIndex += 4;
                var referenceSize = referenceInfo & 2147483647;
                var referenceType = (referenceInfo & 2147483648) >>> 31;
                if (referenceType === 1) {
                  console.warn("SIDX has hierarchical references (not supported)");
                  return null;
                }
                var subsegmentDuration = readUint32(sidx, referenceIndex);
                referenceIndex += 4;
                references.push({
                  referenceSize,
                  subsegmentDuration,
                  info: {
                    duration: subsegmentDuration / timescale,
                    start: startByte,
                    end: startByte + referenceSize - 1
                  }
                });
                startByte += referenceSize;
                referenceIndex += 4;
                index = referenceIndex;
              }
              return {
                earliestPresentationTime,
                timescale,
                version,
                referencesCount,
                references,
                moovEndOffset
              };
            }
            function parseInitSegment(initSegment) {
              var result = [];
              var traks = findBox(initSegment, ["moov", "trak"]);
              for (var i3 = 0; i3 < traks.length; i3++) {
                var trak = traks[i3];
                var tkhd = findBox(trak, ["tkhd"])[0];
                if (tkhd) {
                  var version = tkhd.data[tkhd.start];
                  var _index = version === 0 ? 12 : 20;
                  var trackId = readUint32(tkhd, _index);
                  var mdhd = findBox(trak, ["mdia", "mdhd"])[0];
                  if (mdhd) {
                    version = mdhd.data[mdhd.start];
                    _index = version === 0 ? 12 : 20;
                    var timescale = readUint32(mdhd, _index);
                    var hdlr = findBox(trak, ["mdia", "hdlr"])[0];
                    if (hdlr) {
                      var hdlrType = bin2str(hdlr.data.subarray(hdlr.start + 8, hdlr.start + 12));
                      var type = {
                        soun: _loader_fragment__WEBPACK_IMPORTED_MODULE_1__["ElementaryStreamTypes"].AUDIO,
                        vide: _loader_fragment__WEBPACK_IMPORTED_MODULE_1__["ElementaryStreamTypes"].VIDEO
                      }[hdlrType];
                      if (type) {
                        var stsd = findBox(trak, ["mdia", "minf", "stbl", "stsd"])[0];
                        var codec = void 0;
                        if (stsd) {
                          codec = bin2str(stsd.data.subarray(stsd.start + 12, stsd.start + 16));
                        }
                        result[trackId] = {
                          timescale,
                          type
                        };
                        result[type] = {
                          timescale,
                          id: trackId,
                          codec
                        };
                      }
                    }
                  }
                }
              }
              var trex = findBox(initSegment, ["moov", "mvex", "trex"]);
              trex.forEach(function(trex2) {
                var trackId2 = readUint32(trex2, 4);
                var track = result[trackId2];
                if (track) {
                  track.default = {
                    duration: readUint32(trex2, 12),
                    flags: readUint32(trex2, 20)
                  };
                }
              });
              return result;
            }
            function getStartDTS(initData, fmp4) {
              return findBox(fmp4, ["moof", "traf"]).reduce(function(result, traf) {
                var tfdt = findBox(traf, ["tfdt"])[0];
                var version = tfdt.data[tfdt.start];
                var start = findBox(traf, ["tfhd"]).reduce(function(result2, tfhd) {
                  var id = readUint32(tfhd, 4);
                  var track = initData[id];
                  if (track) {
                    var baseTime = readUint32(tfdt, 4);
                    if (version === 1) {
                      baseTime *= Math.pow(2, 32);
                      baseTime += readUint32(tfdt, 8);
                    }
                    var scale = track.timescale || 9e4;
                    var startTime = baseTime / scale;
                    if (isFinite(startTime) && (result2 === null || startTime < result2)) {
                      return startTime;
                    }
                  }
                  return result2;
                }, null);
                if (start !== null && isFinite(start) && (result === null || start < result)) {
                  return start;
                }
                return result;
              }, null) || 0;
            }
            function getDuration(data, initData) {
              var rawDuration = 0;
              var videoDuration = 0;
              var audioDuration = 0;
              var trafs = findBox(data, ["moof", "traf"]);
              for (var i3 = 0; i3 < trafs.length; i3++) {
                var traf = trafs[i3];
                var tfhd = findBox(traf, ["tfhd"])[0];
                var id = readUint32(tfhd, 4);
                var track = initData[id];
                if (!track) {
                  continue;
                }
                var trackDefault = track.default;
                var tfhdFlags = readUint32(tfhd, 0) | (trackDefault === null || trackDefault === void 0 ? void 0 : trackDefault.flags);
                var sampleDuration = trackDefault === null || trackDefault === void 0 ? void 0 : trackDefault.duration;
                if (tfhdFlags & 8) {
                  if (tfhdFlags & 2) {
                    sampleDuration = readUint32(tfhd, 12);
                  } else {
                    sampleDuration = readUint32(tfhd, 8);
                  }
                }
                var timescale = track.timescale || 9e4;
                var truns = findBox(traf, ["trun"]);
                for (var j3 = 0; j3 < truns.length; j3++) {
                  rawDuration = computeRawDurationFromSamples(truns[j3]);
                  if (!rawDuration && sampleDuration) {
                    var sampleCount = readUint32(truns[j3], 4);
                    rawDuration = sampleDuration * sampleCount;
                  }
                  if (track.type === _loader_fragment__WEBPACK_IMPORTED_MODULE_1__["ElementaryStreamTypes"].VIDEO) {
                    videoDuration += rawDuration / timescale;
                  } else if (track.type === _loader_fragment__WEBPACK_IMPORTED_MODULE_1__["ElementaryStreamTypes"].AUDIO) {
                    audioDuration += rawDuration / timescale;
                  }
                }
              }
              if (videoDuration === 0 && audioDuration === 0) {
                var sidx = parseSegmentIndex(data);
                if (sidx !== null && sidx !== void 0 && sidx.references) {
                  return sidx.references.reduce(function(dur, ref) {
                    return dur + ref.info.duration || 0;
                  }, 0);
                }
              }
              if (videoDuration) {
                return videoDuration;
              }
              return audioDuration;
            }
            function computeRawDurationFromSamples(trun) {
              var flags = readUint32(trun, 0);
              var offset = 8;
              if (flags & 1) {
                offset += 4;
              }
              if (flags & 4) {
                offset += 4;
              }
              var duration = 0;
              var sampleCount = readUint32(trun, 4);
              for (var i3 = 0; i3 < sampleCount; i3++) {
                if (flags & 256) {
                  var sampleDuration = readUint32(trun, offset);
                  duration += sampleDuration;
                  offset += 4;
                }
                if (flags & 512) {
                  offset += 4;
                }
                if (flags & 1024) {
                  offset += 4;
                }
                if (flags & 2048) {
                  offset += 4;
                }
              }
              return duration;
            }
            function offsetStartDTS(initData, fmp4, timeOffset) {
              findBox(fmp4, ["moof", "traf"]).forEach(function(traf) {
                findBox(traf, ["tfhd"]).forEach(function(tfhd) {
                  var id = readUint32(tfhd, 4);
                  var track = initData[id];
                  if (!track) {
                    return;
                  }
                  var timescale = track.timescale || 9e4;
                  findBox(traf, ["tfdt"]).forEach(function(tfdt) {
                    var version = tfdt.data[tfdt.start];
                    var baseMediaDecodeTime = readUint32(tfdt, 4);
                    if (version === 0) {
                      writeUint32(tfdt, 4, baseMediaDecodeTime - timeOffset * timescale);
                    } else {
                      baseMediaDecodeTime *= Math.pow(2, 32);
                      baseMediaDecodeTime += readUint32(tfdt, 8);
                      baseMediaDecodeTime -= timeOffset * timescale;
                      baseMediaDecodeTime = Math.max(baseMediaDecodeTime, 0);
                      var upper = Math.floor(baseMediaDecodeTime / (UINT32_MAX + 1));
                      var lower = Math.floor(baseMediaDecodeTime % (UINT32_MAX + 1));
                      writeUint32(tfdt, 4, upper);
                      writeUint32(tfdt, 8, lower);
                    }
                  });
                });
              });
            }
            function segmentValidRange(data) {
              var segmentedRange = {
                valid: null,
                remainder: null
              };
              var moofs = findBox(data, ["moof"]);
              if (!moofs) {
                return segmentedRange;
              } else if (moofs.length < 2) {
                segmentedRange.remainder = data;
                return segmentedRange;
              }
              var last = moofs[moofs.length - 1];
              segmentedRange.valid = Object(_typed_array__WEBPACK_IMPORTED_MODULE_0__["sliceUint8"])(data, 0, last.start - 8);
              segmentedRange.remainder = Object(_typed_array__WEBPACK_IMPORTED_MODULE_0__["sliceUint8"])(data, last.start - 8);
              return segmentedRange;
            }
            function appendUint8Array(data1, data2) {
              var temp = new Uint8Array(data1.length + data2.length);
              temp.set(data1);
              temp.set(data2, data1.length);
              return temp;
            }
          },
          "./src/utils/output-filter.ts": function(module2, __webpack_exports__, __webpack_require__) {
            "use strict";
            __webpack_require__.r(__webpack_exports__);
            __webpack_require__.d(__webpack_exports__, "default", function() {
              return OutputFilter;
            });
            var OutputFilter = /* @__PURE__ */ function() {
              function OutputFilter2(timelineController, trackName) {
                this.timelineController = void 0;
                this.cueRanges = [];
                this.trackName = void 0;
                this.startTime = null;
                this.endTime = null;
                this.screen = null;
                this.timelineController = timelineController;
                this.trackName = trackName;
              }
              var _proto = OutputFilter2.prototype;
              _proto.dispatchCue = function dispatchCue() {
                if (this.startTime === null) {
                  return;
                }
                this.timelineController.addCues(this.trackName, this.startTime, this.endTime, this.screen, this.cueRanges);
                this.startTime = null;
              };
              _proto.newCue = function newCue(startTime, endTime, screen) {
                if (this.startTime === null || this.startTime > startTime) {
                  this.startTime = startTime;
                }
                this.endTime = endTime;
                this.screen = screen;
                this.timelineController.createCaptionsTrack(this.trackName);
              };
              _proto.reset = function reset() {
                this.cueRanges = [];
                this.startTime = null;
              };
              return OutputFilter2;
            }();
          },
          "./src/utils/texttrack-utils.ts": function(module2, __webpack_exports__, __webpack_require__) {
            "use strict";
            __webpack_require__.r(__webpack_exports__);
            __webpack_require__.d(__webpack_exports__, "sendAddTrackEvent", function() {
              return sendAddTrackEvent;
            });
            __webpack_require__.d(__webpack_exports__, "addCueToTrack", function() {
              return addCueToTrack;
            });
            __webpack_require__.d(__webpack_exports__, "clearCurrentCues", function() {
              return clearCurrentCues;
            });
            __webpack_require__.d(__webpack_exports__, "removeCuesInRange", function() {
              return removeCuesInRange;
            });
            __webpack_require__.d(__webpack_exports__, "getCuesInRange", function() {
              return getCuesInRange;
            });
            var _logger__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("./src/utils/logger.ts");
            function sendAddTrackEvent(track, videoEl) {
              var event;
              try {
                event = new Event("addtrack");
              } catch (err) {
                event = document.createEvent("Event");
                event.initEvent("addtrack", false, false);
              }
              event.track = track;
              videoEl.dispatchEvent(event);
            }
            function addCueToTrack(track, cue) {
              var mode = track.mode;
              if (mode === "disabled") {
                track.mode = "hidden";
              }
              if (track.cues && !track.cues.getCueById(cue.id)) {
                try {
                  track.addCue(cue);
                  if (!track.cues.getCueById(cue.id)) {
                    throw new Error("addCue is failed for: " + cue);
                  }
                } catch (err) {
                  _logger__WEBPACK_IMPORTED_MODULE_0__["logger"].debug("[texttrack-utils]: " + err);
                  var textTrackCue = new self.TextTrackCue(cue.startTime, cue.endTime, cue.text);
                  textTrackCue.id = cue.id;
                  track.addCue(textTrackCue);
                }
              }
              if (mode === "disabled") {
                track.mode = mode;
              }
            }
            function clearCurrentCues(track) {
              var mode = track.mode;
              if (mode === "disabled") {
                track.mode = "hidden";
              }
              if (track.cues) {
                for (var i3 = track.cues.length; i3--; ) {
                  track.removeCue(track.cues[i3]);
                }
              }
              if (mode === "disabled") {
                track.mode = mode;
              }
            }
            function removeCuesInRange(track, start, end) {
              var mode = track.mode;
              if (mode === "disabled") {
                track.mode = "hidden";
              }
              if (track.cues && track.cues.length > 0) {
                var cues = getCuesInRange(track.cues, start, end);
                for (var i3 = 0; i3 < cues.length; i3++) {
                  track.removeCue(cues[i3]);
                }
              }
              if (mode === "disabled") {
                track.mode = mode;
              }
            }
            function getFirstCueIndexAfterTime(cues, time) {
              if (time < cues[0].startTime) {
                return 0;
              }
              var len = cues.length - 1;
              if (time > cues[len].endTime) {
                return -1;
              }
              var left = 0;
              var right = len;
              while (left <= right) {
                var mid = Math.floor((right + left) / 2);
                if (time < cues[mid].startTime) {
                  right = mid - 1;
                } else if (time > cues[mid].startTime && left < len) {
                  left = mid + 1;
                } else {
                  return mid;
                }
              }
              return cues[left].startTime - time < time - cues[right].startTime ? left : right;
            }
            function getCuesInRange(cues, start, end) {
              var cuesFound = [];
              var firstCueInRange = getFirstCueIndexAfterTime(cues, start);
              if (firstCueInRange > -1) {
                for (var i3 = firstCueInRange, len = cues.length; i3 < len; i3++) {
                  var cue = cues[i3];
                  if (cue.startTime >= start && cue.endTime <= end) {
                    cuesFound.push(cue);
                  } else if (cue.startTime > end) {
                    return cuesFound;
                  }
                }
              }
              return cuesFound;
            }
          },
          "./src/utils/time-ranges.ts": function(module2, __webpack_exports__, __webpack_require__) {
            "use strict";
            __webpack_require__.r(__webpack_exports__);
            var TimeRanges = {
              toString: function toString(r3) {
                var log = "";
                var len = r3.length;
                for (var i3 = 0; i3 < len; i3++) {
                  log += "[" + r3.start(i3).toFixed(3) + "," + r3.end(i3).toFixed(3) + "]";
                }
                return log;
              }
            };
            __webpack_exports__["default"] = TimeRanges;
          },
          "./src/utils/timescale-conversion.ts": function(module2, __webpack_exports__, __webpack_require__) {
            "use strict";
            __webpack_require__.r(__webpack_exports__);
            __webpack_require__.d(__webpack_exports__, "toTimescaleFromBase", function() {
              return toTimescaleFromBase;
            });
            __webpack_require__.d(__webpack_exports__, "toTimescaleFromScale", function() {
              return toTimescaleFromScale;
            });
            __webpack_require__.d(__webpack_exports__, "toMsFromMpegTsClock", function() {
              return toMsFromMpegTsClock;
            });
            __webpack_require__.d(__webpack_exports__, "toMpegTsClockFromTimescale", function() {
              return toMpegTsClockFromTimescale;
            });
            var MPEG_TS_CLOCK_FREQ_HZ = 9e4;
            function toTimescaleFromBase(value, destScale, srcBase, round) {
              if (srcBase === void 0) {
                srcBase = 1;
              }
              if (round === void 0) {
                round = false;
              }
              var result = value * destScale * srcBase;
              return round ? Math.round(result) : result;
            }
            function toTimescaleFromScale(value, destScale, srcScale, round) {
              if (srcScale === void 0) {
                srcScale = 1;
              }
              if (round === void 0) {
                round = false;
              }
              return toTimescaleFromBase(value, destScale, 1 / srcScale, round);
            }
            function toMsFromMpegTsClock(value, round) {
              if (round === void 0) {
                round = false;
              }
              return toTimescaleFromBase(value, 1e3, 1 / MPEG_TS_CLOCK_FREQ_HZ, round);
            }
            function toMpegTsClockFromTimescale(value, srcScale) {
              if (srcScale === void 0) {
                srcScale = 1;
              }
              return toTimescaleFromBase(value, MPEG_TS_CLOCK_FREQ_HZ, 1 / srcScale);
            }
          },
          "./src/utils/typed-array.ts": function(module2, __webpack_exports__, __webpack_require__) {
            "use strict";
            __webpack_require__.r(__webpack_exports__);
            __webpack_require__.d(__webpack_exports__, "sliceUint8", function() {
              return sliceUint8;
            });
            function sliceUint8(array, start, end) {
              return Uint8Array.prototype.slice ? array.slice(start, end) : new Uint8Array(Array.prototype.slice.call(array, start, end));
            }
          },
          "./src/utils/vttcue.ts": function(module2, __webpack_exports__, __webpack_require__) {
            "use strict";
            __webpack_require__.r(__webpack_exports__);
            __webpack_exports__["default"] = function() {
              if (typeof self !== "undefined" && self.VTTCue) {
                return self.VTTCue;
              }
              var AllowedDirections = ["", "lr", "rl"];
              var AllowedAlignments = ["start", "middle", "end", "left", "right"];
              function isAllowedValue(allowed, value) {
                if (typeof value !== "string") {
                  return false;
                }
                if (!Array.isArray(allowed)) {
                  return false;
                }
                var lcValue = value.toLowerCase();
                if (~allowed.indexOf(lcValue)) {
                  return lcValue;
                }
                return false;
              }
              function findDirectionSetting(value) {
                return isAllowedValue(AllowedDirections, value);
              }
              function findAlignSetting(value) {
                return isAllowedValue(AllowedAlignments, value);
              }
              function extend(obj) {
                for (var _len = arguments.length, rest = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
                  rest[_key - 1] = arguments[_key];
                }
                var i3 = 1;
                for (; i3 < arguments.length; i3++) {
                  var cobj = arguments[i3];
                  for (var p5 in cobj) {
                    obj[p5] = cobj[p5];
                  }
                }
                return obj;
              }
              function VTTCue(startTime, endTime, text) {
                var cue = this;
                var baseObj = {
                  enumerable: true
                };
                cue.hasBeenReset = false;
                var _id = "";
                var _pauseOnExit = false;
                var _startTime = startTime;
                var _endTime = endTime;
                var _text = text;
                var _region = null;
                var _vertical = "";
                var _snapToLines = true;
                var _line = "auto";
                var _lineAlign = "start";
                var _position = 50;
                var _positionAlign = "middle";
                var _size = 50;
                var _align = "middle";
                Object.defineProperty(cue, "id", extend({}, baseObj, {
                  get: function get() {
                    return _id;
                  },
                  set: function set(value) {
                    _id = "" + value;
                  }
                }));
                Object.defineProperty(cue, "pauseOnExit", extend({}, baseObj, {
                  get: function get() {
                    return _pauseOnExit;
                  },
                  set: function set(value) {
                    _pauseOnExit = !!value;
                  }
                }));
                Object.defineProperty(cue, "startTime", extend({}, baseObj, {
                  get: function get() {
                    return _startTime;
                  },
                  set: function set(value) {
                    if (typeof value !== "number") {
                      throw new TypeError("Start time must be set to a number.");
                    }
                    _startTime = value;
                    this.hasBeenReset = true;
                  }
                }));
                Object.defineProperty(cue, "endTime", extend({}, baseObj, {
                  get: function get() {
                    return _endTime;
                  },
                  set: function set(value) {
                    if (typeof value !== "number") {
                      throw new TypeError("End time must be set to a number.");
                    }
                    _endTime = value;
                    this.hasBeenReset = true;
                  }
                }));
                Object.defineProperty(cue, "text", extend({}, baseObj, {
                  get: function get() {
                    return _text;
                  },
                  set: function set(value) {
                    _text = "" + value;
                    this.hasBeenReset = true;
                  }
                }));
                Object.defineProperty(cue, "region", extend({}, baseObj, {
                  get: function get() {
                    return _region;
                  },
                  set: function set(value) {
                    _region = value;
                    this.hasBeenReset = true;
                  }
                }));
                Object.defineProperty(cue, "vertical", extend({}, baseObj, {
                  get: function get() {
                    return _vertical;
                  },
                  set: function set(value) {
                    var setting = findDirectionSetting(value);
                    if (setting === false) {
                      throw new SyntaxError("An invalid or illegal string was specified.");
                    }
                    _vertical = setting;
                    this.hasBeenReset = true;
                  }
                }));
                Object.defineProperty(cue, "snapToLines", extend({}, baseObj, {
                  get: function get() {
                    return _snapToLines;
                  },
                  set: function set(value) {
                    _snapToLines = !!value;
                    this.hasBeenReset = true;
                  }
                }));
                Object.defineProperty(cue, "line", extend({}, baseObj, {
                  get: function get() {
                    return _line;
                  },
                  set: function set(value) {
                    if (typeof value !== "number" && value !== "auto") {
                      throw new SyntaxError("An invalid number or illegal string was specified.");
                    }
                    _line = value;
                    this.hasBeenReset = true;
                  }
                }));
                Object.defineProperty(cue, "lineAlign", extend({}, baseObj, {
                  get: function get() {
                    return _lineAlign;
                  },
                  set: function set(value) {
                    var setting = findAlignSetting(value);
                    if (!setting) {
                      throw new SyntaxError("An invalid or illegal string was specified.");
                    }
                    _lineAlign = setting;
                    this.hasBeenReset = true;
                  }
                }));
                Object.defineProperty(cue, "position", extend({}, baseObj, {
                  get: function get() {
                    return _position;
                  },
                  set: function set(value) {
                    if (value < 0 || value > 100) {
                      throw new Error("Position must be between 0 and 100.");
                    }
                    _position = value;
                    this.hasBeenReset = true;
                  }
                }));
                Object.defineProperty(cue, "positionAlign", extend({}, baseObj, {
                  get: function get() {
                    return _positionAlign;
                  },
                  set: function set(value) {
                    var setting = findAlignSetting(value);
                    if (!setting) {
                      throw new SyntaxError("An invalid or illegal string was specified.");
                    }
                    _positionAlign = setting;
                    this.hasBeenReset = true;
                  }
                }));
                Object.defineProperty(cue, "size", extend({}, baseObj, {
                  get: function get() {
                    return _size;
                  },
                  set: function set(value) {
                    if (value < 0 || value > 100) {
                      throw new Error("Size must be between 0 and 100.");
                    }
                    _size = value;
                    this.hasBeenReset = true;
                  }
                }));
                Object.defineProperty(cue, "align", extend({}, baseObj, {
                  get: function get() {
                    return _align;
                  },
                  set: function set(value) {
                    var setting = findAlignSetting(value);
                    if (!setting) {
                      throw new SyntaxError("An invalid or illegal string was specified.");
                    }
                    _align = setting;
                    this.hasBeenReset = true;
                  }
                }));
                cue.displayState = void 0;
              }
              VTTCue.prototype.getCueAsHTML = function() {
                var WebVTT = self.WebVTT;
                return WebVTT.convertCueToDOMTree(self, this.text);
              };
              return VTTCue;
            }();
          },
          "./src/utils/vttparser.ts": function(module2, __webpack_exports__, __webpack_require__) {
            "use strict";
            __webpack_require__.r(__webpack_exports__);
            __webpack_require__.d(__webpack_exports__, "parseTimeStamp", function() {
              return parseTimeStamp;
            });
            __webpack_require__.d(__webpack_exports__, "fixLineBreaks", function() {
              return fixLineBreaks;
            });
            __webpack_require__.d(__webpack_exports__, "VTTParser", function() {
              return VTTParser;
            });
            var _vttcue__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("./src/utils/vttcue.ts");
            var StringDecoder = /* @__PURE__ */ function() {
              function StringDecoder2() {
              }
              var _proto = StringDecoder2.prototype;
              _proto.decode = function decode(data, options) {
                if (!data) {
                  return "";
                }
                if (typeof data !== "string") {
                  throw new Error("Error - expected string data.");
                }
                return decodeURIComponent(encodeURIComponent(data));
              };
              return StringDecoder2;
            }();
            function parseTimeStamp(input) {
              function computeSeconds(h3, m4, s5, f3) {
                return (h3 | 0) * 3600 + (m4 | 0) * 60 + (s5 | 0) + parseFloat(f3 || 0);
              }
              var m3 = input.match(/^(?:(\d+):)?(\d{2}):(\d{2})(\.\d+)?/);
              if (!m3) {
                return null;
              }
              if (parseFloat(m3[2]) > 59) {
                return computeSeconds(m3[2], m3[3], 0, m3[4]);
              }
              return computeSeconds(m3[1], m3[2], m3[3], m3[4]);
            }
            var Settings = /* @__PURE__ */ function() {
              function Settings2() {
                this.values = /* @__PURE__ */ Object.create(null);
              }
              var _proto2 = Settings2.prototype;
              _proto2.set = function set(k4, v5) {
                if (!this.get(k4) && v5 !== "") {
                  this.values[k4] = v5;
                }
              };
              _proto2.get = function get(k4, dflt, defaultKey) {
                if (defaultKey) {
                  return this.has(k4) ? this.values[k4] : dflt[defaultKey];
                }
                return this.has(k4) ? this.values[k4] : dflt;
              };
              _proto2.has = function has(k4) {
                return k4 in this.values;
              };
              _proto2.alt = function alt(k4, v5, a3) {
                for (var n4 = 0; n4 < a3.length; ++n4) {
                  if (v5 === a3[n4]) {
                    this.set(k4, v5);
                    break;
                  }
                }
              };
              _proto2.integer = function integer(k4, v5) {
                if (/^-?\d+$/.test(v5)) {
                  this.set(k4, parseInt(v5, 10));
                }
              };
              _proto2.percent = function percent(k4, v5) {
                if (/^([\d]{1,3})(\.[\d]*)?%$/.test(v5)) {
                  var percent2 = parseFloat(v5);
                  if (percent2 >= 0 && percent2 <= 100) {
                    this.set(k4, percent2);
                    return true;
                  }
                }
                return false;
              };
              return Settings2;
            }();
            function parseOptions(input, callback, keyValueDelim, groupDelim) {
              var groups = groupDelim ? input.split(groupDelim) : [input];
              for (var i3 in groups) {
                if (typeof groups[i3] !== "string") {
                  continue;
                }
                var kv = groups[i3].split(keyValueDelim);
                if (kv.length !== 2) {
                  continue;
                }
                var _k = kv[0];
                var _v = kv[1];
                callback(_k, _v);
              }
            }
            var defaults = new _vttcue__WEBPACK_IMPORTED_MODULE_0__["default"](0, 0, "");
            var center = defaults.align === "middle" ? "middle" : "center";
            function parseCue(input, cue, regionList) {
              var oInput = input;
              function consumeTimeStamp() {
                var ts = parseTimeStamp(input);
                if (ts === null) {
                  throw new Error("Malformed timestamp: " + oInput);
                }
                input = input.replace(/^[^\sa-zA-Z-]+/, "");
                return ts;
              }
              function consumeCueSettings(input2, cue2) {
                var settings = new Settings();
                parseOptions(input2, function(k4, v5) {
                  var vals;
                  switch (k4) {
                    case "region":
                      for (var i3 = regionList.length - 1; i3 >= 0; i3--) {
                        if (regionList[i3].id === v5) {
                          settings.set(k4, regionList[i3].region);
                          break;
                        }
                      }
                      break;
                    case "vertical":
                      settings.alt(k4, v5, ["rl", "lr"]);
                      break;
                    case "line":
                      vals = v5.split(",");
                      settings.integer(k4, vals[0]);
                      if (settings.percent(k4, vals[0])) {
                        settings.set("snapToLines", false);
                      }
                      settings.alt(k4, vals[0], ["auto"]);
                      if (vals.length === 2) {
                        settings.alt("lineAlign", vals[1], ["start", center, "end"]);
                      }
                      break;
                    case "position":
                      vals = v5.split(",");
                      settings.percent(k4, vals[0]);
                      if (vals.length === 2) {
                        settings.alt("positionAlign", vals[1], ["start", center, "end", "line-left", "line-right", "auto"]);
                      }
                      break;
                    case "size":
                      settings.percent(k4, v5);
                      break;
                    case "align":
                      settings.alt(k4, v5, ["start", center, "end", "left", "right"]);
                      break;
                  }
                }, /:/, /\s/);
                cue2.region = settings.get("region", null);
                cue2.vertical = settings.get("vertical", "");
                var line = settings.get("line", "auto");
                if (line === "auto" && defaults.line === -1) {
                  line = -1;
                }
                cue2.line = line;
                cue2.lineAlign = settings.get("lineAlign", "start");
                cue2.snapToLines = settings.get("snapToLines", true);
                cue2.size = settings.get("size", 100);
                cue2.align = settings.get("align", center);
                var position = settings.get("position", "auto");
                if (position === "auto" && defaults.position === 50) {
                  position = cue2.align === "start" || cue2.align === "left" ? 0 : cue2.align === "end" || cue2.align === "right" ? 100 : 50;
                }
                cue2.position = position;
              }
              function skipWhitespace() {
                input = input.replace(/^\s+/, "");
              }
              skipWhitespace();
              cue.startTime = consumeTimeStamp();
              skipWhitespace();
              if (input.substr(0, 3) !== "-->") {
                throw new Error("Malformed time stamp (time stamps must be separated by '-->'): " + oInput);
              }
              input = input.substr(3);
              skipWhitespace();
              cue.endTime = consumeTimeStamp();
              skipWhitespace();
              consumeCueSettings(input, cue);
            }
            function fixLineBreaks(input) {
              return input.replace(/<br(?: \/)?>/gi, "\n");
            }
            var VTTParser = /* @__PURE__ */ function() {
              function VTTParser2() {
                this.state = "INITIAL";
                this.buffer = "";
                this.decoder = new StringDecoder();
                this.regionList = [];
                this.cue = null;
                this.oncue = void 0;
                this.onparsingerror = void 0;
                this.onflush = void 0;
              }
              var _proto3 = VTTParser2.prototype;
              _proto3.parse = function parse3(data) {
                var _this = this;
                if (data) {
                  _this.buffer += _this.decoder.decode(data, {
                    stream: true
                  });
                }
                function collectNextLine() {
                  var buffer = _this.buffer;
                  var pos = 0;
                  buffer = fixLineBreaks(buffer);
                  while (pos < buffer.length && buffer[pos] !== "\r" && buffer[pos] !== "\n") {
                    ++pos;
                  }
                  var line2 = buffer.substr(0, pos);
                  if (buffer[pos] === "\r") {
                    ++pos;
                  }
                  if (buffer[pos] === "\n") {
                    ++pos;
                  }
                  _this.buffer = buffer.substr(pos);
                  return line2;
                }
                function parseHeader(input) {
                  parseOptions(input, function(k4, v5) {
                  }, /:/);
                }
                try {
                  var line = "";
                  if (_this.state === "INITIAL") {
                    if (!/\r\n|\n/.test(_this.buffer)) {
                      return this;
                    }
                    line = collectNextLine();
                    var m3 = line.match(/^(ï»¿)?WEBVTT([ \t].*)?$/);
                    if (!m3 || !m3[0]) {
                      throw new Error("Malformed WebVTT signature.");
                    }
                    _this.state = "HEADER";
                  }
                  var alreadyCollectedLine = false;
                  while (_this.buffer) {
                    if (!/\r\n|\n/.test(_this.buffer)) {
                      return this;
                    }
                    if (!alreadyCollectedLine) {
                      line = collectNextLine();
                    } else {
                      alreadyCollectedLine = false;
                    }
                    switch (_this.state) {
                      case "HEADER":
                        if (/:/.test(line)) {
                          parseHeader(line);
                        } else if (!line) {
                          _this.state = "ID";
                        }
                        continue;
                      case "NOTE":
                        if (!line) {
                          _this.state = "ID";
                        }
                        continue;
                      case "ID":
                        if (/^NOTE($|[ \t])/.test(line)) {
                          _this.state = "NOTE";
                          break;
                        }
                        if (!line) {
                          continue;
                        }
                        _this.cue = new _vttcue__WEBPACK_IMPORTED_MODULE_0__["default"](0, 0, "");
                        _this.state = "CUE";
                        if (line.indexOf("-->") === -1) {
                          _this.cue.id = line;
                          continue;
                        }
                      case "CUE":
                        if (!_this.cue) {
                          _this.state = "BADCUE";
                          continue;
                        }
                        try {
                          parseCue(line, _this.cue, _this.regionList);
                        } catch (e4) {
                          _this.cue = null;
                          _this.state = "BADCUE";
                          continue;
                        }
                        _this.state = "CUETEXT";
                        continue;
                      case "CUETEXT":
                        {
                          var hasSubstring = line.indexOf("-->") !== -1;
                          if (!line || hasSubstring && (alreadyCollectedLine = true)) {
                            if (_this.oncue && _this.cue) {
                              _this.oncue(_this.cue);
                            }
                            _this.cue = null;
                            _this.state = "ID";
                            continue;
                          }
                          if (_this.cue === null) {
                            continue;
                          }
                          if (_this.cue.text) {
                            _this.cue.text += "\n";
                          }
                          _this.cue.text += line;
                        }
                        continue;
                      case "BADCUE":
                        if (!line) {
                          _this.state = "ID";
                        }
                    }
                  }
                } catch (e4) {
                  if (_this.state === "CUETEXT" && _this.cue && _this.oncue) {
                    _this.oncue(_this.cue);
                  }
                  _this.cue = null;
                  _this.state = _this.state === "INITIAL" ? "BADWEBVTT" : "BADCUE";
                }
                return this;
              };
              _proto3.flush = function flush() {
                var _this = this;
                try {
                  if (_this.cue || _this.state === "HEADER") {
                    _this.buffer += "\n\n";
                    _this.parse();
                  }
                  if (_this.state === "INITIAL" || _this.state === "BADWEBVTT") {
                    throw new Error("Malformed WebVTT signature.");
                  }
                } catch (e4) {
                  if (_this.onparsingerror) {
                    _this.onparsingerror(e4);
                  }
                }
                if (_this.onflush) {
                  _this.onflush();
                }
                return this;
              };
              return VTTParser2;
            }();
          },
          "./src/utils/webvtt-parser.ts": function(module2, __webpack_exports__, __webpack_require__) {
            "use strict";
            __webpack_require__.r(__webpack_exports__);
            __webpack_require__.d(__webpack_exports__, "generateCueId", function() {
              return generateCueId;
            });
            __webpack_require__.d(__webpack_exports__, "parseWebVTT", function() {
              return parseWebVTT;
            });
            var _home_runner_work_hls_js_hls_js_src_polyfills_number__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("./src/polyfills/number.ts");
            var _vttparser__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("./src/utils/vttparser.ts");
            var _demux_id3__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__("./src/demux/id3.ts");
            var _timescale_conversion__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__("./src/utils/timescale-conversion.ts");
            var _remux_mp4_remuxer__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__("./src/remux/mp4-remuxer.ts");
            var LINEBREAKS = /\r\n|\n\r|\n|\r/g;
            var startsWith = function startsWith2(inputString, searchString, position) {
              if (position === void 0) {
                position = 0;
              }
              return inputString.substr(position, searchString.length) === searchString;
            };
            var cueString2millis = function cueString2millis2(timeString) {
              var ts = parseInt(timeString.substr(-3));
              var secs = parseInt(timeString.substr(-6, 2));
              var mins = parseInt(timeString.substr(-9, 2));
              var hours = timeString.length > 9 ? parseInt(timeString.substr(0, timeString.indexOf(":"))) : 0;
              if (!Object(_home_runner_work_hls_js_hls_js_src_polyfills_number__WEBPACK_IMPORTED_MODULE_0__["isFiniteNumber"])(ts) || !Object(_home_runner_work_hls_js_hls_js_src_polyfills_number__WEBPACK_IMPORTED_MODULE_0__["isFiniteNumber"])(secs) || !Object(_home_runner_work_hls_js_hls_js_src_polyfills_number__WEBPACK_IMPORTED_MODULE_0__["isFiniteNumber"])(mins) || !Object(_home_runner_work_hls_js_hls_js_src_polyfills_number__WEBPACK_IMPORTED_MODULE_0__["isFiniteNumber"])(hours)) {
                throw Error("Malformed X-TIMESTAMP-MAP: Local:" + timeString);
              }
              ts += 1e3 * secs;
              ts += 60 * 1e3 * mins;
              ts += 60 * 60 * 1e3 * hours;
              return ts;
            };
            var hash = function hash2(text) {
              var hash3 = 5381;
              var i3 = text.length;
              while (i3) {
                hash3 = hash3 * 33 ^ text.charCodeAt(--i3);
              }
              return (hash3 >>> 0).toString();
            };
            function generateCueId(startTime, endTime, text) {
              return hash(startTime.toString()) + hash(endTime.toString()) + hash(text);
            }
            var calculateOffset = function calculateOffset2(vttCCs, cc, presentationTime) {
              var currCC = vttCCs[cc];
              var prevCC = vttCCs[currCC.prevCC];
              if (!prevCC || !prevCC.new && currCC.new) {
                vttCCs.ccOffset = vttCCs.presentationOffset = currCC.start;
                currCC.new = false;
                return;
              }
              while ((_prevCC = prevCC) !== null && _prevCC !== void 0 && _prevCC.new) {
                var _prevCC;
                vttCCs.ccOffset += currCC.start - prevCC.start;
                currCC.new = false;
                currCC = prevCC;
                prevCC = vttCCs[currCC.prevCC];
              }
              vttCCs.presentationOffset = presentationTime;
            };
            function parseWebVTT(vttByteArray, initPTS, timescale, vttCCs, cc, timeOffset, callBack, errorCallBack) {
              var parser = new _vttparser__WEBPACK_IMPORTED_MODULE_1__["VTTParser"]();
              var vttLines = Object(_demux_id3__WEBPACK_IMPORTED_MODULE_2__["utf8ArrayToStr"])(new Uint8Array(vttByteArray)).trim().replace(LINEBREAKS, "\n").split("\n");
              var cues = [];
              var initPTS90Hz = Object(_timescale_conversion__WEBPACK_IMPORTED_MODULE_3__["toMpegTsClockFromTimescale"])(initPTS, timescale);
              var cueTime = "00:00.000";
              var timestampMapMPEGTS = 0;
              var timestampMapLOCAL = 0;
              var parsingError;
              var inHeader = true;
              var timestampMap = false;
              parser.oncue = function(cue) {
                var currCC = vttCCs[cc];
                var cueOffset = vttCCs.ccOffset;
                var webVttMpegTsMapOffset = (timestampMapMPEGTS - initPTS90Hz) / 9e4;
                if (currCC !== null && currCC !== void 0 && currCC.new) {
                  if (timestampMapLOCAL !== void 0) {
                    cueOffset = vttCCs.ccOffset = currCC.start;
                  } else {
                    calculateOffset(vttCCs, cc, webVttMpegTsMapOffset);
                  }
                }
                if (webVttMpegTsMapOffset) {
                  cueOffset = webVttMpegTsMapOffset - vttCCs.presentationOffset;
                }
                if (timestampMap) {
                  var duration = cue.endTime - cue.startTime;
                  var startTime = Object(_remux_mp4_remuxer__WEBPACK_IMPORTED_MODULE_4__["normalizePts"])((cue.startTime + cueOffset - timestampMapLOCAL) * 9e4, timeOffset * 9e4) / 9e4;
                  cue.startTime = startTime;
                  cue.endTime = startTime + duration;
                }
                var text = cue.text.trim();
                cue.text = decodeURIComponent(encodeURIComponent(text));
                if (!cue.id) {
                  cue.id = generateCueId(cue.startTime, cue.endTime, text);
                }
                if (cue.endTime > 0) {
                  cues.push(cue);
                }
              };
              parser.onparsingerror = function(error) {
                parsingError = error;
              };
              parser.onflush = function() {
                if (parsingError) {
                  errorCallBack(parsingError);
                  return;
                }
                callBack(cues);
              };
              vttLines.forEach(function(line) {
                if (inHeader) {
                  if (startsWith(line, "X-TIMESTAMP-MAP=")) {
                    inHeader = false;
                    timestampMap = true;
                    line.substr(16).split(",").forEach(function(timestamp) {
                      if (startsWith(timestamp, "LOCAL:")) {
                        cueTime = timestamp.substr(6);
                      } else if (startsWith(timestamp, "MPEGTS:")) {
                        timestampMapMPEGTS = parseInt(timestamp.substr(7));
                      }
                    });
                    try {
                      timestampMapLOCAL = cueString2millis(cueTime) / 1e3;
                    } catch (error) {
                      timestampMap = false;
                      parsingError = error;
                    }
                    return;
                  } else if (line === "") {
                    inHeader = false;
                  }
                }
                parser.parse(line + "\n");
              });
              parser.flush();
            }
          },
          "./src/utils/xhr-loader.ts": function(module2, __webpack_exports__, __webpack_require__) {
            "use strict";
            __webpack_require__.r(__webpack_exports__);
            var _utils_logger__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("./src/utils/logger.ts");
            var _loader_load_stats__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("./src/loader/load-stats.ts");
            var AGE_HEADER_LINE_REGEX = /^age:\s*[\d.]+\s*$/m;
            var XhrLoader = /* @__PURE__ */ function() {
              function XhrLoader2(config2) {
                this.xhrSetup = void 0;
                this.requestTimeout = void 0;
                this.retryTimeout = void 0;
                this.retryDelay = void 0;
                this.config = null;
                this.callbacks = null;
                this.context = void 0;
                this.loader = null;
                this.stats = void 0;
                this.xhrSetup = config2 ? config2.xhrSetup : null;
                this.stats = new _loader_load_stats__WEBPACK_IMPORTED_MODULE_1__["LoadStats"]();
                this.retryDelay = 0;
              }
              var _proto = XhrLoader2.prototype;
              _proto.destroy = function destroy() {
                this.callbacks = null;
                this.abortInternal();
                this.loader = null;
                this.config = null;
              };
              _proto.abortInternal = function abortInternal() {
                var loader = this.loader;
                self.clearTimeout(this.requestTimeout);
                self.clearTimeout(this.retryTimeout);
                if (loader) {
                  loader.onreadystatechange = null;
                  loader.onprogress = null;
                  if (loader.readyState !== 4) {
                    this.stats.aborted = true;
                    loader.abort();
                  }
                }
              };
              _proto.abort = function abort() {
                var _this$callbacks;
                this.abortInternal();
                if ((_this$callbacks = this.callbacks) !== null && _this$callbacks !== void 0 && _this$callbacks.onAbort) {
                  this.callbacks.onAbort(this.stats, this.context, this.loader);
                }
              };
              _proto.load = function load(context, config2, callbacks) {
                if (this.stats.loading.start) {
                  throw new Error("Loader can only be used once.");
                }
                this.stats.loading.start = self.performance.now();
                this.context = context;
                this.config = config2;
                this.callbacks = callbacks;
                this.retryDelay = config2.retryDelay;
                this.loadInternal();
              };
              _proto.loadInternal = function loadInternal() {
                var config2 = this.config, context = this.context;
                if (!config2) {
                  return;
                }
                var xhr = this.loader = new self.XMLHttpRequest();
                var stats = this.stats;
                stats.loading.first = 0;
                stats.loaded = 0;
                var xhrSetup = this.xhrSetup;
                try {
                  if (xhrSetup) {
                    try {
                      xhrSetup(xhr, context.url);
                    } catch (e4) {
                      xhr.open("GET", context.url, true);
                      xhrSetup(xhr, context.url);
                    }
                  }
                  if (!xhr.readyState) {
                    xhr.open("GET", context.url, true);
                  }
                  var headers = this.context.headers;
                  if (headers) {
                    for (var header in headers) {
                      xhr.setRequestHeader(header, headers[header]);
                    }
                  }
                } catch (e4) {
                  this.callbacks.onError({
                    code: xhr.status,
                    text: e4.message
                  }, context, xhr);
                  return;
                }
                if (context.rangeEnd) {
                  xhr.setRequestHeader("Range", "bytes=" + context.rangeStart + "-" + (context.rangeEnd - 1));
                }
                xhr.onreadystatechange = this.readystatechange.bind(this);
                xhr.onprogress = this.loadprogress.bind(this);
                xhr.responseType = context.responseType;
                self.clearTimeout(this.requestTimeout);
                this.requestTimeout = self.setTimeout(this.loadtimeout.bind(this), config2.timeout);
                xhr.send();
              };
              _proto.readystatechange = function readystatechange() {
                var context = this.context, xhr = this.loader, stats = this.stats;
                if (!context || !xhr) {
                  return;
                }
                var readyState = xhr.readyState;
                var config2 = this.config;
                if (stats.aborted) {
                  return;
                }
                if (readyState >= 2) {
                  self.clearTimeout(this.requestTimeout);
                  if (stats.loading.first === 0) {
                    stats.loading.first = Math.max(self.performance.now(), stats.loading.start);
                  }
                  if (readyState === 4) {
                    xhr.onreadystatechange = null;
                    xhr.onprogress = null;
                    var status = xhr.status;
                    if (status >= 200 && status < 300) {
                      stats.loading.end = Math.max(self.performance.now(), stats.loading.first);
                      var data;
                      var len;
                      if (context.responseType === "arraybuffer") {
                        data = xhr.response;
                        len = data.byteLength;
                      } else {
                        data = xhr.responseText;
                        len = data.length;
                      }
                      stats.loaded = stats.total = len;
                      if (!this.callbacks) {
                        return;
                      }
                      var onProgress = this.callbacks.onProgress;
                      if (onProgress) {
                        onProgress(stats, context, data, xhr);
                      }
                      if (!this.callbacks) {
                        return;
                      }
                      var response = {
                        url: xhr.responseURL,
                        data
                      };
                      this.callbacks.onSuccess(response, stats, context, xhr);
                    } else {
                      if (stats.retry >= config2.maxRetry || status >= 400 && status < 499) {
                        _utils_logger__WEBPACK_IMPORTED_MODULE_0__["logger"].error(status + " while loading " + context.url);
                        this.callbacks.onError({
                          code: status,
                          text: xhr.statusText
                        }, context, xhr);
                      } else {
                        _utils_logger__WEBPACK_IMPORTED_MODULE_0__["logger"].warn(status + " while loading " + context.url + ", retrying in " + this.retryDelay + "...");
                        this.abortInternal();
                        this.loader = null;
                        self.clearTimeout(this.retryTimeout);
                        this.retryTimeout = self.setTimeout(this.loadInternal.bind(this), this.retryDelay);
                        this.retryDelay = Math.min(2 * this.retryDelay, config2.maxRetryDelay);
                        stats.retry++;
                      }
                    }
                  } else {
                    self.clearTimeout(this.requestTimeout);
                    this.requestTimeout = self.setTimeout(this.loadtimeout.bind(this), config2.timeout);
                  }
                }
              };
              _proto.loadtimeout = function loadtimeout() {
                _utils_logger__WEBPACK_IMPORTED_MODULE_0__["logger"].warn("timeout while loading " + this.context.url);
                var callbacks = this.callbacks;
                if (callbacks) {
                  this.abortInternal();
                  callbacks.onTimeout(this.stats, this.context, this.loader);
                }
              };
              _proto.loadprogress = function loadprogress(event) {
                var stats = this.stats;
                stats.loaded = event.loaded;
                if (event.lengthComputable) {
                  stats.total = event.total;
                }
              };
              _proto.getCacheAge = function getCacheAge() {
                var result = null;
                if (this.loader && AGE_HEADER_LINE_REGEX.test(this.loader.getAllResponseHeaders())) {
                  var ageHeader = this.loader.getResponseHeader("age");
                  result = ageHeader ? parseFloat(ageHeader) : null;
                }
                return result;
              };
              return XhrLoader2;
            }();
            __webpack_exports__["default"] = XhrLoader;
          }
        })["default"];
      });
    }
  });

  // node_modules/node-webvtt/lib/parser.js
  var require_parser = __commonJS({
    "node_modules/node-webvtt/lib/parser.js"(exports, module) {
      "use strict";
      function ParserError(message, error) {
        this.message = message;
        this.error = error;
      }
      ParserError.prototype = Object.create(Error.prototype);
      var TIMESTAMP_REGEXP = /([0-9]{1,2})?:?([0-9]{2}):([0-9]{2}\.[0-9]{2,3})/;
      function parse3(input, options) {
        if (!options) {
          options = {};
        }
        const { meta = false, strict = true } = options;
        if (typeof input !== "string") {
          throw new ParserError("Input must be a string");
        }
        input = input.trim();
        input = input.replace(/\r\n/g, "\n");
        input = input.replace(/\r/g, "\n");
        const parts = input.split("\n\n");
        const header = parts.shift();
        if (!header.startsWith("WEBVTT")) {
          throw new ParserError('Must start with "WEBVTT"');
        }
        const headerParts = header.split("\n");
        const headerComments = headerParts[0].replace("WEBVTT", "");
        if (headerComments.length > 0 && (headerComments[0] !== " " && headerComments[0] !== "	")) {
          throw new ParserError("Header comment must start with space or tab");
        }
        if (parts.length === 0 && headerParts.length === 1) {
          return { valid: true, strict, cues: [], errors: [] };
        }
        if (!meta && headerParts.length > 1 && headerParts[1] !== "") {
          throw new ParserError("Missing blank line after signature");
        }
        const { cues, errors } = parseCues(parts, strict);
        if (strict && errors.length > 0) {
          throw errors[0];
        }
        const headerMeta = meta ? parseMeta(headerParts) : null;
        const result = { valid: errors.length === 0, strict, cues, errors };
        if (meta) {
          result.meta = headerMeta;
        }
        return result;
      }
      function parseMeta(headerParts) {
        const meta = {};
        headerParts.slice(1).forEach((header) => {
          const splitIdx = header.indexOf(":");
          const key = header.slice(0, splitIdx).trim();
          const value = header.slice(splitIdx + 1).trim();
          meta[key] = value;
        });
        return Object.keys(meta).length > 0 ? meta : null;
      }
      function parseCues(cues, strict) {
        const errors = [];
        const parsedCues = cues.map((cue, i3) => {
          try {
            return parseCue(cue, i3, strict);
          } catch (e4) {
            errors.push(e4);
            return null;
          }
        }).filter(Boolean);
        return {
          cues: parsedCues,
          errors
        };
      }
      function parseCue(cue, i3, strict) {
        let identifier = "";
        let start = 0;
        let end = 0.01;
        let text = "";
        let styles = "";
        const lines = cue.split("\n").filter(Boolean);
        if (lines.length > 0 && lines[0].trim().startsWith("NOTE")) {
          return null;
        }
        if (lines.length === 1 && !lines[0].includes("-->")) {
          throw new ParserError(`Cue identifier cannot be standalone (cue #${i3})`);
        }
        if (lines.length > 1 && !(lines[0].includes("-->") || lines[1].includes("-->"))) {
          const msg = `Cue identifier needs to be followed by timestamp (cue #${i3})`;
          throw new ParserError(msg);
        }
        if (lines.length > 1 && lines[1].includes("-->")) {
          identifier = lines.shift();
        }
        const times = typeof lines[0] === "string" && lines[0].split(" --> ");
        if (times.length !== 2 || !validTimestamp(times[0]) || !validTimestamp(times[1])) {
          throw new ParserError(`Invalid cue timestamp (cue #${i3})`);
        }
        start = parseTimestamp(times[0]);
        end = parseTimestamp(times[1]);
        if (strict) {
          if (start > end) {
            throw new ParserError(`Start timestamp greater than end (cue #${i3})`);
          }
          if (end <= start) {
            throw new ParserError(`End must be greater than start (cue #${i3})`);
          }
        }
        if (!strict && end < start) {
          throw new ParserError(`End must be greater or equal to start when not strict (cue #${i3})`);
        }
        styles = times[1].replace(TIMESTAMP_REGEXP, "").trim();
        lines.shift();
        text = lines.join("\n");
        if (!text) {
          return false;
        }
        return { identifier, start, end, text, styles };
      }
      function validTimestamp(timestamp) {
        return TIMESTAMP_REGEXP.test(timestamp);
      }
      function parseTimestamp(timestamp) {
        const matches = timestamp.match(TIMESTAMP_REGEXP);
        let secs = parseFloat(matches[1] || 0) * 60 * 60;
        secs += parseFloat(matches[2]) * 60;
        secs += parseFloat(matches[3]);
        return secs;
      }
      module.exports = { ParserError, parse: parse3 };
    }
  });

  // node_modules/node-webvtt/lib/compiler.js
  var require_compiler = __commonJS({
    "node_modules/node-webvtt/lib/compiler.js"(exports, module) {
      "use strict";
      function CompilerError(message, error) {
        this.message = message;
        this.error = error;
      }
      CompilerError.prototype = Object.create(Error.prototype);
      function compile(input) {
        if (!input) {
          throw new CompilerError("Input must be non-null");
        }
        if (typeof input !== "object") {
          throw new CompilerError("Input must be an object");
        }
        if (Array.isArray(input)) {
          throw new CompilerError("Input cannot be array");
        }
        if (!input.valid) {
          throw new CompilerError("Input must be valid");
        }
        let output = "WEBVTT\n";
        if (input.meta) {
          if (typeof input.meta !== "object" || Array.isArray(input.meta)) {
            throw new CompilerError("Metadata must be an object");
          }
          Object.entries(input.meta).forEach((i3) => {
            if (typeof i3[1] !== "string") {
              throw new CompilerError(`Metadata value for "${i3[0]}" must be string`);
            }
            output += `${i3[0]}: ${i3[1]}
`;
          });
        }
        let lastTime = null;
        input.cues.forEach((cue, index) => {
          if (lastTime && lastTime > cue.start) {
            throw new CompilerError(`Cue number ${index} is not in chronological order`);
          }
          lastTime = cue.start;
          output += "\n";
          output += compileCue(cue);
          output += "\n";
        });
        return output;
      }
      function compileCue(cue) {
        if (typeof cue !== "object") {
          throw new CompilerError("Cue malformed: not of type object");
        }
        if (typeof cue.identifier !== "string" && typeof cue.identifier !== "number" && cue.identifier !== null) {
          throw new CompilerError(`Cue malformed: identifier value is not a string.
    ${JSON.stringify(cue)}`);
        }
        if (isNaN(cue.start)) {
          throw new CompilerError(`Cue malformed: null start value.
    ${JSON.stringify(cue)}`);
        }
        if (isNaN(cue.end)) {
          throw new CompilerError(`Cue malformed: null end value.
    ${JSON.stringify(cue)}`);
        }
        if (cue.start >= cue.end) {
          throw new CompilerError(`Cue malformed: start timestamp greater than end
    ${JSON.stringify(cue)}`);
        }
        if (typeof cue.text !== "string") {
          throw new CompilerError(`Cue malformed: null text value.
    ${JSON.stringify(cue)}`);
        }
        if (typeof cue.styles !== "string") {
          throw new CompilerError(`Cue malformed: null styles value.
    ${JSON.stringify(cue)}`);
        }
        let output = "";
        if (cue.identifier.length > 0) {
          output += `${cue.identifier}
`;
        }
        const startTimestamp = convertTimestamp(cue.start);
        const endTimestamp = convertTimestamp(cue.end);
        output += `${startTimestamp} --> ${endTimestamp}`;
        output += cue.styles ? ` ${cue.styles}` : "";
        output += `
${cue.text}`;
        return output;
      }
      function convertTimestamp(time) {
        const hours = pad(calculateHours(time), 2);
        const minutes = pad(calculateMinutes(time), 2);
        const seconds = pad(calculateSeconds(time), 2);
        const milliseconds = pad(calculateMs(time), 3);
        return `${hours}:${minutes}:${seconds}.${milliseconds}`;
      }
      function pad(num, zeroes) {
        let output = `${num}`;
        while (output.length < zeroes) {
          output = `0${output}`;
        }
        return output;
      }
      function calculateHours(time) {
        return Math.floor(time / 60 / 60);
      }
      function calculateMinutes(time) {
        return Math.floor(time / 60) % 60;
      }
      function calculateSeconds(time) {
        return Math.floor(time % 60);
      }
      function calculateMs(time) {
        return Math.floor((time % 1).toFixed(4) * 1e3);
      }
      module.exports = { CompilerError, compile };
    }
  });

  // node_modules/node-webvtt/lib/segmenter.js
  var require_segmenter = __commonJS({
    "node_modules/node-webvtt/lib/segmenter.js"(exports, module) {
      "use strict";
      var parse3 = require_parser().parse;
      function segment(input, segmentLength) {
        segmentLength = segmentLength || 10;
        const parsed = parse3(input);
        const segments = [];
        let cues = [];
        let queuedCue = null;
        let currentSegmentDuration = 0;
        let totalSegmentsDuration = 0;
        parsed.cues.forEach((cue, i3) => {
          const firstCue = i3 === 0;
          const lastCue = i3 === parsed.cues.length - 1;
          const start = cue.start;
          const end = cue.end;
          const nextStart = lastCue ? Infinity : parsed.cues[i3 + 1].start;
          const cueLength = firstCue ? end : end - start;
          const silence = firstCue ? 0 : start - parsed.cues[i3 - 1].end;
          currentSegmentDuration = currentSegmentDuration + cueLength + silence;
          debug("------------");
          debug(`Cue #${i3}, segment #${segments.length + 1}`);
          debug(`Start ${start}`);
          debug(`End ${end}`);
          debug(`Length ${cueLength}`);
          debug(`Total segment duration = ${totalSegmentsDuration}`);
          debug(`Current segment duration = ${currentSegmentDuration}`);
          debug(`Start of next = ${nextStart}`);
          if (queuedCue) {
            cues.push(queuedCue);
            currentSegmentDuration += queuedCue.end - totalSegmentsDuration;
            queuedCue = null;
          }
          cues.push(cue);
          let shouldQueue = nextStart - end < segmentLength && silence < segmentLength && currentSegmentDuration > segmentLength;
          if (shouldSegment(totalSegmentsDuration, segmentLength, nextStart, silence)) {
            const duration = segmentDuration(lastCue, end, segmentLength, currentSegmentDuration, totalSegmentsDuration);
            segments.push({ duration, cues });
            totalSegmentsDuration += duration;
            currentSegmentDuration = 0;
            cues = [];
          } else {
            shouldQueue = false;
          }
          if (shouldQueue) {
            queuedCue = cue;
          }
        });
        return segments;
      }
      function shouldSegment(total, length, nextStart, silence) {
        const x4 = alignToSegmentLength(silence, length);
        const nextCueIsInNextSegment = silence <= length || x4 + total < nextStart;
        return nextCueIsInNextSegment && nextStart - total >= length;
      }
      function segmentDuration(lastCue, end, length, currentSegment, totalSegments) {
        let duration = length;
        if (currentSegment > length) {
          duration = alignToSegmentLength(currentSegment - length, length);
        }
        if (lastCue) {
          duration = parseFloat((end - totalSegments).toFixed(2));
        } else {
          duration = Math.round(duration);
        }
        return duration;
      }
      function alignToSegmentLength(n4, segmentLength) {
        n4 += segmentLength - n4 % segmentLength;
        return n4;
      }
      var debugging = false;
      function debug(m3) {
        if (debugging) {
          console.log(m3);
        }
      }
      module.exports = { segment };
    }
  });

  // node_modules/node-webvtt/lib/hls.js
  var require_hls2 = __commonJS({
    "node_modules/node-webvtt/lib/hls.js"(exports, module) {
      "use strict";
      var segment = require_segmenter().segment;
      function hlsSegment(input, segmentLength, startOffset) {
        if (typeof startOffset === "undefined") {
          startOffset = "900000";
        }
        const segments = segment(input, segmentLength);
        const result = [];
        segments.forEach((seg, i3) => {
          const content = `WEBVTT
X-TIMESTAMP-MAP=MPEGTS:${startOffset},LOCAL:00:00:00.000

${printableCues(seg.cues)}
`;
          const filename = generateSegmentFilename(i3);
          result.push({ filename, content });
        });
        return result;
      }
      function hlsSegmentPlaylist(input, segmentLength) {
        const segmented = segment(input, segmentLength);
        const printable = printableSegments(segmented);
        const longestSegment = Math.round(findLongestSegment(segmented));
        const template = `#EXTM3U
#EXT-X-TARGETDURATION:${longestSegment}
#EXT-X-VERSION:3
#EXT-X-MEDIA-SEQUENCE:0
#EXT-X-PLAYLIST-TYPE:VOD
${printable}
#EXT-X-ENDLIST
`;
        return template;
      }
      function pad(num, n4) {
        const padding = "0".repeat(Math.max(0, n4 - num.toString().length));
        return `${padding}${num}`;
      }
      function generateSegmentFilename(index) {
        return `${index}.vtt`;
      }
      function printableSegments(segments) {
        const result = [];
        segments.forEach((seg, i3) => {
          result.push(`#EXTINF:${seg.duration.toFixed(5)},
${generateSegmentFilename(i3)}`);
        });
        return result.join("\n");
      }
      function findLongestSegment(segments) {
        let max = 0;
        segments.forEach((seg) => {
          if (seg.duration > max) {
            max = seg.duration;
          }
        });
        return max;
      }
      function printableCues(cues) {
        const result = [];
        cues.forEach((cue) => {
          result.push(printableCue(cue));
        });
        return result.join("\n\n");
      }
      function printableCue(cue) {
        const printable = [];
        if (cue.identifier) {
          printable.push(cue.identifier);
        }
        const start = printableTimestamp(cue.start);
        const end = printableTimestamp(cue.end);
        const styles = cue.styles ? `${cue.styles}` : "";
        printable.push(`${start} --> ${end} ${styles}`);
        printable.push(cue.text);
        return printable.join("\n");
      }
      function printableTimestamp(timestamp) {
        const ms = (timestamp % 1).toFixed(3);
        timestamp = Math.round(timestamp - ms);
        const hours = Math.floor(timestamp / 3600);
        const mins = Math.floor((timestamp - hours * 3600) / 60);
        const secs = timestamp - hours * 3600 - mins * 60;
        const hourString = `${pad(hours, 2)}:`;
        return `${hourString}${pad(mins, 2)}:${pad(secs, 2)}.${pad(ms * 1e3, 3)}`;
      }
      module.exports = { hlsSegment, hlsSegmentPlaylist };
    }
  });

  // node_modules/node-webvtt/index.js
  var require_node_webvtt = __commonJS({
    "node_modules/node-webvtt/index.js"(exports, module) {
      "use strict";
      var parse3 = require_parser().parse;
      var compile = require_compiler().compile;
      var segment = require_segmenter().segment;
      var hls = require_hls2();
      module.exports = { parse: parse3, compile, segment, hls };
    }
  });

  // node_modules/openseadragon/build/openseadragon/openseadragon.js
  var require_openseadragon = __commonJS({
    "node_modules/openseadragon/build/openseadragon/openseadragon.js"(exports, module) {
      function OpenSeadragon2(options) {
        return new OpenSeadragon2.Viewer(options);
      }
      (function($3) {
        $3.version = {
          versionStr: "3.0.0",
          major: parseInt("3", 10),
          minor: parseInt("0", 10),
          revision: parseInt("0", 10)
        };
        var class2type = {
          "[object Boolean]": "boolean",
          "[object Number]": "number",
          "[object String]": "string",
          "[object Function]": "function",
          "[object Array]": "array",
          "[object Date]": "date",
          "[object RegExp]": "regexp",
          "[object Object]": "object"
        }, toString = Object.prototype.toString, hasOwn = Object.prototype.hasOwnProperty;
        $3.isFunction = function(obj) {
          return $3.type(obj) === "function";
        };
        $3.isArray = Array.isArray || function(obj) {
          return $3.type(obj) === "array";
        };
        $3.isWindow = function(obj) {
          return obj && typeof obj === "object" && "setInterval" in obj;
        };
        $3.type = function(obj) {
          return obj === null || obj === void 0 ? String(obj) : class2type[toString.call(obj)] || "object";
        };
        $3.isPlainObject = function(obj) {
          if (!obj || OpenSeadragon2.type(obj) !== "object" || obj.nodeType || $3.isWindow(obj)) {
            return false;
          }
          if (obj.constructor && !hasOwn.call(obj, "constructor") && !hasOwn.call(obj.constructor.prototype, "isPrototypeOf")) {
            return false;
          }
          var lastKey;
          for (var key in obj) {
            lastKey = key;
          }
          return lastKey === void 0 || hasOwn.call(obj, lastKey);
        };
        $3.isEmptyObject = function(obj) {
          for (var name in obj) {
            return false;
          }
          return true;
        };
        $3.freezeObject = function(obj) {
          if (Object.freeze) {
            $3.freezeObject = Object.freeze;
          } else {
            $3.freezeObject = function(obj2) {
              return obj2;
            };
          }
          return $3.freezeObject(obj);
        };
        $3.supportsCanvas = function() {
          var canvasElement = document.createElement("canvas");
          return !!($3.isFunction(canvasElement.getContext) && canvasElement.getContext("2d"));
        }();
        $3.isCanvasTainted = function(canvas) {
          var isTainted = false;
          try {
            canvas.getContext("2d").getImageData(0, 0, 1, 1);
          } catch (e4) {
            isTainted = true;
          }
          return isTainted;
        };
        $3.supportsAddEventListener = function() {
          return !!(document.documentElement.addEventListener && document.addEventListener);
        }();
        $3.supportsRemoveEventListener = function() {
          return !!(document.documentElement.removeEventListener && document.removeEventListener);
        }();
        $3.supportsEventListenerOptions = function() {
          var supported = 0;
          if ($3.supportsAddEventListener) {
            try {
              var options = {
                get capture() {
                  supported++;
                  return false;
                },
                get once() {
                  supported++;
                  return false;
                },
                get passive() {
                  supported++;
                  return false;
                }
              };
              window.addEventListener("test", null, options);
              window.removeEventListener("test", null, options);
            } catch (e4) {
              supported = 0;
            }
          }
          return supported >= 3;
        }();
        $3.getCurrentPixelDensityRatio = function() {
          if ($3.supportsCanvas) {
            var context = document.createElement("canvas").getContext("2d");
            var devicePixelRatio = window.devicePixelRatio || 1;
            var backingStoreRatio = context.webkitBackingStorePixelRatio || context.mozBackingStorePixelRatio || context.msBackingStorePixelRatio || context.oBackingStorePixelRatio || context.backingStorePixelRatio || 1;
            return Math.max(devicePixelRatio, 1) / backingStoreRatio;
          } else {
            return 1;
          }
        };
        $3.pixelDensityRatio = $3.getCurrentPixelDensityRatio();
      })(OpenSeadragon2);
      (function($3) {
        $3.extend = function() {
          var options, name, src, copy, copyIsArray, clone, target = arguments[0] || {}, length = arguments.length, deep = false, i3 = 1;
          if (typeof target === "boolean") {
            deep = target;
            target = arguments[1] || {};
            i3 = 2;
          }
          if (typeof target !== "object" && !OpenSeadragon2.isFunction(target)) {
            target = {};
          }
          if (length === i3) {
            target = this;
            --i3;
          }
          for (; i3 < length; i3++) {
            options = arguments[i3];
            if (options !== null || options !== void 0) {
              for (name in options) {
                src = target[name];
                copy = options[name];
                if (target === copy) {
                  continue;
                }
                if (deep && copy && (OpenSeadragon2.isPlainObject(copy) || (copyIsArray = OpenSeadragon2.isArray(copy)))) {
                  if (copyIsArray) {
                    copyIsArray = false;
                    clone = src && OpenSeadragon2.isArray(src) ? src : [];
                  } else {
                    clone = src && OpenSeadragon2.isPlainObject(src) ? src : {};
                  }
                  target[name] = OpenSeadragon2.extend(deep, clone, copy);
                } else if (copy !== void 0) {
                  target[name] = copy;
                }
              }
            }
          }
          return target;
        };
        var isIOSDevice = function() {
          if (typeof navigator !== "object") {
            return false;
          }
          var userAgent = navigator.userAgent;
          if (typeof userAgent !== "string") {
            return false;
          }
          return userAgent.indexOf("iPhone") !== -1 || userAgent.indexOf("iPad") !== -1 || userAgent.indexOf("iPod") !== -1;
        };
        $3.extend($3, {
          DEFAULT_SETTINGS: {
            xmlPath: null,
            tileSources: null,
            tileHost: null,
            initialPage: 0,
            crossOriginPolicy: false,
            ajaxWithCredentials: false,
            loadTilesWithAjax: false,
            ajaxHeaders: {},
            panHorizontal: true,
            panVertical: true,
            constrainDuringPan: false,
            wrapHorizontal: false,
            wrapVertical: false,
            visibilityRatio: 0.5,
            minPixelRatio: 0.5,
            defaultZoomLevel: 0,
            minZoomLevel: null,
            maxZoomLevel: null,
            homeFillsViewer: false,
            clickTimeThreshold: 300,
            clickDistThreshold: 5,
            dblClickTimeThreshold: 300,
            dblClickDistThreshold: 20,
            springStiffness: 6.5,
            animationTime: 1.2,
            gestureSettingsMouse: {
              dragToPan: true,
              scrollToZoom: true,
              clickToZoom: true,
              dblClickToZoom: false,
              pinchToZoom: false,
              zoomToRefPoint: true,
              flickEnabled: false,
              flickMinSpeed: 120,
              flickMomentum: 0.25,
              pinchRotate: false
            },
            gestureSettingsTouch: {
              dragToPan: true,
              scrollToZoom: false,
              clickToZoom: false,
              dblClickToZoom: true,
              pinchToZoom: true,
              zoomToRefPoint: true,
              flickEnabled: true,
              flickMinSpeed: 120,
              flickMomentum: 0.25,
              pinchRotate: false
            },
            gestureSettingsPen: {
              dragToPan: true,
              scrollToZoom: false,
              clickToZoom: true,
              dblClickToZoom: false,
              pinchToZoom: false,
              zoomToRefPoint: true,
              flickEnabled: false,
              flickMinSpeed: 120,
              flickMomentum: 0.25,
              pinchRotate: false
            },
            gestureSettingsUnknown: {
              dragToPan: true,
              scrollToZoom: false,
              clickToZoom: false,
              dblClickToZoom: true,
              pinchToZoom: true,
              zoomToRefPoint: true,
              flickEnabled: true,
              flickMinSpeed: 120,
              flickMomentum: 0.25,
              pinchRotate: false
            },
            zoomPerClick: 2,
            zoomPerScroll: 1.2,
            zoomPerSecond: 1,
            blendTime: 0,
            alwaysBlend: false,
            autoHideControls: true,
            immediateRender: false,
            minZoomImageRatio: 0.9,
            maxZoomPixelRatio: 1.1,
            smoothTileEdgesMinZoom: 1.1,
            iOSDevice: isIOSDevice(),
            pixelsPerWheelLine: 40,
            pixelsPerArrowPress: 40,
            autoResize: true,
            preserveImageSizeOnResize: false,
            minScrollDeltaTime: 50,
            rotationIncrement: 90,
            showSequenceControl: true,
            sequenceControlAnchor: null,
            preserveViewport: false,
            preserveOverlays: false,
            navPrevNextWrap: false,
            showNavigationControl: true,
            navigationControlAnchor: null,
            showZoomControl: true,
            showHomeControl: true,
            showFullPageControl: true,
            showRotationControl: false,
            showFlipControl: false,
            controlsFadeDelay: 2e3,
            controlsFadeLength: 1500,
            mouseNavEnabled: true,
            showNavigator: false,
            navigatorId: null,
            navigatorPosition: null,
            navigatorSizeRatio: 0.2,
            navigatorMaintainSizeRatio: false,
            navigatorTop: null,
            navigatorLeft: null,
            navigatorHeight: null,
            navigatorWidth: null,
            navigatorAutoResize: true,
            navigatorAutoFade: true,
            navigatorRotate: true,
            navigatorBackground: "#000",
            navigatorOpacity: 0.8,
            navigatorBorderColor: "#555",
            navigatorDisplayRegionColor: "#900",
            degrees: 0,
            flipped: false,
            opacity: 1,
            preload: false,
            compositeOperation: null,
            imageSmoothingEnabled: true,
            placeholderFillStyle: null,
            showReferenceStrip: false,
            referenceStripScroll: "horizontal",
            referenceStripElement: null,
            referenceStripHeight: null,
            referenceStripWidth: null,
            referenceStripPosition: "BOTTOM_LEFT",
            referenceStripSizeRatio: 0.2,
            collectionRows: 3,
            collectionColumns: 0,
            collectionLayout: "horizontal",
            collectionMode: false,
            collectionTileSize: 800,
            collectionTileMargin: 80,
            imageLoaderLimit: 0,
            maxImageCacheCount: 200,
            timeout: 3e4,
            useCanvas: true,
            prefixUrl: "/images/",
            navImages: {
              zoomIn: {
                REST: "zoomin_rest.png",
                GROUP: "zoomin_grouphover.png",
                HOVER: "zoomin_hover.png",
                DOWN: "zoomin_pressed.png"
              },
              zoomOut: {
                REST: "zoomout_rest.png",
                GROUP: "zoomout_grouphover.png",
                HOVER: "zoomout_hover.png",
                DOWN: "zoomout_pressed.png"
              },
              home: {
                REST: "home_rest.png",
                GROUP: "home_grouphover.png",
                HOVER: "home_hover.png",
                DOWN: "home_pressed.png"
              },
              fullpage: {
                REST: "fullpage_rest.png",
                GROUP: "fullpage_grouphover.png",
                HOVER: "fullpage_hover.png",
                DOWN: "fullpage_pressed.png"
              },
              rotateleft: {
                REST: "rotateleft_rest.png",
                GROUP: "rotateleft_grouphover.png",
                HOVER: "rotateleft_hover.png",
                DOWN: "rotateleft_pressed.png"
              },
              rotateright: {
                REST: "rotateright_rest.png",
                GROUP: "rotateright_grouphover.png",
                HOVER: "rotateright_hover.png",
                DOWN: "rotateright_pressed.png"
              },
              flip: {
                REST: "flip_rest.png",
                GROUP: "flip_grouphover.png",
                HOVER: "flip_hover.png",
                DOWN: "flip_pressed.png"
              },
              previous: {
                REST: "previous_rest.png",
                GROUP: "previous_grouphover.png",
                HOVER: "previous_hover.png",
                DOWN: "previous_pressed.png"
              },
              next: {
                REST: "next_rest.png",
                GROUP: "next_grouphover.png",
                HOVER: "next_hover.png",
                DOWN: "next_pressed.png"
              }
            },
            debugMode: false,
            debugGridColor: ["#437AB2", "#1B9E77", "#D95F02", "#7570B3", "#E7298A", "#66A61E", "#E6AB02", "#A6761D", "#666666"]
          },
          SIGNAL: "----seadragon----",
          delegate: function(object, method) {
            return function() {
              var args = arguments;
              if (args === void 0) {
                args = [];
              }
              return method.apply(object, args);
            };
          },
          BROWSERS: {
            UNKNOWN: 0,
            IE: 1,
            FIREFOX: 2,
            SAFARI: 3,
            CHROME: 4,
            OPERA: 5,
            EDGE: 6,
            CHROMEEDGE: 7
          },
          _viewers: /* @__PURE__ */ new Map(),
          getViewer: function(element) {
            return $3._viewers.get(this.getElement(element));
          },
          getElement: function(element) {
            if (typeof element === "string") {
              element = document.getElementById(element);
            }
            return element;
          },
          getElementPosition: function(element) {
            var result = new $3.Point(), isFixed, offsetParent;
            element = $3.getElement(element);
            isFixed = $3.getElementStyle(element).position === "fixed";
            offsetParent = getOffsetParent(element, isFixed);
            while (offsetParent) {
              result.x += element.offsetLeft;
              result.y += element.offsetTop;
              if (isFixed) {
                result = result.plus($3.getPageScroll());
              }
              element = offsetParent;
              isFixed = $3.getElementStyle(element).position === "fixed";
              offsetParent = getOffsetParent(element, isFixed);
            }
            return result;
          },
          getElementOffset: function(element) {
            element = $3.getElement(element);
            var doc = element && element.ownerDocument, docElement, win, boundingRect = { top: 0, left: 0 };
            if (!doc) {
              return new $3.Point();
            }
            docElement = doc.documentElement;
            if (typeof element.getBoundingClientRect !== "undefined") {
              boundingRect = element.getBoundingClientRect();
            }
            win = doc === doc.window ? doc : doc.nodeType === 9 ? doc.defaultView || doc.parentWindow : false;
            return new $3.Point(boundingRect.left + (win.pageXOffset || docElement.scrollLeft) - (docElement.clientLeft || 0), boundingRect.top + (win.pageYOffset || docElement.scrollTop) - (docElement.clientTop || 0));
          },
          getElementSize: function(element) {
            element = $3.getElement(element);
            return new $3.Point(element.clientWidth, element.clientHeight);
          },
          getElementStyle: document.documentElement.currentStyle ? function(element) {
            element = $3.getElement(element);
            return element.currentStyle;
          } : function(element) {
            element = $3.getElement(element);
            return window.getComputedStyle(element, "");
          },
          getCssPropertyWithVendorPrefix: function(property) {
            var memo = {};
            $3.getCssPropertyWithVendorPrefix = function(property2) {
              if (memo[property2] !== void 0) {
                return memo[property2];
              }
              var style = document.createElement("div").style;
              var result = null;
              if (style[property2] !== void 0) {
                result = property2;
              } else {
                var prefixes = [
                  "Webkit",
                  "Moz",
                  "MS",
                  "O",
                  "webkit",
                  "moz",
                  "ms",
                  "o"
                ];
                var suffix = $3.capitalizeFirstLetter(property2);
                for (var i3 = 0; i3 < prefixes.length; i3++) {
                  var prop = prefixes[i3] + suffix;
                  if (style[prop] !== void 0) {
                    result = prop;
                    break;
                  }
                }
              }
              memo[property2] = result;
              return result;
            };
            return $3.getCssPropertyWithVendorPrefix(property);
          },
          capitalizeFirstLetter: function(string) {
            return string.charAt(0).toUpperCase() + string.slice(1);
          },
          positiveModulo: function(number, modulo) {
            var result = number % modulo;
            if (result < 0) {
              result += modulo;
            }
            return result;
          },
          pointInElement: function(element, point) {
            element = $3.getElement(element);
            var offset = $3.getElementOffset(element), size = $3.getElementSize(element);
            return point.x >= offset.x && point.x < offset.x + size.x && point.y < offset.y + size.y && point.y >= offset.y;
          },
          getMousePosition: function(event) {
            if (typeof event.pageX === "number") {
              $3.getMousePosition = function(event2) {
                var result = new $3.Point();
                result.x = event2.pageX;
                result.y = event2.pageY;
                return result;
              };
            } else if (typeof event.clientX === "number") {
              $3.getMousePosition = function(event2) {
                var result = new $3.Point();
                result.x = event2.clientX + document.body.scrollLeft + document.documentElement.scrollLeft;
                result.y = event2.clientY + document.body.scrollTop + document.documentElement.scrollTop;
                return result;
              };
            } else {
              throw new Error("Unknown event mouse position, no known technique.");
            }
            return $3.getMousePosition(event);
          },
          getPageScroll: function() {
            var docElement = document.documentElement || {}, body = document.body || {};
            if (typeof window.pageXOffset === "number") {
              $3.getPageScroll = function() {
                return new $3.Point(window.pageXOffset, window.pageYOffset);
              };
            } else if (body.scrollLeft || body.scrollTop) {
              $3.getPageScroll = function() {
                return new $3.Point(document.body.scrollLeft, document.body.scrollTop);
              };
            } else if (docElement.scrollLeft || docElement.scrollTop) {
              $3.getPageScroll = function() {
                return new $3.Point(document.documentElement.scrollLeft, document.documentElement.scrollTop);
              };
            } else {
              return new $3.Point(0, 0);
            }
            return $3.getPageScroll();
          },
          setPageScroll: function(scroll) {
            if (typeof window.scrollTo !== "undefined") {
              $3.setPageScroll = function(scroll2) {
                window.scrollTo(scroll2.x, scroll2.y);
              };
            } else {
              var originalScroll = $3.getPageScroll();
              if (originalScroll.x === scroll.x && originalScroll.y === scroll.y) {
                return;
              }
              document.body.scrollLeft = scroll.x;
              document.body.scrollTop = scroll.y;
              var currentScroll = $3.getPageScroll();
              if (currentScroll.x !== originalScroll.x && currentScroll.y !== originalScroll.y) {
                $3.setPageScroll = function(scroll2) {
                  document.body.scrollLeft = scroll2.x;
                  document.body.scrollTop = scroll2.y;
                };
                return;
              }
              document.documentElement.scrollLeft = scroll.x;
              document.documentElement.scrollTop = scroll.y;
              currentScroll = $3.getPageScroll();
              if (currentScroll.x !== originalScroll.x && currentScroll.y !== originalScroll.y) {
                $3.setPageScroll = function(scroll2) {
                  document.documentElement.scrollLeft = scroll2.x;
                  document.documentElement.scrollTop = scroll2.y;
                };
                return;
              }
              $3.setPageScroll = function(scroll2) {
              };
            }
            $3.setPageScroll(scroll);
          },
          getWindowSize: function() {
            var docElement = document.documentElement || {}, body = document.body || {};
            if (typeof window.innerWidth === "number") {
              $3.getWindowSize = function() {
                return new $3.Point(window.innerWidth, window.innerHeight);
              };
            } else if (docElement.clientWidth || docElement.clientHeight) {
              $3.getWindowSize = function() {
                return new $3.Point(document.documentElement.clientWidth, document.documentElement.clientHeight);
              };
            } else if (body.clientWidth || body.clientHeight) {
              $3.getWindowSize = function() {
                return new $3.Point(document.body.clientWidth, document.body.clientHeight);
              };
            } else {
              throw new Error("Unknown window size, no known technique.");
            }
            return $3.getWindowSize();
          },
          makeCenteredNode: function(element) {
            element = $3.getElement(element);
            var wrappers = [
              $3.makeNeutralElement("div"),
              $3.makeNeutralElement("div"),
              $3.makeNeutralElement("div")
            ];
            $3.extend(wrappers[0].style, {
              display: "table",
              height: "100%",
              width: "100%"
            });
            $3.extend(wrappers[1].style, {
              display: "table-row"
            });
            $3.extend(wrappers[2].style, {
              display: "table-cell",
              verticalAlign: "middle",
              textAlign: "center"
            });
            wrappers[0].appendChild(wrappers[1]);
            wrappers[1].appendChild(wrappers[2]);
            wrappers[2].appendChild(element);
            return wrappers[0];
          },
          makeNeutralElement: function(tagName) {
            var element = document.createElement(tagName), style = element.style;
            style.background = "transparent none";
            style.border = "none";
            style.margin = "0px";
            style.padding = "0px";
            style.position = "static";
            return element;
          },
          now: function() {
            if (Date.now) {
              $3.now = Date.now;
            } else {
              $3.now = function() {
                return new Date().getTime();
              };
            }
            return $3.now();
          },
          makeTransparentImage: function(src) {
            var img = $3.makeNeutralElement("img");
            img.src = src;
            return img;
          },
          setElementOpacity: function(element, opacity, usesAlpha) {
            var ieOpacity, ieFilter;
            element = $3.getElement(element);
            if (usesAlpha && !$3.Browser.alpha) {
              opacity = Math.round(opacity);
            }
            if ($3.Browser.opacity) {
              element.style.opacity = opacity < 1 ? opacity : "";
            } else {
              if (opacity < 1) {
                ieOpacity = Math.round(100 * opacity);
                ieFilter = "alpha(opacity=" + ieOpacity + ")";
                element.style.filter = ieFilter;
              } else {
                element.style.filter = "";
              }
            }
          },
          setElementTouchActionNone: function(element) {
            element = $3.getElement(element);
            if (typeof element.style.touchAction !== "undefined") {
              element.style.touchAction = "none";
            } else if (typeof element.style.msTouchAction !== "undefined") {
              element.style.msTouchAction = "none";
            }
          },
          setElementPointerEvents: function(element, value) {
            element = $3.getElement(element);
            if (typeof element.style.pointerEvents !== "undefined") {
              element.style.pointerEvents = value;
            }
          },
          setElementPointerEventsNone: function(element) {
            $3.setElementPointerEvents(element, "none");
          },
          addClass: function(element, className) {
            element = $3.getElement(element);
            if (!element.className) {
              element.className = className;
            } else if ((" " + element.className + " ").indexOf(" " + className + " ") === -1) {
              element.className += " " + className;
            }
          },
          indexOf: function(array, searchElement, fromIndex) {
            if (Array.prototype.indexOf) {
              this.indexOf = function(array2, searchElement2, fromIndex2) {
                return array2.indexOf(searchElement2, fromIndex2);
              };
            } else {
              this.indexOf = function(array2, searchElement2, fromIndex2) {
                var i3, pivot = fromIndex2 ? fromIndex2 : 0, length;
                if (!array2) {
                  throw new TypeError();
                }
                length = array2.length;
                if (length === 0 || pivot >= length) {
                  return -1;
                }
                if (pivot < 0) {
                  pivot = length - Math.abs(pivot);
                }
                for (i3 = pivot; i3 < length; i3++) {
                  if (array2[i3] === searchElement2) {
                    return i3;
                  }
                }
                return -1;
              };
            }
            return this.indexOf(array, searchElement, fromIndex);
          },
          removeClass: function(element, className) {
            var oldClasses, newClasses = [], i3;
            element = $3.getElement(element);
            oldClasses = element.className.split(/\s+/);
            for (i3 = 0; i3 < oldClasses.length; i3++) {
              if (oldClasses[i3] && oldClasses[i3] !== className) {
                newClasses.push(oldClasses[i3]);
              }
            }
            element.className = newClasses.join(" ");
          },
          normalizeEventListenerOptions: function(options) {
            var opts;
            if (typeof options !== "undefined") {
              if (typeof options === "boolean") {
                opts = $3.supportsEventListenerOptions ? { capture: options } : options;
              } else {
                opts = $3.supportsEventListenerOptions ? options : typeof options.capture !== "undefined" ? options.capture : false;
              }
            } else {
              opts = $3.supportsEventListenerOptions ? { capture: false } : false;
            }
            return opts;
          },
          addEvent: function() {
            if ($3.supportsAddEventListener) {
              return function(element, eventName, handler, options) {
                options = $3.normalizeEventListenerOptions(options);
                element = $3.getElement(element);
                element.addEventListener(eventName, handler, options);
              };
            } else if (document.documentElement.attachEvent && document.attachEvent) {
              return function(element, eventName, handler) {
                element = $3.getElement(element);
                element.attachEvent("on" + eventName, handler);
              };
            } else {
              throw new Error("No known event model.");
            }
          }(),
          removeEvent: function() {
            if ($3.supportsRemoveEventListener) {
              return function(element, eventName, handler, options) {
                options = $3.normalizeEventListenerOptions(options);
                element = $3.getElement(element);
                element.removeEventListener(eventName, handler, options);
              };
            } else if (document.documentElement.detachEvent && document.detachEvent) {
              return function(element, eventName, handler) {
                element = $3.getElement(element);
                element.detachEvent("on" + eventName, handler);
              };
            } else {
              throw new Error("No known event model.");
            }
          }(),
          cancelEvent: function(event) {
            event.preventDefault();
          },
          eventIsCanceled: function(event) {
            return event.defaultPrevented;
          },
          stopEvent: function(event) {
            event.stopPropagation();
          },
          createCallback: function(object, method) {
            var initialArgs = [], i3;
            for (i3 = 2; i3 < arguments.length; i3++) {
              initialArgs.push(arguments[i3]);
            }
            return function() {
              var args = initialArgs.concat([]), i4;
              for (i4 = 0; i4 < arguments.length; i4++) {
                args.push(arguments[i4]);
              }
              return method.apply(object, args);
            };
          },
          getUrlParameter: function(key) {
            var value = URLPARAMS[key];
            return value ? value : null;
          },
          getUrlProtocol: function(url) {
            var match = url.match(/^([a-z]+:)\/\//i);
            if (match === null) {
              return window.location.protocol;
            }
            return match[1].toLowerCase();
          },
          createAjaxRequest: function(local) {
            var supportActiveX;
            try {
              supportActiveX = !!new ActiveXObject("Microsoft.XMLHTTP");
            } catch (e4) {
              supportActiveX = false;
            }
            if (supportActiveX) {
              if (window.XMLHttpRequest) {
                $3.createAjaxRequest = function(local2) {
                  if (local2) {
                    return new ActiveXObject("Microsoft.XMLHTTP");
                  }
                  return new XMLHttpRequest();
                };
              } else {
                $3.createAjaxRequest = function() {
                  return new ActiveXObject("Microsoft.XMLHTTP");
                };
              }
            } else if (window.XMLHttpRequest) {
              $3.createAjaxRequest = function() {
                return new XMLHttpRequest();
              };
            } else {
              throw new Error("Browser doesn't support XMLHttpRequest.");
            }
            return $3.createAjaxRequest(local);
          },
          makeAjaxRequest: function(url, onSuccess, onError) {
            var withCredentials;
            var headers;
            var responseType;
            if ($3.isPlainObject(url)) {
              onSuccess = url.success;
              onError = url.error;
              withCredentials = url.withCredentials;
              headers = url.headers;
              responseType = url.responseType || null;
              url = url.url;
            }
            var protocol = $3.getUrlProtocol(url);
            var request = $3.createAjaxRequest(protocol === "file:");
            if (!$3.isFunction(onSuccess)) {
              throw new Error("makeAjaxRequest requires a success callback");
            }
            request.onreadystatechange = function() {
              if (request.readyState === 4) {
                request.onreadystatechange = function() {
                };
                if (request.status >= 200 && request.status < 300 || request.status === 0 && protocol !== "http:" && protocol !== "https:") {
                  onSuccess(request);
                } else {
                  $3.console.log("AJAX request returned %d: %s", request.status, url);
                  if ($3.isFunction(onError)) {
                    onError(request);
                  }
                }
              }
            };
            try {
              request.open("GET", url, true);
              if (responseType) {
                request.responseType = responseType;
              }
              if (headers) {
                for (var headerName in headers) {
                  if (Object.prototype.hasOwnProperty.call(headers, headerName) && headers[headerName]) {
                    request.setRequestHeader(headerName, headers[headerName]);
                  }
                }
              }
              if (withCredentials) {
                request.withCredentials = true;
              }
              request.send(null);
            } catch (e4) {
              $3.console.log("%s while making AJAX request: %s", e4.name, e4.message);
              request.onreadystatechange = function() {
              };
              if ($3.isFunction(onError)) {
                onError(request, e4);
              }
            }
            return request;
          },
          jsonp: function(options) {
            var script, url = options.url, head = document.head || document.getElementsByTagName("head")[0] || document.documentElement, jsonpCallback = options.callbackName || "openseadragon" + $3.now(), previous = window[jsonpCallback], replace = "$1" + jsonpCallback + "$2", callbackParam = options.param || "callback", callback = options.callback;
            url = url.replace(/(=)\?(&|$)|\?\?/i, replace);
            url += (/\?/.test(url) ? "&" : "?") + callbackParam + "=" + jsonpCallback;
            window[jsonpCallback] = function(response) {
              if (!previous) {
                try {
                  delete window[jsonpCallback];
                } catch (e4) {
                }
              } else {
                window[jsonpCallback] = previous;
              }
              if (callback && $3.isFunction(callback)) {
                callback(response);
              }
            };
            script = document.createElement("script");
            if (options.async !== void 0 || options.async !== false) {
              script.async = "async";
            }
            if (options.scriptCharset) {
              script.charset = options.scriptCharset;
            }
            script.src = url;
            script.onload = script.onreadystatechange = function(_3, isAbort) {
              if (isAbort || !script.readyState || /loaded|complete/.test(script.readyState)) {
                script.onload = script.onreadystatechange = null;
                if (head && script.parentNode) {
                  head.removeChild(script);
                }
                script = void 0;
              }
            };
            head.insertBefore(script, head.firstChild);
          },
          createFromDZI: function() {
            throw "OpenSeadragon.createFromDZI is deprecated, use Viewer.open.";
          },
          parseXml: function(string) {
            if (window.DOMParser) {
              $3.parseXml = function(string2) {
                var xmlDoc = null, parser;
                parser = new DOMParser();
                xmlDoc = parser.parseFromString(string2, "text/xml");
                return xmlDoc;
              };
            } else if (window.ActiveXObject) {
              $3.parseXml = function(string2) {
                var xmlDoc = null;
                xmlDoc = new ActiveXObject("Microsoft.XMLDOM");
                xmlDoc.async = false;
                xmlDoc.loadXML(string2);
                return xmlDoc;
              };
            } else {
              throw new Error("Browser doesn't support XML DOM.");
            }
            return $3.parseXml(string);
          },
          parseJSON: function(string) {
            $3.parseJSON = window.JSON.parse;
            return $3.parseJSON(string);
          },
          imageFormatSupported: function(extension) {
            extension = extension ? extension : "";
            return !!FILEFORMATS[extension.toLowerCase()];
          },
          setImageFormatsSupported: function(formats) {
            $3.extend(FILEFORMATS, formats);
          }
        });
        var nullfunction = function(msg) {
        };
        $3.console = window.console || {
          log: nullfunction,
          debug: nullfunction,
          info: nullfunction,
          warn: nullfunction,
          error: nullfunction,
          assert: nullfunction
        };
        $3.Browser = {
          vendor: $3.BROWSERS.UNKNOWN,
          version: 0,
          alpha: true
        };
        var FILEFORMATS = {
          bmp: false,
          jpeg: true,
          jpg: true,
          png: true,
          tif: false,
          wdp: false
        }, URLPARAMS = {};
        (function() {
          var ver = navigator.appVersion, ua = navigator.userAgent, regex;
          switch (navigator.appName) {
            case "Microsoft Internet Explorer":
              if (!!window.attachEvent && !!window.ActiveXObject) {
                $3.Browser.vendor = $3.BROWSERS.IE;
                $3.Browser.version = parseFloat(ua.substring(ua.indexOf("MSIE") + 5, ua.indexOf(";", ua.indexOf("MSIE"))));
              }
              break;
            case "Netscape":
              if (window.addEventListener) {
                if (ua.indexOf("Edge") >= 0) {
                  $3.Browser.vendor = $3.BROWSERS.EDGE;
                  $3.Browser.version = parseFloat(ua.substring(ua.indexOf("Edge") + 5));
                } else if (ua.indexOf("Edg") >= 0) {
                  $3.Browser.vendor = $3.BROWSERS.CHROMEEDGE;
                  $3.Browser.version = parseFloat(ua.substring(ua.indexOf("Edg") + 4));
                } else if (ua.indexOf("Firefox") >= 0) {
                  $3.Browser.vendor = $3.BROWSERS.FIREFOX;
                  $3.Browser.version = parseFloat(ua.substring(ua.indexOf("Firefox") + 8));
                } else if (ua.indexOf("Safari") >= 0) {
                  $3.Browser.vendor = ua.indexOf("Chrome") >= 0 ? $3.BROWSERS.CHROME : $3.BROWSERS.SAFARI;
                  $3.Browser.version = parseFloat(ua.substring(ua.substring(0, ua.indexOf("Safari")).lastIndexOf("/") + 1, ua.indexOf("Safari")));
                } else {
                  regex = new RegExp("Trident/.*rv:([0-9]{1,}[.0-9]{0,})");
                  if (regex.exec(ua) !== null) {
                    $3.Browser.vendor = $3.BROWSERS.IE;
                    $3.Browser.version = parseFloat(RegExp.$1);
                  }
                }
              }
              break;
            case "Opera":
              $3.Browser.vendor = $3.BROWSERS.OPERA;
              $3.Browser.version = parseFloat(ver);
              break;
          }
          var query = window.location.search.substring(1), parts = query.split("&"), part, sep, i3;
          for (i3 = 0; i3 < parts.length; i3++) {
            part = parts[i3];
            sep = part.indexOf("=");
            if (sep > 0) {
              var key = part.substring(0, sep), value = part.substring(sep + 1);
              try {
                URLPARAMS[key] = decodeURIComponent(value);
              } catch (e4) {
                $3.console.error("Ignoring malformed URL parameter: %s=%s", key, value);
              }
            }
          }
          $3.Browser.alpha = !($3.Browser.vendor === $3.BROWSERS.CHROME && $3.Browser.version < 2);
          $3.Browser.opacity = true;
          if ($3.Browser.vendor === $3.BROWSERS.IE && $3.Browser.version < 11) {
            $3.console.error("Internet Explorer versions < 11 are not supported by OpenSeadragon");
          }
        })();
        (function(w4) {
          var requestAnimationFrame2 = w4.requestAnimationFrame || w4.mozRequestAnimationFrame || w4.webkitRequestAnimationFrame || w4.msRequestAnimationFrame;
          var cancelAnimationFrame2 = w4.cancelAnimationFrame || w4.mozCancelAnimationFrame || w4.webkitCancelAnimationFrame || w4.msCancelAnimationFrame;
          if (requestAnimationFrame2 && cancelAnimationFrame2) {
            $3.requestAnimationFrame = function() {
              return requestAnimationFrame2.apply(w4, arguments);
            };
            $3.cancelAnimationFrame = function() {
              return cancelAnimationFrame2.apply(w4, arguments);
            };
          } else {
            var aAnimQueue = [], processing = [], iRequestId = 0, iIntervalId;
            $3.requestAnimationFrame = function(callback) {
              aAnimQueue.push([++iRequestId, callback]);
              if (!iIntervalId) {
                iIntervalId = setInterval(function() {
                  if (aAnimQueue.length) {
                    var time = $3.now();
                    var temp = processing;
                    processing = aAnimQueue;
                    aAnimQueue = temp;
                    while (processing.length) {
                      processing.shift()[1](time);
                    }
                  } else {
                    clearInterval(iIntervalId);
                    iIntervalId = void 0;
                  }
                }, 1e3 / 50);
              }
              return iRequestId;
            };
            $3.cancelAnimationFrame = function(requestId) {
              var i3, j3;
              for (i3 = 0, j3 = aAnimQueue.length; i3 < j3; i3 += 1) {
                if (aAnimQueue[i3][0] === requestId) {
                  aAnimQueue.splice(i3, 1);
                  return;
                }
              }
              for (i3 = 0, j3 = processing.length; i3 < j3; i3 += 1) {
                if (processing[i3][0] === requestId) {
                  processing.splice(i3, 1);
                  return;
                }
              }
            };
          }
        })(window);
        function getOffsetParent(element, isFixed) {
          if (isFixed && element !== document.body) {
            return document.body;
          } else {
            return element.offsetParent;
          }
        }
      })(OpenSeadragon2);
      (function(root2, factory) {
        if (typeof define === "function" && define.amd) {
          define([], factory);
        } else if (typeof module === "object" && module.exports) {
          module.exports = factory();
        } else {
          root2.OpenSeadragon = factory();
        }
      })(exports, function() {
        return OpenSeadragon2;
      });
      (function($3) {
        var fullScreenApi = {
          supportsFullScreen: false,
          isFullScreen: function() {
            return false;
          },
          getFullScreenElement: function() {
            return null;
          },
          requestFullScreen: function() {
          },
          exitFullScreen: function() {
          },
          cancelFullScreen: function() {
          },
          fullScreenEventName: "",
          fullScreenErrorEventName: ""
        };
        if (document.exitFullscreen) {
          fullScreenApi.supportsFullScreen = true;
          fullScreenApi.getFullScreenElement = function() {
            return document.fullscreenElement;
          };
          fullScreenApi.requestFullScreen = function(element) {
            return element.requestFullscreen();
          };
          fullScreenApi.exitFullScreen = function() {
            document.exitFullscreen();
          };
          fullScreenApi.fullScreenEventName = "fullscreenchange";
          fullScreenApi.fullScreenErrorEventName = "fullscreenerror";
        } else if (document.msExitFullscreen) {
          fullScreenApi.supportsFullScreen = true;
          fullScreenApi.getFullScreenElement = function() {
            return document.msFullscreenElement;
          };
          fullScreenApi.requestFullScreen = function(element) {
            return element.msRequestFullscreen();
          };
          fullScreenApi.exitFullScreen = function() {
            document.msExitFullscreen();
          };
          fullScreenApi.fullScreenEventName = "MSFullscreenChange";
          fullScreenApi.fullScreenErrorEventName = "MSFullscreenError";
        } else if (document.webkitExitFullscreen) {
          fullScreenApi.supportsFullScreen = true;
          fullScreenApi.getFullScreenElement = function() {
            return document.webkitFullscreenElement;
          };
          fullScreenApi.requestFullScreen = function(element) {
            return element.webkitRequestFullscreen();
          };
          fullScreenApi.exitFullScreen = function() {
            document.webkitExitFullscreen();
          };
          fullScreenApi.fullScreenEventName = "webkitfullscreenchange";
          fullScreenApi.fullScreenErrorEventName = "webkitfullscreenerror";
        } else if (document.webkitCancelFullScreen) {
          fullScreenApi.supportsFullScreen = true;
          fullScreenApi.getFullScreenElement = function() {
            return document.webkitCurrentFullScreenElement;
          };
          fullScreenApi.requestFullScreen = function(element) {
            return element.webkitRequestFullScreen();
          };
          fullScreenApi.exitFullScreen = function() {
            document.webkitCancelFullScreen();
          };
          fullScreenApi.fullScreenEventName = "webkitfullscreenchange";
          fullScreenApi.fullScreenErrorEventName = "webkitfullscreenerror";
        } else if (document.mozCancelFullScreen) {
          fullScreenApi.supportsFullScreen = true;
          fullScreenApi.getFullScreenElement = function() {
            return document.mozFullScreenElement;
          };
          fullScreenApi.requestFullScreen = function(element) {
            return element.mozRequestFullScreen();
          };
          fullScreenApi.exitFullScreen = function() {
            document.mozCancelFullScreen();
          };
          fullScreenApi.fullScreenEventName = "mozfullscreenchange";
          fullScreenApi.fullScreenErrorEventName = "mozfullscreenerror";
        }
        fullScreenApi.isFullScreen = function() {
          return fullScreenApi.getFullScreenElement() !== null;
        };
        fullScreenApi.cancelFullScreen = function() {
          $3.console.error("cancelFullScreen is deprecated. Use exitFullScreen instead.");
          fullScreenApi.exitFullScreen();
        };
        $3.extend($3, fullScreenApi);
      })(OpenSeadragon2);
      (function($3) {
        $3.EventSource = function() {
          this.events = {};
        };
        $3.EventSource.prototype = {
          addOnceHandler: function(eventName, handler, userData, times) {
            var self2 = this;
            times = times || 1;
            var count = 0;
            var onceHandler = function(event) {
              count++;
              if (count === times) {
                self2.removeHandler(eventName, onceHandler);
              }
              handler(event);
            };
            this.addHandler(eventName, onceHandler, userData);
          },
          addHandler: function(eventName, handler, userData) {
            var events = this.events[eventName];
            if (!events) {
              this.events[eventName] = events = [];
            }
            if (handler && $3.isFunction(handler)) {
              events[events.length] = { handler, userData: userData || null };
            }
          },
          removeHandler: function(eventName, handler) {
            var events = this.events[eventName], handlers = [], i3;
            if (!events) {
              return;
            }
            if ($3.isArray(events)) {
              for (i3 = 0; i3 < events.length; i3++) {
                if (events[i3].handler !== handler) {
                  handlers.push(events[i3]);
                }
              }
              this.events[eventName] = handlers;
            }
          },
          removeAllHandlers: function(eventName) {
            if (eventName) {
              this.events[eventName] = [];
            } else {
              for (var eventType in this.events) {
                this.events[eventType] = [];
              }
            }
          },
          getHandler: function(eventName) {
            var events = this.events[eventName];
            if (!events || !events.length) {
              return null;
            }
            events = events.length === 1 ? [events[0]] : Array.apply(null, events);
            return function(source, args) {
              var i3, length = events.length;
              for (i3 = 0; i3 < length; i3++) {
                if (events[i3]) {
                  args.eventSource = source;
                  args.userData = events[i3].userData;
                  events[i3].handler(args);
                }
              }
            };
          },
          raiseEvent: function(eventName, eventArgs) {
            var handler = this.getHandler(eventName);
            if (handler) {
              if (!eventArgs) {
                eventArgs = {};
              }
              handler(this, eventArgs);
            }
          }
        };
      })(OpenSeadragon2);
      (function($3) {
        var MOUSETRACKERS = [];
        var THIS = {};
        $3.MouseTracker = function(options) {
          MOUSETRACKERS.push(this);
          var args = arguments;
          if (!$3.isPlainObject(options)) {
            options = {
              element: args[0],
              clickTimeThreshold: args[1],
              clickDistThreshold: args[2]
            };
          }
          this.hash = Math.random();
          this.element = $3.getElement(options.element);
          this.clickTimeThreshold = options.clickTimeThreshold || $3.DEFAULT_SETTINGS.clickTimeThreshold;
          this.clickDistThreshold = options.clickDistThreshold || $3.DEFAULT_SETTINGS.clickDistThreshold;
          this.dblClickTimeThreshold = options.dblClickTimeThreshold || $3.DEFAULT_SETTINGS.dblClickTimeThreshold;
          this.dblClickDistThreshold = options.dblClickDistThreshold || $3.DEFAULT_SETTINGS.dblClickDistThreshold;
          this.userData = options.userData || null;
          this.stopDelay = options.stopDelay || 50;
          this.preProcessEventHandler = options.preProcessEventHandler || null;
          this.contextMenuHandler = options.contextMenuHandler || null;
          this.enterHandler = options.enterHandler || null;
          this.leaveHandler = options.leaveHandler || null;
          this.exitHandler = options.exitHandler || null;
          this.overHandler = options.overHandler || null;
          this.outHandler = options.outHandler || null;
          this.pressHandler = options.pressHandler || null;
          this.nonPrimaryPressHandler = options.nonPrimaryPressHandler || null;
          this.releaseHandler = options.releaseHandler || null;
          this.nonPrimaryReleaseHandler = options.nonPrimaryReleaseHandler || null;
          this.moveHandler = options.moveHandler || null;
          this.scrollHandler = options.scrollHandler || null;
          this.clickHandler = options.clickHandler || null;
          this.dblClickHandler = options.dblClickHandler || null;
          this.dragHandler = options.dragHandler || null;
          this.dragEndHandler = options.dragEndHandler || null;
          this.pinchHandler = options.pinchHandler || null;
          this.stopHandler = options.stopHandler || null;
          this.keyDownHandler = options.keyDownHandler || null;
          this.keyUpHandler = options.keyUpHandler || null;
          this.keyHandler = options.keyHandler || null;
          this.focusHandler = options.focusHandler || null;
          this.blurHandler = options.blurHandler || null;
          var _this = this;
          THIS[this.hash] = {
            click: function(event) {
              onClick(_this, event);
            },
            dblclick: function(event) {
              onDblClick(_this, event);
            },
            keydown: function(event) {
              onKeyDown(_this, event);
            },
            keyup: function(event) {
              onKeyUp(_this, event);
            },
            keypress: function(event) {
              onKeyPress(_this, event);
            },
            focus: function(event) {
              onFocus(_this, event);
            },
            blur: function(event) {
              onBlur(_this, event);
            },
            contextmenu: function(event) {
              onContextMenu(_this, event);
            },
            wheel: function(event) {
              onWheel(_this, event);
            },
            mousewheel: function(event) {
              onMouseWheel(_this, event);
            },
            DOMMouseScroll: function(event) {
              onMouseWheel(_this, event);
            },
            MozMousePixelScroll: function(event) {
              onMouseWheel(_this, event);
            },
            losecapture: function(event) {
              onLoseCapture(_this, event);
            },
            mouseenter: function(event) {
              onPointerEnter(_this, event);
            },
            mouseleave: function(event) {
              onPointerLeave(_this, event);
            },
            mouseover: function(event) {
              onPointerOver(_this, event);
            },
            mouseout: function(event) {
              onPointerOut(_this, event);
            },
            mousedown: function(event) {
              onPointerDown(_this, event);
            },
            mouseup: function(event) {
              onPointerUp(_this, event);
            },
            mousemove: function(event) {
              onPointerMove(_this, event);
            },
            touchstart: function(event) {
              onTouchStart(_this, event);
            },
            touchend: function(event) {
              onTouchEnd(_this, event);
            },
            touchmove: function(event) {
              onTouchMove(_this, event);
            },
            touchcancel: function(event) {
              onTouchCancel(_this, event);
            },
            gesturestart: function(event) {
              onGestureStart(_this, event);
            },
            gesturechange: function(event) {
              onGestureChange(_this, event);
            },
            gotpointercapture: function(event) {
              onGotPointerCapture(_this, event);
            },
            lostpointercapture: function(event) {
              onLostPointerCapture(_this, event);
            },
            pointerenter: function(event) {
              onPointerEnter(_this, event);
            },
            pointerleave: function(event) {
              onPointerLeave(_this, event);
            },
            pointerover: function(event) {
              onPointerOver(_this, event);
            },
            pointerout: function(event) {
              onPointerOut(_this, event);
            },
            pointerdown: function(event) {
              onPointerDown(_this, event);
            },
            pointerup: function(event) {
              onPointerUp(_this, event);
            },
            pointermove: function(event) {
              onPointerMove(_this, event);
            },
            pointercancel: function(event) {
              onPointerCancel(_this, event);
            },
            pointerupcaptured: function(event) {
              onPointerUpCaptured(_this, event);
            },
            pointermovecaptured: function(event) {
              onPointerMoveCaptured(_this, event);
            },
            tracking: false,
            activePointersLists: [],
            lastClickPos: null,
            dblClickTimeOut: null,
            pinchGPoints: [],
            lastPinchDist: 0,
            currentPinchDist: 0,
            lastPinchCenter: null,
            currentPinchCenter: null,
            sentDragEvent: false
          };
          this.hasGestureHandlers = !!(this.pressHandler || this.nonPrimaryPressHandler || this.releaseHandler || this.nonPrimaryReleaseHandler || this.clickHandler || this.dblClickHandler || this.dragHandler || this.dragEndHandler || this.pinchHandler);
          this.hasScrollHandler = !!this.scrollHandler;
          if ($3.MouseTracker.havePointerEvents) {
            $3.setElementPointerEvents(this.element, "auto");
          }
          if (this.exitHandler) {
            $3.console.error("MouseTracker.exitHandler is deprecated. Use MouseTracker.leaveHandler instead.");
          }
          if (!options.startDisabled) {
            this.setTracking(true);
          }
        };
        $3.MouseTracker.prototype = {
          destroy: function() {
            var i3;
            stopTracking(this);
            this.element = null;
            for (i3 = 0; i3 < MOUSETRACKERS.length; i3++) {
              if (MOUSETRACKERS[i3] === this) {
                MOUSETRACKERS.splice(i3, 1);
                break;
              }
            }
            THIS[this.hash] = null;
            delete THIS[this.hash];
          },
          isTracking: function() {
            return THIS[this.hash].tracking;
          },
          setTracking: function(track) {
            if (track) {
              startTracking(this);
            } else {
              stopTracking(this);
            }
            return this;
          },
          getActivePointersListByType: function(type) {
            var delegate = THIS[this.hash], i3, len = delegate.activePointersLists.length, list;
            for (i3 = 0; i3 < len; i3++) {
              if (delegate.activePointersLists[i3].type === type) {
                return delegate.activePointersLists[i3];
              }
            }
            list = new $3.MouseTracker.GesturePointList(type);
            delegate.activePointersLists.push(list);
            return list;
          },
          getActivePointerCount: function() {
            var delegate = THIS[this.hash], i3, len = delegate.activePointersLists.length, count = 0;
            for (i3 = 0; i3 < len; i3++) {
              count += delegate.activePointersLists[i3].getLength();
            }
            return count;
          },
          preProcessEventHandler: function() {
          },
          contextMenuHandler: function() {
          },
          enterHandler: function() {
          },
          leaveHandler: function() {
          },
          exitHandler: function() {
          },
          overHandler: function() {
          },
          outHandler: function() {
          },
          pressHandler: function() {
          },
          nonPrimaryPressHandler: function() {
          },
          releaseHandler: function() {
          },
          nonPrimaryReleaseHandler: function() {
          },
          moveHandler: function() {
          },
          scrollHandler: function() {
          },
          clickHandler: function() {
          },
          dblClickHandler: function() {
          },
          dragHandler: function() {
          },
          dragEndHandler: function() {
          },
          pinchHandler: function() {
          },
          stopHandler: function() {
          },
          keyDownHandler: function() {
          },
          keyUpHandler: function() {
          },
          keyHandler: function() {
          },
          focusHandler: function() {
          },
          blurHandler: function() {
          }
        };
        var isInIframe = function() {
          try {
            return window.self !== window.top;
          } catch (e4) {
            return true;
          }
        }();
        function canAccessEvents(target) {
          try {
            return target.addEventListener && target.removeEventListener;
          } catch (e4) {
            return false;
          }
        }
        $3.MouseTracker.gesturePointVelocityTracker = function() {
          var trackerPoints = [], intervalId = 0, lastTime = 0;
          var _generateGuid = function(tracker, gPoint) {
            return tracker.hash.toString() + gPoint.type + gPoint.id.toString();
          };
          var _doTracking = function() {
            var i3, len = trackerPoints.length, trackPoint, gPoint, now = $3.now(), elapsedTime, distance, speed;
            elapsedTime = now - lastTime;
            lastTime = now;
            for (i3 = 0; i3 < len; i3++) {
              trackPoint = trackerPoints[i3];
              gPoint = trackPoint.gPoint;
              gPoint.direction = Math.atan2(gPoint.currentPos.y - trackPoint.lastPos.y, gPoint.currentPos.x - trackPoint.lastPos.x);
              distance = trackPoint.lastPos.distanceTo(gPoint.currentPos);
              trackPoint.lastPos = gPoint.currentPos;
              speed = 1e3 * distance / (elapsedTime + 1);
              gPoint.speed = 0.75 * speed + 0.25 * gPoint.speed;
            }
          };
          var addPoint = function(tracker, gPoint) {
            var guid = _generateGuid(tracker, gPoint);
            trackerPoints.push({
              guid,
              gPoint,
              lastPos: gPoint.currentPos
            });
            if (trackerPoints.length === 1) {
              lastTime = $3.now();
              intervalId = window.setInterval(_doTracking, 50);
            }
          };
          var removePoint = function(tracker, gPoint) {
            var guid = _generateGuid(tracker, gPoint), i3, len = trackerPoints.length;
            for (i3 = 0; i3 < len; i3++) {
              if (trackerPoints[i3].guid === guid) {
                trackerPoints.splice(i3, 1);
                len--;
                if (len === 0) {
                  window.clearInterval(intervalId);
                }
                break;
              }
            }
          };
          return {
            addPoint,
            removePoint
          };
        }();
        $3.MouseTracker.captureElement = document;
        $3.MouseTracker.wheelEventName = $3.Browser.vendor === $3.BROWSERS.IE && $3.Browser.version > 8 || "onwheel" in document.createElement("div") ? "wheel" : document.onmousewheel !== void 0 ? "mousewheel" : "DOMMouseScroll";
        $3.MouseTracker.subscribeEvents = ["click", "dblclick", "keydown", "keyup", "keypress", "focus", "blur", "contextmenu", $3.MouseTracker.wheelEventName];
        if ($3.MouseTracker.wheelEventName === "DOMMouseScroll") {
          $3.MouseTracker.subscribeEvents.push("MozMousePixelScroll");
        }
        if (window.PointerEvent) {
          $3.MouseTracker.havePointerEvents = true;
          $3.MouseTracker.subscribeEvents.push("pointerenter", "pointerleave", "pointerover", "pointerout", "pointerdown", "pointerup", "pointermove", "pointercancel");
          $3.MouseTracker.havePointerCapture = function() {
            var divElement = document.createElement("div");
            return $3.isFunction(divElement.setPointerCapture) && $3.isFunction(divElement.releasePointerCapture);
          }();
          if ($3.MouseTracker.havePointerCapture) {
            $3.MouseTracker.subscribeEvents.push("gotpointercapture", "lostpointercapture");
          }
        } else {
          $3.MouseTracker.havePointerEvents = false;
          $3.MouseTracker.subscribeEvents.push("mouseenter", "mouseleave", "mouseover", "mouseout", "mousedown", "mouseup", "mousemove");
          $3.MouseTracker.mousePointerId = "legacy-mouse";
          $3.MouseTracker.havePointerCapture = function() {
            var divElement = document.createElement("div");
            return $3.isFunction(divElement.setCapture) && $3.isFunction(divElement.releaseCapture);
          }();
          if ($3.MouseTracker.havePointerCapture) {
            $3.MouseTracker.subscribeEvents.push("losecapture");
          }
          if ("ontouchstart" in window) {
            $3.MouseTracker.subscribeEvents.push("touchstart", "touchend", "touchmove", "touchcancel");
          }
          if ("ongesturestart" in window) {
            $3.MouseTracker.subscribeEvents.push("gesturestart", "gesturechange");
          }
        }
        $3.MouseTracker.GesturePointList = function(type) {
          this._gPoints = [];
          this.type = type;
          this.buttons = 0;
          this.contacts = 0;
          this.clicks = 0;
          this.captureCount = 0;
        };
        $3.MouseTracker.GesturePointList.prototype = {
          getLength: function() {
            return this._gPoints.length;
          },
          asArray: function() {
            return this._gPoints;
          },
          add: function(gp) {
            return this._gPoints.push(gp);
          },
          removeById: function(id) {
            var i3, len = this._gPoints.length;
            for (i3 = 0; i3 < len; i3++) {
              if (this._gPoints[i3].id === id) {
                this._gPoints.splice(i3, 1);
                break;
              }
            }
            return this._gPoints.length;
          },
          getByIndex: function(index) {
            if (index < this._gPoints.length) {
              return this._gPoints[index];
            }
            return null;
          },
          getById: function(id) {
            var i3, len = this._gPoints.length;
            for (i3 = 0; i3 < len; i3++) {
              if (this._gPoints[i3].id === id) {
                return this._gPoints[i3];
              }
            }
            return null;
          },
          getPrimary: function(id) {
            var i3, len = this._gPoints.length;
            for (i3 = 0; i3 < len; i3++) {
              if (this._gPoints[i3].isPrimary) {
                return this._gPoints[i3];
              }
            }
            return null;
          },
          addContact: function() {
            ++this.contacts;
            if (this.contacts > 1 && (this.type === "mouse" || this.type === "pen")) {
              $3.console.warn("GesturePointList.addContact() Implausible contacts value");
              this.contacts = 1;
            }
          },
          removeContact: function() {
            --this.contacts;
            if (this.contacts < 0) {
              $3.console.warn("GesturePointList.removeContact() Implausible contacts value");
              this.contacts = 0;
            }
          }
        };
        function clearTrackedPointers(tracker) {
          var delegate = THIS[tracker.hash], i3, j3, pointsList, gPoints, gPointsToRemove, pointerListCount = delegate.activePointersLists.length;
          for (i3 = 0; i3 < pointerListCount; i3++) {
            pointsList = delegate.activePointersLists[i3];
            if (pointsList.getLength() > 0) {
              gPointsToRemove = [];
              gPoints = pointsList.asArray();
              for (j3 = 0; j3 < gPoints.length; j3++) {
                gPointsToRemove.push(gPoints[j3]);
              }
              for (j3 = 0; j3 < gPointsToRemove.length; j3++) {
                stopTrackingPointer(tracker, pointsList, gPointsToRemove[j3]);
              }
            }
          }
          for (i3 = 0; i3 < pointerListCount; i3++) {
            delegate.activePointersLists.pop();
          }
          delegate.sentDragEvent = false;
        }
        function startTracking(tracker) {
          var delegate = THIS[tracker.hash], event, i3;
          if (!delegate.tracking) {
            for (i3 = 0; i3 < $3.MouseTracker.subscribeEvents.length; i3++) {
              event = $3.MouseTracker.subscribeEvents[i3];
              $3.addEvent(tracker.element, event, delegate[event], event === $3.MouseTracker.wheelEventName ? { passive: false, capture: false } : false);
            }
            clearTrackedPointers(tracker);
            delegate.tracking = true;
          }
        }
        function stopTracking(tracker) {
          var delegate = THIS[tracker.hash], event, i3;
          if (delegate.tracking) {
            for (i3 = 0; i3 < $3.MouseTracker.subscribeEvents.length; i3++) {
              event = $3.MouseTracker.subscribeEvents[i3];
              $3.removeEvent(tracker.element, event, delegate[event], false);
            }
            clearTrackedPointers(tracker);
            delegate.tracking = false;
          }
        }
        function getCaptureEventParams(tracker, pointerType) {
          var delegate = THIS[tracker.hash];
          if (pointerType === "pointerevent") {
            return {
              upName: "pointerup",
              upHandler: delegate.pointerupcaptured,
              moveName: "pointermove",
              moveHandler: delegate.pointermovecaptured
            };
          } else if (pointerType === "mouse") {
            return {
              upName: "pointerup",
              upHandler: delegate.pointerupcaptured,
              moveName: "pointermove",
              moveHandler: delegate.pointermovecaptured
            };
          } else if (pointerType === "touch") {
            return {
              upName: "touchend",
              upHandler: delegate.touchendcaptured,
              moveName: "touchmove",
              moveHandler: delegate.touchmovecaptured
            };
          } else {
            throw new Error("MouseTracker.getCaptureEventParams: Unknown pointer type.");
          }
        }
        function capturePointer(tracker, gPoint) {
          var eventParams;
          if ($3.MouseTracker.havePointerCapture) {
            if ($3.MouseTracker.havePointerEvents) {
              try {
                tracker.element.setPointerCapture(gPoint.id);
              } catch (e4) {
                $3.console.warn("setPointerCapture() called on invalid pointer ID");
                return;
              }
            } else {
              tracker.element.setCapture(true);
            }
          } else {
            eventParams = getCaptureEventParams(tracker, $3.MouseTracker.havePointerEvents ? "pointerevent" : gPoint.type);
            if (isInIframe && canAccessEvents(window.top)) {
              $3.addEvent(window.top, eventParams.upName, eventParams.upHandler, true);
            }
            $3.addEvent($3.MouseTracker.captureElement, eventParams.upName, eventParams.upHandler, true);
            $3.addEvent($3.MouseTracker.captureElement, eventParams.moveName, eventParams.moveHandler, true);
          }
          updatePointerCaptured(tracker, gPoint, true);
        }
        function releasePointer(tracker, gPoint) {
          var eventParams;
          var pointsList;
          var cachedGPoint;
          if ($3.MouseTracker.havePointerCapture) {
            if ($3.MouseTracker.havePointerEvents) {
              pointsList = tracker.getActivePointersListByType(gPoint.type);
              cachedGPoint = pointsList.getById(gPoint.id);
              if (!cachedGPoint || !cachedGPoint.captured) {
                return;
              }
              try {
                tracker.element.releasePointerCapture(gPoint.id);
              } catch (e4) {
              }
            } else {
              tracker.element.releaseCapture();
            }
          } else {
            eventParams = getCaptureEventParams(tracker, $3.MouseTracker.havePointerEvents ? "pointerevent" : gPoint.type);
            if (isInIframe && canAccessEvents(window.top)) {
              $3.removeEvent(window.top, eventParams.upName, eventParams.upHandler, true);
            }
            $3.removeEvent($3.MouseTracker.captureElement, eventParams.moveName, eventParams.moveHandler, true);
            $3.removeEvent($3.MouseTracker.captureElement, eventParams.upName, eventParams.upHandler, true);
          }
          updatePointerCaptured(tracker, gPoint, false);
        }
        function getPointerId(event) {
          return $3.MouseTracker.havePointerEvents ? event.pointerId : $3.MouseTracker.mousePointerId;
        }
        function getPointerType(event) {
          if ($3.MouseTracker.havePointerEvents) {
            return event.pointerType || ($3.Browser.vendor === $3.BROWSERS.IE ? "mouse" : "");
          } else {
            return "mouse";
          }
        }
        function getIsPrimary(event) {
          return $3.MouseTracker.havePointerEvents ? event.isPrimary : true;
        }
        function getMouseAbsolute(event) {
          return $3.getMousePosition(event);
        }
        function getMouseRelative(event, element) {
          return getPointRelativeToAbsolute(getMouseAbsolute(event), element);
        }
        function getPointRelativeToAbsolute(point, element) {
          var offset = $3.getElementOffset(element);
          return point.minus(offset);
        }
        function getCenterPoint(point1, point2) {
          return new $3.Point((point1.x + point2.x) / 2, (point1.y + point2.y) / 2);
        }
        function onClick(tracker, event) {
          var eventInfo = {
            originalEvent: event,
            eventType: "click",
            pointerType: "mouse",
            isEmulated: false
          };
          preProcessEvent(tracker, eventInfo);
          if (eventInfo.preventDefault && !eventInfo.defaultPrevented) {
            $3.cancelEvent(event);
          }
          if (eventInfo.stopPropagation) {
            $3.stopEvent(event);
          }
        }
        function onDblClick(tracker, event) {
          var eventInfo = {
            originalEvent: event,
            eventType: "dblclick",
            pointerType: "mouse",
            isEmulated: false
          };
          preProcessEvent(tracker, eventInfo);
          if (eventInfo.preventDefault && !eventInfo.defaultPrevented) {
            $3.cancelEvent(event);
          }
          if (eventInfo.stopPropagation) {
            $3.stopEvent(event);
          }
        }
        function onKeyDown(tracker, event) {
          var eventArgs = null;
          var eventInfo = {
            originalEvent: event,
            eventType: "keydown",
            pointerType: "",
            isEmulated: false
          };
          preProcessEvent(tracker, eventInfo);
          if (tracker.keyDownHandler && !eventInfo.preventGesture && !eventInfo.defaultPrevented) {
            eventArgs = {
              eventSource: tracker,
              keyCode: event.keyCode ? event.keyCode : event.charCode,
              ctrl: event.ctrlKey,
              shift: event.shiftKey,
              alt: event.altKey,
              meta: event.metaKey,
              originalEvent: event,
              preventDefault: eventInfo.preventDefault || eventInfo.defaultPrevented,
              userData: tracker.userData
            };
            tracker.keyDownHandler(eventArgs);
          }
          if (eventArgs && eventArgs.preventDefault || eventInfo.preventDefault && !eventInfo.defaultPrevented) {
            $3.cancelEvent(event);
          }
          if (eventInfo.stopPropagation) {
            $3.stopEvent(event);
          }
        }
        function onKeyUp(tracker, event) {
          var eventArgs = null;
          var eventInfo = {
            originalEvent: event,
            eventType: "keyup",
            pointerType: "",
            isEmulated: false
          };
          preProcessEvent(tracker, eventInfo);
          if (tracker.keyUpHandler && !eventInfo.preventGesture && !eventInfo.defaultPrevented) {
            eventArgs = {
              eventSource: tracker,
              keyCode: event.keyCode ? event.keyCode : event.charCode,
              ctrl: event.ctrlKey,
              shift: event.shiftKey,
              alt: event.altKey,
              meta: event.metaKey,
              originalEvent: event,
              preventDefault: eventInfo.preventDefault || eventInfo.defaultPrevented,
              userData: tracker.userData
            };
            tracker.keyUpHandler(eventArgs);
          }
          if (eventArgs && eventArgs.preventDefault || eventInfo.preventDefault && !eventInfo.defaultPrevented) {
            $3.cancelEvent(event);
          }
          if (eventInfo.stopPropagation) {
            $3.stopEvent(event);
          }
        }
        function onKeyPress(tracker, event) {
          var eventArgs = null;
          var eventInfo = {
            originalEvent: event,
            eventType: "keypress",
            pointerType: "",
            isEmulated: false
          };
          preProcessEvent(tracker, eventInfo);
          if (tracker.keyHandler && !eventInfo.preventGesture && !eventInfo.defaultPrevented) {
            eventArgs = {
              eventSource: tracker,
              keyCode: event.keyCode ? event.keyCode : event.charCode,
              ctrl: event.ctrlKey,
              shift: event.shiftKey,
              alt: event.altKey,
              meta: event.metaKey,
              originalEvent: event,
              preventDefault: eventInfo.preventDefault || eventInfo.defaultPrevented,
              userData: tracker.userData
            };
            tracker.keyHandler(eventArgs);
          }
          if (eventArgs && eventArgs.preventDefault || eventInfo.preventDefault && !eventInfo.defaultPrevented) {
            $3.cancelEvent(event);
          }
          if (eventInfo.stopPropagation) {
            $3.stopEvent(event);
          }
        }
        function onFocus(tracker, event) {
          var eventInfo = {
            originalEvent: event,
            eventType: "focus",
            pointerType: "",
            isEmulated: false
          };
          preProcessEvent(tracker, eventInfo);
          if (tracker.focusHandler && !eventInfo.preventGesture) {
            tracker.focusHandler({
              eventSource: tracker,
              originalEvent: event,
              userData: tracker.userData
            });
          }
        }
        function onBlur(tracker, event) {
          var eventInfo = {
            originalEvent: event,
            eventType: "blur",
            pointerType: "",
            isEmulated: false
          };
          preProcessEvent(tracker, eventInfo);
          if (tracker.blurHandler && !eventInfo.preventGesture) {
            tracker.blurHandler({
              eventSource: tracker,
              originalEvent: event,
              userData: tracker.userData
            });
          }
        }
        function onContextMenu(tracker, event) {
          var eventArgs = null;
          var eventInfo = {
            originalEvent: event,
            eventType: "contextmenu",
            pointerType: "mouse",
            isEmulated: false
          };
          preProcessEvent(tracker, eventInfo);
          if (tracker.contextMenuHandler && !eventInfo.preventGesture && !eventInfo.defaultPrevented) {
            eventArgs = {
              eventSource: tracker,
              position: getPointRelativeToAbsolute(getMouseAbsolute(event), tracker.element),
              originalEvent: eventInfo.originalEvent,
              preventDefault: eventInfo.preventDefault || eventInfo.defaultPrevented,
              userData: tracker.userData
            };
            tracker.contextMenuHandler(eventArgs);
          }
          if (eventArgs && eventArgs.preventDefault || eventInfo.preventDefault && !eventInfo.defaultPrevented) {
            $3.cancelEvent(event);
          }
          if (eventInfo.stopPropagation) {
            $3.stopEvent(event);
          }
        }
        function onWheel(tracker, event) {
          handleWheelEvent(tracker, event, event);
        }
        function onMouseWheel(tracker, event) {
          var simulatedEvent = {
            target: event.target || event.srcElement,
            type: "wheel",
            shiftKey: event.shiftKey || false,
            clientX: event.clientX,
            clientY: event.clientY,
            pageX: event.pageX ? event.pageX : event.clientX,
            pageY: event.pageY ? event.pageY : event.clientY,
            deltaMode: event.type === "MozMousePixelScroll" ? 0 : 1,
            deltaX: 0,
            deltaZ: 0
          };
          if ($3.MouseTracker.wheelEventName === "mousewheel") {
            simulatedEvent.deltaY = -event.wheelDelta / $3.DEFAULT_SETTINGS.pixelsPerWheelLine;
          } else {
            simulatedEvent.deltaY = event.detail;
          }
          handleWheelEvent(tracker, simulatedEvent, event);
        }
        function handleWheelEvent(tracker, event, originalEvent) {
          var nDelta = 0, eventInfo;
          var eventArgs = null;
          nDelta = event.deltaY < 0 ? 1 : -1;
          eventInfo = {
            originalEvent: event,
            eventType: "wheel",
            pointerType: "mouse",
            isEmulated: event !== originalEvent
          };
          preProcessEvent(tracker, eventInfo);
          if (tracker.scrollHandler && !eventInfo.preventGesture && !eventInfo.defaultPrevented) {
            eventArgs = {
              eventSource: tracker,
              pointerType: "mouse",
              position: getMouseRelative(event, tracker.element),
              scroll: nDelta,
              shift: event.shiftKey,
              isTouchEvent: false,
              originalEvent,
              preventDefault: eventInfo.preventDefault || eventInfo.defaultPrevented,
              userData: tracker.userData
            };
            tracker.scrollHandler(eventArgs);
          }
          if (eventInfo.stopPropagation) {
            $3.stopEvent(originalEvent);
          }
          if (eventArgs && eventArgs.preventDefault || eventInfo.preventDefault && !eventInfo.defaultPrevented) {
            $3.cancelEvent(originalEvent);
          }
        }
        function onLoseCapture(tracker, event) {
          var gPoint = {
            id: $3.MouseTracker.mousePointerId,
            type: "mouse"
          };
          var eventInfo = {
            originalEvent: event,
            eventType: "lostpointercapture",
            pointerType: "mouse",
            isEmulated: false
          };
          preProcessEvent(tracker, eventInfo);
          if (event.target === tracker.element) {
            updatePointerCaptured(tracker, gPoint, false);
          }
          if (eventInfo.stopPropagation) {
            $3.stopEvent(event);
          }
        }
        function onTouchStart(tracker, event) {
          var time, i3, touchCount = event.changedTouches.length, gPoint, pointsList = tracker.getActivePointersListByType("touch");
          time = $3.now();
          if (pointsList.getLength() > event.touches.length - touchCount) {
            $3.console.warn("Tracked touch contact count doesn't match event.touches.length");
          }
          var eventInfo = {
            originalEvent: event,
            eventType: "pointerdown",
            pointerType: "touch",
            isEmulated: false
          };
          preProcessEvent(tracker, eventInfo);
          for (i3 = 0; i3 < touchCount; i3++) {
            gPoint = {
              id: event.changedTouches[i3].identifier,
              type: "touch",
              isPrimary: pointsList.getLength() === 0,
              currentPos: getMouseAbsolute(event.changedTouches[i3]),
              currentTime: time
            };
            updatePointerEnter(tracker, eventInfo, gPoint);
            updatePointerDown(tracker, eventInfo, gPoint, 0);
            updatePointerCaptured(tracker, gPoint, true);
          }
          if (eventInfo.preventDefault && !eventInfo.defaultPrevented) {
            $3.cancelEvent(event);
          }
          if (eventInfo.stopPropagation) {
            $3.stopEvent(event);
          }
        }
        function onTouchEnd(tracker, event) {
          var time, i3, touchCount = event.changedTouches.length, gPoint;
          time = $3.now();
          var eventInfo = {
            originalEvent: event,
            eventType: "pointerup",
            pointerType: "touch",
            isEmulated: false
          };
          preProcessEvent(tracker, eventInfo);
          for (i3 = 0; i3 < touchCount; i3++) {
            gPoint = {
              id: event.changedTouches[i3].identifier,
              type: "touch",
              currentPos: getMouseAbsolute(event.changedTouches[i3]),
              currentTime: time
            };
            updatePointerUp(tracker, eventInfo, gPoint, 0);
            updatePointerCaptured(tracker, gPoint, false);
            updatePointerLeave(tracker, eventInfo, gPoint);
          }
          if (eventInfo.preventDefault && !eventInfo.defaultPrevented) {
            $3.cancelEvent(event);
          }
          if (eventInfo.stopPropagation) {
            $3.stopEvent(event);
          }
        }
        function onTouchMove(tracker, event) {
          var time, i3, touchCount = event.changedTouches.length, gPoint;
          time = $3.now();
          var eventInfo = {
            originalEvent: event,
            eventType: "pointermove",
            pointerType: "touch",
            isEmulated: false
          };
          preProcessEvent(tracker, eventInfo);
          for (i3 = 0; i3 < touchCount; i3++) {
            gPoint = {
              id: event.changedTouches[i3].identifier,
              type: "touch",
              currentPos: getMouseAbsolute(event.changedTouches[i3]),
              currentTime: time
            };
            updatePointerMove(tracker, eventInfo, gPoint);
          }
          if (eventInfo.preventDefault && !eventInfo.defaultPrevented) {
            $3.cancelEvent(event);
          }
          if (eventInfo.stopPropagation) {
            $3.stopEvent(event);
          }
        }
        function onTouchCancel(tracker, event) {
          var touchCount = event.changedTouches.length, i3, gPoint;
          var eventInfo = {
            originalEvent: event,
            eventType: "pointercancel",
            pointerType: "touch",
            isEmulated: false
          };
          preProcessEvent(tracker, eventInfo);
          for (i3 = 0; i3 < touchCount; i3++) {
            gPoint = {
              id: event.changedTouches[i3].identifier,
              type: "touch"
            };
            updatePointerCancel(tracker, eventInfo, gPoint);
          }
          if (eventInfo.stopPropagation) {
            $3.stopEvent(event);
          }
        }
        function onGestureStart(tracker, event) {
          if (!$3.eventIsCanceled(event)) {
            event.preventDefault();
          }
          return false;
        }
        function onGestureChange(tracker, event) {
          if (!$3.eventIsCanceled(event)) {
            event.preventDefault();
          }
          return false;
        }
        function onGotPointerCapture(tracker, event) {
          var eventInfo = {
            originalEvent: event,
            eventType: "gotpointercapture",
            pointerType: getPointerType(event),
            isEmulated: false
          };
          preProcessEvent(tracker, eventInfo);
          if (event.target === tracker.element) {
            updatePointerCaptured(tracker, {
              id: event.pointerId,
              type: getPointerType(event)
            }, true);
          }
          if (eventInfo.stopPropagation) {
            $3.stopEvent(event);
          }
        }
        function onLostPointerCapture(tracker, event) {
          var eventInfo = {
            originalEvent: event,
            eventType: "lostpointercapture",
            pointerType: getPointerType(event),
            isEmulated: false
          };
          preProcessEvent(tracker, eventInfo);
          if (event.target === tracker.element) {
            updatePointerCaptured(tracker, {
              id: event.pointerId,
              type: getPointerType(event)
            }, false);
          }
          if (eventInfo.stopPropagation) {
            $3.stopEvent(event);
          }
        }
        function onPointerEnter(tracker, event) {
          var gPoint = {
            id: getPointerId(event),
            type: getPointerType(event),
            isPrimary: getIsPrimary(event),
            currentPos: getMouseAbsolute(event),
            currentTime: $3.now()
          };
          var eventInfo = {
            originalEvent: event,
            eventType: "pointerenter",
            pointerType: gPoint.type,
            isEmulated: false
          };
          preProcessEvent(tracker, eventInfo);
          updatePointerEnter(tracker, eventInfo, gPoint);
        }
        function onPointerLeave(tracker, event) {
          var gPoint = {
            id: getPointerId(event),
            type: getPointerType(event),
            isPrimary: getIsPrimary(event),
            currentPos: getMouseAbsolute(event),
            currentTime: $3.now()
          };
          var eventInfo = {
            originalEvent: event,
            eventType: "pointerleave",
            pointerType: gPoint.type,
            isEmulated: false
          };
          preProcessEvent(tracker, eventInfo);
          updatePointerLeave(tracker, eventInfo, gPoint);
        }
        function onPointerOver(tracker, event) {
          var gPoint = {
            id: getPointerId(event),
            type: getPointerType(event),
            isPrimary: getIsPrimary(event),
            currentPos: getMouseAbsolute(event),
            currentTime: $3.now()
          };
          var eventInfo = {
            originalEvent: event,
            eventType: "pointerover",
            pointerType: gPoint.type,
            isEmulated: false
          };
          preProcessEvent(tracker, eventInfo);
          updatePointerOver(tracker, eventInfo, gPoint);
          if (eventInfo.preventDefault && !eventInfo.defaultPrevented) {
            $3.cancelEvent(event);
          }
          if (eventInfo.stopPropagation) {
            $3.stopEvent(event);
          }
        }
        function onPointerOut(tracker, event) {
          var gPoint = {
            id: getPointerId(event),
            type: getPointerType(event),
            isPrimary: getIsPrimary(event),
            currentPos: getMouseAbsolute(event),
            currentTime: $3.now()
          };
          var eventInfo = {
            originalEvent: event,
            eventType: "pointerout",
            pointerType: gPoint.type,
            isEmulated: false
          };
          preProcessEvent(tracker, eventInfo);
          updatePointerOut(tracker, eventInfo, gPoint);
          if (eventInfo.preventDefault && !eventInfo.defaultPrevented) {
            $3.cancelEvent(event);
          }
          if (eventInfo.stopPropagation) {
            $3.stopEvent(event);
          }
        }
        function onPointerDown(tracker, event) {
          var gPoint = {
            id: getPointerId(event),
            type: getPointerType(event),
            isPrimary: getIsPrimary(event),
            currentPos: getMouseAbsolute(event),
            currentTime: $3.now()
          };
          var implicitlyCaptured = $3.MouseTracker.havePointerEvents && gPoint.type === "touch" && $3.Browser.vendor !== $3.BROWSERS.IE;
          var eventInfo = {
            originalEvent: event,
            eventType: "pointerdown",
            pointerType: gPoint.type,
            isEmulated: false
          };
          preProcessEvent(tracker, eventInfo);
          updatePointerDown(tracker, eventInfo, gPoint, event.button);
          if (eventInfo.preventDefault && !eventInfo.defaultPrevented) {
            $3.cancelEvent(event);
          }
          if (eventInfo.stopPropagation) {
            $3.stopEvent(event);
          }
          if (eventInfo.shouldCapture) {
            if (implicitlyCaptured) {
              updatePointerCaptured(tracker, gPoint, true);
            } else {
              capturePointer(tracker, gPoint);
            }
          }
        }
        function onPointerUp(tracker, event) {
          handlePointerUp(tracker, event);
        }
        function onPointerUpCaptured(tracker, event) {
          var pointsList = tracker.getActivePointersListByType(getPointerType(event));
          if (pointsList.getById(event.pointerId)) {
            handlePointerUp(tracker, event);
          }
          $3.stopEvent(event);
        }
        function handlePointerUp(tracker, event) {
          var gPoint;
          gPoint = {
            id: getPointerId(event),
            type: getPointerType(event),
            isPrimary: getIsPrimary(event),
            currentPos: getMouseAbsolute(event),
            currentTime: $3.now()
          };
          var eventInfo = {
            originalEvent: event,
            eventType: "pointerup",
            pointerType: gPoint.type,
            isEmulated: false
          };
          preProcessEvent(tracker, eventInfo);
          updatePointerUp(tracker, eventInfo, gPoint, event.button);
          if (eventInfo.preventDefault && !eventInfo.defaultPrevented) {
            $3.cancelEvent(event);
          }
          if (eventInfo.stopPropagation) {
            $3.stopEvent(event);
          }
          if (eventInfo.shouldReleaseCapture) {
            if (event.target === tracker.element) {
              releasePointer(tracker, gPoint);
            } else {
              updatePointerCaptured(tracker, gPoint, false);
            }
          }
        }
        function onPointerMove(tracker, event) {
          handlePointerMove(tracker, event);
        }
        function onPointerMoveCaptured(tracker, event) {
          var pointsList = tracker.getActivePointersListByType(getPointerType(event));
          if (pointsList.getById(event.pointerId)) {
            handlePointerMove(tracker, event);
          }
          $3.stopEvent(event);
        }
        function handlePointerMove(tracker, event) {
          var gPoint = {
            id: getPointerId(event),
            type: getPointerType(event),
            isPrimary: getIsPrimary(event),
            currentPos: getMouseAbsolute(event),
            currentTime: $3.now()
          };
          var eventInfo = {
            originalEvent: event,
            eventType: "pointermove",
            pointerType: gPoint.type,
            isEmulated: false
          };
          preProcessEvent(tracker, eventInfo);
          updatePointerMove(tracker, eventInfo, gPoint);
          if (eventInfo.preventDefault && !eventInfo.defaultPrevented) {
            $3.cancelEvent(event);
          }
          if (eventInfo.stopPropagation) {
            $3.stopEvent(event);
          }
        }
        function onPointerCancel(tracker, event) {
          var gPoint = {
            id: event.pointerId,
            type: getPointerType(event)
          };
          var eventInfo = {
            originalEvent: event,
            eventType: "pointercancel",
            pointerType: gPoint.type,
            isEmulated: false
          };
          preProcessEvent(tracker, eventInfo);
          updatePointerCancel(tracker, eventInfo, gPoint);
          if (eventInfo.stopPropagation) {
            $3.stopEvent(event);
          }
        }
        function startTrackingPointer(pointsList, gPoint) {
          gPoint.speed = 0;
          gPoint.direction = 0;
          gPoint.contactPos = gPoint.currentPos;
          gPoint.contactTime = gPoint.currentTime;
          gPoint.lastPos = gPoint.currentPos;
          gPoint.lastTime = gPoint.currentTime;
          return pointsList.add(gPoint);
        }
        function stopTrackingPointer(tracker, pointsList, gPoint) {
          var listLength;
          var trackedGPoint = pointsList.getById(gPoint.id);
          if (trackedGPoint) {
            if (trackedGPoint.captured) {
              $3.console.warn("stopTrackingPointer() called on captured pointer");
              releasePointer(tracker, trackedGPoint);
            }
            if ((pointsList.type === "mouse" || pointsList.type === "pen") && pointsList.contacts > 0) {
              pointsList.removeContact();
            }
            listLength = pointsList.removeById(gPoint.id);
          } else {
            listLength = pointsList.getLength();
          }
          return listLength;
        }
        function getEventProcessDefaults(tracker, eventInfo) {
          switch (eventInfo.eventType) {
            case "pointermove":
              eventInfo.isStoppable = true;
              eventInfo.isCancelable = true;
              eventInfo.preventDefault = false;
              eventInfo.preventGesture = !tracker.hasGestureHandlers;
              eventInfo.stopPropagation = false;
              break;
            case "pointerover":
            case "pointerout":
            case "contextmenu":
            case "keydown":
            case "keyup":
            case "keypress":
              eventInfo.isStoppable = true;
              eventInfo.isCancelable = true;
              eventInfo.preventDefault = false;
              eventInfo.preventGesture = false;
              eventInfo.stopPropagation = false;
              break;
            case "pointerdown":
              eventInfo.isStoppable = true;
              eventInfo.isCancelable = true;
              eventInfo.preventDefault = false;
              eventInfo.preventGesture = !tracker.hasGestureHandlers;
              eventInfo.stopPropagation = false;
              break;
            case "pointerup":
              eventInfo.isStoppable = true;
              eventInfo.isCancelable = true;
              eventInfo.preventDefault = false;
              eventInfo.preventGesture = !tracker.hasGestureHandlers;
              eventInfo.stopPropagation = false;
              break;
            case "wheel":
              eventInfo.isStoppable = true;
              eventInfo.isCancelable = true;
              eventInfo.preventDefault = false;
              eventInfo.preventGesture = !tracker.hasScrollHandler;
              eventInfo.stopPropagation = false;
              break;
            case "gotpointercapture":
            case "lostpointercapture":
            case "pointercancel":
              eventInfo.isStoppable = true;
              eventInfo.isCancelable = false;
              eventInfo.preventDefault = false;
              eventInfo.preventGesture = false;
              eventInfo.stopPropagation = false;
              break;
            case "click":
              eventInfo.isStoppable = true;
              eventInfo.isCancelable = true;
              eventInfo.preventDefault = !!tracker.clickHandler;
              eventInfo.preventGesture = false;
              eventInfo.stopPropagation = false;
              break;
            case "dblclick":
              eventInfo.isStoppable = true;
              eventInfo.isCancelable = true;
              eventInfo.preventDefault = !!tracker.dblClickHandler;
              eventInfo.preventGesture = false;
              eventInfo.stopPropagation = false;
              break;
            case "focus":
            case "blur":
            case "pointerenter":
            case "pointerleave":
            default:
              eventInfo.isStoppable = false;
              eventInfo.isCancelable = false;
              eventInfo.preventDefault = false;
              eventInfo.preventGesture = false;
              eventInfo.stopPropagation = false;
              break;
          }
        }
        function preProcessEvent(tracker, eventInfo) {
          eventInfo.eventSource = tracker;
          eventInfo.eventPhase = eventInfo.originalEvent ? typeof eventInfo.originalEvent.eventPhase !== "undefined" ? eventInfo.originalEvent.eventPhase : 0 : 0;
          eventInfo.defaultPrevented = $3.eventIsCanceled(eventInfo.originalEvent);
          eventInfo.shouldCapture = false;
          eventInfo.shouldReleaseCapture = false;
          eventInfo.userData = tracker.userData;
          getEventProcessDefaults(tracker, eventInfo);
          if (tracker.preProcessEventHandler) {
            tracker.preProcessEventHandler(eventInfo);
          }
        }
        function updatePointerCaptured(tracker, gPoint, isCaptured) {
          var pointsList = tracker.getActivePointersListByType(gPoint.type);
          var updateGPoint = pointsList.getById(gPoint.id);
          if (updateGPoint) {
            if (isCaptured && !updateGPoint.captured) {
              updateGPoint.captured = true;
              pointsList.captureCount++;
            } else if (!isCaptured && updateGPoint.captured) {
              updateGPoint.captured = false;
              pointsList.captureCount--;
              if (pointsList.captureCount < 0) {
                pointsList.captureCount = 0;
                $3.console.warn("updatePointerCaptured() - pointsList.captureCount went negative");
              }
            }
          } else {
            $3.console.warn("updatePointerCaptured() called on untracked pointer");
          }
        }
        function updatePointerEnter(tracker, eventInfo, gPoint) {
          var pointsList = tracker.getActivePointersListByType(gPoint.type), updateGPoint;
          updateGPoint = pointsList.getById(gPoint.id);
          if (updateGPoint) {
            updateGPoint.insideElement = true;
            updateGPoint.lastPos = updateGPoint.currentPos;
            updateGPoint.lastTime = updateGPoint.currentTime;
            updateGPoint.currentPos = gPoint.currentPos;
            updateGPoint.currentTime = gPoint.currentTime;
            gPoint = updateGPoint;
          } else {
            gPoint.captured = false;
            gPoint.insideElementPressed = false;
            gPoint.insideElement = true;
            startTrackingPointer(pointsList, gPoint);
          }
          if (tracker.enterHandler) {
            tracker.enterHandler({
              eventSource: tracker,
              pointerType: gPoint.type,
              position: getPointRelativeToAbsolute(gPoint.currentPos, tracker.element),
              buttons: pointsList.buttons,
              pointers: tracker.getActivePointerCount(),
              insideElementPressed: gPoint.insideElementPressed,
              buttonDownAny: pointsList.buttons !== 0,
              isTouchEvent: gPoint.type === "touch",
              originalEvent: eventInfo.originalEvent,
              userData: tracker.userData
            });
          }
        }
        function updatePointerLeave(tracker, eventInfo, gPoint) {
          var pointsList = tracker.getActivePointersListByType(gPoint.type), updateGPoint, dispatchEventObj;
          updateGPoint = pointsList.getById(gPoint.id);
          if (updateGPoint) {
            if (updateGPoint.captured) {
              updateGPoint.insideElement = false;
              updateGPoint.lastPos = updateGPoint.currentPos;
              updateGPoint.lastTime = updateGPoint.currentTime;
              updateGPoint.currentPos = gPoint.currentPos;
              updateGPoint.currentTime = gPoint.currentTime;
            } else {
              stopTrackingPointer(tracker, pointsList, updateGPoint);
            }
            gPoint = updateGPoint;
          } else {
            gPoint.captured = false;
            gPoint.insideElementPressed = false;
          }
          if (tracker.leaveHandler || tracker.exitHandler) {
            dispatchEventObj = {
              eventSource: tracker,
              pointerType: gPoint.type,
              position: gPoint.currentPos && getPointRelativeToAbsolute(gPoint.currentPos, tracker.element),
              buttons: pointsList.buttons,
              pointers: tracker.getActivePointerCount(),
              insideElementPressed: gPoint.insideElementPressed,
              buttonDownAny: pointsList.buttons !== 0,
              isTouchEvent: gPoint.type === "touch",
              originalEvent: eventInfo.originalEvent,
              userData: tracker.userData
            };
            if (tracker.leaveHandler) {
              tracker.leaveHandler(dispatchEventObj);
            }
            if (tracker.exitHandler) {
              tracker.exitHandler(dispatchEventObj);
            }
          }
        }
        function updatePointerOver(tracker, eventInfo, gPoint) {
          var pointsList, updateGPoint;
          pointsList = tracker.getActivePointersListByType(gPoint.type);
          updateGPoint = pointsList.getById(gPoint.id);
          if (updateGPoint) {
            gPoint = updateGPoint;
          } else {
            gPoint.captured = false;
            gPoint.insideElementPressed = false;
          }
          if (tracker.overHandler) {
            tracker.overHandler({
              eventSource: tracker,
              pointerType: gPoint.type,
              position: getPointRelativeToAbsolute(gPoint.currentPos, tracker.element),
              buttons: pointsList.buttons,
              pointers: tracker.getActivePointerCount(),
              insideElementPressed: gPoint.insideElementPressed,
              buttonDownAny: pointsList.buttons !== 0,
              isTouchEvent: gPoint.type === "touch",
              originalEvent: eventInfo.originalEvent,
              userData: tracker.userData
            });
          }
        }
        function updatePointerOut(tracker, eventInfo, gPoint) {
          var pointsList, updateGPoint;
          pointsList = tracker.getActivePointersListByType(gPoint.type);
          updateGPoint = pointsList.getById(gPoint.id);
          if (updateGPoint) {
            gPoint = updateGPoint;
          } else {
            gPoint.captured = false;
            gPoint.insideElementPressed = false;
          }
          if (tracker.outHandler) {
            tracker.outHandler({
              eventSource: tracker,
              pointerType: gPoint.type,
              position: gPoint.currentPos && getPointRelativeToAbsolute(gPoint.currentPos, tracker.element),
              buttons: pointsList.buttons,
              pointers: tracker.getActivePointerCount(),
              insideElementPressed: gPoint.insideElementPressed,
              buttonDownAny: pointsList.buttons !== 0,
              isTouchEvent: gPoint.type === "touch",
              originalEvent: eventInfo.originalEvent,
              userData: tracker.userData
            });
          }
        }
        function updatePointerDown(tracker, eventInfo, gPoint, buttonChanged) {
          var delegate = THIS[tracker.hash], pointsList = tracker.getActivePointersListByType(gPoint.type), updateGPoint;
          if (typeof eventInfo.originalEvent.buttons !== "undefined") {
            pointsList.buttons = eventInfo.originalEvent.buttons;
          } else {
            if (buttonChanged === 0) {
              pointsList.buttons |= 1;
            } else if (buttonChanged === 1) {
              pointsList.buttons |= 4;
            } else if (buttonChanged === 2) {
              pointsList.buttons |= 2;
            } else if (buttonChanged === 3) {
              pointsList.buttons |= 8;
            } else if (buttonChanged === 4) {
              pointsList.buttons |= 16;
            } else if (buttonChanged === 5) {
              pointsList.buttons |= 32;
            }
          }
          if (buttonChanged !== 0) {
            eventInfo.shouldCapture = false;
            eventInfo.shouldReleaseCapture = false;
            if (tracker.nonPrimaryPressHandler && !eventInfo.preventGesture && !eventInfo.defaultPrevented) {
              eventInfo.preventDefault = true;
              tracker.nonPrimaryPressHandler({
                eventSource: tracker,
                pointerType: gPoint.type,
                position: getPointRelativeToAbsolute(gPoint.currentPos, tracker.element),
                button: buttonChanged,
                buttons: pointsList.buttons,
                isTouchEvent: gPoint.type === "touch",
                originalEvent: eventInfo.originalEvent,
                userData: tracker.userData
              });
            }
            return;
          }
          updateGPoint = pointsList.getById(gPoint.id);
          if (updateGPoint) {
            updateGPoint.insideElementPressed = true;
            updateGPoint.insideElement = true;
            updateGPoint.originalTarget = eventInfo.originalEvent.target;
            updateGPoint.contactPos = gPoint.currentPos;
            updateGPoint.contactTime = gPoint.currentTime;
            updateGPoint.lastPos = updateGPoint.currentPos;
            updateGPoint.lastTime = updateGPoint.currentTime;
            updateGPoint.currentPos = gPoint.currentPos;
            updateGPoint.currentTime = gPoint.currentTime;
            gPoint = updateGPoint;
          } else {
            $3.console.warn("pointerdown event on untracked pointer");
            gPoint.captured = false;
            gPoint.insideElementPressed = true;
            gPoint.insideElement = true;
            gPoint.originalTarget = eventInfo.originalEvent.target;
            startTrackingPointer(pointsList, gPoint);
            return;
          }
          pointsList.addContact();
          if (!eventInfo.preventGesture && !eventInfo.defaultPrevented) {
            eventInfo.shouldCapture = true;
            eventInfo.shouldReleaseCapture = false;
            eventInfo.preventDefault = true;
            if (tracker.dragHandler || tracker.dragEndHandler || tracker.pinchHandler) {
              $3.MouseTracker.gesturePointVelocityTracker.addPoint(tracker, gPoint);
            }
            if (pointsList.contacts === 1) {
              if (tracker.pressHandler && !eventInfo.preventGesture) {
                tracker.pressHandler({
                  eventSource: tracker,
                  pointerType: gPoint.type,
                  position: getPointRelativeToAbsolute(gPoint.contactPos, tracker.element),
                  buttons: pointsList.buttons,
                  isTouchEvent: gPoint.type === "touch",
                  originalEvent: eventInfo.originalEvent,
                  userData: tracker.userData
                });
              }
            } else if (pointsList.contacts === 2) {
              if (tracker.pinchHandler && gPoint.type === "touch") {
                delegate.pinchGPoints = pointsList.asArray();
                delegate.lastPinchDist = delegate.currentPinchDist = delegate.pinchGPoints[0].currentPos.distanceTo(delegate.pinchGPoints[1].currentPos);
                delegate.lastPinchCenter = delegate.currentPinchCenter = getCenterPoint(delegate.pinchGPoints[0].currentPos, delegate.pinchGPoints[1].currentPos);
              }
            }
          } else {
            eventInfo.shouldCapture = false;
            eventInfo.shouldReleaseCapture = false;
          }
        }
        function updatePointerUp(tracker, eventInfo, gPoint, buttonChanged) {
          var delegate = THIS[tracker.hash], pointsList = tracker.getActivePointersListByType(gPoint.type), releasePoint, releaseTime, updateGPoint, wasCaptured = false, quick;
          if (typeof eventInfo.originalEvent.buttons !== "undefined") {
            pointsList.buttons = eventInfo.originalEvent.buttons;
          } else {
            if (buttonChanged === 0) {
              pointsList.buttons ^= ~1;
            } else if (buttonChanged === 1) {
              pointsList.buttons ^= ~4;
            } else if (buttonChanged === 2) {
              pointsList.buttons ^= ~2;
            } else if (buttonChanged === 3) {
              pointsList.buttons ^= ~8;
            } else if (buttonChanged === 4) {
              pointsList.buttons ^= ~16;
            } else if (buttonChanged === 5) {
              pointsList.buttons ^= ~32;
            }
          }
          eventInfo.shouldCapture = false;
          if (buttonChanged !== 0) {
            eventInfo.shouldReleaseCapture = false;
            if (tracker.nonPrimaryReleaseHandler && !eventInfo.preventGesture && !eventInfo.defaultPrevented) {
              eventInfo.preventDefault = true;
              tracker.nonPrimaryReleaseHandler({
                eventSource: tracker,
                pointerType: gPoint.type,
                position: getPointRelativeToAbsolute(gPoint.currentPos, tracker.element),
                button: buttonChanged,
                buttons: pointsList.buttons,
                isTouchEvent: gPoint.type === "touch",
                originalEvent: eventInfo.originalEvent,
                userData: tracker.userData
              });
            }
            return;
          }
          updateGPoint = pointsList.getById(gPoint.id);
          if (updateGPoint) {
            pointsList.removeContact();
            if (updateGPoint.captured) {
              wasCaptured = true;
            }
            updateGPoint.lastPos = updateGPoint.currentPos;
            updateGPoint.lastTime = updateGPoint.currentTime;
            updateGPoint.currentPos = gPoint.currentPos;
            updateGPoint.currentTime = gPoint.currentTime;
            if (!updateGPoint.insideElement) {
              stopTrackingPointer(tracker, pointsList, updateGPoint);
            }
            releasePoint = updateGPoint.currentPos;
            releaseTime = updateGPoint.currentTime;
          } else {
            $3.console.warn("updatePointerUp(): pointerup on untracked gPoint");
            gPoint.captured = false;
            gPoint.insideElementPressed = false;
            gPoint.insideElement = true;
            startTrackingPointer(pointsList, gPoint);
            updateGPoint = gPoint;
          }
          if (!eventInfo.preventGesture && !eventInfo.defaultPrevented) {
            if (wasCaptured) {
              eventInfo.shouldReleaseCapture = true;
              eventInfo.preventDefault = true;
              if (tracker.dragHandler || tracker.dragEndHandler || tracker.pinchHandler) {
                $3.MouseTracker.gesturePointVelocityTracker.removePoint(tracker, updateGPoint);
              }
              if (pointsList.contacts === 0) {
                if (tracker.releaseHandler) {
                  tracker.releaseHandler({
                    eventSource: tracker,
                    pointerType: updateGPoint.type,
                    position: getPointRelativeToAbsolute(releasePoint, tracker.element),
                    buttons: pointsList.buttons,
                    insideElementPressed: updateGPoint.insideElementPressed,
                    insideElementReleased: updateGPoint.insideElement,
                    isTouchEvent: updateGPoint.type === "touch",
                    originalEvent: eventInfo.originalEvent,
                    userData: tracker.userData
                  });
                }
                if (tracker.dragEndHandler && delegate.sentDragEvent) {
                  tracker.dragEndHandler({
                    eventSource: tracker,
                    pointerType: updateGPoint.type,
                    position: getPointRelativeToAbsolute(updateGPoint.currentPos, tracker.element),
                    speed: updateGPoint.speed,
                    direction: updateGPoint.direction,
                    shift: eventInfo.originalEvent.shiftKey,
                    isTouchEvent: updateGPoint.type === "touch",
                    originalEvent: eventInfo.originalEvent,
                    userData: tracker.userData
                  });
                }
                delegate.sentDragEvent = false;
                if ((tracker.clickHandler || tracker.dblClickHandler) && updateGPoint.insideElement) {
                  quick = releaseTime - updateGPoint.contactTime <= tracker.clickTimeThreshold && updateGPoint.contactPos.distanceTo(releasePoint) <= tracker.clickDistThreshold;
                  if (tracker.clickHandler) {
                    tracker.clickHandler({
                      eventSource: tracker,
                      pointerType: updateGPoint.type,
                      position: getPointRelativeToAbsolute(updateGPoint.currentPos, tracker.element),
                      quick,
                      shift: eventInfo.originalEvent.shiftKey,
                      isTouchEvent: updateGPoint.type === "touch",
                      originalEvent: eventInfo.originalEvent,
                      originalTarget: updateGPoint.originalTarget,
                      userData: tracker.userData
                    });
                  }
                  if (tracker.dblClickHandler && quick) {
                    pointsList.clicks++;
                    if (pointsList.clicks === 1) {
                      delegate.lastClickPos = releasePoint;
                      delegate.dblClickTimeOut = setTimeout(function() {
                        pointsList.clicks = 0;
                      }, tracker.dblClickTimeThreshold);
                    } else if (pointsList.clicks === 2) {
                      clearTimeout(delegate.dblClickTimeOut);
                      pointsList.clicks = 0;
                      if (delegate.lastClickPos.distanceTo(releasePoint) <= tracker.dblClickDistThreshold) {
                        tracker.dblClickHandler({
                          eventSource: tracker,
                          pointerType: updateGPoint.type,
                          position: getPointRelativeToAbsolute(updateGPoint.currentPos, tracker.element),
                          shift: eventInfo.originalEvent.shiftKey,
                          isTouchEvent: updateGPoint.type === "touch",
                          originalEvent: eventInfo.originalEvent,
                          userData: tracker.userData
                        });
                      }
                      delegate.lastClickPos = null;
                    }
                  }
                }
              } else if (pointsList.contacts === 2) {
                if (tracker.pinchHandler && updateGPoint.type === "touch") {
                  delegate.pinchGPoints = pointsList.asArray();
                  delegate.lastPinchDist = delegate.currentPinchDist = delegate.pinchGPoints[0].currentPos.distanceTo(delegate.pinchGPoints[1].currentPos);
                  delegate.lastPinchCenter = delegate.currentPinchCenter = getCenterPoint(delegate.pinchGPoints[0].currentPos, delegate.pinchGPoints[1].currentPos);
                }
              }
            } else {
              eventInfo.shouldReleaseCapture = false;
              if (tracker.releaseHandler) {
                tracker.releaseHandler({
                  eventSource: tracker,
                  pointerType: updateGPoint.type,
                  position: getPointRelativeToAbsolute(releasePoint, tracker.element),
                  buttons: pointsList.buttons,
                  insideElementPressed: updateGPoint.insideElementPressed,
                  insideElementReleased: updateGPoint.insideElement,
                  isTouchEvent: updateGPoint.type === "touch",
                  originalEvent: eventInfo.originalEvent,
                  userData: tracker.userData
                });
                eventInfo.preventDefault = true;
              }
            }
          }
        }
        function updatePointerMove(tracker, eventInfo, gPoint) {
          var delegate = THIS[tracker.hash], pointsList = tracker.getActivePointersListByType(gPoint.type), updateGPoint, gPointArray, delta;
          if (typeof eventInfo.originalEvent.buttons !== "undefined") {
            pointsList.buttons = eventInfo.originalEvent.buttons;
          }
          updateGPoint = pointsList.getById(gPoint.id);
          if (updateGPoint) {
            updateGPoint.lastPos = updateGPoint.currentPos;
            updateGPoint.lastTime = updateGPoint.currentTime;
            updateGPoint.currentPos = gPoint.currentPos;
            updateGPoint.currentTime = gPoint.currentTime;
          } else {
            return;
          }
          eventInfo.shouldCapture = false;
          eventInfo.shouldReleaseCapture = false;
          if (tracker.stopHandler && gPoint.type === "mouse") {
            clearTimeout(tracker.stopTimeOut);
            tracker.stopTimeOut = setTimeout(function() {
              handlePointerStop(tracker, eventInfo.originalEvent, gPoint.type);
            }, tracker.stopDelay);
          }
          if (pointsList.contacts === 0) {
            if (tracker.moveHandler) {
              tracker.moveHandler({
                eventSource: tracker,
                pointerType: gPoint.type,
                position: getPointRelativeToAbsolute(gPoint.currentPos, tracker.element),
                buttons: pointsList.buttons,
                isTouchEvent: gPoint.type === "touch",
                originalEvent: eventInfo.originalEvent,
                userData: tracker.userData
              });
            }
          } else if (pointsList.contacts === 1) {
            if (tracker.moveHandler) {
              updateGPoint = pointsList.asArray()[0];
              tracker.moveHandler({
                eventSource: tracker,
                pointerType: updateGPoint.type,
                position: getPointRelativeToAbsolute(updateGPoint.currentPos, tracker.element),
                buttons: pointsList.buttons,
                isTouchEvent: updateGPoint.type === "touch",
                originalEvent: eventInfo.originalEvent,
                userData: tracker.userData
              });
            }
            if (tracker.dragHandler && !eventInfo.preventGesture && !eventInfo.defaultPrevented) {
              updateGPoint = pointsList.asArray()[0];
              delta = updateGPoint.currentPos.minus(updateGPoint.lastPos);
              tracker.dragHandler({
                eventSource: tracker,
                pointerType: updateGPoint.type,
                position: getPointRelativeToAbsolute(updateGPoint.currentPos, tracker.element),
                buttons: pointsList.buttons,
                delta,
                speed: updateGPoint.speed,
                direction: updateGPoint.direction,
                shift: eventInfo.originalEvent.shiftKey,
                isTouchEvent: updateGPoint.type === "touch",
                originalEvent: eventInfo.originalEvent,
                userData: tracker.userData
              });
              eventInfo.preventDefault = true;
              delegate.sentDragEvent = true;
            }
          } else if (pointsList.contacts === 2) {
            if (tracker.moveHandler) {
              gPointArray = pointsList.asArray();
              tracker.moveHandler({
                eventSource: tracker,
                pointerType: gPointArray[0].type,
                position: getPointRelativeToAbsolute(getCenterPoint(gPointArray[0].currentPos, gPointArray[1].currentPos), tracker.element),
                buttons: pointsList.buttons,
                isTouchEvent: gPointArray[0].type === "touch",
                originalEvent: eventInfo.originalEvent,
                userData: tracker.userData
              });
            }
            if (tracker.pinchHandler && gPoint.type === "touch" && !eventInfo.preventGesture && !eventInfo.defaultPrevented) {
              delta = delegate.pinchGPoints[0].currentPos.distanceTo(delegate.pinchGPoints[1].currentPos);
              if (delta !== delegate.currentPinchDist) {
                delegate.lastPinchDist = delegate.currentPinchDist;
                delegate.currentPinchDist = delta;
                delegate.lastPinchCenter = delegate.currentPinchCenter;
                delegate.currentPinchCenter = getCenterPoint(delegate.pinchGPoints[0].currentPos, delegate.pinchGPoints[1].currentPos);
                tracker.pinchHandler({
                  eventSource: tracker,
                  pointerType: "touch",
                  gesturePoints: delegate.pinchGPoints,
                  lastCenter: getPointRelativeToAbsolute(delegate.lastPinchCenter, tracker.element),
                  center: getPointRelativeToAbsolute(delegate.currentPinchCenter, tracker.element),
                  lastDistance: delegate.lastPinchDist,
                  distance: delegate.currentPinchDist,
                  shift: eventInfo.originalEvent.shiftKey,
                  originalEvent: eventInfo.originalEvent,
                  userData: tracker.userData
                });
                eventInfo.preventDefault = true;
              }
            }
          }
        }
        function updatePointerCancel(tracker, eventInfo, gPoint) {
          var pointsList = tracker.getActivePointersListByType(gPoint.type), updateGPoint;
          updateGPoint = pointsList.getById(gPoint.id);
          if (updateGPoint) {
            stopTrackingPointer(tracker, pointsList, updateGPoint);
          }
        }
        function handlePointerStop(tracker, originalMoveEvent, pointerType) {
          if (tracker.stopHandler) {
            tracker.stopHandler({
              eventSource: tracker,
              pointerType,
              position: getMouseRelative(originalMoveEvent, tracker.element),
              buttons: tracker.getActivePointersListByType(pointerType).buttons,
              isTouchEvent: pointerType === "touch",
              originalEvent: originalMoveEvent,
              userData: tracker.userData
            });
          }
        }
      })(OpenSeadragon2);
      (function($3) {
        $3.ControlAnchor = {
          NONE: 0,
          TOP_LEFT: 1,
          TOP_RIGHT: 2,
          BOTTOM_RIGHT: 3,
          BOTTOM_LEFT: 4,
          ABSOLUTE: 5
        };
        $3.Control = function(element, options, container2) {
          var parent = element.parentNode;
          if (typeof options === "number") {
            $3.console.error("Passing an anchor directly into the OpenSeadragon.Control constructor is deprecated; please use an options object instead.  Support for this deprecated variant is scheduled for removal in December 2013");
            options = { anchor: options };
          }
          options.attachToViewer = typeof options.attachToViewer === "undefined" ? true : options.attachToViewer;
          this.autoFade = typeof options.autoFade === "undefined" ? true : options.autoFade;
          this.element = element;
          this.anchor = options.anchor;
          this.container = container2;
          if (this.anchor === $3.ControlAnchor.ABSOLUTE) {
            this.wrapper = $3.makeNeutralElement("div");
            this.wrapper.style.position = "absolute";
            this.wrapper.style.top = typeof options.top === "number" ? options.top + "px" : options.top;
            this.wrapper.style.left = typeof options.left === "number" ? options.left + "px" : options.left;
            this.wrapper.style.height = typeof options.height === "number" ? options.height + "px" : options.height;
            this.wrapper.style.width = typeof options.width === "number" ? options.width + "px" : options.width;
            this.wrapper.style.margin = "0px";
            this.wrapper.style.padding = "0px";
            this.element.style.position = "relative";
            this.element.style.top = "0px";
            this.element.style.left = "0px";
            this.element.style.height = "100%";
            this.element.style.width = "100%";
          } else {
            this.wrapper = $3.makeNeutralElement("div");
            this.wrapper.style.display = "inline-block";
            if (this.anchor === $3.ControlAnchor.NONE) {
              this.wrapper.style.width = this.wrapper.style.height = "100%";
            }
          }
          this.wrapper.appendChild(this.element);
          if (options.attachToViewer) {
            if (this.anchor === $3.ControlAnchor.TOP_RIGHT || this.anchor === $3.ControlAnchor.BOTTOM_RIGHT) {
              this.container.insertBefore(this.wrapper, this.container.firstChild);
            } else {
              this.container.appendChild(this.wrapper);
            }
          } else {
            parent.appendChild(this.wrapper);
          }
        };
        $3.Control.prototype = {
          destroy: function() {
            this.wrapper.removeChild(this.element);
            if (this.anchor !== $3.ControlAnchor.NONE) {
              this.container.removeChild(this.wrapper);
            }
          },
          isVisible: function() {
            return this.wrapper.style.display !== "none";
          },
          setVisible: function(visible) {
            this.wrapper.style.display = visible ? this.anchor === $3.ControlAnchor.ABSOLUTE ? "block" : "inline-block" : "none";
          },
          setOpacity: function(opacity) {
            if (this.element[$3.SIGNAL] && $3.Browser.vendor === $3.BROWSERS.IE) {
              $3.setElementOpacity(this.element, opacity, true);
            } else {
              $3.setElementOpacity(this.wrapper, opacity, true);
            }
          }
        };
      })(OpenSeadragon2);
      (function($3) {
        $3.ControlDock = function(options) {
          var layouts = ["topleft", "topright", "bottomright", "bottomleft"], layout, i3;
          $3.extend(true, this, {
            id: "controldock-" + $3.now() + "-" + Math.floor(Math.random() * 1e6),
            container: $3.makeNeutralElement("div"),
            controls: []
          }, options);
          this.container.onsubmit = function() {
            return false;
          };
          if (this.element) {
            this.element = $3.getElement(this.element);
            this.element.appendChild(this.container);
            this.element.style.position = "relative";
            this.container.style.width = "100%";
            this.container.style.height = "100%";
          }
          for (i3 = 0; i3 < layouts.length; i3++) {
            layout = layouts[i3];
            this.controls[layout] = $3.makeNeutralElement("div");
            this.controls[layout].style.position = "absolute";
            if (layout.match("left")) {
              this.controls[layout].style.left = "0px";
            }
            if (layout.match("right")) {
              this.controls[layout].style.right = "0px";
            }
            if (layout.match("top")) {
              this.controls[layout].style.top = "0px";
            }
            if (layout.match("bottom")) {
              this.controls[layout].style.bottom = "0px";
            }
          }
          this.container.appendChild(this.controls.topleft);
          this.container.appendChild(this.controls.topright);
          this.container.appendChild(this.controls.bottomright);
          this.container.appendChild(this.controls.bottomleft);
        };
        $3.ControlDock.prototype = {
          addControl: function(element, controlOptions) {
            element = $3.getElement(element);
            var div = null;
            if (getControlIndex(this, element) >= 0) {
              return;
            }
            switch (controlOptions.anchor) {
              case $3.ControlAnchor.TOP_RIGHT:
                div = this.controls.topright;
                element.style.position = "relative";
                element.style.paddingRight = "0px";
                element.style.paddingTop = "0px";
                break;
              case $3.ControlAnchor.BOTTOM_RIGHT:
                div = this.controls.bottomright;
                element.style.position = "relative";
                element.style.paddingRight = "0px";
                element.style.paddingBottom = "0px";
                break;
              case $3.ControlAnchor.BOTTOM_LEFT:
                div = this.controls.bottomleft;
                element.style.position = "relative";
                element.style.paddingLeft = "0px";
                element.style.paddingBottom = "0px";
                break;
              case $3.ControlAnchor.TOP_LEFT:
                div = this.controls.topleft;
                element.style.position = "relative";
                element.style.paddingLeft = "0px";
                element.style.paddingTop = "0px";
                break;
              case $3.ControlAnchor.ABSOLUTE:
                div = this.container;
                element.style.margin = "0px";
                element.style.padding = "0px";
                break;
              default:
              case $3.ControlAnchor.NONE:
                div = this.container;
                element.style.margin = "0px";
                element.style.padding = "0px";
                break;
            }
            this.controls.push(new $3.Control(element, controlOptions, div));
            element.style.display = "inline-block";
          },
          removeControl: function(element) {
            element = $3.getElement(element);
            var i3 = getControlIndex(this, element);
            if (i3 >= 0) {
              this.controls[i3].destroy();
              this.controls.splice(i3, 1);
            }
            return this;
          },
          clearControls: function() {
            while (this.controls.length > 0) {
              this.controls.pop().destroy();
            }
            return this;
          },
          areControlsEnabled: function() {
            var i3;
            for (i3 = this.controls.length - 1; i3 >= 0; i3--) {
              if (this.controls[i3].isVisible()) {
                return true;
              }
            }
            return false;
          },
          setControlsEnabled: function(enabled) {
            var i3;
            for (i3 = this.controls.length - 1; i3 >= 0; i3--) {
              this.controls[i3].setVisible(enabled);
            }
            return this;
          }
        };
        function getControlIndex(dock, element) {
          var controls = dock.controls, i3;
          for (i3 = controls.length - 1; i3 >= 0; i3--) {
            if (controls[i3].element === element) {
              return i3;
            }
          }
          return -1;
        }
      })(OpenSeadragon2);
      (function($3) {
        $3.Placement = $3.freezeObject({
          CENTER: 0,
          TOP_LEFT: 1,
          TOP: 2,
          TOP_RIGHT: 3,
          RIGHT: 4,
          BOTTOM_RIGHT: 5,
          BOTTOM: 6,
          BOTTOM_LEFT: 7,
          LEFT: 8,
          properties: {
            0: {
              isLeft: false,
              isHorizontallyCentered: true,
              isRight: false,
              isTop: false,
              isVerticallyCentered: true,
              isBottom: false
            },
            1: {
              isLeft: true,
              isHorizontallyCentered: false,
              isRight: false,
              isTop: true,
              isVerticallyCentered: false,
              isBottom: false
            },
            2: {
              isLeft: false,
              isHorizontallyCentered: true,
              isRight: false,
              isTop: true,
              isVerticallyCentered: false,
              isBottom: false
            },
            3: {
              isLeft: false,
              isHorizontallyCentered: false,
              isRight: true,
              isTop: true,
              isVerticallyCentered: false,
              isBottom: false
            },
            4: {
              isLeft: false,
              isHorizontallyCentered: false,
              isRight: true,
              isTop: false,
              isVerticallyCentered: true,
              isBottom: false
            },
            5: {
              isLeft: false,
              isHorizontallyCentered: false,
              isRight: true,
              isTop: false,
              isVerticallyCentered: false,
              isBottom: true
            },
            6: {
              isLeft: false,
              isHorizontallyCentered: true,
              isRight: false,
              isTop: false,
              isVerticallyCentered: false,
              isBottom: true
            },
            7: {
              isLeft: true,
              isHorizontallyCentered: false,
              isRight: false,
              isTop: false,
              isVerticallyCentered: false,
              isBottom: true
            },
            8: {
              isLeft: true,
              isHorizontallyCentered: false,
              isRight: false,
              isTop: false,
              isVerticallyCentered: true,
              isBottom: false
            }
          }
        });
      })(OpenSeadragon2);
      (function($3) {
        var THIS = {};
        var nextHash = 1;
        $3.Viewer = function(options) {
          var args = arguments, _this = this, i3;
          if (!$3.isPlainObject(options)) {
            options = {
              id: args[0],
              xmlPath: args.length > 1 ? args[1] : void 0,
              prefixUrl: args.length > 2 ? args[2] : void 0,
              controls: args.length > 3 ? args[3] : void 0,
              overlays: args.length > 4 ? args[4] : void 0
            };
          }
          if (options.config) {
            $3.extend(true, options, options.config);
            delete options.config;
          }
          $3.extend(true, this, {
            id: options.id,
            hash: options.hash || nextHash++,
            initialPage: 0,
            element: null,
            container: null,
            canvas: null,
            overlays: [],
            overlaysContainer: null,
            previousBody: [],
            customControls: [],
            source: null,
            drawer: null,
            world: null,
            viewport: null,
            navigator: null,
            collectionViewport: null,
            collectionDrawer: null,
            navImages: null,
            buttons: null,
            profiler: null
          }, $3.DEFAULT_SETTINGS, options);
          if (typeof this.hash === "undefined") {
            throw new Error("A hash must be defined, either by specifying options.id or options.hash.");
          }
          if (typeof THIS[this.hash] !== "undefined") {
            $3.console.warn("Hash " + this.hash + " has already been used.");
          }
          THIS[this.hash] = {
            fsBoundsDelta: new $3.Point(1, 1),
            prevContainerSize: null,
            animating: false,
            forceRedraw: false,
            mouseInside: false,
            group: null,
            zooming: false,
            zoomFactor: null,
            lastZoomTime: null,
            fullPage: false,
            onfullscreenchange: null
          };
          this._sequenceIndex = 0;
          this._firstOpen = true;
          this._updateRequestId = null;
          this._loadQueue = [];
          this.currentOverlays = [];
          this._updatePixelDensityRatioBind = null;
          this._lastScrollTime = $3.now();
          $3.EventSource.call(this);
          this.addHandler("open-failed", function(event) {
            var msg = $3.getString("Errors.OpenFailed", event.eventSource, event.message);
            _this._showMessage(msg);
          });
          $3.ControlDock.call(this, options);
          if (this.xmlPath) {
            this.tileSources = [this.xmlPath];
          }
          this.element = this.element || document.getElementById(this.id);
          this.canvas = $3.makeNeutralElement("div");
          this.canvas.className = "openseadragon-canvas";
          (function(style) {
            style.width = "100%";
            style.height = "100%";
            style.overflow = "hidden";
            style.position = "absolute";
            style.top = "0px";
            style.left = "0px";
          })(this.canvas.style);
          $3.setElementTouchActionNone(this.canvas);
          if (options.tabIndex !== "") {
            this.canvas.tabIndex = options.tabIndex === void 0 ? 0 : options.tabIndex;
          }
          this.container.className = "openseadragon-container";
          (function(style) {
            style.width = "100%";
            style.height = "100%";
            style.position = "relative";
            style.overflow = "hidden";
            style.left = "0px";
            style.top = "0px";
            style.textAlign = "left";
          })(this.container.style);
          $3.setElementTouchActionNone(this.container);
          this.container.insertBefore(this.canvas, this.container.firstChild);
          this.element.appendChild(this.container);
          this.bodyWidth = document.body.style.width;
          this.bodyHeight = document.body.style.height;
          this.bodyOverflow = document.body.style.overflow;
          this.docOverflow = document.documentElement.style.overflow;
          this.innerTracker = new $3.MouseTracker({
            userData: "Viewer.innerTracker",
            element: this.canvas,
            startDisabled: !this.mouseNavEnabled,
            clickTimeThreshold: this.clickTimeThreshold,
            clickDistThreshold: this.clickDistThreshold,
            dblClickTimeThreshold: this.dblClickTimeThreshold,
            dblClickDistThreshold: this.dblClickDistThreshold,
            contextMenuHandler: $3.delegate(this, onCanvasContextMenu),
            keyDownHandler: $3.delegate(this, onCanvasKeyDown),
            keyHandler: $3.delegate(this, onCanvasKeyPress),
            clickHandler: $3.delegate(this, onCanvasClick),
            dblClickHandler: $3.delegate(this, onCanvasDblClick),
            dragHandler: $3.delegate(this, onCanvasDrag),
            dragEndHandler: $3.delegate(this, onCanvasDragEnd),
            enterHandler: $3.delegate(this, onCanvasEnter),
            leaveHandler: $3.delegate(this, onCanvasLeave),
            pressHandler: $3.delegate(this, onCanvasPress),
            releaseHandler: $3.delegate(this, onCanvasRelease),
            nonPrimaryPressHandler: $3.delegate(this, onCanvasNonPrimaryPress),
            nonPrimaryReleaseHandler: $3.delegate(this, onCanvasNonPrimaryRelease),
            scrollHandler: $3.delegate(this, onCanvasScroll),
            pinchHandler: $3.delegate(this, onCanvasPinch)
          });
          this.outerTracker = new $3.MouseTracker({
            userData: "Viewer.outerTracker",
            element: this.container,
            startDisabled: !this.mouseNavEnabled,
            clickTimeThreshold: this.clickTimeThreshold,
            clickDistThreshold: this.clickDistThreshold,
            dblClickTimeThreshold: this.dblClickTimeThreshold,
            dblClickDistThreshold: this.dblClickDistThreshold,
            enterHandler: $3.delegate(this, onContainerEnter),
            leaveHandler: $3.delegate(this, onContainerLeave)
          });
          if (this.toolbar) {
            this.toolbar = new $3.ControlDock({ element: this.toolbar });
          }
          this.bindStandardControls();
          THIS[this.hash].prevContainerSize = _getSafeElemSize(this.container);
          this.world = new $3.World({
            viewer: this
          });
          this.world.addHandler("add-item", function(event) {
            _this.source = _this.world.getItemAt(0).source;
            THIS[_this.hash].forceRedraw = true;
            if (!_this._updateRequestId) {
              _this._updateRequestId = scheduleUpdate(_this, updateMulti);
            }
          });
          this.world.addHandler("remove-item", function(event) {
            if (_this.world.getItemCount()) {
              _this.source = _this.world.getItemAt(0).source;
            } else {
              _this.source = null;
            }
            THIS[_this.hash].forceRedraw = true;
          });
          this.world.addHandler("metrics-change", function(event) {
            if (_this.viewport) {
              _this.viewport._setContentBounds(_this.world.getHomeBounds(), _this.world.getContentFactor());
            }
          });
          this.world.addHandler("item-index-change", function(event) {
            _this.source = _this.world.getItemAt(0).source;
          });
          this.viewport = new $3.Viewport({
            containerSize: THIS[this.hash].prevContainerSize,
            springStiffness: this.springStiffness,
            animationTime: this.animationTime,
            minZoomImageRatio: this.minZoomImageRatio,
            maxZoomPixelRatio: this.maxZoomPixelRatio,
            visibilityRatio: this.visibilityRatio,
            wrapHorizontal: this.wrapHorizontal,
            wrapVertical: this.wrapVertical,
            defaultZoomLevel: this.defaultZoomLevel,
            minZoomLevel: this.minZoomLevel,
            maxZoomLevel: this.maxZoomLevel,
            viewer: this,
            degrees: this.degrees,
            flipped: this.flipped,
            navigatorRotate: this.navigatorRotate,
            homeFillsViewer: this.homeFillsViewer,
            margins: this.viewportMargins
          });
          this.viewport._setContentBounds(this.world.getHomeBounds(), this.world.getContentFactor());
          this.imageLoader = new $3.ImageLoader({
            jobLimit: this.imageLoaderLimit,
            timeout: options.timeout
          });
          this.tileCache = new $3.TileCache({
            maxImageCacheCount: this.maxImageCacheCount
          });
          this.drawer = new $3.Drawer({
            viewer: this,
            viewport: this.viewport,
            element: this.canvas,
            debugGridColor: this.debugGridColor
          });
          this.overlaysContainer = $3.makeNeutralElement("div");
          this.canvas.appendChild(this.overlaysContainer);
          if (!this.drawer.canRotate()) {
            if (this.rotateLeft) {
              i3 = this.buttonGroup.buttons.indexOf(this.rotateLeft);
              this.buttonGroup.buttons.splice(i3, 1);
              this.buttonGroup.element.removeChild(this.rotateLeft.element);
            }
            if (this.rotateRight) {
              i3 = this.buttonGroup.buttons.indexOf(this.rotateRight);
              this.buttonGroup.buttons.splice(i3, 1);
              this.buttonGroup.element.removeChild(this.rotateRight.element);
            }
          }
          this._addUpdatePixelDensityRatioEvent();
          if (this.showNavigator) {
            this.navigator = new $3.Navigator({
              id: this.navigatorId,
              position: this.navigatorPosition,
              sizeRatio: this.navigatorSizeRatio,
              maintainSizeRatio: this.navigatorMaintainSizeRatio,
              top: this.navigatorTop,
              left: this.navigatorLeft,
              width: this.navigatorWidth,
              height: this.navigatorHeight,
              autoResize: this.navigatorAutoResize,
              autoFade: this.navigatorAutoFade,
              prefixUrl: this.prefixUrl,
              viewer: this,
              navigatorRotate: this.navigatorRotate,
              background: this.navigatorBackground,
              opacity: this.navigatorOpacity,
              borderColor: this.navigatorBorderColor,
              displayRegionColor: this.navigatorDisplayRegionColor,
              crossOriginPolicy: this.crossOriginPolicy
            });
          }
          if (this.sequenceMode) {
            this.bindSequenceControls();
          }
          if (this.tileSources) {
            this.open(this.tileSources);
          }
          for (i3 = 0; i3 < this.customControls.length; i3++) {
            this.addControl(this.customControls[i3].id, { anchor: this.customControls[i3].anchor });
          }
          $3.requestAnimationFrame(function() {
            beginControlsAutoHide(_this);
          });
          if (this.imageSmoothingEnabled !== void 0 && !this.imageSmoothingEnabled) {
            this.drawer.setImageSmoothingEnabled(this.imageSmoothingEnabled);
          }
          $3._viewers.set(this.element, this);
        };
        $3.extend($3.Viewer.prototype, $3.EventSource.prototype, $3.ControlDock.prototype, {
          isOpen: function() {
            return !!this.world.getItemCount();
          },
          openDzi: function(dzi) {
            $3.console.error("[Viewer.openDzi] this function is deprecated; use Viewer.open() instead.");
            return this.open(dzi);
          },
          openTileSource: function(tileSource) {
            $3.console.error("[Viewer.openTileSource] this function is deprecated; use Viewer.open() instead.");
            return this.open(tileSource);
          },
          open: function(tileSources, initialPage) {
            var _this = this;
            this.close();
            if (!tileSources) {
              return this;
            }
            if (this.sequenceMode && $3.isArray(tileSources)) {
              if (this.referenceStrip) {
                this.referenceStrip.destroy();
                this.referenceStrip = null;
              }
              if (typeof initialPage !== "undefined" && !isNaN(initialPage)) {
                this.initialPage = initialPage;
              }
              this.tileSources = tileSources;
              this._sequenceIndex = Math.max(0, Math.min(this.tileSources.length - 1, this.initialPage));
              if (this.tileSources.length) {
                this.open(this.tileSources[this._sequenceIndex]);
                if (this.showReferenceStrip) {
                  this.addReferenceStrip();
                }
              }
              this._updateSequenceButtons(this._sequenceIndex);
              return this;
            }
            if (!$3.isArray(tileSources)) {
              tileSources = [tileSources];
            }
            if (!tileSources.length) {
              return this;
            }
            this._opening = true;
            var expected = tileSources.length;
            var successes = 0;
            var failures = 0;
            var failEvent;
            var checkCompletion = function() {
              if (successes + failures === expected) {
                if (successes) {
                  if (_this._firstOpen || !_this.preserveViewport) {
                    _this.viewport.goHome(true);
                    _this.viewport.update();
                  }
                  _this._firstOpen = false;
                  var source = tileSources[0];
                  if (source.tileSource) {
                    source = source.tileSource;
                  }
                  if (_this.overlays && !_this.preserveOverlays) {
                    for (var i4 = 0; i4 < _this.overlays.length; i4++) {
                      _this.currentOverlays[i4] = getOverlayObject(_this, _this.overlays[i4]);
                    }
                  }
                  _this._drawOverlays();
                  _this._opening = false;
                  _this.raiseEvent("open", { source });
                } else {
                  _this._opening = false;
                  _this.raiseEvent("open-failed", failEvent);
                }
              }
            };
            var doOne = function(options) {
              if (!$3.isPlainObject(options) || !options.tileSource) {
                options = {
                  tileSource: options
                };
              }
              if (options.index !== void 0) {
                $3.console.error("[Viewer.open] setting indexes here is not supported; use addTiledImage instead");
                delete options.index;
              }
              if (options.collectionImmediately === void 0) {
                options.collectionImmediately = true;
              }
              var originalSuccess = options.success;
              options.success = function(event) {
                successes++;
                if (options.tileSource.overlays) {
                  for (var i4 = 0; i4 < options.tileSource.overlays.length; i4++) {
                    _this.addOverlay(options.tileSource.overlays[i4]);
                  }
                }
                if (originalSuccess) {
                  originalSuccess(event);
                }
                checkCompletion();
              };
              var originalError = options.error;
              options.error = function(event) {
                failures++;
                if (!failEvent) {
                  failEvent = event;
                }
                if (originalError) {
                  originalError(event);
                }
                checkCompletion();
              };
              _this.addTiledImage(options);
            };
            for (var i3 = 0; i3 < tileSources.length; i3++) {
              doOne(tileSources[i3]);
            }
            return this;
          },
          close: function() {
            if (!THIS[this.hash]) {
              return this;
            }
            this._opening = false;
            if (this.navigator) {
              this.navigator.close();
            }
            if (!this.preserveOverlays) {
              this.clearOverlays();
              this.overlaysContainer.innerHTML = "";
            }
            THIS[this.hash].animating = false;
            this.world.removeAll();
            this.imageLoader.clear();
            this.raiseEvent("close");
            return this;
          },
          destroy: function() {
            if (!THIS[this.hash]) {
              return;
            }
            this._removeUpdatePixelDensityRatioEvent();
            this.close();
            this.clearOverlays();
            this.overlaysContainer.innerHTML = "";
            if (this.referenceStrip) {
              this.referenceStrip.destroy();
              this.referenceStrip = null;
            }
            if (this._updateRequestId !== null) {
              $3.cancelAnimationFrame(this._updateRequestId);
              this._updateRequestId = null;
            }
            if (this.drawer) {
              this.drawer.destroy();
            }
            if (this.navigator) {
              this.navigator.destroy();
              THIS[this.navigator.hash] = null;
              delete THIS[this.navigator.hash];
              this.navigator = null;
            }
            this.removeAllHandlers();
            if (this.buttonGroup) {
              this.buttonGroup.destroy();
            } else if (this.customButtons) {
              while (this.customButtons.length) {
                this.customButtons.pop().destroy();
              }
            }
            if (this.paging) {
              this.paging.destroy();
            }
            if (this.element) {
              while (this.element.firstChild) {
                this.element.removeChild(this.element.firstChild);
              }
            }
            this.container.onsubmit = null;
            this.clearControls();
            if (this.innerTracker) {
              this.innerTracker.destroy();
            }
            if (this.outerTracker) {
              this.outerTracker.destroy();
            }
            THIS[this.hash] = null;
            delete THIS[this.hash];
            this.canvas = null;
            this.container = null;
            $3._viewers.delete(this.element);
            this.element = null;
          },
          isMouseNavEnabled: function() {
            return this.innerTracker.isTracking();
          },
          setMouseNavEnabled: function(enabled) {
            this.innerTracker.setTracking(enabled);
            this.outerTracker.setTracking(enabled);
            this.raiseEvent("mouse-enabled", { enabled });
            return this;
          },
          areControlsEnabled: function() {
            var enabled = this.controls.length, i3;
            for (i3 = 0; i3 < this.controls.length; i3++) {
              enabled = enabled && this.controls[i3].isVisible();
            }
            return enabled;
          },
          setControlsEnabled: function(enabled) {
            if (enabled) {
              abortControlsAutoHide(this);
            } else {
              beginControlsAutoHide(this);
            }
            this.raiseEvent("controls-enabled", { enabled });
            return this;
          },
          setDebugMode: function(debugMode) {
            for (var i3 = 0; i3 < this.world.getItemCount(); i3++) {
              this.world.getItemAt(i3).debugMode = debugMode;
            }
            this.debugMode = debugMode;
            this.forceRedraw();
          },
          isFullPage: function() {
            return THIS[this.hash].fullPage;
          },
          setFullPage: function(fullPage) {
            var body = document.body, bodyStyle = body.style, docStyle = document.documentElement.style, _this = this, nodes, i3;
            if (fullPage === this.isFullPage()) {
              return this;
            }
            var fullPageEventArgs = {
              fullPage,
              preventDefaultAction: false
            };
            this.raiseEvent("pre-full-page", fullPageEventArgs);
            if (fullPageEventArgs.preventDefaultAction) {
              return this;
            }
            if (fullPage) {
              this.elementSize = $3.getElementSize(this.element);
              this.pageScroll = $3.getPageScroll();
              this.elementMargin = this.element.style.margin;
              this.element.style.margin = "0";
              this.elementPadding = this.element.style.padding;
              this.element.style.padding = "0";
              this.bodyMargin = bodyStyle.margin;
              this.docMargin = docStyle.margin;
              bodyStyle.margin = "0";
              docStyle.margin = "0";
              this.bodyPadding = bodyStyle.padding;
              this.docPadding = docStyle.padding;
              bodyStyle.padding = "0";
              docStyle.padding = "0";
              this.bodyWidth = bodyStyle.width;
              this.docWidth = docStyle.width;
              bodyStyle.width = "100%";
              docStyle.width = "100%";
              this.bodyHeight = bodyStyle.height;
              this.docHeight = docStyle.height;
              bodyStyle.height = "100%";
              docStyle.height = "100%";
              this.bodyDisplay = bodyStyle.display;
              bodyStyle.display = "block";
              this.previousBody = [];
              THIS[this.hash].prevElementParent = this.element.parentNode;
              THIS[this.hash].prevNextSibling = this.element.nextSibling;
              THIS[this.hash].prevElementWidth = this.element.style.width;
              THIS[this.hash].prevElementHeight = this.element.style.height;
              nodes = body.childNodes.length;
              for (i3 = 0; i3 < nodes; i3++) {
                this.previousBody.push(body.childNodes[0]);
                body.removeChild(body.childNodes[0]);
              }
              if (this.toolbar && this.toolbar.element) {
                this.toolbar.parentNode = this.toolbar.element.parentNode;
                this.toolbar.nextSibling = this.toolbar.element.nextSibling;
                body.appendChild(this.toolbar.element);
                $3.addClass(this.toolbar.element, "fullpage");
              }
              $3.addClass(this.element, "fullpage");
              body.appendChild(this.element);
              this.element.style.height = $3.getWindowSize().y + "px";
              this.element.style.width = $3.getWindowSize().x + "px";
              if (this.toolbar && this.toolbar.element) {
                this.element.style.height = $3.getElementSize(this.element).y - $3.getElementSize(this.toolbar.element).y + "px";
              }
              THIS[this.hash].fullPage = true;
              $3.delegate(this, onContainerEnter)({});
            } else {
              this.element.style.margin = this.elementMargin;
              this.element.style.padding = this.elementPadding;
              bodyStyle.margin = this.bodyMargin;
              docStyle.margin = this.docMargin;
              bodyStyle.padding = this.bodyPadding;
              docStyle.padding = this.docPadding;
              bodyStyle.width = this.bodyWidth;
              docStyle.width = this.docWidth;
              bodyStyle.height = this.bodyHeight;
              docStyle.height = this.docHeight;
              bodyStyle.display = this.bodyDisplay;
              body.removeChild(this.element);
              nodes = this.previousBody.length;
              for (i3 = 0; i3 < nodes; i3++) {
                body.appendChild(this.previousBody.shift());
              }
              $3.removeClass(this.element, "fullpage");
              THIS[this.hash].prevElementParent.insertBefore(this.element, THIS[this.hash].prevNextSibling);
              if (this.toolbar && this.toolbar.element) {
                body.removeChild(this.toolbar.element);
                $3.removeClass(this.toolbar.element, "fullpage");
                this.toolbar.parentNode.insertBefore(this.toolbar.element, this.toolbar.nextSibling);
                delete this.toolbar.parentNode;
                delete this.toolbar.nextSibling;
              }
              this.element.style.width = THIS[this.hash].prevElementWidth;
              this.element.style.height = THIS[this.hash].prevElementHeight;
              var restoreScrollCounter = 0;
              var restoreScroll = function() {
                $3.setPageScroll(_this.pageScroll);
                var pageScroll = $3.getPageScroll();
                restoreScrollCounter++;
                if (restoreScrollCounter < 10 && (pageScroll.x !== _this.pageScroll.x || pageScroll.y !== _this.pageScroll.y)) {
                  $3.requestAnimationFrame(restoreScroll);
                }
              };
              $3.requestAnimationFrame(restoreScroll);
              THIS[this.hash].fullPage = false;
              $3.delegate(this, onContainerLeave)({});
            }
            if (this.navigator && this.viewport) {
              this.navigator.update(this.viewport);
            }
            this.raiseEvent("full-page", { fullPage });
            return this;
          },
          setFullScreen: function(fullScreen) {
            var _this = this;
            if (!$3.supportsFullScreen) {
              return this.setFullPage(fullScreen);
            }
            if ($3.isFullScreen() === fullScreen) {
              return this;
            }
            var fullScreeEventArgs = {
              fullScreen,
              preventDefaultAction: false
            };
            this.raiseEvent("pre-full-screen", fullScreeEventArgs);
            if (fullScreeEventArgs.preventDefaultAction) {
              return this;
            }
            if (fullScreen) {
              this.setFullPage(true);
              if (!this.isFullPage()) {
                return this;
              }
              this.fullPageStyleWidth = this.element.style.width;
              this.fullPageStyleHeight = this.element.style.height;
              this.element.style.width = "100%";
              this.element.style.height = "100%";
              var onFullScreenChange = function() {
                var isFullScreen = $3.isFullScreen();
                if (!isFullScreen) {
                  $3.removeEvent(document, $3.fullScreenEventName, onFullScreenChange);
                  $3.removeEvent(document, $3.fullScreenErrorEventName, onFullScreenChange);
                  _this.setFullPage(false);
                  if (_this.isFullPage()) {
                    _this.element.style.width = _this.fullPageStyleWidth;
                    _this.element.style.height = _this.fullPageStyleHeight;
                  }
                }
                if (_this.navigator && _this.viewport) {
                  setTimeout(function() {
                    _this.navigator.update(_this.viewport);
                  });
                }
                _this.raiseEvent("full-screen", { fullScreen: isFullScreen });
              };
              $3.addEvent(document, $3.fullScreenEventName, onFullScreenChange);
              $3.addEvent(document, $3.fullScreenErrorEventName, onFullScreenChange);
              $3.requestFullScreen(document.body);
            } else {
              $3.exitFullScreen();
            }
            return this;
          },
          isVisible: function() {
            return this.container.style.visibility !== "hidden";
          },
          setVisible: function(visible) {
            this.container.style.visibility = visible ? "" : "hidden";
            this.raiseEvent("visible", { visible });
            return this;
          },
          addTiledImage: function(options) {
            $3.console.assert(options, "[Viewer.addTiledImage] options is required");
            $3.console.assert(options.tileSource, "[Viewer.addTiledImage] options.tileSource is required");
            $3.console.assert(!options.replace || options.index > -1 && options.index < this.world.getItemCount(), "[Viewer.addTiledImage] if options.replace is used, options.index must be a valid index in Viewer.world");
            var _this = this;
            if (options.replace) {
              options.replaceItem = _this.world.getItemAt(options.index);
            }
            this._hideMessage();
            if (options.placeholderFillStyle === void 0) {
              options.placeholderFillStyle = this.placeholderFillStyle;
            }
            if (options.opacity === void 0) {
              options.opacity = this.opacity;
            }
            if (options.preload === void 0) {
              options.preload = this.preload;
            }
            if (options.compositeOperation === void 0) {
              options.compositeOperation = this.compositeOperation;
            }
            if (options.crossOriginPolicy === void 0) {
              options.crossOriginPolicy = options.tileSource.crossOriginPolicy !== void 0 ? options.tileSource.crossOriginPolicy : this.crossOriginPolicy;
            }
            if (options.ajaxWithCredentials === void 0) {
              options.ajaxWithCredentials = this.ajaxWithCredentials;
            }
            if (options.loadTilesWithAjax === void 0) {
              options.loadTilesWithAjax = this.loadTilesWithAjax;
            }
            if (options.ajaxHeaders === void 0 || options.ajaxHeaders === null) {
              options.ajaxHeaders = this.ajaxHeaders;
            } else if ($3.isPlainObject(options.ajaxHeaders) && $3.isPlainObject(this.ajaxHeaders)) {
              options.ajaxHeaders = $3.extend({}, this.ajaxHeaders, options.ajaxHeaders);
            }
            var myQueueItem = {
              options
            };
            function raiseAddItemFailed(event) {
              for (var i3 = 0; i3 < _this._loadQueue.length; i3++) {
                if (_this._loadQueue[i3] === myQueueItem) {
                  _this._loadQueue.splice(i3, 1);
                  break;
                }
              }
              if (_this._loadQueue.length === 0) {
                refreshWorld(myQueueItem);
              }
              _this.raiseEvent("add-item-failed", event);
              if (options.error) {
                options.error(event);
              }
            }
            function refreshWorld(theItem) {
              if (_this.collectionMode) {
                _this.world.arrange({
                  immediately: theItem.options.collectionImmediately,
                  rows: _this.collectionRows,
                  columns: _this.collectionColumns,
                  layout: _this.collectionLayout,
                  tileSize: _this.collectionTileSize,
                  tileMargin: _this.collectionTileMargin
                });
                _this.world.setAutoRefigureSizes(true);
              }
            }
            if ($3.isArray(options.tileSource)) {
              setTimeout(function() {
                raiseAddItemFailed({
                  message: "[Viewer.addTiledImage] Sequences can not be added; add them one at a time instead.",
                  source: options.tileSource,
                  options
                });
              });
              return;
            }
            this._loadQueue.push(myQueueItem);
            function processReadyItems() {
              var queueItem, tiledImage, optionsClone;
              while (_this._loadQueue.length) {
                queueItem = _this._loadQueue[0];
                if (!queueItem.tileSource) {
                  break;
                }
                _this._loadQueue.splice(0, 1);
                if (queueItem.options.replace) {
                  var newIndex = _this.world.getIndexOfItem(queueItem.options.replaceItem);
                  if (newIndex !== -1) {
                    queueItem.options.index = newIndex;
                  }
                  _this.world.removeItem(queueItem.options.replaceItem);
                }
                tiledImage = new $3.TiledImage({
                  viewer: _this,
                  source: queueItem.tileSource,
                  viewport: _this.viewport,
                  drawer: _this.drawer,
                  tileCache: _this.tileCache,
                  imageLoader: _this.imageLoader,
                  x: queueItem.options.x,
                  y: queueItem.options.y,
                  width: queueItem.options.width,
                  height: queueItem.options.height,
                  fitBounds: queueItem.options.fitBounds,
                  fitBoundsPlacement: queueItem.options.fitBoundsPlacement,
                  clip: queueItem.options.clip,
                  placeholderFillStyle: queueItem.options.placeholderFillStyle,
                  opacity: queueItem.options.opacity,
                  preload: queueItem.options.preload,
                  degrees: queueItem.options.degrees,
                  flipped: queueItem.options.flipped,
                  compositeOperation: queueItem.options.compositeOperation,
                  springStiffness: _this.springStiffness,
                  animationTime: _this.animationTime,
                  minZoomImageRatio: _this.minZoomImageRatio,
                  wrapHorizontal: _this.wrapHorizontal,
                  wrapVertical: _this.wrapVertical,
                  immediateRender: _this.immediateRender,
                  blendTime: _this.blendTime,
                  alwaysBlend: _this.alwaysBlend,
                  minPixelRatio: _this.minPixelRatio,
                  smoothTileEdgesMinZoom: _this.smoothTileEdgesMinZoom,
                  iOSDevice: _this.iOSDevice,
                  crossOriginPolicy: queueItem.options.crossOriginPolicy,
                  ajaxWithCredentials: queueItem.options.ajaxWithCredentials,
                  loadTilesWithAjax: queueItem.options.loadTilesWithAjax,
                  ajaxHeaders: queueItem.options.ajaxHeaders,
                  debugMode: _this.debugMode
                });
                if (_this.collectionMode) {
                  _this.world.setAutoRefigureSizes(false);
                }
                if (_this.navigator) {
                  optionsClone = $3.extend({}, queueItem.options, {
                    replace: false,
                    originalTiledImage: tiledImage,
                    tileSource: queueItem.tileSource
                  });
                  _this.navigator.addTiledImage(optionsClone);
                }
                _this.world.addItem(tiledImage, {
                  index: queueItem.options.index
                });
                if (_this._loadQueue.length === 0) {
                  refreshWorld(queueItem);
                }
                if (_this.world.getItemCount() === 1 && !_this.preserveViewport) {
                  _this.viewport.goHome(true);
                }
                if (queueItem.options.success) {
                  queueItem.options.success({
                    item: tiledImage
                  });
                }
              }
            }
            getTileSourceImplementation(this, options.tileSource, options, function(tileSource) {
              myQueueItem.tileSource = tileSource;
              processReadyItems();
            }, function(event) {
              event.options = options;
              raiseAddItemFailed(event);
              processReadyItems();
            });
          },
          addSimpleImage: function(options) {
            $3.console.assert(options, "[Viewer.addSimpleImage] options is required");
            $3.console.assert(options.url, "[Viewer.addSimpleImage] options.url is required");
            var opts = $3.extend({}, options, {
              tileSource: {
                type: "image",
                url: options.url
              }
            });
            delete opts.url;
            this.addTiledImage(opts);
          },
          addLayer: function(options) {
            var _this = this;
            $3.console.error("[Viewer.addLayer] this function is deprecated; use Viewer.addTiledImage() instead.");
            var optionsClone = $3.extend({}, options, {
              success: function(event) {
                _this.raiseEvent("add-layer", {
                  options,
                  drawer: event.item
                });
              },
              error: function(event) {
                _this.raiseEvent("add-layer-failed", event);
              }
            });
            this.addTiledImage(optionsClone);
            return this;
          },
          getLayerAtLevel: function(level) {
            $3.console.error("[Viewer.getLayerAtLevel] this function is deprecated; use World.getItemAt() instead.");
            return this.world.getItemAt(level);
          },
          getLevelOfLayer: function(drawer) {
            $3.console.error("[Viewer.getLevelOfLayer] this function is deprecated; use World.getIndexOfItem() instead.");
            return this.world.getIndexOfItem(drawer);
          },
          getLayersCount: function() {
            $3.console.error("[Viewer.getLayersCount] this function is deprecated; use World.getItemCount() instead.");
            return this.world.getItemCount();
          },
          setLayerLevel: function(drawer, level) {
            $3.console.error("[Viewer.setLayerLevel] this function is deprecated; use World.setItemIndex() instead.");
            return this.world.setItemIndex(drawer, level);
          },
          removeLayer: function(drawer) {
            $3.console.error("[Viewer.removeLayer] this function is deprecated; use World.removeItem() instead.");
            return this.world.removeItem(drawer);
          },
          forceRedraw: function() {
            THIS[this.hash].forceRedraw = true;
            return this;
          },
          bindSequenceControls: function() {
            var onFocusHandler = $3.delegate(this, onFocus), onBlurHandler = $3.delegate(this, onBlur), onNextHandler = $3.delegate(this, this.goToNextPage), onPreviousHandler = $3.delegate(this, this.goToPreviousPage), navImages = this.navImages, useGroup = true;
            if (this.showSequenceControl) {
              if (this.previousButton || this.nextButton) {
                useGroup = false;
              }
              this.previousButton = new $3.Button({
                element: this.previousButton ? $3.getElement(this.previousButton) : null,
                clickTimeThreshold: this.clickTimeThreshold,
                clickDistThreshold: this.clickDistThreshold,
                tooltip: $3.getString("Tooltips.PreviousPage"),
                srcRest: resolveUrl(this.prefixUrl, navImages.previous.REST),
                srcGroup: resolveUrl(this.prefixUrl, navImages.previous.GROUP),
                srcHover: resolveUrl(this.prefixUrl, navImages.previous.HOVER),
                srcDown: resolveUrl(this.prefixUrl, navImages.previous.DOWN),
                onRelease: onPreviousHandler,
                onFocus: onFocusHandler,
                onBlur: onBlurHandler
              });
              this.nextButton = new $3.Button({
                element: this.nextButton ? $3.getElement(this.nextButton) : null,
                clickTimeThreshold: this.clickTimeThreshold,
                clickDistThreshold: this.clickDistThreshold,
                tooltip: $3.getString("Tooltips.NextPage"),
                srcRest: resolveUrl(this.prefixUrl, navImages.next.REST),
                srcGroup: resolveUrl(this.prefixUrl, navImages.next.GROUP),
                srcHover: resolveUrl(this.prefixUrl, navImages.next.HOVER),
                srcDown: resolveUrl(this.prefixUrl, navImages.next.DOWN),
                onRelease: onNextHandler,
                onFocus: onFocusHandler,
                onBlur: onBlurHandler
              });
              if (!this.navPrevNextWrap) {
                this.previousButton.disable();
              }
              if (!this.tileSources || !this.tileSources.length) {
                this.nextButton.disable();
              }
              if (useGroup) {
                this.paging = new $3.ButtonGroup({
                  buttons: [
                    this.previousButton,
                    this.nextButton
                  ],
                  clickTimeThreshold: this.clickTimeThreshold,
                  clickDistThreshold: this.clickDistThreshold
                });
                this.pagingControl = this.paging.element;
                if (this.toolbar) {
                  this.toolbar.addControl(this.pagingControl, { anchor: $3.ControlAnchor.BOTTOM_RIGHT });
                } else {
                  this.addControl(this.pagingControl, { anchor: this.sequenceControlAnchor || $3.ControlAnchor.TOP_LEFT });
                }
              }
            }
            return this;
          },
          bindStandardControls: function() {
            var beginZoomingInHandler = $3.delegate(this, beginZoomingIn), endZoomingHandler = $3.delegate(this, endZooming), doSingleZoomInHandler = $3.delegate(this, doSingleZoomIn), beginZoomingOutHandler = $3.delegate(this, beginZoomingOut), doSingleZoomOutHandler = $3.delegate(this, doSingleZoomOut), onHomeHandler = $3.delegate(this, onHome), onFullScreenHandler = $3.delegate(this, onFullScreen), onRotateLeftHandler = $3.delegate(this, onRotateLeft), onRotateRightHandler = $3.delegate(this, onRotateRight), onFlipHandler = $3.delegate(this, onFlip), onFocusHandler = $3.delegate(this, onFocus), onBlurHandler = $3.delegate(this, onBlur), navImages = this.navImages, buttons = [], useGroup = true;
            if (this.showNavigationControl) {
              if (this.zoomInButton || this.zoomOutButton || this.homeButton || this.fullPageButton || this.rotateLeftButton || this.rotateRightButton || this.flipButton) {
                useGroup = false;
              }
              if (this.showZoomControl) {
                buttons.push(this.zoomInButton = new $3.Button({
                  element: this.zoomInButton ? $3.getElement(this.zoomInButton) : null,
                  clickTimeThreshold: this.clickTimeThreshold,
                  clickDistThreshold: this.clickDistThreshold,
                  tooltip: $3.getString("Tooltips.ZoomIn"),
                  srcRest: resolveUrl(this.prefixUrl, navImages.zoomIn.REST),
                  srcGroup: resolveUrl(this.prefixUrl, navImages.zoomIn.GROUP),
                  srcHover: resolveUrl(this.prefixUrl, navImages.zoomIn.HOVER),
                  srcDown: resolveUrl(this.prefixUrl, navImages.zoomIn.DOWN),
                  onPress: beginZoomingInHandler,
                  onRelease: endZoomingHandler,
                  onClick: doSingleZoomInHandler,
                  onEnter: beginZoomingInHandler,
                  onExit: endZoomingHandler,
                  onFocus: onFocusHandler,
                  onBlur: onBlurHandler
                }));
                buttons.push(this.zoomOutButton = new $3.Button({
                  element: this.zoomOutButton ? $3.getElement(this.zoomOutButton) : null,
                  clickTimeThreshold: this.clickTimeThreshold,
                  clickDistThreshold: this.clickDistThreshold,
                  tooltip: $3.getString("Tooltips.ZoomOut"),
                  srcRest: resolveUrl(this.prefixUrl, navImages.zoomOut.REST),
                  srcGroup: resolveUrl(this.prefixUrl, navImages.zoomOut.GROUP),
                  srcHover: resolveUrl(this.prefixUrl, navImages.zoomOut.HOVER),
                  srcDown: resolveUrl(this.prefixUrl, navImages.zoomOut.DOWN),
                  onPress: beginZoomingOutHandler,
                  onRelease: endZoomingHandler,
                  onClick: doSingleZoomOutHandler,
                  onEnter: beginZoomingOutHandler,
                  onExit: endZoomingHandler,
                  onFocus: onFocusHandler,
                  onBlur: onBlurHandler
                }));
              }
              if (this.showHomeControl) {
                buttons.push(this.homeButton = new $3.Button({
                  element: this.homeButton ? $3.getElement(this.homeButton) : null,
                  clickTimeThreshold: this.clickTimeThreshold,
                  clickDistThreshold: this.clickDistThreshold,
                  tooltip: $3.getString("Tooltips.Home"),
                  srcRest: resolveUrl(this.prefixUrl, navImages.home.REST),
                  srcGroup: resolveUrl(this.prefixUrl, navImages.home.GROUP),
                  srcHover: resolveUrl(this.prefixUrl, navImages.home.HOVER),
                  srcDown: resolveUrl(this.prefixUrl, navImages.home.DOWN),
                  onRelease: onHomeHandler,
                  onFocus: onFocusHandler,
                  onBlur: onBlurHandler
                }));
              }
              if (this.showFullPageControl) {
                buttons.push(this.fullPageButton = new $3.Button({
                  element: this.fullPageButton ? $3.getElement(this.fullPageButton) : null,
                  clickTimeThreshold: this.clickTimeThreshold,
                  clickDistThreshold: this.clickDistThreshold,
                  tooltip: $3.getString("Tooltips.FullPage"),
                  srcRest: resolveUrl(this.prefixUrl, navImages.fullpage.REST),
                  srcGroup: resolveUrl(this.prefixUrl, navImages.fullpage.GROUP),
                  srcHover: resolveUrl(this.prefixUrl, navImages.fullpage.HOVER),
                  srcDown: resolveUrl(this.prefixUrl, navImages.fullpage.DOWN),
                  onRelease: onFullScreenHandler,
                  onFocus: onFocusHandler,
                  onBlur: onBlurHandler
                }));
              }
              if (this.showRotationControl) {
                buttons.push(this.rotateLeftButton = new $3.Button({
                  element: this.rotateLeftButton ? $3.getElement(this.rotateLeftButton) : null,
                  clickTimeThreshold: this.clickTimeThreshold,
                  clickDistThreshold: this.clickDistThreshold,
                  tooltip: $3.getString("Tooltips.RotateLeft"),
                  srcRest: resolveUrl(this.prefixUrl, navImages.rotateleft.REST),
                  srcGroup: resolveUrl(this.prefixUrl, navImages.rotateleft.GROUP),
                  srcHover: resolveUrl(this.prefixUrl, navImages.rotateleft.HOVER),
                  srcDown: resolveUrl(this.prefixUrl, navImages.rotateleft.DOWN),
                  onRelease: onRotateLeftHandler,
                  onFocus: onFocusHandler,
                  onBlur: onBlurHandler
                }));
                buttons.push(this.rotateRightButton = new $3.Button({
                  element: this.rotateRightButton ? $3.getElement(this.rotateRightButton) : null,
                  clickTimeThreshold: this.clickTimeThreshold,
                  clickDistThreshold: this.clickDistThreshold,
                  tooltip: $3.getString("Tooltips.RotateRight"),
                  srcRest: resolveUrl(this.prefixUrl, navImages.rotateright.REST),
                  srcGroup: resolveUrl(this.prefixUrl, navImages.rotateright.GROUP),
                  srcHover: resolveUrl(this.prefixUrl, navImages.rotateright.HOVER),
                  srcDown: resolveUrl(this.prefixUrl, navImages.rotateright.DOWN),
                  onRelease: onRotateRightHandler,
                  onFocus: onFocusHandler,
                  onBlur: onBlurHandler
                }));
              }
              if (this.showFlipControl) {
                buttons.push(this.flipButton = new $3.Button({
                  element: this.flipButton ? $3.getElement(this.flipButton) : null,
                  clickTimeThreshold: this.clickTimeThreshold,
                  clickDistThreshold: this.clickDistThreshold,
                  tooltip: $3.getString("Tooltips.Flip"),
                  srcRest: resolveUrl(this.prefixUrl, navImages.flip.REST),
                  srcGroup: resolveUrl(this.prefixUrl, navImages.flip.GROUP),
                  srcHover: resolveUrl(this.prefixUrl, navImages.flip.HOVER),
                  srcDown: resolveUrl(this.prefixUrl, navImages.flip.DOWN),
                  onRelease: onFlipHandler,
                  onFocus: onFocusHandler,
                  onBlur: onBlurHandler
                }));
              }
              if (useGroup) {
                this.buttonGroup = new $3.ButtonGroup({
                  buttons,
                  clickTimeThreshold: this.clickTimeThreshold,
                  clickDistThreshold: this.clickDistThreshold
                });
                this.navControl = this.buttonGroup.element;
                this.addHandler("open", $3.delegate(this, lightUp));
                if (this.toolbar) {
                  this.toolbar.addControl(this.navControl, { anchor: this.navigationControlAnchor || $3.ControlAnchor.TOP_LEFT });
                } else {
                  this.addControl(this.navControl, { anchor: this.navigationControlAnchor || $3.ControlAnchor.TOP_LEFT });
                }
              } else {
                this.customButtons = buttons;
              }
            }
            return this;
          },
          currentPage: function() {
            return this._sequenceIndex;
          },
          goToPage: function(page) {
            if (this.tileSources && page >= 0 && page < this.tileSources.length) {
              this._sequenceIndex = page;
              this._updateSequenceButtons(page);
              this.open(this.tileSources[page]);
              if (this.referenceStrip) {
                this.referenceStrip.setFocus(page);
              }
              this.raiseEvent("page", { page });
            }
            return this;
          },
          addOverlay: function(element, location2, placement, onDraw) {
            var options;
            if ($3.isPlainObject(element)) {
              options = element;
            } else {
              options = {
                element,
                location: location2,
                placement,
                onDraw
              };
            }
            element = $3.getElement(options.element);
            if (getOverlayIndex(this.currentOverlays, element) >= 0) {
              return this;
            }
            var overlay = getOverlayObject(this, options);
            this.currentOverlays.push(overlay);
            overlay.drawHTML(this.overlaysContainer, this.viewport);
            this.raiseEvent("add-overlay", {
              element,
              location: options.location,
              placement: options.placement
            });
            return this;
          },
          updateOverlay: function(element, location2, placement) {
            var i3;
            element = $3.getElement(element);
            i3 = getOverlayIndex(this.currentOverlays, element);
            if (i3 >= 0) {
              this.currentOverlays[i3].update(location2, placement);
              THIS[this.hash].forceRedraw = true;
              this.raiseEvent("update-overlay", {
                element,
                location: location2,
                placement
              });
            }
            return this;
          },
          removeOverlay: function(element) {
            var i3;
            element = $3.getElement(element);
            i3 = getOverlayIndex(this.currentOverlays, element);
            if (i3 >= 0) {
              this.currentOverlays[i3].destroy();
              this.currentOverlays.splice(i3, 1);
              THIS[this.hash].forceRedraw = true;
              this.raiseEvent("remove-overlay", {
                element
              });
            }
            return this;
          },
          clearOverlays: function() {
            while (this.currentOverlays.length > 0) {
              this.currentOverlays.pop().destroy();
            }
            THIS[this.hash].forceRedraw = true;
            this.raiseEvent("clear-overlay", {});
            return this;
          },
          getOverlayById: function(element) {
            var i3;
            element = $3.getElement(element);
            i3 = getOverlayIndex(this.currentOverlays, element);
            if (i3 >= 0) {
              return this.currentOverlays[i3];
            } else {
              return null;
            }
          },
          _updateSequenceButtons: function(page) {
            if (this.nextButton) {
              if (!this.tileSources || this.tileSources.length - 1 === page) {
                if (!this.navPrevNextWrap) {
                  this.nextButton.disable();
                }
              } else {
                this.nextButton.enable();
              }
            }
            if (this.previousButton) {
              if (page > 0) {
                this.previousButton.enable();
              } else {
                if (!this.navPrevNextWrap) {
                  this.previousButton.disable();
                }
              }
            }
          },
          _showMessage: function(message) {
            this._hideMessage();
            var div = $3.makeNeutralElement("div");
            div.appendChild(document.createTextNode(message));
            this.messageDiv = $3.makeCenteredNode(div);
            $3.addClass(this.messageDiv, "openseadragon-message");
            this.container.appendChild(this.messageDiv);
          },
          _hideMessage: function() {
            var div = this.messageDiv;
            if (div) {
              div.parentNode.removeChild(div);
              delete this.messageDiv;
            }
          },
          gestureSettingsByDeviceType: function(type) {
            switch (type) {
              case "mouse":
                return this.gestureSettingsMouse;
              case "touch":
                return this.gestureSettingsTouch;
              case "pen":
                return this.gestureSettingsPen;
              default:
                return this.gestureSettingsUnknown;
            }
          },
          _drawOverlays: function() {
            var i3, length = this.currentOverlays.length;
            for (i3 = 0; i3 < length; i3++) {
              this.currentOverlays[i3].drawHTML(this.overlaysContainer, this.viewport);
            }
          },
          _cancelPendingImages: function() {
            this._loadQueue = [];
          },
          removeReferenceStrip: function() {
            this.showReferenceStrip = false;
            if (this.referenceStrip) {
              this.referenceStrip.destroy();
              this.referenceStrip = null;
            }
          },
          addReferenceStrip: function() {
            this.showReferenceStrip = true;
            if (this.sequenceMode) {
              if (this.referenceStrip) {
                return;
              }
              if (this.tileSources.length && this.tileSources.length > 1) {
                this.referenceStrip = new $3.ReferenceStrip({
                  id: this.referenceStripElement,
                  position: this.referenceStripPosition,
                  sizeRatio: this.referenceStripSizeRatio,
                  scroll: this.referenceStripScroll,
                  height: this.referenceStripHeight,
                  width: this.referenceStripWidth,
                  tileSources: this.tileSources,
                  prefixUrl: this.prefixUrl,
                  useCanvas: this.useCanvas,
                  viewer: this
                });
                this.referenceStrip.setFocus(this._sequenceIndex);
              }
            } else {
              $3.console.warn('Attempting to display a reference strip while "sequenceMode" is off.');
            }
          },
          _addUpdatePixelDensityRatioEvent: function() {
            this._updatePixelDensityRatioBind = this._updatePixelDensityRatio.bind(this);
            $3.addEvent(window, "resize", this._updatePixelDensityRatioBind);
          },
          _removeUpdatePixelDensityRatioEvent: function() {
            $3.removeEvent(window, "resize", this._updatePixelDensityRatioBind);
          },
          _updatePixelDensityRatio: function() {
            var previusPixelDensityRatio = $3.pixelDensityRatio;
            var currentPixelDensityRatio = $3.getCurrentPixelDensityRatio();
            if (previusPixelDensityRatio !== currentPixelDensityRatio) {
              $3.pixelDensityRatio = currentPixelDensityRatio;
              this.world.resetItems();
              this.forceRedraw();
            }
          },
          goToPreviousPage: function() {
            var previous = this._sequenceIndex - 1;
            if (this.navPrevNextWrap && previous < 0) {
              previous += this.tileSources.length;
            }
            this.goToPage(previous);
          },
          goToNextPage: function() {
            var next = this._sequenceIndex + 1;
            if (this.navPrevNextWrap && next >= this.tileSources.length) {
              next = 0;
            }
            this.goToPage(next);
          }
        });
        function _getSafeElemSize(oElement) {
          oElement = $3.getElement(oElement);
          return new $3.Point(oElement.clientWidth === 0 ? 1 : oElement.clientWidth, oElement.clientHeight === 0 ? 1 : oElement.clientHeight);
        }
        function getTileSourceImplementation(viewer, tileSource, imgOptions, successCallback, failCallback) {
          var _this = viewer;
          if ($3.type(tileSource) === "string") {
            if (tileSource.match(/^\s*<.*>\s*$/)) {
              tileSource = $3.parseXml(tileSource);
            } else if (tileSource.match(/^\s*[{[].*[}\]]\s*$/)) {
              try {
                var tileSourceJ = $3.parseJSON(tileSource);
                tileSource = tileSourceJ;
              } catch (e4) {
              }
            }
          }
          function waitUntilReady(tileSource2, originalTileSource) {
            if (tileSource2.ready) {
              successCallback(tileSource2);
            } else {
              tileSource2.addHandler("ready", function() {
                successCallback(tileSource2);
              });
              tileSource2.addHandler("open-failed", function(event) {
                failCallback({
                  message: event.message,
                  source: originalTileSource
                });
              });
            }
          }
          setTimeout(function() {
            if ($3.type(tileSource) === "string") {
              tileSource = new $3.TileSource({
                url: tileSource,
                crossOriginPolicy: imgOptions.crossOriginPolicy !== void 0 ? imgOptions.crossOriginPolicy : viewer.crossOriginPolicy,
                ajaxWithCredentials: viewer.ajaxWithCredentials,
                ajaxHeaders: imgOptions.ajaxHeaders ? imgOptions.ajaxHeaders : viewer.ajaxHeaders,
                useCanvas: viewer.useCanvas,
                success: function(event) {
                  successCallback(event.tileSource);
                }
              });
              tileSource.addHandler("open-failed", function(event) {
                failCallback(event);
              });
            } else if ($3.isPlainObject(tileSource) || tileSource.nodeType) {
              if (tileSource.crossOriginPolicy === void 0 && (imgOptions.crossOriginPolicy !== void 0 || viewer.crossOriginPolicy !== void 0)) {
                tileSource.crossOriginPolicy = imgOptions.crossOriginPolicy !== void 0 ? imgOptions.crossOriginPolicy : viewer.crossOriginPolicy;
              }
              if (tileSource.ajaxWithCredentials === void 0) {
                tileSource.ajaxWithCredentials = viewer.ajaxWithCredentials;
              }
              if (tileSource.useCanvas === void 0) {
                tileSource.useCanvas = viewer.useCanvas;
              }
              if ($3.isFunction(tileSource.getTileUrl)) {
                var customTileSource = new $3.TileSource(tileSource);
                customTileSource.getTileUrl = tileSource.getTileUrl;
                successCallback(customTileSource);
              } else {
                var $TileSource = $3.TileSource.determineType(_this, tileSource);
                if (!$TileSource) {
                  failCallback({
                    message: "Unable to load TileSource",
                    source: tileSource
                  });
                  return;
                }
                var options = $TileSource.prototype.configure.apply(_this, [tileSource]);
                waitUntilReady(new $TileSource(options), tileSource);
              }
            } else {
              waitUntilReady(tileSource, tileSource);
            }
          });
        }
        function getOverlayObject(viewer, overlay) {
          if (overlay instanceof $3.Overlay) {
            return overlay;
          }
          var element = null;
          if (overlay.element) {
            element = $3.getElement(overlay.element);
          } else {
            var id = overlay.id ? overlay.id : "openseadragon-overlay-" + Math.floor(Math.random() * 1e7);
            element = $3.getElement(overlay.id);
            if (!element) {
              element = document.createElement("a");
              element.href = "#/overlay/" + id;
            }
            element.id = id;
            $3.addClass(element, overlay.className ? overlay.className : "openseadragon-overlay");
          }
          var location2 = overlay.location;
          var width = overlay.width;
          var height = overlay.height;
          if (!location2) {
            var x4 = overlay.x;
            var y4 = overlay.y;
            if (overlay.px !== void 0) {
              var rect = viewer.viewport.imageToViewportRectangle(new $3.Rect(overlay.px, overlay.py, width || 0, height || 0));
              x4 = rect.x;
              y4 = rect.y;
              width = width !== void 0 ? rect.width : void 0;
              height = height !== void 0 ? rect.height : void 0;
            }
            location2 = new $3.Point(x4, y4);
          }
          var placement = overlay.placement;
          if (placement && $3.type(placement) === "string") {
            placement = $3.Placement[overlay.placement.toUpperCase()];
          }
          return new $3.Overlay({
            element,
            location: location2,
            placement,
            onDraw: overlay.onDraw,
            checkResize: overlay.checkResize,
            width,
            height,
            rotationMode: overlay.rotationMode
          });
        }
        function getOverlayIndex(overlays, element) {
          var i3;
          for (i3 = overlays.length - 1; i3 >= 0; i3--) {
            if (overlays[i3].element === element) {
              return i3;
            }
          }
          return -1;
        }
        function scheduleUpdate(viewer, updateFunc) {
          return $3.requestAnimationFrame(function() {
            updateFunc(viewer);
          });
        }
        function scheduleControlsFade(viewer) {
          $3.requestAnimationFrame(function() {
            updateControlsFade(viewer);
          });
        }
        function beginControlsAutoHide(viewer) {
          if (!viewer.autoHideControls) {
            return;
          }
          viewer.controlsShouldFade = true;
          viewer.controlsFadeBeginTime = $3.now() + viewer.controlsFadeDelay;
          window.setTimeout(function() {
            scheduleControlsFade(viewer);
          }, viewer.controlsFadeDelay);
        }
        function updateControlsFade(viewer) {
          var currentTime, deltaTime, opacity, i3;
          if (viewer.controlsShouldFade) {
            currentTime = $3.now();
            deltaTime = currentTime - viewer.controlsFadeBeginTime;
            opacity = 1 - deltaTime / viewer.controlsFadeLength;
            opacity = Math.min(1, opacity);
            opacity = Math.max(0, opacity);
            for (i3 = viewer.controls.length - 1; i3 >= 0; i3--) {
              if (viewer.controls[i3].autoFade) {
                viewer.controls[i3].setOpacity(opacity);
              }
            }
            if (opacity > 0) {
              scheduleControlsFade(viewer);
            }
          }
        }
        function abortControlsAutoHide(viewer) {
          var i3;
          viewer.controlsShouldFade = false;
          for (i3 = viewer.controls.length - 1; i3 >= 0; i3--) {
            viewer.controls[i3].setOpacity(1);
          }
        }
        function onFocus() {
          abortControlsAutoHide(this);
        }
        function onBlur() {
          beginControlsAutoHide(this);
        }
        function onCanvasContextMenu(event) {
          var eventArgs = {
            tracker: event.eventSource,
            position: event.position,
            originalEvent: event.originalEvent,
            preventDefault: event.preventDefault
          };
          this.raiseEvent("canvas-contextmenu", eventArgs);
          event.preventDefault = eventArgs.preventDefault;
        }
        function onCanvasKeyDown(event) {
          var canvasKeyDownEventArgs = {
            originalEvent: event.originalEvent,
            preventDefaultAction: false,
            preventVerticalPan: event.preventVerticalPan,
            preventHorizontalPan: event.preventHorizontalPan
          };
          this.raiseEvent("canvas-key", canvasKeyDownEventArgs);
          if (!canvasKeyDownEventArgs.preventDefaultAction && !event.ctrl && !event.alt && !event.meta) {
            switch (event.keyCode) {
              case 38:
                if (!canvasKeyDownEventArgs.preventVerticalPan) {
                  if (event.shift) {
                    this.viewport.zoomBy(1.1);
                  } else {
                    this.viewport.panBy(this.viewport.deltaPointsFromPixels(new $3.Point(0, -this.pixelsPerArrowPress)));
                  }
                  this.viewport.applyConstraints();
                }
                event.preventDefault = true;
                break;
              case 40:
                if (!canvasKeyDownEventArgs.preventVerticalPan) {
                  if (event.shift) {
                    this.viewport.zoomBy(0.9);
                  } else {
                    this.viewport.panBy(this.viewport.deltaPointsFromPixels(new $3.Point(0, this.pixelsPerArrowPress)));
                  }
                  this.viewport.applyConstraints();
                }
                event.preventDefault = true;
                break;
              case 37:
                if (!canvasKeyDownEventArgs.preventHorizontalPan) {
                  this.viewport.panBy(this.viewport.deltaPointsFromPixels(new $3.Point(-this.pixelsPerArrowPress, 0)));
                  this.viewport.applyConstraints();
                }
                event.preventDefault = true;
                break;
              case 39:
                if (!canvasKeyDownEventArgs.preventHorizontalPan) {
                  this.viewport.panBy(this.viewport.deltaPointsFromPixels(new $3.Point(this.pixelsPerArrowPress, 0)));
                  this.viewport.applyConstraints();
                }
                event.preventDefault = true;
                break;
              default:
                event.preventDefault = false;
                break;
            }
          } else {
            event.preventDefault = false;
          }
        }
        function onCanvasKeyPress(event) {
          var canvasKeyPressEventArgs = {
            originalEvent: event.originalEvent,
            preventDefaultAction: false,
            preventVerticalPan: event.preventVerticalPan,
            preventHorizontalPan: event.preventHorizontalPan
          };
          this.raiseEvent("canvas-key", canvasKeyPressEventArgs);
          if (!canvasKeyPressEventArgs.preventDefaultAction && !event.ctrl && !event.alt && !event.meta) {
            switch (event.keyCode) {
              case 43:
              case 61:
                this.viewport.zoomBy(1.1);
                this.viewport.applyConstraints();
                event.preventDefault = true;
                break;
              case 45:
                this.viewport.zoomBy(0.9);
                this.viewport.applyConstraints();
                event.preventDefault = true;
                break;
              case 48:
                this.viewport.goHome();
                this.viewport.applyConstraints();
                event.preventDefault = true;
                break;
              case 119:
              case 87:
                if (!canvasKeyPressEventArgs.preventVerticalPan) {
                  if (event.shift) {
                    this.viewport.zoomBy(1.1);
                  } else {
                    this.viewport.panBy(this.viewport.deltaPointsFromPixels(new $3.Point(0, -40)));
                  }
                  this.viewport.applyConstraints();
                }
                event.preventDefault = true;
                break;
              case 115:
              case 83:
                if (!canvasKeyPressEventArgs.preventVerticalPan) {
                  if (event.shift) {
                    this.viewport.zoomBy(0.9);
                  } else {
                    this.viewport.panBy(this.viewport.deltaPointsFromPixels(new $3.Point(0, 40)));
                  }
                  this.viewport.applyConstraints();
                }
                event.preventDefault = true;
                break;
              case 97:
                if (!canvasKeyPressEventArgs.preventHorizontalPan) {
                  this.viewport.panBy(this.viewport.deltaPointsFromPixels(new $3.Point(-40, 0)));
                  this.viewport.applyConstraints();
                }
                event.preventDefault = true;
                break;
              case 100:
                if (!canvasKeyPressEventArgs.preventHorizontalPan) {
                  this.viewport.panBy(this.viewport.deltaPointsFromPixels(new $3.Point(40, 0)));
                  this.viewport.applyConstraints();
                }
                event.preventDefault = true;
                break;
              case 114:
                if (this.viewport.flipped) {
                  this.viewport.setRotation($3.positiveModulo(this.viewport.degrees - this.rotationIncrement, 360));
                } else {
                  this.viewport.setRotation($3.positiveModulo(this.viewport.degrees + this.rotationIncrement, 360));
                }
                this.viewport.applyConstraints();
                event.preventDefault = true;
                break;
              case 82:
                if (this.viewport.flipped) {
                  this.viewport.setRotation($3.positiveModulo(this.viewport.degrees + this.rotationIncrement, 360));
                } else {
                  this.viewport.setRotation($3.positiveModulo(this.viewport.degrees - this.rotationIncrement, 360));
                }
                this.viewport.applyConstraints();
                event.preventDefault = true;
                break;
              case 102:
                this.viewport.toggleFlip();
                event.preventDefault = true;
                break;
              case 106:
                this.goToPreviousPage();
                break;
              case 107:
                this.goToNextPage();
                break;
              default:
                event.preventDefault = false;
                break;
            }
          } else {
            event.preventDefault = false;
          }
        }
        function onCanvasClick(event) {
          var gestureSettings;
          var haveKeyboardFocus = document.activeElement === this.canvas;
          if (!haveKeyboardFocus) {
            this.canvas.focus();
          }
          if (this.viewport.flipped) {
            event.position.x = this.viewport.getContainerSize().x - event.position.x;
          }
          var canvasClickEventArgs = {
            tracker: event.eventSource,
            position: event.position,
            quick: event.quick,
            shift: event.shift,
            originalEvent: event.originalEvent,
            originalTarget: event.originalTarget,
            preventDefaultAction: false
          };
          this.raiseEvent("canvas-click", canvasClickEventArgs);
          if (!canvasClickEventArgs.preventDefaultAction && this.viewport && event.quick) {
            gestureSettings = this.gestureSettingsByDeviceType(event.pointerType);
            if (gestureSettings.clickToZoom) {
              this.viewport.zoomBy(event.shift ? 1 / this.zoomPerClick : this.zoomPerClick, gestureSettings.zoomToRefPoint ? this.viewport.pointFromPixel(event.position, true) : null);
              this.viewport.applyConstraints();
            }
          }
        }
        function onCanvasDblClick(event) {
          var gestureSettings;
          var canvasDblClickEventArgs = {
            tracker: event.eventSource,
            position: event.position,
            shift: event.shift,
            originalEvent: event.originalEvent,
            preventDefaultAction: false
          };
          this.raiseEvent("canvas-double-click", canvasDblClickEventArgs);
          if (!canvasDblClickEventArgs.preventDefaultAction && this.viewport) {
            gestureSettings = this.gestureSettingsByDeviceType(event.pointerType);
            if (gestureSettings.dblClickToZoom) {
              this.viewport.zoomBy(event.shift ? 1 / this.zoomPerClick : this.zoomPerClick, gestureSettings.zoomToRefPoint ? this.viewport.pointFromPixel(event.position, true) : null);
              this.viewport.applyConstraints();
            }
          }
        }
        function onCanvasDrag(event) {
          var gestureSettings;
          var canvasDragEventArgs = {
            tracker: event.eventSource,
            pointerType: event.pointerType,
            position: event.position,
            delta: event.delta,
            speed: event.speed,
            direction: event.direction,
            shift: event.shift,
            originalEvent: event.originalEvent,
            preventDefaultAction: false
          };
          this.raiseEvent("canvas-drag", canvasDragEventArgs);
          gestureSettings = this.gestureSettingsByDeviceType(event.pointerType);
          if (gestureSettings.dragToPan && !canvasDragEventArgs.preventDefaultAction && this.viewport) {
            if (!this.panHorizontal) {
              event.delta.x = 0;
            }
            if (!this.panVertical) {
              event.delta.y = 0;
            }
            if (this.viewport.flipped) {
              event.delta.x = -event.delta.x;
            }
            if (this.constrainDuringPan) {
              var delta = this.viewport.deltaPointsFromPixels(event.delta.negate());
              this.viewport.centerSpringX.target.value += delta.x;
              this.viewport.centerSpringY.target.value += delta.y;
              var bounds = this.viewport.getBounds();
              var constrainedBounds = this.viewport.getConstrainedBounds();
              this.viewport.centerSpringX.target.value -= delta.x;
              this.viewport.centerSpringY.target.value -= delta.y;
              if (bounds.x !== constrainedBounds.x) {
                event.delta.x = 0;
              }
              if (bounds.y !== constrainedBounds.y) {
                event.delta.y = 0;
              }
            }
            this.viewport.panBy(this.viewport.deltaPointsFromPixels(event.delta.negate()), gestureSettings.flickEnabled && !this.constrainDuringPan);
          }
        }
        function onCanvasDragEnd(event) {
          var canvasDragEndEventArgs = {
            tracker: event.eventSource,
            pointerType: event.pointerType,
            position: event.position,
            speed: event.speed,
            direction: event.direction,
            shift: event.shift,
            originalEvent: event.originalEvent,
            preventDefaultAction: false
          };
          this.raiseEvent("canvas-drag-end", canvasDragEndEventArgs);
          if (!canvasDragEndEventArgs.preventDefaultAction && this.viewport) {
            var gestureSettings = this.gestureSettingsByDeviceType(event.pointerType);
            if (gestureSettings.flickEnabled && event.speed >= gestureSettings.flickMinSpeed) {
              var amplitudeX = 0;
              if (this.panHorizontal) {
                amplitudeX = gestureSettings.flickMomentum * event.speed * Math.cos(event.direction);
              }
              var amplitudeY = 0;
              if (this.panVertical) {
                amplitudeY = gestureSettings.flickMomentum * event.speed * Math.sin(event.direction);
              }
              var center = this.viewport.pixelFromPoint(this.viewport.getCenter(true));
              var target = this.viewport.pointFromPixel(new $3.Point(center.x - amplitudeX, center.y - amplitudeY));
              this.viewport.panTo(target, false);
            }
            this.viewport.applyConstraints();
          }
        }
        function onCanvasEnter(event) {
          this.raiseEvent("canvas-enter", {
            tracker: event.eventSource,
            pointerType: event.pointerType,
            position: event.position,
            buttons: event.buttons,
            pointers: event.pointers,
            insideElementPressed: event.insideElementPressed,
            buttonDownAny: event.buttonDownAny,
            originalEvent: event.originalEvent
          });
        }
        function onCanvasLeave(event) {
          this.raiseEvent("canvas-exit", {
            tracker: event.eventSource,
            pointerType: event.pointerType,
            position: event.position,
            buttons: event.buttons,
            pointers: event.pointers,
            insideElementPressed: event.insideElementPressed,
            buttonDownAny: event.buttonDownAny,
            originalEvent: event.originalEvent
          });
        }
        function onCanvasPress(event) {
          this.raiseEvent("canvas-press", {
            tracker: event.eventSource,
            pointerType: event.pointerType,
            position: event.position,
            insideElementPressed: event.insideElementPressed,
            insideElementReleased: event.insideElementReleased,
            originalEvent: event.originalEvent
          });
        }
        function onCanvasRelease(event) {
          this.raiseEvent("canvas-release", {
            tracker: event.eventSource,
            pointerType: event.pointerType,
            position: event.position,
            insideElementPressed: event.insideElementPressed,
            insideElementReleased: event.insideElementReleased,
            originalEvent: event.originalEvent
          });
        }
        function onCanvasNonPrimaryPress(event) {
          this.raiseEvent("canvas-nonprimary-press", {
            tracker: event.eventSource,
            position: event.position,
            pointerType: event.pointerType,
            button: event.button,
            buttons: event.buttons,
            originalEvent: event.originalEvent
          });
        }
        function onCanvasNonPrimaryRelease(event) {
          this.raiseEvent("canvas-nonprimary-release", {
            tracker: event.eventSource,
            position: event.position,
            pointerType: event.pointerType,
            button: event.button,
            buttons: event.buttons,
            originalEvent: event.originalEvent
          });
        }
        function onCanvasPinch(event) {
          var gestureSettings, centerPt, lastCenterPt, panByPt;
          var canvasPinchEventArgs = {
            tracker: event.eventSource,
            pointerType: event.pointerType,
            gesturePoints: event.gesturePoints,
            lastCenter: event.lastCenter,
            center: event.center,
            lastDistance: event.lastDistance,
            distance: event.distance,
            shift: event.shift,
            originalEvent: event.originalEvent,
            preventDefaultPanAction: false,
            preventDefaultZoomAction: false,
            preventDefaultRotateAction: false
          };
          this.raiseEvent("canvas-pinch", canvasPinchEventArgs);
          if (this.viewport) {
            gestureSettings = this.gestureSettingsByDeviceType(event.pointerType);
            if (gestureSettings.pinchToZoom && (!canvasPinchEventArgs.preventDefaultPanAction || !canvasPinchEventArgs.preventDefaultZoomAction)) {
              centerPt = this.viewport.pointFromPixel(event.center, true);
              if (!canvasPinchEventArgs.preventDefaultZoomAction) {
                this.viewport.zoomBy(event.distance / event.lastDistance, centerPt, true);
              }
              if (gestureSettings.zoomToRefPoint && !canvasPinchEventArgs.preventDefaultPanAction) {
                lastCenterPt = this.viewport.pointFromPixel(event.lastCenter, true);
                panByPt = lastCenterPt.minus(centerPt);
                if (!this.panHorizontal) {
                  panByPt.x = 0;
                }
                if (!this.panVertical) {
                  panByPt.y = 0;
                }
                this.viewport.panBy(panByPt, true);
              }
              this.viewport.applyConstraints();
            }
            if (gestureSettings.pinchRotate && !canvasPinchEventArgs.preventDefaultRotateAction) {
              var angle1 = Math.atan2(event.gesturePoints[0].currentPos.y - event.gesturePoints[1].currentPos.y, event.gesturePoints[0].currentPos.x - event.gesturePoints[1].currentPos.x);
              var angle2 = Math.atan2(event.gesturePoints[0].lastPos.y - event.gesturePoints[1].lastPos.y, event.gesturePoints[0].lastPos.x - event.gesturePoints[1].lastPos.x);
              this.viewport.setRotation(this.viewport.getRotation() + (angle1 - angle2) * (180 / Math.PI));
            }
          }
        }
        function onCanvasScroll(event) {
          var canvasScrollEventArgs, gestureSettings, factor, thisScrollTime, deltaScrollTime;
          thisScrollTime = $3.now();
          deltaScrollTime = thisScrollTime - this._lastScrollTime;
          if (deltaScrollTime > this.minScrollDeltaTime) {
            this._lastScrollTime = thisScrollTime;
            canvasScrollEventArgs = {
              tracker: event.eventSource,
              position: event.position,
              scroll: event.scroll,
              shift: event.shift,
              originalEvent: event.originalEvent,
              preventDefaultAction: false,
              preventDefault: true
            };
            this.raiseEvent("canvas-scroll", canvasScrollEventArgs);
            if (!canvasScrollEventArgs.preventDefaultAction && this.viewport) {
              if (this.viewport.flipped) {
                event.position.x = this.viewport.getContainerSize().x - event.position.x;
              }
              gestureSettings = this.gestureSettingsByDeviceType(event.pointerType);
              if (gestureSettings.scrollToZoom) {
                factor = Math.pow(this.zoomPerScroll, event.scroll);
                this.viewport.zoomBy(factor, gestureSettings.zoomToRefPoint ? this.viewport.pointFromPixel(event.position, true) : null);
                this.viewport.applyConstraints();
              }
            }
            event.preventDefault = canvasScrollEventArgs.preventDefault;
          } else {
            event.preventDefault = true;
          }
        }
        function onContainerEnter(event) {
          THIS[this.hash].mouseInside = true;
          abortControlsAutoHide(this);
          this.raiseEvent("container-enter", {
            tracker: event.eventSource,
            pointerType: event.pointerType,
            position: event.position,
            buttons: event.buttons,
            pointers: event.pointers,
            insideElementPressed: event.insideElementPressed,
            buttonDownAny: event.buttonDownAny,
            originalEvent: event.originalEvent
          });
        }
        function onContainerLeave(event) {
          if (event.pointers < 1) {
            THIS[this.hash].mouseInside = false;
            if (!THIS[this.hash].animating) {
              beginControlsAutoHide(this);
            }
          }
          this.raiseEvent("container-exit", {
            tracker: event.eventSource,
            pointerType: event.pointerType,
            position: event.position,
            buttons: event.buttons,
            pointers: event.pointers,
            insideElementPressed: event.insideElementPressed,
            buttonDownAny: event.buttonDownAny,
            originalEvent: event.originalEvent
          });
        }
        function updateMulti(viewer) {
          updateOnce(viewer);
          if (viewer.isOpen()) {
            viewer._updateRequestId = scheduleUpdate(viewer, updateMulti);
          } else {
            viewer._updateRequestId = false;
          }
        }
        function updateOnce(viewer) {
          if (viewer._opening || !THIS[viewer.hash]) {
            return;
          }
          if (viewer.autoResize) {
            var containerSize = _getSafeElemSize(viewer.container);
            var prevContainerSize = THIS[viewer.hash].prevContainerSize;
            if (!containerSize.equals(prevContainerSize)) {
              var viewport = viewer.viewport;
              if (viewer.preserveImageSizeOnResize) {
                var resizeRatio = prevContainerSize.x / containerSize.x;
                var zoom = viewport.getZoom() * resizeRatio;
                var center = viewport.getCenter();
                viewport.resize(containerSize, false);
                viewport.zoomTo(zoom, null, true);
                viewport.panTo(center, true);
              } else {
                var oldBounds = viewport.getBounds();
                viewport.resize(containerSize, true);
                viewport.fitBoundsWithConstraints(oldBounds, true);
              }
              THIS[viewer.hash].prevContainerSize = containerSize;
              THIS[viewer.hash].forceRedraw = true;
            }
          }
          var viewportChange = viewer.viewport.update();
          var animated = viewer.world.update() || viewportChange;
          if (viewportChange) {
            viewer.raiseEvent("viewport-change");
          }
          if (viewer.referenceStrip) {
            animated = viewer.referenceStrip.update(viewer.viewport) || animated;
          }
          if (!THIS[viewer.hash].animating && animated) {
            viewer.raiseEvent("animation-start");
            abortControlsAutoHide(viewer);
          }
          if (animated || THIS[viewer.hash].forceRedraw || viewer.world.needsDraw()) {
            drawWorld(viewer);
            viewer._drawOverlays();
            if (viewer.navigator) {
              viewer.navigator.update(viewer.viewport);
            }
            THIS[viewer.hash].forceRedraw = false;
            if (animated) {
              viewer.raiseEvent("animation");
            }
          }
          if (THIS[viewer.hash].animating && !animated) {
            viewer.raiseEvent("animation-finish");
            if (!THIS[viewer.hash].mouseInside) {
              beginControlsAutoHide(viewer);
            }
          }
          THIS[viewer.hash].animating = animated;
        }
        function drawWorld(viewer) {
          viewer.imageLoader.clear();
          viewer.drawer.clear();
          viewer.world.draw();
          viewer.raiseEvent("update-viewport", {});
        }
        function resolveUrl(prefix, url) {
          return prefix ? prefix + url : url;
        }
        function beginZoomingIn() {
          THIS[this.hash].lastZoomTime = $3.now();
          THIS[this.hash].zoomFactor = this.zoomPerSecond;
          THIS[this.hash].zooming = true;
          scheduleZoom(this);
        }
        function beginZoomingOut() {
          THIS[this.hash].lastZoomTime = $3.now();
          THIS[this.hash].zoomFactor = 1 / this.zoomPerSecond;
          THIS[this.hash].zooming = true;
          scheduleZoom(this);
        }
        function endZooming() {
          THIS[this.hash].zooming = false;
        }
        function scheduleZoom(viewer) {
          $3.requestAnimationFrame($3.delegate(viewer, doZoom));
        }
        function doZoom() {
          var currentTime, deltaTime, adjustedFactor;
          if (THIS[this.hash].zooming && this.viewport) {
            currentTime = $3.now();
            deltaTime = currentTime - THIS[this.hash].lastZoomTime;
            adjustedFactor = Math.pow(THIS[this.hash].zoomFactor, deltaTime / 1e3);
            this.viewport.zoomBy(adjustedFactor);
            this.viewport.applyConstraints();
            THIS[this.hash].lastZoomTime = currentTime;
            scheduleZoom(this);
          }
        }
        function doSingleZoomIn() {
          if (this.viewport) {
            THIS[this.hash].zooming = false;
            this.viewport.zoomBy(this.zoomPerClick / 1);
            this.viewport.applyConstraints();
          }
        }
        function doSingleZoomOut() {
          if (this.viewport) {
            THIS[this.hash].zooming = false;
            this.viewport.zoomBy(1 / this.zoomPerClick);
            this.viewport.applyConstraints();
          }
        }
        function lightUp() {
          if (this.buttonGroup) {
            this.buttonGroup.emulateEnter();
            this.buttonGroup.emulateLeave();
          }
        }
        function onHome() {
          if (this.viewport) {
            this.viewport.goHome();
          }
        }
        function onFullScreen() {
          if (this.isFullPage() && !$3.isFullScreen()) {
            this.setFullPage(false);
          } else {
            this.setFullScreen(!this.isFullPage());
          }
          if (this.buttonGroup) {
            this.buttonGroup.emulateLeave();
          }
          this.fullPageButton.element.focus();
          if (this.viewport) {
            this.viewport.applyConstraints();
          }
        }
        function onRotateLeft() {
          if (this.viewport) {
            var currRotation = this.viewport.getRotation();
            if (this.viewport.flipped) {
              currRotation = $3.positiveModulo(currRotation + this.rotationIncrement, 360);
            } else {
              currRotation = $3.positiveModulo(currRotation - this.rotationIncrement, 360);
            }
            this.viewport.setRotation(currRotation);
          }
        }
        function onRotateRight() {
          if (this.viewport) {
            var currRotation = this.viewport.getRotation();
            if (this.viewport.flipped) {
              currRotation = $3.positiveModulo(currRotation - this.rotationIncrement, 360);
            } else {
              currRotation = $3.positiveModulo(currRotation + this.rotationIncrement, 360);
            }
            this.viewport.setRotation(currRotation);
          }
        }
        function onFlip() {
          this.viewport.toggleFlip();
        }
      })(OpenSeadragon2);
      (function($3) {
        $3.Navigator = function(options) {
          var viewer = options.viewer, _this = this, viewerSize, navigatorSize;
          if (!options.id) {
            options.id = "navigator-" + $3.now();
            this.element = $3.makeNeutralElement("div");
            options.controlOptions = {
              anchor: $3.ControlAnchor.TOP_RIGHT,
              attachToViewer: true,
              autoFade: options.autoFade
            };
            if (options.position) {
              if (options.position === "BOTTOM_RIGHT") {
                options.controlOptions.anchor = $3.ControlAnchor.BOTTOM_RIGHT;
              } else if (options.position === "BOTTOM_LEFT") {
                options.controlOptions.anchor = $3.ControlAnchor.BOTTOM_LEFT;
              } else if (options.position === "TOP_RIGHT") {
                options.controlOptions.anchor = $3.ControlAnchor.TOP_RIGHT;
              } else if (options.position === "TOP_LEFT") {
                options.controlOptions.anchor = $3.ControlAnchor.TOP_LEFT;
              } else if (options.position === "ABSOLUTE") {
                options.controlOptions.anchor = $3.ControlAnchor.ABSOLUTE;
                options.controlOptions.top = options.top;
                options.controlOptions.left = options.left;
                options.controlOptions.height = options.height;
                options.controlOptions.width = options.width;
              }
            }
          } else {
            this.element = document.getElementById(options.id);
            options.controlOptions = {
              anchor: $3.ControlAnchor.NONE,
              attachToViewer: false,
              autoFade: false
            };
          }
          this.element.id = options.id;
          this.element.className += " navigator";
          options = $3.extend(true, {
            sizeRatio: $3.DEFAULT_SETTINGS.navigatorSizeRatio
          }, options, {
            element: this.element,
            tabIndex: -1,
            showNavigator: false,
            mouseNavEnabled: false,
            showNavigationControl: false,
            showSequenceControl: false,
            immediateRender: true,
            blendTime: 0,
            animationTime: 0,
            autoResize: options.autoResize,
            minZoomImageRatio: 1,
            background: options.background,
            opacity: options.opacity,
            borderColor: options.borderColor,
            displayRegionColor: options.displayRegionColor
          });
          options.minPixelRatio = this.minPixelRatio = viewer.minPixelRatio;
          $3.setElementTouchActionNone(this.element);
          this.borderWidth = 2;
          this.fudge = new $3.Point(1, 1);
          this.totalBorderWidths = new $3.Point(this.borderWidth * 2, this.borderWidth * 2).minus(this.fudge);
          if (options.controlOptions.anchor !== $3.ControlAnchor.NONE) {
            (function(style, borderWidth) {
              style.margin = "0px";
              style.border = borderWidth + "px solid " + options.borderColor;
              style.padding = "0px";
              style.background = options.background;
              style.opacity = options.opacity;
              style.overflow = "hidden";
            })(this.element.style, this.borderWidth);
          }
          this.displayRegion = $3.makeNeutralElement("div");
          this.displayRegion.id = this.element.id + "-displayregion";
          this.displayRegion.className = "displayregion";
          (function(style, borderWidth) {
            style.position = "relative";
            style.top = "0px";
            style.left = "0px";
            style.fontSize = "0px";
            style.overflow = "hidden";
            style.border = borderWidth + "px solid " + options.displayRegionColor;
            style.margin = "0px";
            style.padding = "0px";
            style.background = "transparent";
            style["float"] = "left";
            style.cssFloat = "left";
            style.styleFloat = "left";
            style.zIndex = 999999999;
            style.cursor = "default";
          })(this.displayRegion.style, this.borderWidth);
          $3.setElementPointerEventsNone(this.displayRegion);
          $3.setElementTouchActionNone(this.displayRegion);
          this.displayRegionContainer = $3.makeNeutralElement("div");
          this.displayRegionContainer.id = this.element.id + "-displayregioncontainer";
          this.displayRegionContainer.className = "displayregioncontainer";
          this.displayRegionContainer.style.width = "100%";
          this.displayRegionContainer.style.height = "100%";
          $3.setElementPointerEventsNone(this.displayRegionContainer);
          $3.setElementTouchActionNone(this.displayRegionContainer);
          viewer.addControl(this.element, options.controlOptions);
          this._resizeWithViewer = options.controlOptions.anchor !== $3.ControlAnchor.ABSOLUTE && options.controlOptions.anchor !== $3.ControlAnchor.NONE;
          if (options.width && options.height) {
            this.setWidth(options.width);
            this.setHeight(options.height);
          } else if (this._resizeWithViewer) {
            viewerSize = $3.getElementSize(viewer.element);
            this.element.style.height = Math.round(viewerSize.y * options.sizeRatio) + "px";
            this.element.style.width = Math.round(viewerSize.x * options.sizeRatio) + "px";
            this.oldViewerSize = viewerSize;
            navigatorSize = $3.getElementSize(this.element);
            this.elementArea = navigatorSize.x * navigatorSize.y;
          }
          this.oldContainerSize = new $3.Point(0, 0);
          $3.Viewer.apply(this, [options]);
          this.displayRegionContainer.appendChild(this.displayRegion);
          this.element.getElementsByTagName("div")[0].appendChild(this.displayRegionContainer);
          function rotate(degrees2) {
            _setTransformRotate(_this.displayRegionContainer, degrees2);
            _setTransformRotate(_this.displayRegion, -degrees2);
            _this.viewport.setRotation(degrees2);
          }
          if (options.navigatorRotate) {
            var degrees = options.viewer.viewport ? options.viewer.viewport.getRotation() : options.viewer.degrees || 0;
            rotate(degrees);
            options.viewer.addHandler("rotate", function(args) {
              rotate(args.degrees);
            });
          }
          this.innerTracker.destroy();
          this.innerTracker = new $3.MouseTracker({
            userData: "Navigator.innerTracker",
            element: this.element,
            dragHandler: $3.delegate(this, onCanvasDrag),
            clickHandler: $3.delegate(this, onCanvasClick),
            releaseHandler: $3.delegate(this, onCanvasRelease),
            scrollHandler: $3.delegate(this, onCanvasScroll),
            preProcessEventHandler: function(eventInfo) {
              if (eventInfo.eventType === "wheel") {
                eventInfo.preventDefault = true;
              }
            }
          });
          this.outerTracker.userData = "Navigator.outerTracker";
          $3.setElementPointerEventsNone(this.canvas);
          $3.setElementPointerEventsNone(this.container);
          this.addHandler("reset-size", function() {
            if (_this.viewport) {
              _this.viewport.goHome(true);
            }
          });
          viewer.world.addHandler("item-index-change", function(event) {
            window.setTimeout(function() {
              var item = _this.world.getItemAt(event.previousIndex);
              _this.world.setItemIndex(item, event.newIndex);
            }, 1);
          });
          viewer.world.addHandler("remove-item", function(event) {
            var theirItem = event.item;
            var myItem = _this._getMatchingItem(theirItem);
            if (myItem) {
              _this.world.removeItem(myItem);
            }
          });
          this.update(viewer.viewport);
        };
        $3.extend($3.Navigator.prototype, $3.EventSource.prototype, $3.Viewer.prototype, {
          updateSize: function() {
            if (this.viewport) {
              var containerSize = new $3.Point(this.container.clientWidth === 0 ? 1 : this.container.clientWidth, this.container.clientHeight === 0 ? 1 : this.container.clientHeight);
              if (!containerSize.equals(this.oldContainerSize)) {
                this.viewport.resize(containerSize, true);
                this.viewport.goHome(true);
                this.oldContainerSize = containerSize;
                this.drawer.clear();
                this.world.draw();
              }
            }
          },
          setWidth: function(width) {
            this.width = width;
            this.element.style.width = typeof width === "number" ? width + "px" : width;
            this._resizeWithViewer = false;
          },
          setHeight: function(height) {
            this.height = height;
            this.element.style.height = typeof height === "number" ? height + "px" : height;
            this._resizeWithViewer = false;
          },
          setFlip: function(state) {
            this.viewport.setFlip(state);
            this.setDisplayTransform(this.viewer.viewport.getFlip() ? "scale(-1,1)" : "scale(1,1)");
            return this;
          },
          setDisplayTransform: function(rule) {
            setElementTransform(this.displayRegion, rule);
            setElementTransform(this.canvas, rule);
            setElementTransform(this.element, rule);
          },
          update: function(viewport) {
            var viewerSize, newWidth, newHeight, bounds, topleft, bottomright;
            viewerSize = $3.getElementSize(this.viewer.element);
            if (this._resizeWithViewer && viewerSize.x && viewerSize.y && !viewerSize.equals(this.oldViewerSize)) {
              this.oldViewerSize = viewerSize;
              if (this.maintainSizeRatio || !this.elementArea) {
                newWidth = viewerSize.x * this.sizeRatio;
                newHeight = viewerSize.y * this.sizeRatio;
              } else {
                newWidth = Math.sqrt(this.elementArea * (viewerSize.x / viewerSize.y));
                newHeight = this.elementArea / newWidth;
              }
              this.element.style.width = Math.round(newWidth) + "px";
              this.element.style.height = Math.round(newHeight) + "px";
              if (!this.elementArea) {
                this.elementArea = newWidth * newHeight;
              }
              this.updateSize();
            }
            if (viewport && this.viewport) {
              bounds = viewport.getBoundsNoRotate(true);
              topleft = this.viewport.pixelFromPointNoRotate(bounds.getTopLeft(), false);
              bottomright = this.viewport.pixelFromPointNoRotate(bounds.getBottomRight(), false).minus(this.totalBorderWidths);
              var style = this.displayRegion.style;
              style.display = this.world.getItemCount() ? "block" : "none";
              style.top = Math.round(topleft.y) + "px";
              style.left = Math.round(topleft.x) + "px";
              var width = Math.abs(topleft.x - bottomright.x);
              var height = Math.abs(topleft.y - bottomright.y);
              style.width = Math.round(Math.max(width, 0)) + "px";
              style.height = Math.round(Math.max(height, 0)) + "px";
            }
          },
          addTiledImage: function(options) {
            var _this = this;
            var original = options.originalTiledImage;
            delete options.original;
            var optionsClone = $3.extend({}, options, {
              success: function(event) {
                var myItem = event.item;
                myItem._originalForNavigator = original;
                _this._matchBounds(myItem, original, true);
                _this._matchOpacity(myItem, original);
                _this._matchCompositeOperation(myItem, original);
                function matchBounds() {
                  _this._matchBounds(myItem, original);
                }
                function matchOpacity() {
                  _this._matchOpacity(myItem, original);
                }
                function matchCompositeOperation() {
                  _this._matchCompositeOperation(myItem, original);
                }
                original.addHandler("bounds-change", matchBounds);
                original.addHandler("clip-change", matchBounds);
                original.addHandler("opacity-change", matchOpacity);
                original.addHandler("composite-operation-change", matchCompositeOperation);
              }
            });
            return $3.Viewer.prototype.addTiledImage.apply(this, [optionsClone]);
          },
          destroy: function() {
            return $3.Viewer.prototype.destroy.apply(this);
          },
          _getMatchingItem: function(theirItem) {
            var count = this.world.getItemCount();
            var item;
            for (var i3 = 0; i3 < count; i3++) {
              item = this.world.getItemAt(i3);
              if (item._originalForNavigator === theirItem) {
                return item;
              }
            }
            return null;
          },
          _matchBounds: function(myItem, theirItem, immediately) {
            var bounds = theirItem.getBoundsNoRotate();
            myItem.setPosition(bounds.getTopLeft(), immediately);
            myItem.setWidth(bounds.width, immediately);
            myItem.setRotation(theirItem.getRotation(), immediately);
            myItem.setClip(theirItem.getClip());
            myItem.setFlip(theirItem.getFlip());
          },
          _matchOpacity: function(myItem, theirItem) {
            myItem.setOpacity(theirItem.opacity);
          },
          _matchCompositeOperation: function(myItem, theirItem) {
            myItem.setCompositeOperation(theirItem.compositeOperation);
          }
        });
        function onCanvasClick(event) {
          var canvasClickEventArgs = {
            tracker: event.eventSource,
            position: event.position,
            quick: event.quick,
            shift: event.shift,
            originalEvent: event.originalEvent,
            preventDefaultAction: false
          };
          this.viewer.raiseEvent("navigator-click", canvasClickEventArgs);
          if (!canvasClickEventArgs.preventDefaultAction && event.quick && this.viewer.viewport && (this.panVertical || this.panHorizontal)) {
            if (this.viewer.viewport.flipped) {
              event.position.x = this.viewport.getContainerSize().x - event.position.x;
            }
            var target = this.viewport.pointFromPixel(event.position);
            if (!this.panVertical) {
              target.y = this.viewer.viewport.getCenter(true).y;
            } else if (!this.panHorizontal) {
              target.x = this.viewer.viewport.getCenter(true).x;
            }
            this.viewer.viewport.panTo(target);
            this.viewer.viewport.applyConstraints();
          }
        }
        function onCanvasDrag(event) {
          var canvasDragEventArgs = {
            tracker: event.eventSource,
            position: event.position,
            delta: event.delta,
            speed: event.speed,
            direction: event.direction,
            shift: event.shift,
            originalEvent: event.originalEvent,
            preventDefaultAction: false
          };
          this.viewer.raiseEvent("navigator-drag", canvasDragEventArgs);
          if (!canvasDragEventArgs.preventDefaultAction && this.viewer.viewport) {
            if (!this.panHorizontal) {
              event.delta.x = 0;
            }
            if (!this.panVertical) {
              event.delta.y = 0;
            }
            if (this.viewer.viewport.flipped) {
              event.delta.x = -event.delta.x;
            }
            this.viewer.viewport.panBy(this.viewport.deltaPointsFromPixels(event.delta));
            if (this.viewer.constrainDuringPan) {
              this.viewer.viewport.applyConstraints();
            }
          }
        }
        function onCanvasRelease(event) {
          if (event.insideElementPressed && this.viewer.viewport) {
            this.viewer.viewport.applyConstraints();
          }
        }
        function onCanvasScroll(event) {
          var eventArgs = {
            tracker: event.eventSource,
            position: event.position,
            scroll: event.scroll,
            shift: event.shift,
            originalEvent: event.originalEvent,
            preventDefault: event.preventDefault
          };
          this.viewer.raiseEvent("navigator-scroll", eventArgs);
          event.preventDefault = eventArgs.preventDefault;
        }
        function _setTransformRotate(element, degrees) {
          setElementTransform(element, "rotate(" + degrees + "deg)");
        }
        function setElementTransform(element, rule) {
          element.style.webkitTransform = rule;
          element.style.mozTransform = rule;
          element.style.msTransform = rule;
          element.style.oTransform = rule;
          element.style.transform = rule;
        }
      })(OpenSeadragon2);
      (function($3) {
        var I18N = {
          Errors: {
            Dzc: "Sorry, we don't support Deep Zoom Collections!",
            Dzi: "Hmm, this doesn't appear to be a valid Deep Zoom Image.",
            Xml: "Hmm, this doesn't appear to be a valid Deep Zoom Image.",
            ImageFormat: "Sorry, we don't support {0}-based Deep Zoom Images.",
            Security: "It looks like a security restriction stopped us from loading this Deep Zoom Image.",
            Status: "This space unintentionally left blank ({0} {1}).",
            OpenFailed: "Unable to open {0}: {1}"
          },
          Tooltips: {
            FullPage: "Toggle full page",
            Home: "Go home",
            ZoomIn: "Zoom in",
            ZoomOut: "Zoom out",
            NextPage: "Next page",
            PreviousPage: "Previous page",
            RotateLeft: "Rotate left",
            RotateRight: "Rotate right",
            Flip: "Flip Horizontally"
          }
        };
        $3.extend($3, {
          getString: function(prop) {
            var props = prop.split("."), string = null, args = arguments, container2 = I18N, i3;
            for (i3 = 0; i3 < props.length - 1; i3++) {
              container2 = container2[props[i3]] || {};
            }
            string = container2[props[i3]];
            if (typeof string !== "string") {
              $3.console.log("Untranslated source string:", prop);
              string = "";
            }
            return string.replace(/\{\d+\}/g, function(capture) {
              var i4 = parseInt(capture.match(/\d+/), 10) + 1;
              return i4 < args.length ? args[i4] : "";
            });
          },
          setString: function(prop, value) {
            var props = prop.split("."), container2 = I18N, i3;
            for (i3 = 0; i3 < props.length - 1; i3++) {
              if (!container2[props[i3]]) {
                container2[props[i3]] = {};
              }
              container2 = container2[props[i3]];
            }
            container2[props[i3]] = value;
          }
        });
      })(OpenSeadragon2);
      (function($3) {
        $3.Point = function(x4, y4) {
          this.x = typeof x4 === "number" ? x4 : 0;
          this.y = typeof y4 === "number" ? y4 : 0;
        };
        $3.Point.prototype = {
          clone: function() {
            return new $3.Point(this.x, this.y);
          },
          plus: function(point) {
            return new $3.Point(this.x + point.x, this.y + point.y);
          },
          minus: function(point) {
            return new $3.Point(this.x - point.x, this.y - point.y);
          },
          times: function(factor) {
            return new $3.Point(this.x * factor, this.y * factor);
          },
          divide: function(factor) {
            return new $3.Point(this.x / factor, this.y / factor);
          },
          negate: function() {
            return new $3.Point(-this.x, -this.y);
          },
          distanceTo: function(point) {
            return Math.sqrt(Math.pow(this.x - point.x, 2) + Math.pow(this.y - point.y, 2));
          },
          squaredDistanceTo: function(point) {
            return Math.pow(this.x - point.x, 2) + Math.pow(this.y - point.y, 2);
          },
          apply: function(func) {
            return new $3.Point(func(this.x), func(this.y));
          },
          equals: function(point) {
            return point instanceof $3.Point && this.x === point.x && this.y === point.y;
          },
          rotate: function(degrees, pivot) {
            pivot = pivot || new $3.Point(0, 0);
            var cos;
            var sin;
            if (degrees % 90 === 0) {
              var d3 = $3.positiveModulo(degrees, 360);
              switch (d3) {
                case 0:
                  cos = 1;
                  sin = 0;
                  break;
                case 90:
                  cos = 0;
                  sin = 1;
                  break;
                case 180:
                  cos = -1;
                  sin = 0;
                  break;
                case 270:
                  cos = 0;
                  sin = -1;
                  break;
              }
            } else {
              var angle = degrees * Math.PI / 180;
              cos = Math.cos(angle);
              sin = Math.sin(angle);
            }
            var x4 = cos * (this.x - pivot.x) - sin * (this.y - pivot.y) + pivot.x;
            var y4 = sin * (this.x - pivot.x) + cos * (this.y - pivot.y) + pivot.y;
            return new $3.Point(x4, y4);
          },
          toString: function() {
            return "(" + Math.round(this.x * 100) / 100 + "," + Math.round(this.y * 100) / 100 + ")";
          }
        };
      })(OpenSeadragon2);
      (function($3) {
        $3.TileSource = function(width, height, tileSize, tileOverlap, minLevel, maxLevel) {
          var _this = this;
          var args = arguments, options, i3;
          if ($3.isPlainObject(width)) {
            options = width;
          } else {
            options = {
              width: args[0],
              height: args[1],
              tileSize: args[2],
              tileOverlap: args[3],
              minLevel: args[4],
              maxLevel: args[5]
            };
          }
          $3.EventSource.call(this);
          $3.extend(true, this, options);
          if (!this.success) {
            for (i3 = 0; i3 < arguments.length; i3++) {
              if ($3.isFunction(arguments[i3])) {
                this.success = arguments[i3];
                break;
              }
            }
          }
          if (this.success) {
            this.addHandler("ready", function(event) {
              _this.success(event);
            });
          }
          if ($3.type(arguments[0]) === "string") {
            this.url = arguments[0];
          }
          if (this.url) {
            this.aspectRatio = 1;
            this.dimensions = new $3.Point(10, 10);
            this._tileWidth = 0;
            this._tileHeight = 0;
            this.tileOverlap = 0;
            this.minLevel = 0;
            this.maxLevel = 0;
            this.ready = false;
            this.getImageInfo(this.url);
          } else {
            this.ready = true;
            this.aspectRatio = options.width && options.height ? options.width / options.height : 1;
            this.dimensions = new $3.Point(options.width, options.height);
            if (this.tileSize) {
              this._tileWidth = this._tileHeight = this.tileSize;
              delete this.tileSize;
            } else {
              if (this.tileWidth) {
                this._tileWidth = this.tileWidth;
                delete this.tileWidth;
              } else {
                this._tileWidth = 0;
              }
              if (this.tileHeight) {
                this._tileHeight = this.tileHeight;
                delete this.tileHeight;
              } else {
                this._tileHeight = 0;
              }
            }
            this.tileOverlap = options.tileOverlap ? options.tileOverlap : 0;
            this.minLevel = options.minLevel ? options.minLevel : 0;
            this.maxLevel = options.maxLevel !== void 0 && options.maxLevel !== null ? options.maxLevel : options.width && options.height ? Math.ceil(Math.log(Math.max(options.width, options.height)) / Math.log(2)) : 0;
            if (this.success && $3.isFunction(this.success)) {
              this.success(this);
            }
          }
        };
        $3.TileSource.prototype = {
          getTileSize: function(level) {
            $3.console.error("[TileSource.getTileSize] is deprecated. Use TileSource.getTileWidth() and TileSource.getTileHeight() instead");
            return this._tileWidth;
          },
          getTileWidth: function(level) {
            if (!this._tileWidth) {
              return this.getTileSize(level);
            }
            return this._tileWidth;
          },
          getTileHeight: function(level) {
            if (!this._tileHeight) {
              return this.getTileSize(level);
            }
            return this._tileHeight;
          },
          setMaxLevel: function(level) {
            this.maxLevel = level;
            this._memoizeLevelScale();
          },
          getLevelScale: function(level) {
            this._memoizeLevelScale();
            return this.getLevelScale(level);
          },
          _memoizeLevelScale: function() {
            var levelScaleCache = {}, i3;
            for (i3 = 0; i3 <= this.maxLevel; i3++) {
              levelScaleCache[i3] = 1 / Math.pow(2, this.maxLevel - i3);
            }
            this.getLevelScale = function(_level) {
              return levelScaleCache[_level];
            };
          },
          getNumTiles: function(level) {
            var scale = this.getLevelScale(level), x4 = Math.ceil(scale * this.dimensions.x / this.getTileWidth(level)), y4 = Math.ceil(scale * this.dimensions.y / this.getTileHeight(level));
            return new $3.Point(x4, y4);
          },
          getPixelRatio: function(level) {
            var imageSizeScaled = this.dimensions.times(this.getLevelScale(level)), rx = 1 / imageSizeScaled.x * $3.pixelDensityRatio, ry = 1 / imageSizeScaled.y * $3.pixelDensityRatio;
            return new $3.Point(rx, ry);
          },
          getClosestLevel: function() {
            var i3, tiles;
            for (i3 = this.minLevel + 1; i3 <= this.maxLevel; i3++) {
              tiles = this.getNumTiles(i3);
              if (tiles.x > 1 || tiles.y > 1) {
                break;
              }
            }
            return i3 - 1;
          },
          getTileAtPoint: function(level, point) {
            var validPoint = point.x >= 0 && point.x <= 1 && point.y >= 0 && point.y <= 1 / this.aspectRatio;
            $3.console.assert(validPoint, "[TileSource.getTileAtPoint] must be called with a valid point.");
            var widthScaled = this.dimensions.x * this.getLevelScale(level);
            var pixelX = point.x * widthScaled;
            var pixelY = point.y * widthScaled;
            var x4 = Math.floor(pixelX / this.getTileWidth(level));
            var y4 = Math.floor(pixelY / this.getTileHeight(level));
            if (point.x >= 1) {
              x4 = this.getNumTiles(level).x - 1;
            }
            var EPSILON = 1e-15;
            if (point.y >= 1 / this.aspectRatio - EPSILON) {
              y4 = this.getNumTiles(level).y - 1;
            }
            return new $3.Point(x4, y4);
          },
          getTileBounds: function(level, x4, y4, isSource) {
            var dimensionsScaled = this.dimensions.times(this.getLevelScale(level)), tileWidth = this.getTileWidth(level), tileHeight = this.getTileHeight(level), px = x4 === 0 ? 0 : tileWidth * x4 - this.tileOverlap, py = y4 === 0 ? 0 : tileHeight * y4 - this.tileOverlap, sx = tileWidth + (x4 === 0 ? 1 : 2) * this.tileOverlap, sy = tileHeight + (y4 === 0 ? 1 : 2) * this.tileOverlap, scale = 1 / dimensionsScaled.x;
            sx = Math.min(sx, dimensionsScaled.x - px);
            sy = Math.min(sy, dimensionsScaled.y - py);
            if (isSource) {
              return new $3.Rect(0, 0, sx, sy);
            }
            return new $3.Rect(px * scale, py * scale, sx * scale, sy * scale);
          },
          getImageInfo: function(url) {
            var _this = this, callbackName, callback, readySource, options, urlParts, filename, lastDot;
            if (url) {
              urlParts = url.split("/");
              filename = urlParts[urlParts.length - 1];
              lastDot = filename.lastIndexOf(".");
              if (lastDot > -1) {
                urlParts[urlParts.length - 1] = filename.slice(0, lastDot);
              }
            }
            callback = function(data) {
              if (typeof data === "string") {
                data = $3.parseXml(data);
              }
              var $TileSource = $3.TileSource.determineType(_this, data, url);
              if (!$TileSource) {
                _this.raiseEvent("open-failed", { message: "Unable to load TileSource", source: url });
                return;
              }
              options = $TileSource.prototype.configure.apply(_this, [data, url]);
              if (options.ajaxWithCredentials === void 0) {
                options.ajaxWithCredentials = _this.ajaxWithCredentials;
              }
              readySource = new $TileSource(options);
              _this.ready = true;
              _this.raiseEvent("ready", { tileSource: readySource });
            };
            if (url.match(/\.js$/)) {
              callbackName = url.split("/").pop().replace(".js", "");
              $3.jsonp({
                url,
                async: false,
                callbackName,
                callback
              });
            } else {
              $3.makeAjaxRequest({
                url,
                withCredentials: this.ajaxWithCredentials,
                headers: this.ajaxHeaders,
                success: function(xhr) {
                  var data = processResponse(xhr);
                  callback(data);
                },
                error: function(xhr, exc) {
                  var msg;
                  try {
                    msg = "HTTP " + xhr.status + " attempting to load TileSource";
                  } catch (e4) {
                    var formattedExc;
                    if (typeof exc === "undefined" || !exc.toString) {
                      formattedExc = "Unknown error";
                    } else {
                      formattedExc = exc.toString();
                    }
                    msg = formattedExc + " attempting to load TileSource";
                  }
                  _this.raiseEvent("open-failed", {
                    message: msg,
                    source: url
                  });
                }
              });
            }
          },
          supports: function(data, url) {
            return false;
          },
          configure: function(data, url) {
            throw new Error("Method not implemented.");
          },
          getTileUrl: function(level, x4, y4) {
            throw new Error("Method not implemented.");
          },
          getTileAjaxHeaders: function(level, x4, y4) {
            return {};
          },
          tileExists: function(level, x4, y4) {
            var numTiles = this.getNumTiles(level);
            return level >= this.minLevel && level <= this.maxLevel && x4 >= 0 && y4 >= 0 && x4 < numTiles.x && y4 < numTiles.y;
          }
        };
        $3.extend(true, $3.TileSource.prototype, $3.EventSource.prototype);
        function processResponse(xhr) {
          var responseText = xhr.responseText, status = xhr.status, statusText, data;
          if (!xhr) {
            throw new Error($3.getString("Errors.Security"));
          } else if (xhr.status !== 200 && xhr.status !== 0) {
            status = xhr.status;
            statusText = status === 404 ? "Not Found" : xhr.statusText;
            throw new Error($3.getString("Errors.Status", status, statusText));
          }
          if (responseText.match(/\s*<.*/)) {
            try {
              data = xhr.responseXML && xhr.responseXML.documentElement ? xhr.responseXML : $3.parseXml(responseText);
            } catch (e4) {
              data = xhr.responseText;
            }
          } else if (responseText.match(/\s*[{[].*/)) {
            try {
              data = $3.parseJSON(responseText);
            } catch (e4) {
              data = responseText;
            }
          } else {
            data = responseText;
          }
          return data;
        }
        $3.TileSource.determineType = function(tileSource, data, url) {
          var property;
          for (property in OpenSeadragon2) {
            if (property.match(/.+TileSource$/) && $3.isFunction(OpenSeadragon2[property]) && $3.isFunction(OpenSeadragon2[property].prototype.supports) && OpenSeadragon2[property].prototype.supports.call(tileSource, data, url)) {
              return OpenSeadragon2[property];
            }
          }
          $3.console.error("No TileSource was able to open %s %s", url, data);
          return null;
        };
      })(OpenSeadragon2);
      (function($3) {
        $3.DziTileSource = function(width, height, tileSize, tileOverlap, tilesUrl, fileFormat, displayRects, minLevel, maxLevel) {
          var i3, rect, level, options;
          if ($3.isPlainObject(width)) {
            options = width;
          } else {
            options = {
              width: arguments[0],
              height: arguments[1],
              tileSize: arguments[2],
              tileOverlap: arguments[3],
              tilesUrl: arguments[4],
              fileFormat: arguments[5],
              displayRects: arguments[6],
              minLevel: arguments[7],
              maxLevel: arguments[8]
            };
          }
          this._levelRects = {};
          this.tilesUrl = options.tilesUrl;
          this.fileFormat = options.fileFormat;
          this.displayRects = options.displayRects;
          if (this.displayRects) {
            for (i3 = this.displayRects.length - 1; i3 >= 0; i3--) {
              rect = this.displayRects[i3];
              for (level = rect.minLevel; level <= rect.maxLevel; level++) {
                if (!this._levelRects[level]) {
                  this._levelRects[level] = [];
                }
                this._levelRects[level].push(rect);
              }
            }
          }
          $3.TileSource.apply(this, [options]);
        };
        $3.extend($3.DziTileSource.prototype, $3.TileSource.prototype, {
          supports: function(data, url) {
            var ns;
            if (data.Image) {
              ns = data.Image.xmlns;
            } else if (data.documentElement) {
              if (data.documentElement.localName === "Image" || data.documentElement.tagName === "Image") {
                ns = data.documentElement.namespaceURI;
              }
            }
            ns = (ns || "").toLowerCase();
            return ns.indexOf("schemas.microsoft.com/deepzoom/2008") !== -1 || ns.indexOf("schemas.microsoft.com/deepzoom/2009") !== -1;
          },
          configure: function(data, url) {
            var options;
            if (!$3.isPlainObject(data)) {
              options = configureFromXML(this, data);
            } else {
              options = configureFromObject(this, data);
            }
            if (url && !options.tilesUrl) {
              options.tilesUrl = url.replace(/([^/]+?)(\.(dzi|xml|js)?(\?[^/]*)?)?\/?$/, "$1_files/");
              if (url.search(/\.(dzi|xml|js)\?/) !== -1) {
                options.queryParams = url.match(/\?.*/);
              } else {
                options.queryParams = "";
              }
            }
            return options;
          },
          getTileUrl: function(level, x4, y4) {
            return [this.tilesUrl, level, "/", x4, "_", y4, ".", this.fileFormat, this.queryParams].join("");
          },
          tileExists: function(level, x4, y4) {
            var rects = this._levelRects[level], rect, scale, xMin, yMin, xMax, yMax, i3;
            if (this.minLevel && level < this.minLevel || this.maxLevel && level > this.maxLevel) {
              return false;
            }
            if (!rects || !rects.length) {
              return true;
            }
            for (i3 = rects.length - 1; i3 >= 0; i3--) {
              rect = rects[i3];
              if (level < rect.minLevel || level > rect.maxLevel) {
                continue;
              }
              scale = this.getLevelScale(level);
              xMin = rect.x * scale;
              yMin = rect.y * scale;
              xMax = xMin + rect.width * scale;
              yMax = yMin + rect.height * scale;
              xMin = Math.floor(xMin / this._tileWidth);
              yMin = Math.floor(yMin / this._tileWidth);
              xMax = Math.ceil(xMax / this._tileWidth);
              yMax = Math.ceil(yMax / this._tileWidth);
              if (xMin <= x4 && x4 < xMax && yMin <= y4 && y4 < yMax) {
                return true;
              }
            }
            return false;
          }
        });
        function configureFromXML(tileSource, xmlDoc) {
          if (!xmlDoc || !xmlDoc.documentElement) {
            throw new Error($3.getString("Errors.Xml"));
          }
          var root2 = xmlDoc.documentElement, rootName = root2.localName || root2.tagName, ns = xmlDoc.documentElement.namespaceURI, configuration = null, displayRects = [], dispRectNodes, dispRectNode, rectNode, sizeNode, i3;
          if (rootName === "Image") {
            try {
              sizeNode = root2.getElementsByTagName("Size")[0];
              if (sizeNode === void 0) {
                sizeNode = root2.getElementsByTagNameNS(ns, "Size")[0];
              }
              configuration = {
                Image: {
                  xmlns: "http://schemas.microsoft.com/deepzoom/2008",
                  Url: root2.getAttribute("Url"),
                  Format: root2.getAttribute("Format"),
                  DisplayRect: null,
                  Overlap: parseInt(root2.getAttribute("Overlap"), 10),
                  TileSize: parseInt(root2.getAttribute("TileSize"), 10),
                  Size: {
                    Height: parseInt(sizeNode.getAttribute("Height"), 10),
                    Width: parseInt(sizeNode.getAttribute("Width"), 10)
                  }
                }
              };
              if (!$3.imageFormatSupported(configuration.Image.Format)) {
                throw new Error($3.getString("Errors.ImageFormat", configuration.Image.Format.toUpperCase()));
              }
              dispRectNodes = root2.getElementsByTagName("DisplayRect");
              if (dispRectNodes === void 0) {
                dispRectNodes = root2.getElementsByTagNameNS(ns, "DisplayRect")[0];
              }
              for (i3 = 0; i3 < dispRectNodes.length; i3++) {
                dispRectNode = dispRectNodes[i3];
                rectNode = dispRectNode.getElementsByTagName("Rect")[0];
                if (rectNode === void 0) {
                  rectNode = dispRectNode.getElementsByTagNameNS(ns, "Rect")[0];
                }
                displayRects.push({
                  Rect: {
                    X: parseInt(rectNode.getAttribute("X"), 10),
                    Y: parseInt(rectNode.getAttribute("Y"), 10),
                    Width: parseInt(rectNode.getAttribute("Width"), 10),
                    Height: parseInt(rectNode.getAttribute("Height"), 10),
                    MinLevel: parseInt(dispRectNode.getAttribute("MinLevel"), 10),
                    MaxLevel: parseInt(dispRectNode.getAttribute("MaxLevel"), 10)
                  }
                });
              }
              if (displayRects.length) {
                configuration.Image.DisplayRect = displayRects;
              }
              return configureFromObject(tileSource, configuration);
            } catch (e4) {
              throw e4 instanceof Error ? e4 : new Error($3.getString("Errors.Dzi"));
            }
          } else if (rootName === "Collection") {
            throw new Error($3.getString("Errors.Dzc"));
          } else if (rootName === "Error") {
            var messageNode = root2.getElementsByTagName("Message")[0];
            var message = messageNode.firstChild.nodeValue;
            throw new Error(message);
          }
          throw new Error($3.getString("Errors.Dzi"));
        }
        function configureFromObject(tileSource, configuration) {
          var imageData = configuration.Image, tilesUrl = imageData.Url, fileFormat = imageData.Format, sizeData = imageData.Size, dispRectData = imageData.DisplayRect || [], width = parseInt(sizeData.Width, 10), height = parseInt(sizeData.Height, 10), tileSize = parseInt(imageData.TileSize, 10), tileOverlap = parseInt(imageData.Overlap, 10), displayRects = [], rectData, i3;
          for (i3 = 0; i3 < dispRectData.length; i3++) {
            rectData = dispRectData[i3].Rect;
            displayRects.push(new $3.DisplayRect(parseInt(rectData.X, 10), parseInt(rectData.Y, 10), parseInt(rectData.Width, 10), parseInt(rectData.Height, 10), parseInt(rectData.MinLevel, 10), parseInt(rectData.MaxLevel, 10)));
          }
          return $3.extend(true, {
            width,
            height,
            tileSize,
            tileOverlap,
            minLevel: null,
            maxLevel: null,
            tilesUrl,
            fileFormat,
            displayRects
          }, configuration);
        }
      })(OpenSeadragon2);
      (function($3) {
        $3.IIIFTileSource = function(options) {
          $3.extend(true, this, options);
          if (!(this.height && this.width && this["@id"])) {
            throw new Error("IIIF required parameters not provided.");
          }
          options.tileSizePerScaleFactor = {};
          this.tileFormat = this.tileFormat || "jpg";
          this.version = options.version;
          if (this.tile_width && this.tile_height) {
            options.tileWidth = this.tile_width;
            options.tileHeight = this.tile_height;
          } else if (this.tile_width) {
            options.tileSize = this.tile_width;
          } else if (this.tile_height) {
            options.tileSize = this.tile_height;
          } else if (this.tiles) {
            if (this.tiles.length === 1) {
              options.tileWidth = this.tiles[0].width;
              options.tileHeight = this.tiles[0].height || this.tiles[0].width;
              this.scale_factors = this.tiles[0].scaleFactors;
            } else {
              this.scale_factors = [];
              for (var t4 = 0; t4 < this.tiles.length; t4++) {
                for (var sf = 0; sf < this.tiles[t4].scaleFactors.length; sf++) {
                  var scaleFactor = this.tiles[t4].scaleFactors[sf];
                  this.scale_factors.push(scaleFactor);
                  options.tileSizePerScaleFactor[scaleFactor] = {
                    width: this.tiles[t4].width,
                    height: this.tiles[t4].height || this.tiles[t4].width
                  };
                }
              }
            }
          } else if (canBeTiled(options)) {
            var shortDim = Math.min(this.height, this.width), tileOptions = [256, 512, 1024], smallerTiles = [];
            for (var c4 = 0; c4 < tileOptions.length; c4++) {
              if (tileOptions[c4] <= shortDim) {
                smallerTiles.push(tileOptions[c4]);
              }
            }
            if (smallerTiles.length > 0) {
              options.tileSize = Math.max.apply(null, smallerTiles);
            } else {
              options.tileSize = shortDim;
            }
          } else if (this.sizes && this.sizes.length > 0) {
            this.emulateLegacyImagePyramid = true;
            options.levels = constructLevels(this);
            $3.extend(true, options, {
              width: options.levels[options.levels.length - 1].width,
              height: options.levels[options.levels.length - 1].height,
              tileSize: Math.max(options.height, options.width),
              tileOverlap: 0,
              minLevel: 0,
              maxLevel: options.levels.length - 1
            });
            this.levels = options.levels;
          } else {
            $3.console.error("Nothing in the info.json to construct image pyramids from");
          }
          if (!options.maxLevel && !this.emulateLegacyImagePyramid) {
            if (!this.scale_factors) {
              options.maxLevel = Number(Math.ceil(Math.log(Math.max(this.width, this.height), 2)));
            } else {
              var maxScaleFactor = Math.max.apply(null, this.scale_factors);
              options.maxLevel = Math.round(Math.log(maxScaleFactor) * Math.LOG2E);
            }
          }
          $3.TileSource.apply(this, [options]);
        };
        $3.extend($3.IIIFTileSource.prototype, $3.TileSource.prototype, {
          supports: function(data, url) {
            if (data.protocol && data.protocol === "http://iiif.io/api/image") {
              return true;
            } else if (data["@context"] && (data["@context"] === "http://library.stanford.edu/iiif/image-api/1.1/context.json" || data["@context"] === "http://iiif.io/api/image/1/context.json")) {
              return true;
            } else if (data.profile && data.profile.indexOf("http://library.stanford.edu/iiif/image-api/compliance.html") === 0) {
              return true;
            } else if (data.identifier && data.width && data.height) {
              return true;
            } else if (data.documentElement && data.documentElement.tagName === "info" && data.documentElement.namespaceURI === "http://library.stanford.edu/iiif/image-api/ns/") {
              return true;
            } else {
              return false;
            }
          },
          configure: function(data, url) {
            if (!$3.isPlainObject(data)) {
              var options = configureFromXml10(data);
              options["@context"] = "http://iiif.io/api/image/1.0/context.json";
              options["@id"] = url.replace("/info.xml", "");
              options.version = 1;
              return options;
            } else {
              if (!data["@context"]) {
                data["@context"] = "http://iiif.io/api/image/1.0/context.json";
                data["@id"] = url.replace("/info.json", "");
                data.version = 1;
              } else {
                var context = data["@context"];
                if (Array.isArray(context)) {
                  for (var i3 = 0; i3 < context.length; i3++) {
                    if (typeof context[i3] === "string" && (/^http:\/\/iiif\.io\/api\/image\/[1-3]\/context\.json$/.test(context[i3]) || context[i3] === "http://library.stanford.edu/iiif/image-api/1.1/context.json")) {
                      context = context[i3];
                      break;
                    }
                  }
                }
                switch (context) {
                  case "http://iiif.io/api/image/1/context.json":
                  case "http://library.stanford.edu/iiif/image-api/1.1/context.json":
                    data.version = 1;
                    break;
                  case "http://iiif.io/api/image/2/context.json":
                    data.version = 2;
                    break;
                  case "http://iiif.io/api/image/3/context.json":
                    data.version = 3;
                    break;
                  default:
                    $3.console.error("Data has a @context property which contains no known IIIF context URI.");
                }
              }
              if (!data["@id"] && data["id"]) {
                data["@id"] = data["id"];
              }
              if (data.preferredFormats) {
                for (var f3 = 0; f3 < data.preferredFormats.length; f3++) {
                  if (OpenSeadragon2.imageFormatSupported(data.preferredFormats[f3])) {
                    data.tileFormat = data.preferredFormats[f3];
                    break;
                  }
                }
              }
              return data;
            }
          },
          getTileWidth: function(level) {
            if (this.emulateLegacyImagePyramid) {
              return $3.TileSource.prototype.getTileWidth.call(this, level);
            }
            var scaleFactor = Math.pow(2, this.maxLevel - level);
            if (this.tileSizePerScaleFactor && this.tileSizePerScaleFactor[scaleFactor]) {
              return this.tileSizePerScaleFactor[scaleFactor].width;
            }
            return this._tileWidth;
          },
          getTileHeight: function(level) {
            if (this.emulateLegacyImagePyramid) {
              return $3.TileSource.prototype.getTileHeight.call(this, level);
            }
            var scaleFactor = Math.pow(2, this.maxLevel - level);
            if (this.tileSizePerScaleFactor && this.tileSizePerScaleFactor[scaleFactor]) {
              return this.tileSizePerScaleFactor[scaleFactor].height;
            }
            return this._tileHeight;
          },
          getLevelScale: function(level) {
            if (this.emulateLegacyImagePyramid) {
              var levelScale = NaN;
              if (this.levels.length > 0 && level >= this.minLevel && level <= this.maxLevel) {
                levelScale = this.levels[level].width / this.levels[this.maxLevel].width;
              }
              return levelScale;
            }
            return $3.TileSource.prototype.getLevelScale.call(this, level);
          },
          getNumTiles: function(level) {
            if (this.emulateLegacyImagePyramid) {
              var scale = this.getLevelScale(level);
              if (scale) {
                return new $3.Point(1, 1);
              } else {
                return new $3.Point(0, 0);
              }
            }
            return $3.TileSource.prototype.getNumTiles.call(this, level);
          },
          getTileAtPoint: function(level, point) {
            if (this.emulateLegacyImagePyramid) {
              return new $3.Point(0, 0);
            }
            return $3.TileSource.prototype.getTileAtPoint.call(this, level, point);
          },
          getTileUrl: function(level, x4, y4) {
            if (this.emulateLegacyImagePyramid) {
              var url = null;
              if (this.levels.length > 0 && level >= this.minLevel && level <= this.maxLevel) {
                url = this.levels[level].url;
              }
              return url;
            }
            var IIIF_ROTATION = "0", scale = Math.pow(0.5, this.maxLevel - level), levelWidth = Math.ceil(this.width * scale), levelHeight = Math.ceil(this.height * scale), tileWidth, tileHeight, iiifTileSizeWidth, iiifTileSizeHeight, iiifRegion, iiifTileX, iiifTileY, iiifTileW, iiifTileH, iiifSize, iiifSizeW, iiifSizeH, iiifQuality, uri;
            tileWidth = this.getTileWidth(level);
            tileHeight = this.getTileHeight(level);
            iiifTileSizeWidth = Math.ceil(tileWidth / scale);
            iiifTileSizeHeight = Math.ceil(tileHeight / scale);
            if (this.version === 1) {
              iiifQuality = "native." + this.tileFormat;
            } else {
              iiifQuality = "default." + this.tileFormat;
            }
            if (levelWidth < tileWidth && levelHeight < tileHeight) {
              if (this.version === 2 && levelWidth === this.width) {
                iiifSize = "full";
              } else if (this.version === 3 && levelWidth === this.width && levelHeight === this.height) {
                iiifSize = "max";
              } else if (this.version === 3) {
                iiifSize = levelWidth + "," + levelHeight;
              } else {
                iiifSize = levelWidth + ",";
              }
              iiifRegion = "full";
            } else {
              iiifTileX = x4 * iiifTileSizeWidth;
              iiifTileY = y4 * iiifTileSizeHeight;
              iiifTileW = Math.min(iiifTileSizeWidth, this.width - iiifTileX);
              iiifTileH = Math.min(iiifTileSizeHeight, this.height - iiifTileY);
              if (x4 === 0 && y4 === 0 && iiifTileW === this.width && iiifTileH === this.height) {
                iiifRegion = "full";
              } else {
                iiifRegion = [iiifTileX, iiifTileY, iiifTileW, iiifTileH].join(",");
              }
              iiifSizeW = Math.ceil(iiifTileW * scale);
              iiifSizeH = Math.ceil(iiifTileH * scale);
              if (this.version === 2 && iiifSizeW === this.width) {
                iiifSize = "full";
              } else if (this.version === 3 && iiifSizeW === this.width && iiifSizeH === this.height) {
                iiifSize = "max";
              } else if (this.version === 3) {
                iiifSize = iiifSizeW + "," + iiifSizeH;
              } else {
                iiifSize = iiifSizeW + ",";
              }
            }
            uri = [this["@id"], iiifRegion, iiifSize, IIIF_ROTATION, iiifQuality].join("/");
            return uri;
          },
          __testonly__: {
            canBeTiled,
            constructLevels
          }
        });
        function canBeTiled(options) {
          var level0Profiles = [
            "http://library.stanford.edu/iiif/image-api/compliance.html#level0",
            "http://library.stanford.edu/iiif/image-api/1.1/compliance.html#level0",
            "http://iiif.io/api/image/2/level0.json",
            "level0",
            "https://iiif.io/api/image/3/level0.json"
          ];
          var profileLevel = Array.isArray(options.profile) ? options.profile[0] : options.profile;
          var isLevel0 = level0Profiles.indexOf(profileLevel) !== -1;
          var hasCanoncicalSizeFeature = false;
          if (options.version === 2 && options.profile.length > 1 && options.profile[1].supports) {
            hasCanoncicalSizeFeature = options.profile[1].supports.indexOf("sizeByW") !== -1;
          }
          if (options.version === 3 && options.extraFeatures) {
            hasCanoncicalSizeFeature = options.extraFeatures.indexOf("sizeByWh") !== -1;
          }
          return !isLevel0 || hasCanoncicalSizeFeature;
        }
        function constructLevels(options) {
          var levels = [];
          for (var i3 = 0; i3 < options.sizes.length; i3++) {
            levels.push({
              url: options["@id"] + "/full/" + options.sizes[i3].width + "," + (options.version === 3 ? options.sizes[i3].height : "") + "/0/default." + options.tileFormat,
              width: options.sizes[i3].width,
              height: options.sizes[i3].height
            });
          }
          return levels.sort(function(a3, b3) {
            return a3.width - b3.width;
          });
        }
        function configureFromXml10(xmlDoc) {
          if (!xmlDoc || !xmlDoc.documentElement) {
            throw new Error($3.getString("Errors.Xml"));
          }
          var root2 = xmlDoc.documentElement, rootName = root2.tagName, configuration = null;
          if (rootName === "info") {
            try {
              configuration = {};
              parseXML10(root2, configuration);
              return configuration;
            } catch (e4) {
              throw e4 instanceof Error ? e4 : new Error($3.getString("Errors.IIIF"));
            }
          }
          throw new Error($3.getString("Errors.IIIF"));
        }
        function parseXML10(node, configuration, property) {
          var i3, value;
          if (node.nodeType === 3 && property) {
            value = node.nodeValue.trim();
            if (value.match(/^\d*$/)) {
              value = Number(value);
            }
            if (!configuration[property]) {
              configuration[property] = value;
            } else {
              if (!$3.isArray(configuration[property])) {
                configuration[property] = [configuration[property]];
              }
              configuration[property].push(value);
            }
          } else if (node.nodeType === 1) {
            for (i3 = 0; i3 < node.childNodes.length; i3++) {
              parseXML10(node.childNodes[i3], configuration, node.nodeName);
            }
          }
        }
      })(OpenSeadragon2);
      (function($3) {
        $3.OsmTileSource = function(width, height, tileSize, tileOverlap, tilesUrl) {
          var options;
          if ($3.isPlainObject(width)) {
            options = width;
          } else {
            options = {
              width: arguments[0],
              height: arguments[1],
              tileSize: arguments[2],
              tileOverlap: arguments[3],
              tilesUrl: arguments[4]
            };
          }
          if (!options.width || !options.height) {
            options.width = 65572864;
            options.height = 65572864;
          }
          if (!options.tileSize) {
            options.tileSize = 256;
            options.tileOverlap = 0;
          }
          if (!options.tilesUrl) {
            options.tilesUrl = "http://tile.openstreetmap.org/";
          }
          options.minLevel = 8;
          $3.TileSource.apply(this, [options]);
        };
        $3.extend($3.OsmTileSource.prototype, $3.TileSource.prototype, {
          supports: function(data, url) {
            return data.type && data.type === "openstreetmaps";
          },
          configure: function(data, url) {
            return data;
          },
          getTileUrl: function(level, x4, y4) {
            return this.tilesUrl + (level - 8) + "/" + x4 + "/" + y4 + ".png";
          }
        });
      })(OpenSeadragon2);
      (function($3) {
        $3.TmsTileSource = function(width, height, tileSize, tileOverlap, tilesUrl) {
          var options;
          if ($3.isPlainObject(width)) {
            options = width;
          } else {
            options = {
              width: arguments[0],
              height: arguments[1],
              tileSize: arguments[2],
              tileOverlap: arguments[3],
              tilesUrl: arguments[4]
            };
          }
          var bufferedWidth = Math.ceil(options.width / 256) * 256, bufferedHeight = Math.ceil(options.height / 256) * 256, max;
          if (bufferedWidth > bufferedHeight) {
            max = bufferedWidth / 256;
          } else {
            max = bufferedHeight / 256;
          }
          options.maxLevel = Math.ceil(Math.log(max) / Math.log(2)) - 1;
          options.tileSize = 256;
          options.width = bufferedWidth;
          options.height = bufferedHeight;
          $3.TileSource.apply(this, [options]);
        };
        $3.extend($3.TmsTileSource.prototype, $3.TileSource.prototype, {
          supports: function(data, url) {
            return data.type && data.type === "tiledmapservice";
          },
          configure: function(data, url) {
            return data;
          },
          getTileUrl: function(level, x4, y4) {
            var yTiles = this.getNumTiles(level).y - 1;
            return this.tilesUrl + level + "/" + x4 + "/" + (yTiles - y4) + ".png";
          }
        });
      })(OpenSeadragon2);
      (function($3) {
        $3.ZoomifyTileSource = function(options) {
          if (typeof options.tileSize === "undefined") {
            options.tileSize = 256;
          }
          if (typeof options.fileFormat === "undefined") {
            options.fileFormat = "jpg";
            this.fileFormat = options.fileFormat;
          }
          var currentImageSize = {
            x: options.width,
            y: options.height
          };
          options.imageSizes = [{
            x: options.width,
            y: options.height
          }];
          options.gridSize = [this._getGridSize(options.width, options.height, options.tileSize)];
          while (parseInt(currentImageSize.x, 10) > options.tileSize || parseInt(currentImageSize.y, 10) > options.tileSize) {
            currentImageSize.x = Math.floor(currentImageSize.x / 2);
            currentImageSize.y = Math.floor(currentImageSize.y / 2);
            options.imageSizes.push({
              x: currentImageSize.x,
              y: currentImageSize.y
            });
            options.gridSize.push(this._getGridSize(currentImageSize.x, currentImageSize.y, options.tileSize));
          }
          options.imageSizes.reverse();
          options.gridSize.reverse();
          options.minLevel = 0;
          options.maxLevel = options.gridSize.length - 1;
          OpenSeadragon2.TileSource.apply(this, [options]);
        };
        $3.extend($3.ZoomifyTileSource.prototype, $3.TileSource.prototype, {
          _getGridSize: function(width, height, tileSize) {
            return {
              x: Math.ceil(width / tileSize),
              y: Math.ceil(height / tileSize)
            };
          },
          _calculateAbsoluteTileNumber: function(level, x4, y4) {
            var num = 0;
            var size = {};
            for (var z4 = 0; z4 < level; z4++) {
              size = this.gridSize[z4];
              num += size.x * size.y;
            }
            size = this.gridSize[level];
            num += size.x * y4 + x4;
            return num;
          },
          supports: function(data, url) {
            return data.type && data.type === "zoomifytileservice";
          },
          configure: function(data, url) {
            return data;
          },
          getTileUrl: function(level, x4, y4) {
            var result = 0;
            var num = this._calculateAbsoluteTileNumber(level, x4, y4);
            result = Math.floor(num / 256);
            return this.tilesUrl + "TileGroup" + result + "/" + level + "-" + x4 + "-" + y4 + "." + this.fileFormat;
          }
        });
      })(OpenSeadragon2);
      (function($3) {
        $3.LegacyTileSource = function(levels) {
          var options, width, height;
          if ($3.isArray(levels)) {
            options = {
              type: "legacy-image-pyramid",
              levels
            };
          }
          options.levels = filterFiles(options.levels);
          if (options.levels.length > 0) {
            width = options.levels[options.levels.length - 1].width;
            height = options.levels[options.levels.length - 1].height;
          } else {
            width = 0;
            height = 0;
            $3.console.error("No supported image formats found");
          }
          $3.extend(true, options, {
            width,
            height,
            tileSize: Math.max(height, width),
            tileOverlap: 0,
            minLevel: 0,
            maxLevel: options.levels.length > 0 ? options.levels.length - 1 : 0
          });
          $3.TileSource.apply(this, [options]);
          this.levels = options.levels;
        };
        $3.extend($3.LegacyTileSource.prototype, $3.TileSource.prototype, {
          supports: function(data, url) {
            return data.type && data.type === "legacy-image-pyramid" || data.documentElement && data.documentElement.getAttribute("type") === "legacy-image-pyramid";
          },
          configure: function(configuration, dataUrl) {
            var options;
            if (!$3.isPlainObject(configuration)) {
              options = configureFromXML(this, configuration);
            } else {
              options = configureFromObject(this, configuration);
            }
            return options;
          },
          getLevelScale: function(level) {
            var levelScale = NaN;
            if (this.levels.length > 0 && level >= this.minLevel && level <= this.maxLevel) {
              levelScale = this.levels[level].width / this.levels[this.maxLevel].width;
            }
            return levelScale;
          },
          getNumTiles: function(level) {
            var scale = this.getLevelScale(level);
            if (scale) {
              return new $3.Point(1, 1);
            } else {
              return new $3.Point(0, 0);
            }
          },
          getTileUrl: function(level, x4, y4) {
            var url = null;
            if (this.levels.length > 0 && level >= this.minLevel && level <= this.maxLevel) {
              url = this.levels[level].url;
            }
            return url;
          }
        });
        function filterFiles(files) {
          var filtered = [], file, i3;
          for (i3 = 0; i3 < files.length; i3++) {
            file = files[i3];
            if (file.height && file.width && file.url) {
              filtered.push({
                url: file.url,
                width: Number(file.width),
                height: Number(file.height)
              });
            } else {
              $3.console.error("Unsupported image format: %s", file.url ? file.url : "<no URL>");
            }
          }
          return filtered.sort(function(a3, b3) {
            return a3.height - b3.height;
          });
        }
        function configureFromXML(tileSource, xmlDoc) {
          if (!xmlDoc || !xmlDoc.documentElement) {
            throw new Error($3.getString("Errors.Xml"));
          }
          var root2 = xmlDoc.documentElement, rootName = root2.tagName, conf = null, levels = [], level, i3;
          if (rootName === "image") {
            try {
              conf = {
                type: root2.getAttribute("type"),
                levels: []
              };
              levels = root2.getElementsByTagName("level");
              for (i3 = 0; i3 < levels.length; i3++) {
                level = levels[i3];
                conf.levels.push({
                  url: level.getAttribute("url"),
                  width: parseInt(level.getAttribute("width"), 10),
                  height: parseInt(level.getAttribute("height"), 10)
                });
              }
              return configureFromObject(tileSource, conf);
            } catch (e4) {
              throw e4 instanceof Error ? e4 : new Error("Unknown error parsing Legacy Image Pyramid XML.");
            }
          } else if (rootName === "collection") {
            throw new Error("Legacy Image Pyramid Collections not yet supported.");
          } else if (rootName === "error") {
            throw new Error("Error: " + xmlDoc);
          }
          throw new Error("Unknown element " + rootName);
        }
        function configureFromObject(tileSource, configuration) {
          return configuration.levels;
        }
      })(OpenSeadragon2);
      (function($3) {
        $3.ImageTileSource = function(options) {
          options = $3.extend({
            buildPyramid: true,
            crossOriginPolicy: false,
            ajaxWithCredentials: false,
            useCanvas: true
          }, options);
          $3.TileSource.apply(this, [options]);
        };
        $3.extend($3.ImageTileSource.prototype, $3.TileSource.prototype, {
          supports: function(data, url) {
            return data.type && data.type === "image";
          },
          configure: function(options, dataUrl) {
            return options;
          },
          getImageInfo: function(url) {
            var image = this._image = new Image();
            var _this = this;
            if (this.crossOriginPolicy) {
              image.crossOrigin = this.crossOriginPolicy;
            }
            if (this.ajaxWithCredentials) {
              image.useCredentials = this.ajaxWithCredentials;
            }
            $3.addEvent(image, "load", function() {
              _this.width = image.naturalWidth;
              _this.height = image.naturalHeight;
              _this.aspectRatio = _this.width / _this.height;
              _this.dimensions = new $3.Point(_this.width, _this.height);
              _this._tileWidth = _this.width;
              _this._tileHeight = _this.height;
              _this.tileOverlap = 0;
              _this.minLevel = 0;
              _this.levels = _this._buildLevels();
              _this.maxLevel = _this.levels.length - 1;
              _this.ready = true;
              _this.raiseEvent("ready", { tileSource: _this });
            });
            $3.addEvent(image, "error", function() {
              _this.raiseEvent("open-failed", {
                message: "Error loading image at " + url,
                source: url
              });
            });
            image.src = url;
          },
          getLevelScale: function(level) {
            var levelScale = NaN;
            if (level >= this.minLevel && level <= this.maxLevel) {
              levelScale = this.levels[level].width / this.levels[this.maxLevel].width;
            }
            return levelScale;
          },
          getNumTiles: function(level) {
            var scale = this.getLevelScale(level);
            if (scale) {
              return new $3.Point(1, 1);
            } else {
              return new $3.Point(0, 0);
            }
          },
          getTileUrl: function(level, x4, y4) {
            var url = null;
            if (level >= this.minLevel && level <= this.maxLevel) {
              url = this.levels[level].url;
            }
            return url;
          },
          getContext2D: function(level, x4, y4) {
            var context = null;
            if (level >= this.minLevel && level <= this.maxLevel) {
              context = this.levels[level].context2D;
            }
            return context;
          },
          destroy: function() {
            this._freeupCanvasMemory();
          },
          _buildLevels: function() {
            var levels = [{
              url: this._image.src,
              width: this._image.naturalWidth,
              height: this._image.naturalHeight
            }];
            if (!this.buildPyramid || !$3.supportsCanvas || !this.useCanvas) {
              delete this._image;
              return levels;
            }
            var currentWidth = this._image.naturalWidth;
            var currentHeight = this._image.naturalHeight;
            var bigCanvas = document.createElement("canvas");
            var bigContext = bigCanvas.getContext("2d");
            bigCanvas.width = currentWidth;
            bigCanvas.height = currentHeight;
            bigContext.drawImage(this._image, 0, 0, currentWidth, currentHeight);
            levels[0].context2D = bigContext;
            delete this._image;
            if ($3.isCanvasTainted(bigCanvas)) {
              return levels;
            }
            while (currentWidth >= 2 && currentHeight >= 2) {
              currentWidth = Math.floor(currentWidth / 2);
              currentHeight = Math.floor(currentHeight / 2);
              var smallCanvas = document.createElement("canvas");
              var smallContext = smallCanvas.getContext("2d");
              smallCanvas.width = currentWidth;
              smallCanvas.height = currentHeight;
              smallContext.drawImage(bigCanvas, 0, 0, currentWidth, currentHeight);
              levels.splice(0, 0, {
                context2D: smallContext,
                width: currentWidth,
                height: currentHeight
              });
              bigCanvas = smallCanvas;
              bigContext = smallContext;
            }
            return levels;
          },
          _freeupCanvasMemory: function() {
            for (var i3 = 0; i3 < this.levels.length; i3++) {
              this.levels[i3].context2D.canvas.height = 0;
              this.levels[i3].context2D.canvas.width = 0;
            }
          }
        });
      })(OpenSeadragon2);
      (function($3) {
        $3.TileSourceCollection = function(tileSize, tileSources, rows, layout) {
          $3.console.error("TileSourceCollection is deprecated; use World instead");
        };
      })(OpenSeadragon2);
      (function($3) {
        $3.ButtonState = {
          REST: 0,
          GROUP: 1,
          HOVER: 2,
          DOWN: 3
        };
        $3.Button = function(options) {
          var _this = this;
          $3.EventSource.call(this);
          $3.extend(true, this, {
            tooltip: null,
            srcRest: null,
            srcGroup: null,
            srcHover: null,
            srcDown: null,
            clickTimeThreshold: $3.DEFAULT_SETTINGS.clickTimeThreshold,
            clickDistThreshold: $3.DEFAULT_SETTINGS.clickDistThreshold,
            fadeDelay: 0,
            fadeLength: 2e3,
            onPress: null,
            onRelease: null,
            onClick: null,
            onEnter: null,
            onExit: null,
            onFocus: null,
            onBlur: null,
            userData: null
          }, options);
          this.element = options.element || $3.makeNeutralElement("div");
          if (!options.element) {
            this.imgRest = $3.makeTransparentImage(this.srcRest);
            this.imgGroup = $3.makeTransparentImage(this.srcGroup);
            this.imgHover = $3.makeTransparentImage(this.srcHover);
            this.imgDown = $3.makeTransparentImage(this.srcDown);
            this.imgRest.alt = this.imgGroup.alt = this.imgHover.alt = this.imgDown.alt = this.tooltip;
            $3.setElementPointerEventsNone(this.imgRest);
            $3.setElementPointerEventsNone(this.imgGroup);
            $3.setElementPointerEventsNone(this.imgHover);
            $3.setElementPointerEventsNone(this.imgDown);
            this.element.style.position = "relative";
            $3.setElementTouchActionNone(this.element);
            this.imgGroup.style.position = this.imgHover.style.position = this.imgDown.style.position = "absolute";
            this.imgGroup.style.top = this.imgHover.style.top = this.imgDown.style.top = "0px";
            this.imgGroup.style.left = this.imgHover.style.left = this.imgDown.style.left = "0px";
            this.imgHover.style.visibility = this.imgDown.style.visibility = "hidden";
            if ($3.Browser.vendor === $3.BROWSERS.FIREFOX && $3.Browser.version < 3) {
              this.imgGroup.style.top = this.imgHover.style.top = this.imgDown.style.top = "";
            }
            this.element.appendChild(this.imgRest);
            this.element.appendChild(this.imgGroup);
            this.element.appendChild(this.imgHover);
            this.element.appendChild(this.imgDown);
          }
          this.addHandler("press", this.onPress);
          this.addHandler("release", this.onRelease);
          this.addHandler("click", this.onClick);
          this.addHandler("enter", this.onEnter);
          this.addHandler("exit", this.onExit);
          this.addHandler("focus", this.onFocus);
          this.addHandler("blur", this.onBlur);
          this.currentState = $3.ButtonState.GROUP;
          this.fadeBeginTime = null;
          this.shouldFade = false;
          this.element.style.display = "inline-block";
          this.element.style.position = "relative";
          this.element.title = this.tooltip;
          this.tracker = new $3.MouseTracker({
            userData: "Button.tracker",
            element: this.element,
            clickTimeThreshold: this.clickTimeThreshold,
            clickDistThreshold: this.clickDistThreshold,
            enterHandler: function(event) {
              if (event.insideElementPressed) {
                inTo(_this, $3.ButtonState.DOWN);
                _this.raiseEvent("enter", { originalEvent: event.originalEvent });
              } else if (!event.buttonDownAny) {
                inTo(_this, $3.ButtonState.HOVER);
              }
            },
            focusHandler: function(event) {
              _this.tracker.enterHandler(event);
              _this.raiseEvent("focus", { originalEvent: event.originalEvent });
            },
            leaveHandler: function(event) {
              outTo(_this, $3.ButtonState.GROUP);
              if (event.insideElementPressed) {
                _this.raiseEvent("exit", { originalEvent: event.originalEvent });
              }
            },
            blurHandler: function(event) {
              _this.tracker.leaveHandler(event);
              _this.raiseEvent("blur", { originalEvent: event.originalEvent });
            },
            pressHandler: function(event) {
              inTo(_this, $3.ButtonState.DOWN);
              _this.raiseEvent("press", { originalEvent: event.originalEvent });
            },
            releaseHandler: function(event) {
              if (event.insideElementPressed && event.insideElementReleased) {
                outTo(_this, $3.ButtonState.HOVER);
                _this.raiseEvent("release", { originalEvent: event.originalEvent });
              } else if (event.insideElementPressed) {
                outTo(_this, $3.ButtonState.GROUP);
              } else {
                inTo(_this, $3.ButtonState.HOVER);
              }
            },
            clickHandler: function(event) {
              if (event.quick) {
                _this.raiseEvent("click", { originalEvent: event.originalEvent });
              }
            },
            keyHandler: function(event) {
              if (event.keyCode === 13) {
                _this.raiseEvent("click", { originalEvent: event.originalEvent });
                _this.raiseEvent("release", { originalEvent: event.originalEvent });
                event.preventDefault = true;
              } else {
                event.preventDefault = false;
              }
            }
          });
          outTo(this, $3.ButtonState.REST);
        };
        $3.extend($3.Button.prototype, $3.EventSource.prototype, {
          notifyGroupEnter: function() {
            inTo(this, $3.ButtonState.GROUP);
          },
          notifyGroupExit: function() {
            outTo(this, $3.ButtonState.REST);
          },
          disable: function() {
            this.notifyGroupExit();
            this.element.disabled = true;
            $3.setElementOpacity(this.element, 0.2, true);
          },
          enable: function() {
            this.element.disabled = false;
            $3.setElementOpacity(this.element, 1, true);
            this.notifyGroupEnter();
          },
          destroy: function() {
            if (this.imgRest) {
              this.element.removeChild(this.imgRest);
              this.imgRest = null;
            }
            if (this.imgGroup) {
              this.element.removeChild(this.imgGroup);
              this.imgGroup = null;
            }
            if (this.imgHover) {
              this.element.removeChild(this.imgHover);
              this.imgHover = null;
            }
            if (this.imgDown) {
              this.element.removeChild(this.imgDown);
              this.imgDown = null;
            }
            this.removeAllHandlers();
            this.tracker.destroy();
            this.element = null;
          }
        });
        function scheduleFade(button) {
          $3.requestAnimationFrame(function() {
            updateFade(button);
          });
        }
        function updateFade(button) {
          var currentTime, deltaTime, opacity;
          if (button.shouldFade) {
            currentTime = $3.now();
            deltaTime = currentTime - button.fadeBeginTime;
            opacity = 1 - deltaTime / button.fadeLength;
            opacity = Math.min(1, opacity);
            opacity = Math.max(0, opacity);
            if (button.imgGroup) {
              $3.setElementOpacity(button.imgGroup, opacity, true);
            }
            if (opacity > 0) {
              scheduleFade(button);
            }
          }
        }
        function beginFading(button) {
          button.shouldFade = true;
          button.fadeBeginTime = $3.now() + button.fadeDelay;
          window.setTimeout(function() {
            scheduleFade(button);
          }, button.fadeDelay);
        }
        function stopFading(button) {
          button.shouldFade = false;
          if (button.imgGroup) {
            $3.setElementOpacity(button.imgGroup, 1, true);
          }
        }
        function inTo(button, newState) {
          if (button.element.disabled) {
            return;
          }
          if (newState >= $3.ButtonState.GROUP && button.currentState === $3.ButtonState.REST) {
            stopFading(button);
            button.currentState = $3.ButtonState.GROUP;
          }
          if (newState >= $3.ButtonState.HOVER && button.currentState === $3.ButtonState.GROUP) {
            if (button.imgHover) {
              button.imgHover.style.visibility = "";
            }
            button.currentState = $3.ButtonState.HOVER;
          }
          if (newState >= $3.ButtonState.DOWN && button.currentState === $3.ButtonState.HOVER) {
            if (button.imgDown) {
              button.imgDown.style.visibility = "";
            }
            button.currentState = $3.ButtonState.DOWN;
          }
        }
        function outTo(button, newState) {
          if (button.element.disabled) {
            return;
          }
          if (newState <= $3.ButtonState.HOVER && button.currentState === $3.ButtonState.DOWN) {
            if (button.imgDown) {
              button.imgDown.style.visibility = "hidden";
            }
            button.currentState = $3.ButtonState.HOVER;
          }
          if (newState <= $3.ButtonState.GROUP && button.currentState === $3.ButtonState.HOVER) {
            if (button.imgHover) {
              button.imgHover.style.visibility = "hidden";
            }
            button.currentState = $3.ButtonState.GROUP;
          }
          if (newState <= $3.ButtonState.REST && button.currentState === $3.ButtonState.GROUP) {
            beginFading(button);
            button.currentState = $3.ButtonState.REST;
          }
        }
      })(OpenSeadragon2);
      (function($3) {
        $3.ButtonGroup = function(options) {
          $3.extend(true, this, {
            buttons: [],
            clickTimeThreshold: $3.DEFAULT_SETTINGS.clickTimeThreshold,
            clickDistThreshold: $3.DEFAULT_SETTINGS.clickDistThreshold,
            labelText: ""
          }, options);
          var buttons = this.buttons.concat([]), _this = this, i3;
          this.element = options.element || $3.makeNeutralElement("div");
          if (!options.group) {
            this.element.style.display = "inline-block";
            for (i3 = 0; i3 < buttons.length; i3++) {
              this.element.appendChild(buttons[i3].element);
            }
          }
          $3.setElementTouchActionNone(this.element);
          this.tracker = new $3.MouseTracker({
            userData: "ButtonGroup.tracker",
            element: this.element,
            clickTimeThreshold: this.clickTimeThreshold,
            clickDistThreshold: this.clickDistThreshold,
            enterHandler: function(event) {
              var i4;
              for (i4 = 0; i4 < _this.buttons.length; i4++) {
                _this.buttons[i4].notifyGroupEnter();
              }
            },
            leaveHandler: function(event) {
              var i4;
              if (!event.insideElementPressed) {
                for (i4 = 0; i4 < _this.buttons.length; i4++) {
                  _this.buttons[i4].notifyGroupExit();
                }
              }
            }
          });
        };
        $3.ButtonGroup.prototype = {
          emulateEnter: function() {
            this.tracker.enterHandler({ eventSource: this.tracker });
          },
          emulateLeave: function() {
            this.tracker.leaveHandler({ eventSource: this.tracker });
          },
          destroy: function() {
            while (this.buttons.length) {
              var button = this.buttons.pop();
              this.element.removeChild(button.element);
              button.destroy();
            }
            this.tracker.destroy();
            this.element = null;
          }
        };
      })(OpenSeadragon2);
      (function($3) {
        $3.Rect = function(x4, y4, width, height, degrees) {
          this.x = typeof x4 === "number" ? x4 : 0;
          this.y = typeof y4 === "number" ? y4 : 0;
          this.width = typeof width === "number" ? width : 0;
          this.height = typeof height === "number" ? height : 0;
          this.degrees = typeof degrees === "number" ? degrees : 0;
          this.degrees = $3.positiveModulo(this.degrees, 360);
          var newTopLeft, newWidth;
          if (this.degrees >= 270) {
            newTopLeft = this.getTopRight();
            this.x = newTopLeft.x;
            this.y = newTopLeft.y;
            newWidth = this.height;
            this.height = this.width;
            this.width = newWidth;
            this.degrees -= 270;
          } else if (this.degrees >= 180) {
            newTopLeft = this.getBottomRight();
            this.x = newTopLeft.x;
            this.y = newTopLeft.y;
            this.degrees -= 180;
          } else if (this.degrees >= 90) {
            newTopLeft = this.getBottomLeft();
            this.x = newTopLeft.x;
            this.y = newTopLeft.y;
            newWidth = this.height;
            this.height = this.width;
            this.width = newWidth;
            this.degrees -= 90;
          }
        };
        $3.Rect.fromSummits = function(topLeft, topRight, bottomLeft) {
          var width = topLeft.distanceTo(topRight);
          var height = topLeft.distanceTo(bottomLeft);
          var diff = topRight.minus(topLeft);
          var radians = Math.atan(diff.y / diff.x);
          if (diff.x < 0) {
            radians += Math.PI;
          } else if (diff.y < 0) {
            radians += 2 * Math.PI;
          }
          return new $3.Rect(topLeft.x, topLeft.y, width, height, radians / Math.PI * 180);
        };
        $3.Rect.prototype = {
          clone: function() {
            return new $3.Rect(this.x, this.y, this.width, this.height, this.degrees);
          },
          getAspectRatio: function() {
            return this.width / this.height;
          },
          getTopLeft: function() {
            return new $3.Point(this.x, this.y);
          },
          getBottomRight: function() {
            return new $3.Point(this.x + this.width, this.y + this.height).rotate(this.degrees, this.getTopLeft());
          },
          getTopRight: function() {
            return new $3.Point(this.x + this.width, this.y).rotate(this.degrees, this.getTopLeft());
          },
          getBottomLeft: function() {
            return new $3.Point(this.x, this.y + this.height).rotate(this.degrees, this.getTopLeft());
          },
          getCenter: function() {
            return new $3.Point(this.x + this.width / 2, this.y + this.height / 2).rotate(this.degrees, this.getTopLeft());
          },
          getSize: function() {
            return new $3.Point(this.width, this.height);
          },
          equals: function(other) {
            return other instanceof $3.Rect && this.x === other.x && this.y === other.y && this.width === other.width && this.height === other.height && this.degrees === other.degrees;
          },
          times: function(factor) {
            return new $3.Rect(this.x * factor, this.y * factor, this.width * factor, this.height * factor, this.degrees);
          },
          translate: function(delta) {
            return new $3.Rect(this.x + delta.x, this.y + delta.y, this.width, this.height, this.degrees);
          },
          union: function(rect) {
            var thisBoundingBox = this.getBoundingBox();
            var otherBoundingBox = rect.getBoundingBox();
            var left = Math.min(thisBoundingBox.x, otherBoundingBox.x);
            var top = Math.min(thisBoundingBox.y, otherBoundingBox.y);
            var right = Math.max(thisBoundingBox.x + thisBoundingBox.width, otherBoundingBox.x + otherBoundingBox.width);
            var bottom = Math.max(thisBoundingBox.y + thisBoundingBox.height, otherBoundingBox.y + otherBoundingBox.height);
            return new $3.Rect(left, top, right - left, bottom - top);
          },
          intersection: function(rect) {
            var EPSILON = 1e-10;
            var intersectionPoints = [];
            var thisTopLeft = this.getTopLeft();
            if (rect.containsPoint(thisTopLeft, EPSILON)) {
              intersectionPoints.push(thisTopLeft);
            }
            var thisTopRight = this.getTopRight();
            if (rect.containsPoint(thisTopRight, EPSILON)) {
              intersectionPoints.push(thisTopRight);
            }
            var thisBottomLeft = this.getBottomLeft();
            if (rect.containsPoint(thisBottomLeft, EPSILON)) {
              intersectionPoints.push(thisBottomLeft);
            }
            var thisBottomRight = this.getBottomRight();
            if (rect.containsPoint(thisBottomRight, EPSILON)) {
              intersectionPoints.push(thisBottomRight);
            }
            var rectTopLeft = rect.getTopLeft();
            if (this.containsPoint(rectTopLeft, EPSILON)) {
              intersectionPoints.push(rectTopLeft);
            }
            var rectTopRight = rect.getTopRight();
            if (this.containsPoint(rectTopRight, EPSILON)) {
              intersectionPoints.push(rectTopRight);
            }
            var rectBottomLeft = rect.getBottomLeft();
            if (this.containsPoint(rectBottomLeft, EPSILON)) {
              intersectionPoints.push(rectBottomLeft);
            }
            var rectBottomRight = rect.getBottomRight();
            if (this.containsPoint(rectBottomRight, EPSILON)) {
              intersectionPoints.push(rectBottomRight);
            }
            var thisSegments = this._getSegments();
            var rectSegments = rect._getSegments();
            for (var i3 = 0; i3 < thisSegments.length; i3++) {
              var thisSegment = thisSegments[i3];
              for (var j3 = 0; j3 < rectSegments.length; j3++) {
                var rectSegment = rectSegments[j3];
                var intersect = getIntersection(thisSegment[0], thisSegment[1], rectSegment[0], rectSegment[1]);
                if (intersect) {
                  intersectionPoints.push(intersect);
                }
              }
            }
            function getIntersection(a3, b3, c4, d3) {
              var abVector = b3.minus(a3);
              var cdVector = d3.minus(c4);
              var denom = -cdVector.x * abVector.y + abVector.x * cdVector.y;
              if (denom === 0) {
                return null;
              }
              var s5 = (abVector.x * (a3.y - c4.y) - abVector.y * (a3.x - c4.x)) / denom;
              var t4 = (cdVector.x * (a3.y - c4.y) - cdVector.y * (a3.x - c4.x)) / denom;
              if (-EPSILON <= s5 && s5 <= 1 - EPSILON && -EPSILON <= t4 && t4 <= 1 - EPSILON) {
                return new $3.Point(a3.x + t4 * abVector.x, a3.y + t4 * abVector.y);
              }
              return null;
            }
            if (intersectionPoints.length === 0) {
              return null;
            }
            var minX = intersectionPoints[0].x;
            var maxX = intersectionPoints[0].x;
            var minY = intersectionPoints[0].y;
            var maxY = intersectionPoints[0].y;
            for (var k4 = 1; k4 < intersectionPoints.length; k4++) {
              var point = intersectionPoints[k4];
              if (point.x < minX) {
                minX = point.x;
              }
              if (point.x > maxX) {
                maxX = point.x;
              }
              if (point.y < minY) {
                minY = point.y;
              }
              if (point.y > maxY) {
                maxY = point.y;
              }
            }
            return new $3.Rect(minX, minY, maxX - minX, maxY - minY);
          },
          _getSegments: function() {
            var topLeft = this.getTopLeft();
            var topRight = this.getTopRight();
            var bottomLeft = this.getBottomLeft();
            var bottomRight = this.getBottomRight();
            return [
              [topLeft, topRight],
              [topRight, bottomRight],
              [bottomRight, bottomLeft],
              [bottomLeft, topLeft]
            ];
          },
          rotate: function(degrees, pivot) {
            degrees = $3.positiveModulo(degrees, 360);
            if (degrees === 0) {
              return this.clone();
            }
            pivot = pivot || this.getCenter();
            var newTopLeft = this.getTopLeft().rotate(degrees, pivot);
            var newTopRight = this.getTopRight().rotate(degrees, pivot);
            var diff = newTopRight.minus(newTopLeft);
            diff = diff.apply(function(x4) {
              var EPSILON = 1e-15;
              return Math.abs(x4) < EPSILON ? 0 : x4;
            });
            var radians = Math.atan(diff.y / diff.x);
            if (diff.x < 0) {
              radians += Math.PI;
            } else if (diff.y < 0) {
              radians += 2 * Math.PI;
            }
            return new $3.Rect(newTopLeft.x, newTopLeft.y, this.width, this.height, radians / Math.PI * 180);
          },
          getBoundingBox: function() {
            if (this.degrees === 0) {
              return this.clone();
            }
            var topLeft = this.getTopLeft();
            var topRight = this.getTopRight();
            var bottomLeft = this.getBottomLeft();
            var bottomRight = this.getBottomRight();
            var minX = Math.min(topLeft.x, topRight.x, bottomLeft.x, bottomRight.x);
            var maxX = Math.max(topLeft.x, topRight.x, bottomLeft.x, bottomRight.x);
            var minY = Math.min(topLeft.y, topRight.y, bottomLeft.y, bottomRight.y);
            var maxY = Math.max(topLeft.y, topRight.y, bottomLeft.y, bottomRight.y);
            return new $3.Rect(minX, minY, maxX - minX, maxY - minY);
          },
          getIntegerBoundingBox: function() {
            var boundingBox = this.getBoundingBox();
            var x4 = Math.floor(boundingBox.x);
            var y4 = Math.floor(boundingBox.y);
            var width = Math.ceil(boundingBox.width + boundingBox.x - x4);
            var height = Math.ceil(boundingBox.height + boundingBox.y - y4);
            return new $3.Rect(x4, y4, width, height);
          },
          containsPoint: function(point, epsilon) {
            epsilon = epsilon || 0;
            var topLeft = this.getTopLeft();
            var topRight = this.getTopRight();
            var bottomLeft = this.getBottomLeft();
            var topDiff = topRight.minus(topLeft);
            var leftDiff = bottomLeft.minus(topLeft);
            return (point.x - topLeft.x) * topDiff.x + (point.y - topLeft.y) * topDiff.y >= -epsilon && (point.x - topRight.x) * topDiff.x + (point.y - topRight.y) * topDiff.y <= epsilon && (point.x - topLeft.x) * leftDiff.x + (point.y - topLeft.y) * leftDiff.y >= -epsilon && (point.x - bottomLeft.x) * leftDiff.x + (point.y - bottomLeft.y) * leftDiff.y <= epsilon;
          },
          toString: function() {
            return "[" + Math.round(this.x * 100) / 100 + ", " + Math.round(this.y * 100) / 100 + ", " + Math.round(this.width * 100) / 100 + "x" + Math.round(this.height * 100) / 100 + ", " + Math.round(this.degrees * 100) / 100 + "deg]";
          }
        };
      })(OpenSeadragon2);
      (function($3) {
        var THIS = {};
        $3.ReferenceStrip = function(options) {
          var _this = this, viewer = options.viewer, viewerSize = $3.getElementSize(viewer.element), element, style, i3;
          if (!options.id) {
            options.id = "referencestrip-" + $3.now();
            this.element = $3.makeNeutralElement("div");
            this.element.id = options.id;
            this.element.className = "referencestrip";
          }
          options = $3.extend(true, {
            sizeRatio: $3.DEFAULT_SETTINGS.referenceStripSizeRatio,
            position: $3.DEFAULT_SETTINGS.referenceStripPosition,
            scroll: $3.DEFAULT_SETTINGS.referenceStripScroll,
            clickTimeThreshold: $3.DEFAULT_SETTINGS.clickTimeThreshold
          }, options, {
            element: this.element
          });
          $3.extend(this, options);
          THIS[this.id] = {
            animating: false
          };
          this.minPixelRatio = this.viewer.minPixelRatio;
          this.element.tabIndex = 0;
          style = this.element.style;
          style.marginTop = "0px";
          style.marginRight = "0px";
          style.marginBottom = "0px";
          style.marginLeft = "0px";
          style.left = "0px";
          style.bottom = "0px";
          style.border = "0px";
          style.background = "#000";
          style.position = "relative";
          $3.setElementTouchActionNone(this.element);
          $3.setElementOpacity(this.element, 0.8);
          this.viewer = viewer;
          this.tracker = new $3.MouseTracker({
            userData: "ReferenceStrip.tracker",
            element: this.element,
            clickHandler: $3.delegate(this, onStripClick),
            dragHandler: $3.delegate(this, onStripDrag),
            scrollHandler: $3.delegate(this, onStripScroll),
            enterHandler: $3.delegate(this, onStripEnter),
            leaveHandler: $3.delegate(this, onStripLeave),
            keyDownHandler: $3.delegate(this, onKeyDown),
            keyHandler: $3.delegate(this, onKeyPress),
            preProcessEventHandler: function(eventInfo) {
              if (eventInfo.eventType === "wheel") {
                eventInfo.preventDefault = true;
              }
            }
          });
          if (options.width && options.height) {
            this.element.style.width = options.width + "px";
            this.element.style.height = options.height + "px";
            viewer.addControl(this.element, { anchor: $3.ControlAnchor.BOTTOM_LEFT });
          } else {
            if (options.scroll === "horizontal") {
              this.element.style.width = viewerSize.x * options.sizeRatio * viewer.tileSources.length + 12 * viewer.tileSources.length + "px";
              this.element.style.height = viewerSize.y * options.sizeRatio + "px";
              viewer.addControl(this.element, { anchor: $3.ControlAnchor.BOTTOM_LEFT });
            } else {
              this.element.style.height = viewerSize.y * options.sizeRatio * viewer.tileSources.length + 12 * viewer.tileSources.length + "px";
              this.element.style.width = viewerSize.x * options.sizeRatio + "px";
              viewer.addControl(this.element, { anchor: $3.ControlAnchor.TOP_LEFT });
            }
          }
          this.panelWidth = viewerSize.x * this.sizeRatio + 8;
          this.panelHeight = viewerSize.y * this.sizeRatio + 8;
          this.panels = [];
          this.miniViewers = {};
          for (i3 = 0; i3 < viewer.tileSources.length; i3++) {
            element = $3.makeNeutralElement("div");
            element.id = this.element.id + "-" + i3;
            element.style.width = _this.panelWidth + "px";
            element.style.height = _this.panelHeight + "px";
            element.style.display = "inline";
            element.style["float"] = "left";
            element.style.cssFloat = "left";
            element.style.styleFloat = "left";
            element.style.padding = "2px";
            $3.setElementTouchActionNone(element);
            $3.setElementPointerEventsNone(element);
            this.element.appendChild(element);
            element.activePanel = false;
            this.panels.push(element);
          }
          loadPanels(this, this.scroll === "vertical" ? viewerSize.y : viewerSize.x, 0);
          this.setFocus(0);
        };
        $3.ReferenceStrip.prototype = {
          setFocus: function(page) {
            var element = this.element.querySelector("#" + this.element.id + "-" + page), viewerSize = $3.getElementSize(this.viewer.canvas), scrollWidth = Number(this.element.style.width.replace("px", "")), scrollHeight = Number(this.element.style.height.replace("px", "")), offsetLeft = -Number(this.element.style.marginLeft.replace("px", "")), offsetTop = -Number(this.element.style.marginTop.replace("px", "")), offset;
            if (this.currentSelected !== element) {
              if (this.currentSelected) {
                this.currentSelected.style.background = "#000";
              }
              this.currentSelected = element;
              this.currentSelected.style.background = "#999";
              if (this.scroll === "horizontal") {
                offset = Number(page) * (this.panelWidth + 3);
                if (offset > offsetLeft + viewerSize.x - this.panelWidth) {
                  offset = Math.min(offset, scrollWidth - viewerSize.x);
                  this.element.style.marginLeft = -offset + "px";
                  loadPanels(this, viewerSize.x, -offset);
                } else if (offset < offsetLeft) {
                  offset = Math.max(0, offset - viewerSize.x / 2);
                  this.element.style.marginLeft = -offset + "px";
                  loadPanels(this, viewerSize.x, -offset);
                }
              } else {
                offset = Number(page) * (this.panelHeight + 3);
                if (offset > offsetTop + viewerSize.y - this.panelHeight) {
                  offset = Math.min(offset, scrollHeight - viewerSize.y);
                  this.element.style.marginTop = -offset + "px";
                  loadPanels(this, viewerSize.y, -offset);
                } else if (offset < offsetTop) {
                  offset = Math.max(0, offset - viewerSize.y / 2);
                  this.element.style.marginTop = -offset + "px";
                  loadPanels(this, viewerSize.y, -offset);
                }
              }
              this.currentPage = page;
              onStripEnter.call(this, { eventSource: this.tracker });
            }
          },
          update: function() {
            if (THIS[this.id].animating) {
              $3.console.log("image reference strip update");
              return true;
            }
            return false;
          },
          destroy: function() {
            if (this.miniViewers) {
              for (var key in this.miniViewers) {
                this.miniViewers[key].destroy();
              }
            }
            this.tracker.destroy();
            if (this.element) {
              this.viewer.removeControl(this.element);
            }
          }
        };
        function onStripClick(event) {
          if (event.quick) {
            var page;
            if (this.scroll === "horizontal") {
              page = Math.floor(event.position.x / this.panelWidth);
            } else {
              page = Math.floor(event.position.y / this.panelHeight);
            }
            this.viewer.goToPage(page);
          }
          this.element.focus();
        }
        function onStripDrag(event) {
          this.dragging = true;
          if (this.element) {
            var offsetLeft = Number(this.element.style.marginLeft.replace("px", "")), offsetTop = Number(this.element.style.marginTop.replace("px", "")), scrollWidth = Number(this.element.style.width.replace("px", "")), scrollHeight = Number(this.element.style.height.replace("px", "")), viewerSize = $3.getElementSize(this.viewer.canvas);
            if (this.scroll === "horizontal") {
              if (-event.delta.x > 0) {
                if (offsetLeft > -(scrollWidth - viewerSize.x)) {
                  this.element.style.marginLeft = offsetLeft + event.delta.x * 2 + "px";
                  loadPanels(this, viewerSize.x, offsetLeft + event.delta.x * 2);
                }
              } else if (-event.delta.x < 0) {
                if (offsetLeft < 0) {
                  this.element.style.marginLeft = offsetLeft + event.delta.x * 2 + "px";
                  loadPanels(this, viewerSize.x, offsetLeft + event.delta.x * 2);
                }
              }
            } else {
              if (-event.delta.y > 0) {
                if (offsetTop > -(scrollHeight - viewerSize.y)) {
                  this.element.style.marginTop = offsetTop + event.delta.y * 2 + "px";
                  loadPanels(this, viewerSize.y, offsetTop + event.delta.y * 2);
                }
              } else if (-event.delta.y < 0) {
                if (offsetTop < 0) {
                  this.element.style.marginTop = offsetTop + event.delta.y * 2 + "px";
                  loadPanels(this, viewerSize.y, offsetTop + event.delta.y * 2);
                }
              }
            }
          }
        }
        function onStripScroll(event) {
          if (this.element) {
            var offsetLeft = Number(this.element.style.marginLeft.replace("px", "")), offsetTop = Number(this.element.style.marginTop.replace("px", "")), scrollWidth = Number(this.element.style.width.replace("px", "")), scrollHeight = Number(this.element.style.height.replace("px", "")), viewerSize = $3.getElementSize(this.viewer.canvas);
            if (this.scroll === "horizontal") {
              if (event.scroll > 0) {
                if (offsetLeft > -(scrollWidth - viewerSize.x)) {
                  this.element.style.marginLeft = offsetLeft - event.scroll * 60 + "px";
                  loadPanels(this, viewerSize.x, offsetLeft - event.scroll * 60);
                }
              } else if (event.scroll < 0) {
                if (offsetLeft < 0) {
                  this.element.style.marginLeft = offsetLeft - event.scroll * 60 + "px";
                  loadPanels(this, viewerSize.x, offsetLeft - event.scroll * 60);
                }
              }
            } else {
              if (event.scroll < 0) {
                if (offsetTop > viewerSize.y - scrollHeight) {
                  this.element.style.marginTop = offsetTop + event.scroll * 60 + "px";
                  loadPanels(this, viewerSize.y, offsetTop + event.scroll * 60);
                }
              } else if (event.scroll > 0) {
                if (offsetTop < 0) {
                  this.element.style.marginTop = offsetTop + event.scroll * 60 + "px";
                  loadPanels(this, viewerSize.y, offsetTop + event.scroll * 60);
                }
              }
            }
            event.preventDefault = true;
          }
        }
        function loadPanels(strip, viewerSize, scroll) {
          var panelSize, activePanelsStart, activePanelsEnd, miniViewer, i3, element;
          if (strip.scroll === "horizontal") {
            panelSize = strip.panelWidth;
          } else {
            panelSize = strip.panelHeight;
          }
          activePanelsStart = Math.ceil(viewerSize / panelSize) + 5;
          activePanelsEnd = Math.ceil((Math.abs(scroll) + viewerSize) / panelSize) + 1;
          activePanelsStart = activePanelsEnd - activePanelsStart;
          activePanelsStart = activePanelsStart < 0 ? 0 : activePanelsStart;
          for (i3 = activePanelsStart; i3 < activePanelsEnd && i3 < strip.panels.length; i3++) {
            element = strip.panels[i3];
            if (!element.activePanel) {
              var miniTileSource;
              var originalTileSource = strip.viewer.tileSources[i3];
              if (originalTileSource.referenceStripThumbnailUrl) {
                miniTileSource = {
                  type: "image",
                  url: originalTileSource.referenceStripThumbnailUrl
                };
              } else {
                miniTileSource = originalTileSource;
              }
              miniViewer = new $3.Viewer({
                id: element.id,
                tileSources: [miniTileSource],
                element,
                navigatorSizeRatio: strip.sizeRatio,
                showNavigator: false,
                mouseNavEnabled: false,
                showNavigationControl: false,
                showSequenceControl: false,
                immediateRender: true,
                blendTime: 0,
                animationTime: 0,
                loadTilesWithAjax: strip.viewer.loadTilesWithAjax,
                ajaxHeaders: strip.viewer.ajaxHeaders,
                useCanvas: strip.useCanvas
              });
              $3.setElementPointerEventsNone(miniViewer.canvas);
              $3.setElementPointerEventsNone(miniViewer.container);
              miniViewer.innerTracker.setTracking(false);
              miniViewer.outerTracker.setTracking(false);
              strip.miniViewers[element.id] = miniViewer;
              element.activePanel = true;
            }
          }
        }
        function onStripEnter(event) {
          var element = event.eventSource.element;
          if (this.scroll === "horizontal") {
            element.style.marginBottom = "0px";
          } else {
            element.style.marginLeft = "0px";
          }
        }
        function onStripLeave(event) {
          var element = event.eventSource.element;
          if (this.scroll === "horizontal") {
            element.style.marginBottom = "-" + $3.getElementSize(element).y / 2 + "px";
          } else {
            element.style.marginLeft = "-" + $3.getElementSize(element).x / 2 + "px";
          }
        }
        function onKeyDown(event) {
          if (!event.ctrl && !event.alt && !event.meta) {
            switch (event.keyCode) {
              case 38:
                onStripScroll.call(this, { eventSource: this.tracker, position: null, scroll: 1, shift: null });
                event.preventDefault = true;
                break;
              case 40:
                onStripScroll.call(this, { eventSource: this.tracker, position: null, scroll: -1, shift: null });
                event.preventDefault = true;
                break;
              case 37:
                onStripScroll.call(this, { eventSource: this.tracker, position: null, scroll: -1, shift: null });
                event.preventDefault = true;
                break;
              case 39:
                onStripScroll.call(this, { eventSource: this.tracker, position: null, scroll: 1, shift: null });
                event.preventDefault = true;
                break;
              default:
                event.preventDefault = false;
                break;
            }
          } else {
            event.preventDefault = false;
          }
        }
        function onKeyPress(event) {
          if (!event.ctrl && !event.alt && !event.meta) {
            switch (event.keyCode) {
              case 61:
                onStripScroll.call(this, { eventSource: this.tracker, position: null, scroll: 1, shift: null });
                event.preventDefault = true;
                break;
              case 45:
                onStripScroll.call(this, { eventSource: this.tracker, position: null, scroll: -1, shift: null });
                event.preventDefault = true;
                break;
              case 48:
              case 119:
              case 87:
                onStripScroll.call(this, { eventSource: this.tracker, position: null, scroll: 1, shift: null });
                event.preventDefault = true;
                break;
              case 115:
              case 83:
                onStripScroll.call(this, { eventSource: this.tracker, position: null, scroll: -1, shift: null });
                event.preventDefault = true;
                break;
              case 97:
                onStripScroll.call(this, { eventSource: this.tracker, position: null, scroll: -1, shift: null });
                event.preventDefault = true;
                break;
              case 100:
                onStripScroll.call(this, { eventSource: this.tracker, position: null, scroll: 1, shift: null });
                event.preventDefault = true;
                break;
              default:
                event.preventDefault = false;
                break;
            }
          } else {
            event.preventDefault = false;
          }
        }
      })(OpenSeadragon2);
      (function($3) {
        $3.DisplayRect = function(x4, y4, width, height, minLevel, maxLevel) {
          $3.Rect.apply(this, [x4, y4, width, height]);
          this.minLevel = minLevel;
          this.maxLevel = maxLevel;
        };
        $3.extend($3.DisplayRect.prototype, $3.Rect.prototype);
      })(OpenSeadragon2);
      (function($3) {
        $3.Spring = function(options) {
          var args = arguments;
          if (typeof options !== "object") {
            options = {
              initial: args.length && typeof args[0] === "number" ? args[0] : void 0,
              springStiffness: args.length > 1 ? args[1].springStiffness : 5,
              animationTime: args.length > 1 ? args[1].animationTime : 1.5
            };
          }
          $3.console.assert(typeof options.springStiffness === "number" && options.springStiffness !== 0, "[OpenSeadragon.Spring] options.springStiffness must be a non-zero number");
          $3.console.assert(typeof options.animationTime === "number" && options.animationTime >= 0, "[OpenSeadragon.Spring] options.animationTime must be a number greater than or equal to 0");
          if (options.exponential) {
            this._exponential = true;
            delete options.exponential;
          }
          $3.extend(true, this, options);
          this.current = {
            value: typeof this.initial === "number" ? this.initial : this._exponential ? 0 : 1,
            time: $3.now()
          };
          $3.console.assert(!this._exponential || this.current.value !== 0, "[OpenSeadragon.Spring] value must be non-zero for exponential springs");
          this.start = {
            value: this.current.value,
            time: this.current.time
          };
          this.target = {
            value: this.current.value,
            time: this.current.time
          };
          if (this._exponential) {
            this.start._logValue = Math.log(this.start.value);
            this.target._logValue = Math.log(this.target.value);
            this.current._logValue = Math.log(this.current.value);
          }
        };
        $3.Spring.prototype = {
          resetTo: function(target) {
            $3.console.assert(!this._exponential || target !== 0, "[OpenSeadragon.Spring.resetTo] target must be non-zero for exponential springs");
            this.start.value = this.target.value = this.current.value = target;
            this.start.time = this.target.time = this.current.time = $3.now();
            if (this._exponential) {
              this.start._logValue = Math.log(this.start.value);
              this.target._logValue = Math.log(this.target.value);
              this.current._logValue = Math.log(this.current.value);
            }
          },
          springTo: function(target) {
            $3.console.assert(!this._exponential || target !== 0, "[OpenSeadragon.Spring.springTo] target must be non-zero for exponential springs");
            this.start.value = this.current.value;
            this.start.time = this.current.time;
            this.target.value = target;
            this.target.time = this.start.time + 1e3 * this.animationTime;
            if (this._exponential) {
              this.start._logValue = Math.log(this.start.value);
              this.target._logValue = Math.log(this.target.value);
            }
          },
          shiftBy: function(delta) {
            this.start.value += delta;
            this.target.value += delta;
            if (this._exponential) {
              $3.console.assert(this.target.value !== 0 && this.start.value !== 0, "[OpenSeadragon.Spring.shiftBy] spring value must be non-zero for exponential springs");
              this.start._logValue = Math.log(this.start.value);
              this.target._logValue = Math.log(this.target.value);
            }
          },
          setExponential: function(value) {
            this._exponential = value;
            if (this._exponential) {
              $3.console.assert(this.current.value !== 0 && this.target.value !== 0 && this.start.value !== 0, "[OpenSeadragon.Spring.setExponential] spring value must be non-zero for exponential springs");
              this.start._logValue = Math.log(this.start.value);
              this.target._logValue = Math.log(this.target.value);
              this.current._logValue = Math.log(this.current.value);
            }
          },
          update: function() {
            this.current.time = $3.now();
            var startValue, targetValue;
            if (this._exponential) {
              startValue = this.start._logValue;
              targetValue = this.target._logValue;
            } else {
              startValue = this.start.value;
              targetValue = this.target.value;
            }
            var currentValue = this.current.time >= this.target.time ? targetValue : startValue + (targetValue - startValue) * transform(this.springStiffness, (this.current.time - this.start.time) / (this.target.time - this.start.time));
            var oldValue = this.current.value;
            if (this._exponential) {
              this.current.value = Math.exp(currentValue);
            } else {
              this.current.value = currentValue;
            }
            return oldValue !== this.current.value;
          },
          isAtTargetValue: function() {
            return this.current.value === this.target.value;
          }
        };
        function transform(stiffness, x4) {
          return (1 - Math.exp(stiffness * -x4)) / (1 - Math.exp(-stiffness));
        }
      })(OpenSeadragon2);
      (function($3) {
        function ImageJob(options) {
          $3.extend(true, this, {
            timeout: $3.DEFAULT_SETTINGS.timeout,
            jobId: null
          }, options);
          this.image = null;
        }
        ImageJob.prototype = {
          errorMsg: null,
          start: function() {
            var self2 = this;
            var selfAbort = this.abort;
            this.image = new Image();
            this.image.onload = function() {
              self2.finish(true);
            };
            this.image.onabort = this.image.onerror = function() {
              self2.errorMsg = "Image load aborted";
              self2.finish(false);
            };
            this.jobId = window.setTimeout(function() {
              self2.errorMsg = "Image load exceeded timeout (" + self2.timeout + " ms)";
              self2.finish(false);
            }, this.timeout);
            if (this.loadWithAjax) {
              this.request = $3.makeAjaxRequest({
                url: this.src,
                withCredentials: this.ajaxWithCredentials,
                headers: this.ajaxHeaders,
                responseType: "arraybuffer",
                success: function(request) {
                  var blb;
                  try {
                    blb = new window.Blob([request.response]);
                  } catch (e4) {
                    var BlobBuilder = window.BlobBuilder || window.WebKitBlobBuilder || window.MozBlobBuilder || window.MSBlobBuilder;
                    if (e4.name === "TypeError" && BlobBuilder) {
                      var bb = new BlobBuilder();
                      bb.append(request.response);
                      blb = bb.getBlob();
                    }
                  }
                  if (blb.size === 0) {
                    self2.errorMsg = "Empty image response.";
                    self2.finish(false);
                  }
                  var url = (window.URL || window.webkitURL).createObjectURL(blb);
                  self2.image.src = url;
                },
                error: function(request) {
                  self2.errorMsg = "Image load aborted - XHR error";
                  self2.finish(false);
                }
              });
              this.abort = function() {
                self2.request.abort();
                if (typeof selfAbort === "function") {
                  selfAbort();
                }
              };
            } else {
              if (this.crossOriginPolicy !== false) {
                this.image.crossOrigin = this.crossOriginPolicy;
              }
              this.image.src = this.src;
            }
          },
          finish: function(successful) {
            this.image.onload = this.image.onerror = this.image.onabort = null;
            if (!successful) {
              this.image = null;
            }
            if (this.jobId) {
              window.clearTimeout(this.jobId);
            }
            this.callback(this);
          }
        };
        $3.ImageLoader = function(options) {
          $3.extend(true, this, {
            jobLimit: $3.DEFAULT_SETTINGS.imageLoaderLimit,
            timeout: $3.DEFAULT_SETTINGS.timeout,
            jobQueue: [],
            jobsInProgress: 0
          }, options);
        };
        $3.ImageLoader.prototype = {
          addJob: function(options) {
            var _this = this, complete = function(job) {
              completeJob(_this, job, options.callback);
            }, jobOptions = {
              src: options.src,
              loadWithAjax: options.loadWithAjax,
              ajaxHeaders: options.loadWithAjax ? options.ajaxHeaders : null,
              crossOriginPolicy: options.crossOriginPolicy,
              ajaxWithCredentials: options.ajaxWithCredentials,
              callback: complete,
              abort: options.abort,
              timeout: this.timeout
            }, newJob = new ImageJob(jobOptions);
            if (!this.jobLimit || this.jobsInProgress < this.jobLimit) {
              newJob.start();
              this.jobsInProgress++;
            } else {
              this.jobQueue.push(newJob);
            }
          },
          clear: function() {
            for (var i3 = 0; i3 < this.jobQueue.length; i3++) {
              var job = this.jobQueue[i3];
              if (typeof job.abort === "function") {
                job.abort();
              }
            }
            this.jobQueue = [];
          }
        };
        function completeJob(loader, job, callback) {
          var nextJob;
          loader.jobsInProgress--;
          if ((!loader.jobLimit || loader.jobsInProgress < loader.jobLimit) && loader.jobQueue.length > 0) {
            nextJob = loader.jobQueue.shift();
            nextJob.start();
            loader.jobsInProgress++;
          }
          callback(job.image, job.errorMsg, job.request);
        }
      })(OpenSeadragon2);
      (function($3) {
        $3.Tile = function(level, x4, y4, bounds, exists, url, context2D, loadWithAjax, ajaxHeaders, sourceBounds) {
          this.level = level;
          this.x = x4;
          this.y = y4;
          this.bounds = bounds;
          this.sourceBounds = sourceBounds;
          this.exists = exists;
          this.url = url;
          this.context2D = context2D;
          this.loadWithAjax = loadWithAjax;
          this.ajaxHeaders = ajaxHeaders;
          if (this.ajaxHeaders) {
            this.cacheKey = this.url + "+" + JSON.stringify(this.ajaxHeaders);
          } else {
            this.cacheKey = this.url;
          }
          this.loaded = false;
          this.loading = false;
          this.element = null;
          this.imgElement = null;
          this.image = null;
          this.style = null;
          this.position = null;
          this.size = null;
          this.flipped = false;
          this.blendStart = null;
          this.opacity = null;
          this.squaredDistance = null;
          this.visibility = null;
          this.beingDrawn = false;
          this.lastTouchTime = 0;
          this.isRightMost = false;
          this.isBottomMost = false;
        };
        $3.Tile.prototype = {
          toString: function() {
            return this.level + "/" + this.x + "_" + this.y;
          },
          _hasTransparencyChannel: function() {
            return !!this.context2D || this.url.match(".png");
          },
          drawHTML: function(container2) {
            if (!this.cacheImageRecord) {
              $3.console.warn("[Tile.drawHTML] attempting to draw tile %s when it's not cached", this.toString());
              return;
            }
            if (!this.loaded) {
              $3.console.warn("Attempting to draw tile %s when it's not yet loaded.", this.toString());
              return;
            }
            if (!this.element) {
              this.element = $3.makeNeutralElement("div");
              this.imgElement = this.cacheImageRecord.getImage().cloneNode();
              this.imgElement.style.msInterpolationMode = "nearest-neighbor";
              this.imgElement.style.width = "100%";
              this.imgElement.style.height = "100%";
              this.style = this.element.style;
              this.style.position = "absolute";
            }
            if (this.element.parentNode !== container2) {
              container2.appendChild(this.element);
            }
            if (this.imgElement.parentNode !== this.element) {
              this.element.appendChild(this.imgElement);
            }
            this.style.top = this.position.y + "px";
            this.style.left = this.position.x + "px";
            this.style.height = this.size.y + "px";
            this.style.width = this.size.x + "px";
            if (this.flipped) {
              this.style.transform = "scaleX(-1)";
            }
            $3.setElementOpacity(this.element, this.opacity);
          },
          drawCanvas: function(context, drawingHandler, scale, translate) {
            var position = this.position.times($3.pixelDensityRatio), size = this.size.times($3.pixelDensityRatio), rendered;
            if (!this.context2D && !this.cacheImageRecord) {
              $3.console.warn("[Tile.drawCanvas] attempting to draw tile %s when it's not cached", this.toString());
              return;
            }
            rendered = this.context2D || this.cacheImageRecord.getRenderedContext();
            if (!this.loaded || !rendered) {
              $3.console.warn("Attempting to draw tile %s when it's not yet loaded.", this.toString());
              return;
            }
            context.save();
            context.globalAlpha = this.opacity;
            if (typeof scale === "number" && scale !== 1) {
              position = position.times(scale);
              size = size.times(scale);
            }
            if (translate instanceof $3.Point) {
              position = position.plus(translate);
            }
            if (context.globalAlpha === 1 && this._hasTransparencyChannel()) {
              context.clearRect(position.x, position.y, size.x, size.y);
            }
            drawingHandler({ context, tile: this, rendered });
            var sourceWidth, sourceHeight;
            if (this.sourceBounds) {
              sourceWidth = Math.min(this.sourceBounds.width, rendered.canvas.width);
              sourceHeight = Math.min(this.sourceBounds.height, rendered.canvas.height);
            } else {
              sourceWidth = rendered.canvas.width;
              sourceHeight = rendered.canvas.height;
            }
            context.translate(position.x + size.x / 2, 0);
            if (this.flipped) {
              context.scale(-1, 1);
            }
            context.drawImage(rendered.canvas, 0, 0, sourceWidth, sourceHeight, -size.x / 2, position.y, size.x, size.y);
            context.restore();
          },
          getScaleForEdgeSmoothing: function() {
            var context;
            if (this.cacheImageRecord) {
              context = this.cacheImageRecord.getRenderedContext();
            } else if (this.context2D) {
              context = this.context2D;
            } else {
              $3.console.warn("[Tile.drawCanvas] attempting to get tile scale %s when tile's not cached", this.toString());
              return 1;
            }
            return context.canvas.width / (this.size.x * $3.pixelDensityRatio);
          },
          getTranslationForEdgeSmoothing: function(scale, canvasSize, sketchCanvasSize) {
            var x4 = Math.max(1, Math.ceil((sketchCanvasSize.x - canvasSize.x) / 2));
            var y4 = Math.max(1, Math.ceil((sketchCanvasSize.y - canvasSize.y) / 2));
            return new $3.Point(x4, y4).minus(this.position.times($3.pixelDensityRatio).times(scale || 1).apply(function(x5) {
              return x5 % 1;
            }));
          },
          unload: function() {
            if (this.imgElement && this.imgElement.parentNode) {
              this.imgElement.parentNode.removeChild(this.imgElement);
            }
            if (this.element && this.element.parentNode) {
              this.element.parentNode.removeChild(this.element);
            }
            this.element = null;
            this.imgElement = null;
            this.loaded = false;
            this.loading = false;
          }
        };
      })(OpenSeadragon2);
      (function($3) {
        $3.OverlayPlacement = $3.Placement;
        $3.OverlayRotationMode = $3.freezeObject({
          NO_ROTATION: 1,
          EXACT: 2,
          BOUNDING_BOX: 3
        });
        $3.Overlay = function(element, location2, placement) {
          var options;
          if ($3.isPlainObject(element)) {
            options = element;
          } else {
            options = {
              element,
              location: location2,
              placement
            };
          }
          this.element = options.element;
          this.style = options.element.style;
          this._init(options);
        };
        $3.Overlay.prototype = {
          _init: function(options) {
            this.location = options.location;
            this.placement = options.placement === void 0 ? $3.Placement.TOP_LEFT : options.placement;
            this.onDraw = options.onDraw;
            this.checkResize = options.checkResize === void 0 ? true : options.checkResize;
            this.width = options.width === void 0 ? null : options.width;
            this.height = options.height === void 0 ? null : options.height;
            this.rotationMode = options.rotationMode || $3.OverlayRotationMode.EXACT;
            if (this.location instanceof $3.Rect) {
              this.width = this.location.width;
              this.height = this.location.height;
              this.location = this.location.getTopLeft();
              this.placement = $3.Placement.TOP_LEFT;
            }
            this.scales = this.width !== null && this.height !== null;
            this.bounds = new $3.Rect(this.location.x, this.location.y, this.width, this.height);
            this.position = this.location;
          },
          adjust: function(position, size) {
            var properties = $3.Placement.properties[this.placement];
            if (!properties) {
              return;
            }
            if (properties.isHorizontallyCentered) {
              position.x -= size.x / 2;
            } else if (properties.isRight) {
              position.x -= size.x;
            }
            if (properties.isVerticallyCentered) {
              position.y -= size.y / 2;
            } else if (properties.isBottom) {
              position.y -= size.y;
            }
          },
          destroy: function() {
            var element = this.element;
            var style = this.style;
            if (element.parentNode) {
              element.parentNode.removeChild(element);
              if (element.prevElementParent) {
                style.display = "none";
                document.body.appendChild(element);
              }
            }
            this.onDraw = null;
            style.top = "";
            style.left = "";
            style.position = "";
            if (this.width !== null) {
              style.width = "";
            }
            if (this.height !== null) {
              style.height = "";
            }
            var transformOriginProp = $3.getCssPropertyWithVendorPrefix("transformOrigin");
            var transformProp = $3.getCssPropertyWithVendorPrefix("transform");
            if (transformOriginProp && transformProp) {
              style[transformOriginProp] = "";
              style[transformProp] = "";
            }
          },
          drawHTML: function(container2, viewport) {
            var element = this.element;
            if (element.parentNode !== container2) {
              element.prevElementParent = element.parentNode;
              element.prevNextSibling = element.nextSibling;
              container2.appendChild(element);
              this.style.position = "absolute";
              this.size = $3.getElementSize(element);
            }
            var positionAndSize = this._getOverlayPositionAndSize(viewport);
            var position = positionAndSize.position;
            var size = this.size = positionAndSize.size;
            var rotate = positionAndSize.rotate;
            if (this.onDraw) {
              this.onDraw(position, size, this.element);
            } else {
              var style = this.style;
              style.left = position.x + "px";
              style.top = position.y + "px";
              if (this.width !== null) {
                style.width = size.x + "px";
              }
              if (this.height !== null) {
                style.height = size.y + "px";
              }
              var transformOriginProp = $3.getCssPropertyWithVendorPrefix("transformOrigin");
              var transformProp = $3.getCssPropertyWithVendorPrefix("transform");
              if (transformOriginProp && transformProp) {
                if (rotate) {
                  style[transformOriginProp] = this._getTransformOrigin();
                  style[transformProp] = "rotate(" + rotate + "deg)";
                } else {
                  style[transformOriginProp] = "";
                  style[transformProp] = "";
                }
              }
              style.display = "block";
            }
          },
          _getOverlayPositionAndSize: function(viewport) {
            var position = viewport.pixelFromPoint(this.location, true);
            var size = this._getSizeInPixels(viewport);
            this.adjust(position, size);
            var rotate = 0;
            if (viewport.degrees && this.rotationMode !== $3.OverlayRotationMode.NO_ROTATION) {
              if (this.rotationMode === $3.OverlayRotationMode.BOUNDING_BOX && this.width !== null && this.height !== null) {
                var rect = new $3.Rect(position.x, position.y, size.x, size.y);
                var boundingBox = this._getBoundingBox(rect, viewport.degrees);
                position = boundingBox.getTopLeft();
                size = boundingBox.getSize();
              } else {
                rotate = viewport.degrees;
              }
            }
            return {
              position,
              size,
              rotate
            };
          },
          _getSizeInPixels: function(viewport) {
            var width = this.size.x;
            var height = this.size.y;
            if (this.width !== null || this.height !== null) {
              var scaledSize = viewport.deltaPixelsFromPointsNoRotate(new $3.Point(this.width || 0, this.height || 0), true);
              if (this.width !== null) {
                width = scaledSize.x;
              }
              if (this.height !== null) {
                height = scaledSize.y;
              }
            }
            if (this.checkResize && (this.width === null || this.height === null)) {
              var eltSize = this.size = $3.getElementSize(this.element);
              if (this.width === null) {
                width = eltSize.x;
              }
              if (this.height === null) {
                height = eltSize.y;
              }
            }
            return new $3.Point(width, height);
          },
          _getBoundingBox: function(rect, degrees) {
            var refPoint = this._getPlacementPoint(rect);
            return rect.rotate(degrees, refPoint).getBoundingBox();
          },
          _getPlacementPoint: function(rect) {
            var result = new $3.Point(rect.x, rect.y);
            var properties = $3.Placement.properties[this.placement];
            if (properties) {
              if (properties.isHorizontallyCentered) {
                result.x += rect.width / 2;
              } else if (properties.isRight) {
                result.x += rect.width;
              }
              if (properties.isVerticallyCentered) {
                result.y += rect.height / 2;
              } else if (properties.isBottom) {
                result.y += rect.height;
              }
            }
            return result;
          },
          _getTransformOrigin: function() {
            var result = "";
            var properties = $3.Placement.properties[this.placement];
            if (!properties) {
              return result;
            }
            if (properties.isLeft) {
              result = "left";
            } else if (properties.isRight) {
              result = "right";
            }
            if (properties.isTop) {
              result += " top";
            } else if (properties.isBottom) {
              result += " bottom";
            }
            return result;
          },
          update: function(location2, placement) {
            var options = $3.isPlainObject(location2) ? location2 : {
              location: location2,
              placement
            };
            this._init({
              location: options.location || this.location,
              placement: options.placement !== void 0 ? options.placement : this.placement,
              onDraw: options.onDraw || this.onDraw,
              checkResize: options.checkResize || this.checkResize,
              width: options.width !== void 0 ? options.width : this.width,
              height: options.height !== void 0 ? options.height : this.height,
              rotationMode: options.rotationMode || this.rotationMode
            });
          },
          getBounds: function(viewport) {
            $3.console.assert(viewport, "A viewport must now be passed to Overlay.getBounds.");
            var width = this.width;
            var height = this.height;
            if (width === null || height === null) {
              var size = viewport.deltaPointsFromPixelsNoRotate(this.size, true);
              if (width === null) {
                width = size.x;
              }
              if (height === null) {
                height = size.y;
              }
            }
            var location2 = this.location.clone();
            this.adjust(location2, new $3.Point(width, height));
            return this._adjustBoundsForRotation(viewport, new $3.Rect(location2.x, location2.y, width, height));
          },
          _adjustBoundsForRotation: function(viewport, bounds) {
            if (!viewport || viewport.degrees === 0 || this.rotationMode === $3.OverlayRotationMode.EXACT) {
              return bounds;
            }
            if (this.rotationMode === $3.OverlayRotationMode.BOUNDING_BOX) {
              if (this.width === null || this.height === null) {
                return bounds;
              }
              var positionAndSize = this._getOverlayPositionAndSize(viewport);
              return viewport.viewerElementToViewportRectangle(new $3.Rect(positionAndSize.position.x, positionAndSize.position.y, positionAndSize.size.x, positionAndSize.size.y));
            }
            return bounds.rotate(-viewport.degrees, this._getPlacementPoint(bounds));
          }
        };
      })(OpenSeadragon2);
      (function($3) {
        $3.Drawer = function(options) {
          $3.console.assert(options.viewer, "[Drawer] options.viewer is required");
          var args = arguments;
          if (!$3.isPlainObject(options)) {
            options = {
              source: args[0],
              viewport: args[1],
              element: args[2]
            };
          }
          $3.console.assert(options.viewport, "[Drawer] options.viewport is required");
          $3.console.assert(options.element, "[Drawer] options.element is required");
          if (options.source) {
            $3.console.error("[Drawer] options.source is no longer accepted; use TiledImage instead");
          }
          this.viewer = options.viewer;
          this.viewport = options.viewport;
          this.debugGridColor = typeof options.debugGridColor === "string" ? [options.debugGridColor] : options.debugGridColor || $3.DEFAULT_SETTINGS.debugGridColor;
          if (options.opacity) {
            $3.console.error("[Drawer] options.opacity is no longer accepted; set the opacity on the TiledImage instead");
          }
          this.useCanvas = $3.supportsCanvas && (this.viewer ? this.viewer.useCanvas : true);
          this.container = $3.getElement(options.element);
          this.canvas = $3.makeNeutralElement(this.useCanvas ? "canvas" : "div");
          this.context = this.useCanvas ? this.canvas.getContext("2d") : null;
          this.sketchCanvas = null;
          this.sketchContext = null;
          this.element = this.container;
          this.container.dir = "ltr";
          if (this.useCanvas) {
            var viewportSize = this._calculateCanvasSize();
            this.canvas.width = viewportSize.x;
            this.canvas.height = viewportSize.y;
          }
          this.canvas.style.width = "100%";
          this.canvas.style.height = "100%";
          this.canvas.style.position = "absolute";
          $3.setElementOpacity(this.canvas, this.opacity, true);
          $3.setElementPointerEventsNone(this.canvas);
          $3.setElementTouchActionNone(this.canvas);
          this.container.style.textAlign = "left";
          this.container.appendChild(this.canvas);
          this._imageSmoothingEnabled = true;
        };
        $3.Drawer.prototype = {
          addOverlay: function(element, location2, placement, onDraw) {
            $3.console.error("drawer.addOverlay is deprecated. Use viewer.addOverlay instead.");
            this.viewer.addOverlay(element, location2, placement, onDraw);
            return this;
          },
          updateOverlay: function(element, location2, placement) {
            $3.console.error("drawer.updateOverlay is deprecated. Use viewer.updateOverlay instead.");
            this.viewer.updateOverlay(element, location2, placement);
            return this;
          },
          removeOverlay: function(element) {
            $3.console.error("drawer.removeOverlay is deprecated. Use viewer.removeOverlay instead.");
            this.viewer.removeOverlay(element);
            return this;
          },
          clearOverlays: function() {
            $3.console.error("drawer.clearOverlays is deprecated. Use viewer.clearOverlays instead.");
            this.viewer.clearOverlays();
            return this;
          },
          viewportCoordToDrawerCoord: function(point) {
            var vpPoint = this.viewport.pixelFromPointNoRotate(point, true);
            return new $3.Point(vpPoint.x * $3.pixelDensityRatio, vpPoint.y * $3.pixelDensityRatio);
          },
          clipWithPolygons: function(polygons, useSketch) {
            if (!this.useCanvas) {
              return;
            }
            var context = this._getContext(useSketch);
            context.beginPath();
            polygons.forEach(function(polygon) {
              polygon.forEach(function(coord, i3) {
                context[i3 === 0 ? "moveTo" : "lineTo"](coord.x, coord.y);
              });
            });
            context.clip();
          },
          setOpacity: function(opacity) {
            $3.console.error("drawer.setOpacity is deprecated. Use tiledImage.setOpacity instead.");
            var world = this.viewer.world;
            for (var i3 = 0; i3 < world.getItemCount(); i3++) {
              world.getItemAt(i3).setOpacity(opacity);
            }
            return this;
          },
          getOpacity: function() {
            $3.console.error("drawer.getOpacity is deprecated. Use tiledImage.getOpacity instead.");
            var world = this.viewer.world;
            var maxOpacity = 0;
            for (var i3 = 0; i3 < world.getItemCount(); i3++) {
              var opacity = world.getItemAt(i3).getOpacity();
              if (opacity > maxOpacity) {
                maxOpacity = opacity;
              }
            }
            return maxOpacity;
          },
          needsUpdate: function() {
            $3.console.error("[Drawer.needsUpdate] this function is deprecated. Use World.needsDraw instead.");
            return this.viewer.world.needsDraw();
          },
          numTilesLoaded: function() {
            $3.console.error("[Drawer.numTilesLoaded] this function is deprecated. Use TileCache.numTilesLoaded instead.");
            return this.viewer.tileCache.numTilesLoaded();
          },
          reset: function() {
            $3.console.error("[Drawer.reset] this function is deprecated. Use World.resetItems instead.");
            this.viewer.world.resetItems();
            return this;
          },
          update: function() {
            $3.console.error("[Drawer.update] this function is deprecated. Use Drawer.clear and World.draw instead.");
            this.clear();
            this.viewer.world.draw();
            return this;
          },
          canRotate: function() {
            return this.useCanvas;
          },
          destroy: function() {
            this.canvas.width = 1;
            this.canvas.height = 1;
            this.sketchCanvas = null;
            this.sketchContext = null;
          },
          clear: function() {
            this.canvas.innerHTML = "";
            if (this.useCanvas) {
              var viewportSize = this._calculateCanvasSize();
              if (this.canvas.width !== viewportSize.x || this.canvas.height !== viewportSize.y) {
                this.canvas.width = viewportSize.x;
                this.canvas.height = viewportSize.y;
                this._updateImageSmoothingEnabled(this.context);
                if (this.sketchCanvas !== null) {
                  var sketchCanvasSize = this._calculateSketchCanvasSize();
                  this.sketchCanvas.width = sketchCanvasSize.x;
                  this.sketchCanvas.height = sketchCanvasSize.y;
                  this._updateImageSmoothingEnabled(this.sketchContext);
                }
              }
              this._clear();
            }
          },
          _clear: function(useSketch, bounds) {
            if (!this.useCanvas) {
              return;
            }
            var context = this._getContext(useSketch);
            if (bounds) {
              context.clearRect(bounds.x, bounds.y, bounds.width, bounds.height);
            } else {
              var canvas = context.canvas;
              context.clearRect(0, 0, canvas.width, canvas.height);
            }
          },
          viewportToDrawerRectangle: function(rectangle) {
            var topLeft = this.viewport.pixelFromPointNoRotate(rectangle.getTopLeft(), true);
            var size = this.viewport.deltaPixelsFromPointsNoRotate(rectangle.getSize(), true);
            return new $3.Rect(topLeft.x * $3.pixelDensityRatio, topLeft.y * $3.pixelDensityRatio, size.x * $3.pixelDensityRatio, size.y * $3.pixelDensityRatio);
          },
          drawTile: function(tile, drawingHandler, useSketch, scale, translate) {
            $3.console.assert(tile, "[Drawer.drawTile] tile is required");
            $3.console.assert(drawingHandler, "[Drawer.drawTile] drawingHandler is required");
            if (this.useCanvas) {
              var context = this._getContext(useSketch);
              scale = scale || 1;
              tile.drawCanvas(context, drawingHandler, scale, translate);
            } else {
              tile.drawHTML(this.canvas);
            }
          },
          _getContext: function(useSketch) {
            var context = this.context;
            if (useSketch) {
              if (this.sketchCanvas === null) {
                this.sketchCanvas = document.createElement("canvas");
                var sketchCanvasSize = this._calculateSketchCanvasSize();
                this.sketchCanvas.width = sketchCanvasSize.x;
                this.sketchCanvas.height = sketchCanvasSize.y;
                this.sketchContext = this.sketchCanvas.getContext("2d");
                if (this.viewport.getRotation() === 0) {
                  var self2 = this;
                  this.viewer.addHandler("rotate", function resizeSketchCanvas() {
                    if (self2.viewport.getRotation() === 0) {
                      return;
                    }
                    self2.viewer.removeHandler("rotate", resizeSketchCanvas);
                    var sketchCanvasSize2 = self2._calculateSketchCanvasSize();
                    self2.sketchCanvas.width = sketchCanvasSize2.x;
                    self2.sketchCanvas.height = sketchCanvasSize2.y;
                  });
                }
                this._updateImageSmoothingEnabled(this.sketchContext);
              }
              context = this.sketchContext;
            }
            return context;
          },
          saveContext: function(useSketch) {
            if (!this.useCanvas) {
              return;
            }
            this._getContext(useSketch).save();
          },
          restoreContext: function(useSketch) {
            if (!this.useCanvas) {
              return;
            }
            this._getContext(useSketch).restore();
          },
          setClip: function(rect, useSketch) {
            if (!this.useCanvas) {
              return;
            }
            var context = this._getContext(useSketch);
            context.beginPath();
            context.rect(rect.x, rect.y, rect.width, rect.height);
            context.clip();
          },
          drawRectangle: function(rect, fillStyle, useSketch) {
            if (!this.useCanvas) {
              return;
            }
            var context = this._getContext(useSketch);
            context.save();
            context.fillStyle = fillStyle;
            context.fillRect(rect.x, rect.y, rect.width, rect.height);
            context.restore();
          },
          blendSketch: function(opacity, scale, translate, compositeOperation) {
            var options = opacity;
            if (!$3.isPlainObject(options)) {
              options = {
                opacity,
                scale,
                translate,
                compositeOperation
              };
            }
            if (!this.useCanvas || !this.sketchCanvas) {
              return;
            }
            opacity = options.opacity;
            compositeOperation = options.compositeOperation;
            var bounds = options.bounds;
            this.context.save();
            this.context.globalAlpha = opacity;
            if (compositeOperation) {
              this.context.globalCompositeOperation = compositeOperation;
            }
            if (bounds) {
              if (bounds.x < 0) {
                bounds.width += bounds.x;
                bounds.x = 0;
              }
              if (bounds.x + bounds.width > this.canvas.width) {
                bounds.width = this.canvas.width - bounds.x;
              }
              if (bounds.y < 0) {
                bounds.height += bounds.y;
                bounds.y = 0;
              }
              if (bounds.y + bounds.height > this.canvas.height) {
                bounds.height = this.canvas.height - bounds.y;
              }
              this.context.drawImage(this.sketchCanvas, bounds.x, bounds.y, bounds.width, bounds.height, bounds.x, bounds.y, bounds.width, bounds.height);
            } else {
              scale = options.scale || 1;
              translate = options.translate;
              var position = translate instanceof $3.Point ? translate : new $3.Point(0, 0);
              var widthExt = 0;
              var heightExt = 0;
              if (translate) {
                var widthDiff = this.sketchCanvas.width - this.canvas.width;
                var heightDiff = this.sketchCanvas.height - this.canvas.height;
                widthExt = Math.round(widthDiff / 2);
                heightExt = Math.round(heightDiff / 2);
              }
              this.context.drawImage(this.sketchCanvas, position.x - widthExt * scale, position.y - heightExt * scale, (this.canvas.width + 2 * widthExt) * scale, (this.canvas.height + 2 * heightExt) * scale, -widthExt, -heightExt, this.canvas.width + 2 * widthExt, this.canvas.height + 2 * heightExt);
            }
            this.context.restore();
          },
          drawDebugInfo: function(tile, count, i3, tiledImage) {
            if (!this.useCanvas) {
              return;
            }
            var colorIndex = this.viewer.world.getIndexOfItem(tiledImage) % this.debugGridColor.length;
            var context = this.context;
            context.save();
            context.lineWidth = 2 * $3.pixelDensityRatio;
            context.font = "small-caps bold " + 13 * $3.pixelDensityRatio + "px arial";
            context.strokeStyle = this.debugGridColor[colorIndex];
            context.fillStyle = this.debugGridColor[colorIndex];
            if (this.viewport.degrees !== 0) {
              this._offsetForRotation({ degrees: this.viewport.degrees });
            }
            if (tiledImage.getRotation(true) % 360 !== 0) {
              this._offsetForRotation({
                degrees: tiledImage.getRotation(true),
                point: tiledImage.viewport.pixelFromPointNoRotate(tiledImage._getRotationPoint(true), true)
              });
            }
            if (tiledImage.viewport.degrees === 0 && tiledImage.getRotation(true) % 360 === 0) {
              if (tiledImage._drawer.viewer.viewport.getFlip()) {
                tiledImage._drawer._flip();
              }
            }
            context.strokeRect(tile.position.x * $3.pixelDensityRatio, tile.position.y * $3.pixelDensityRatio, tile.size.x * $3.pixelDensityRatio, tile.size.y * $3.pixelDensityRatio);
            var tileCenterX = (tile.position.x + tile.size.x / 2) * $3.pixelDensityRatio;
            var tileCenterY = (tile.position.y + tile.size.y / 2) * $3.pixelDensityRatio;
            context.translate(tileCenterX, tileCenterY);
            context.rotate(Math.PI / 180 * -this.viewport.degrees);
            context.translate(-tileCenterX, -tileCenterY);
            if (tile.x === 0 && tile.y === 0) {
              context.fillText("Zoom: " + this.viewport.getZoom(), tile.position.x * $3.pixelDensityRatio, (tile.position.y - 30) * $3.pixelDensityRatio);
              context.fillText("Pan: " + this.viewport.getBounds().toString(), tile.position.x * $3.pixelDensityRatio, (tile.position.y - 20) * $3.pixelDensityRatio);
            }
            context.fillText("Level: " + tile.level, (tile.position.x + 10) * $3.pixelDensityRatio, (tile.position.y + 20) * $3.pixelDensityRatio);
            context.fillText("Column: " + tile.x, (tile.position.x + 10) * $3.pixelDensityRatio, (tile.position.y + 30) * $3.pixelDensityRatio);
            context.fillText("Row: " + tile.y, (tile.position.x + 10) * $3.pixelDensityRatio, (tile.position.y + 40) * $3.pixelDensityRatio);
            context.fillText("Order: " + i3 + " of " + count, (tile.position.x + 10) * $3.pixelDensityRatio, (tile.position.y + 50) * $3.pixelDensityRatio);
            context.fillText("Size: " + tile.size.toString(), (tile.position.x + 10) * $3.pixelDensityRatio, (tile.position.y + 60) * $3.pixelDensityRatio);
            context.fillText("Position: " + tile.position.toString(), (tile.position.x + 10) * $3.pixelDensityRatio, (tile.position.y + 70) * $3.pixelDensityRatio);
            if (this.viewport.degrees !== 0) {
              this._restoreRotationChanges();
            }
            if (tiledImage.getRotation(true) % 360 !== 0) {
              this._restoreRotationChanges();
            }
            if (tiledImage.viewport.degrees === 0 && tiledImage.getRotation(true) % 360 === 0) {
              if (tiledImage._drawer.viewer.viewport.getFlip()) {
                tiledImage._drawer._flip();
              }
            }
            context.restore();
          },
          debugRect: function(rect) {
            if (this.useCanvas) {
              var context = this.context;
              context.save();
              context.lineWidth = 2 * $3.pixelDensityRatio;
              context.strokeStyle = this.debugGridColor[0];
              context.fillStyle = this.debugGridColor[0];
              context.strokeRect(rect.x * $3.pixelDensityRatio, rect.y * $3.pixelDensityRatio, rect.width * $3.pixelDensityRatio, rect.height * $3.pixelDensityRatio);
              context.restore();
            }
          },
          setImageSmoothingEnabled: function(imageSmoothingEnabled) {
            if (this.useCanvas) {
              this._imageSmoothingEnabled = imageSmoothingEnabled;
              this._updateImageSmoothingEnabled(this.context);
              this.viewer.forceRedraw();
            }
          },
          _updateImageSmoothingEnabled: function(context) {
            context.msImageSmoothingEnabled = this._imageSmoothingEnabled;
            context.imageSmoothingEnabled = this._imageSmoothingEnabled;
          },
          getCanvasSize: function(sketch) {
            var canvas = this._getContext(sketch).canvas;
            return new $3.Point(canvas.width, canvas.height);
          },
          getCanvasCenter: function() {
            return new $3.Point(this.canvas.width / 2, this.canvas.height / 2);
          },
          _offsetForRotation: function(options) {
            var point = options.point ? options.point.times($3.pixelDensityRatio) : this.getCanvasCenter();
            var context = this._getContext(options.useSketch);
            context.save();
            context.translate(point.x, point.y);
            if (this.viewer.viewport.flipped) {
              context.rotate(Math.PI / 180 * -options.degrees);
              context.scale(-1, 1);
            } else {
              context.rotate(Math.PI / 180 * options.degrees);
            }
            context.translate(-point.x, -point.y);
          },
          _flip: function(options) {
            options = options || {};
            var point = options.point ? options.point.times($3.pixelDensityRatio) : this.getCanvasCenter();
            var context = this._getContext(options.useSketch);
            context.translate(point.x, 0);
            context.scale(-1, 1);
            context.translate(-point.x, 0);
          },
          _restoreRotationChanges: function(useSketch) {
            var context = this._getContext(useSketch);
            context.restore();
          },
          _calculateCanvasSize: function() {
            var pixelDensityRatio = $3.pixelDensityRatio;
            var viewportSize = this.viewport.getContainerSize();
            return {
              x: Math.round(viewportSize.x * pixelDensityRatio),
              y: Math.round(viewportSize.y * pixelDensityRatio)
            };
          },
          _calculateSketchCanvasSize: function() {
            var canvasSize = this._calculateCanvasSize();
            if (this.viewport.getRotation() === 0) {
              return canvasSize;
            }
            var sketchCanvasSize = Math.ceil(Math.sqrt(canvasSize.x * canvasSize.x + canvasSize.y * canvasSize.y));
            return {
              x: sketchCanvasSize,
              y: sketchCanvasSize
            };
          }
        };
      })(OpenSeadragon2);
      (function($3) {
        $3.Viewport = function(options) {
          var args = arguments;
          if (args.length && args[0] instanceof $3.Point) {
            options = {
              containerSize: args[0],
              contentSize: args[1],
              config: args[2]
            };
          }
          if (options.config) {
            $3.extend(true, options, options.config);
            delete options.config;
          }
          this._margins = $3.extend({
            left: 0,
            top: 0,
            right: 0,
            bottom: 0
          }, options.margins || {});
          delete options.margins;
          $3.extend(true, this, {
            containerSize: null,
            contentSize: null,
            zoomPoint: null,
            viewer: null,
            springStiffness: $3.DEFAULT_SETTINGS.springStiffness,
            animationTime: $3.DEFAULT_SETTINGS.animationTime,
            minZoomImageRatio: $3.DEFAULT_SETTINGS.minZoomImageRatio,
            maxZoomPixelRatio: $3.DEFAULT_SETTINGS.maxZoomPixelRatio,
            visibilityRatio: $3.DEFAULT_SETTINGS.visibilityRatio,
            wrapHorizontal: $3.DEFAULT_SETTINGS.wrapHorizontal,
            wrapVertical: $3.DEFAULT_SETTINGS.wrapVertical,
            defaultZoomLevel: $3.DEFAULT_SETTINGS.defaultZoomLevel,
            minZoomLevel: $3.DEFAULT_SETTINGS.minZoomLevel,
            maxZoomLevel: $3.DEFAULT_SETTINGS.maxZoomLevel,
            degrees: $3.DEFAULT_SETTINGS.degrees,
            flipped: $3.DEFAULT_SETTINGS.flipped,
            homeFillsViewer: $3.DEFAULT_SETTINGS.homeFillsViewer
          }, options);
          this._updateContainerInnerSize();
          this.centerSpringX = new $3.Spring({
            initial: 0,
            springStiffness: this.springStiffness,
            animationTime: this.animationTime
          });
          this.centerSpringY = new $3.Spring({
            initial: 0,
            springStiffness: this.springStiffness,
            animationTime: this.animationTime
          });
          this.zoomSpring = new $3.Spring({
            exponential: true,
            initial: 1,
            springStiffness: this.springStiffness,
            animationTime: this.animationTime
          });
          this._oldCenterX = this.centerSpringX.current.value;
          this._oldCenterY = this.centerSpringY.current.value;
          this._oldZoom = this.zoomSpring.current.value;
          this._setContentBounds(new $3.Rect(0, 0, 1, 1), 1);
          this.goHome(true);
          this.update();
        };
        $3.Viewport.prototype = {
          resetContentSize: function(contentSize) {
            $3.console.assert(contentSize, "[Viewport.resetContentSize] contentSize is required");
            $3.console.assert(contentSize instanceof $3.Point, "[Viewport.resetContentSize] contentSize must be an OpenSeadragon.Point");
            $3.console.assert(contentSize.x > 0, "[Viewport.resetContentSize] contentSize.x must be greater than 0");
            $3.console.assert(contentSize.y > 0, "[Viewport.resetContentSize] contentSize.y must be greater than 0");
            this._setContentBounds(new $3.Rect(0, 0, 1, contentSize.y / contentSize.x), contentSize.x);
            return this;
          },
          setHomeBounds: function(bounds, contentFactor) {
            $3.console.error("[Viewport.setHomeBounds] this function is deprecated; The content bounds should not be set manually.");
            this._setContentBounds(bounds, contentFactor);
          },
          _setContentBounds: function(bounds, contentFactor) {
            $3.console.assert(bounds, "[Viewport._setContentBounds] bounds is required");
            $3.console.assert(bounds instanceof $3.Rect, "[Viewport._setContentBounds] bounds must be an OpenSeadragon.Rect");
            $3.console.assert(bounds.width > 0, "[Viewport._setContentBounds] bounds.width must be greater than 0");
            $3.console.assert(bounds.height > 0, "[Viewport._setContentBounds] bounds.height must be greater than 0");
            this._contentBoundsNoRotate = bounds.clone();
            this._contentSizeNoRotate = this._contentBoundsNoRotate.getSize().times(contentFactor);
            this._contentBounds = bounds.rotate(this.degrees).getBoundingBox();
            this._contentSize = this._contentBounds.getSize().times(contentFactor);
            this._contentAspectRatio = this._contentSize.x / this._contentSize.y;
            if (this.viewer) {
              this.viewer.raiseEvent("reset-size", {
                contentSize: this._contentSizeNoRotate.clone(),
                contentFactor,
                homeBounds: this._contentBoundsNoRotate.clone(),
                contentBounds: this._contentBounds.clone()
              });
            }
          },
          getHomeZoom: function() {
            if (this.defaultZoomLevel) {
              return this.defaultZoomLevel;
            }
            var aspectFactor = this._contentAspectRatio / this.getAspectRatio();
            var output;
            if (this.homeFillsViewer) {
              output = aspectFactor >= 1 ? aspectFactor : 1;
            } else {
              output = aspectFactor >= 1 ? 1 : aspectFactor;
            }
            return output / this._contentBounds.width;
          },
          getHomeBounds: function() {
            return this.getHomeBoundsNoRotate().rotate(-this.getRotation());
          },
          getHomeBoundsNoRotate: function() {
            var center = this._contentBounds.getCenter();
            var width = 1 / this.getHomeZoom();
            var height = width / this.getAspectRatio();
            return new $3.Rect(center.x - width / 2, center.y - height / 2, width, height);
          },
          goHome: function(immediately) {
            if (this.viewer) {
              this.viewer.raiseEvent("home", {
                immediately
              });
            }
            return this.fitBounds(this.getHomeBounds(), immediately);
          },
          getMinZoom: function() {
            var homeZoom = this.getHomeZoom(), zoom = this.minZoomLevel ? this.minZoomLevel : this.minZoomImageRatio * homeZoom;
            return zoom;
          },
          getMaxZoom: function() {
            var zoom = this.maxZoomLevel;
            if (!zoom) {
              zoom = this._contentSize.x * this.maxZoomPixelRatio / this._containerInnerSize.x;
              zoom /= this._contentBounds.width;
            }
            return Math.max(zoom, this.getHomeZoom());
          },
          getAspectRatio: function() {
            return this._containerInnerSize.x / this._containerInnerSize.y;
          },
          getContainerSize: function() {
            return new $3.Point(this.containerSize.x, this.containerSize.y);
          },
          getMargins: function() {
            return $3.extend({}, this._margins);
          },
          setMargins: function(margins) {
            $3.console.assert($3.type(margins) === "object", "[Viewport.setMargins] margins must be an object");
            this._margins = $3.extend({
              left: 0,
              top: 0,
              right: 0,
              bottom: 0
            }, margins);
            this._updateContainerInnerSize();
            if (this.viewer) {
              this.viewer.forceRedraw();
            }
          },
          getBounds: function(current) {
            return this.getBoundsNoRotate(current).rotate(-this.getRotation());
          },
          getBoundsNoRotate: function(current) {
            var center = this.getCenter(current);
            var width = 1 / this.getZoom(current);
            var height = width / this.getAspectRatio();
            return new $3.Rect(center.x - width / 2, center.y - height / 2, width, height);
          },
          getBoundsWithMargins: function(current) {
            return this.getBoundsNoRotateWithMargins(current).rotate(-this.getRotation(), this.getCenter(current));
          },
          getBoundsNoRotateWithMargins: function(current) {
            var bounds = this.getBoundsNoRotate(current);
            var factor = this._containerInnerSize.x * this.getZoom(current);
            bounds.x -= this._margins.left / factor;
            bounds.y -= this._margins.top / factor;
            bounds.width += (this._margins.left + this._margins.right) / factor;
            bounds.height += (this._margins.top + this._margins.bottom) / factor;
            return bounds;
          },
          getCenter: function(current) {
            var centerCurrent = new $3.Point(this.centerSpringX.current.value, this.centerSpringY.current.value), centerTarget = new $3.Point(this.centerSpringX.target.value, this.centerSpringY.target.value), oldZoomPixel, zoom, width, height, bounds, newZoomPixel, deltaZoomPixels, deltaZoomPoints;
            if (current) {
              return centerCurrent;
            } else if (!this.zoomPoint) {
              return centerTarget;
            }
            oldZoomPixel = this.pixelFromPoint(this.zoomPoint, true);
            zoom = this.getZoom();
            width = 1 / zoom;
            height = width / this.getAspectRatio();
            bounds = new $3.Rect(centerCurrent.x - width / 2, centerCurrent.y - height / 2, width, height);
            newZoomPixel = this._pixelFromPoint(this.zoomPoint, bounds);
            deltaZoomPixels = newZoomPixel.minus(oldZoomPixel);
            deltaZoomPoints = deltaZoomPixels.divide(this._containerInnerSize.x * zoom);
            return centerTarget.plus(deltaZoomPoints);
          },
          getZoom: function(current) {
            if (current) {
              return this.zoomSpring.current.value;
            } else {
              return this.zoomSpring.target.value;
            }
          },
          _applyZoomConstraints: function(zoom) {
            return Math.max(Math.min(zoom, this.getMaxZoom()), this.getMinZoom());
          },
          _applyBoundaryConstraints: function(bounds) {
            var newBounds = new $3.Rect(bounds.x, bounds.y, bounds.width, bounds.height);
            if (this.wrapHorizontal) {
            } else {
              var horizontalThreshold = this.visibilityRatio * newBounds.width;
              var boundsRight = newBounds.x + newBounds.width;
              var contentRight = this._contentBoundsNoRotate.x + this._contentBoundsNoRotate.width;
              var leftDx = this._contentBoundsNoRotate.x - boundsRight + horizontalThreshold;
              var rightDx = contentRight - newBounds.x - horizontalThreshold;
              if (horizontalThreshold > this._contentBoundsNoRotate.width) {
                newBounds.x += (leftDx + rightDx) / 2;
              } else if (rightDx < 0) {
                newBounds.x += rightDx;
              } else if (leftDx > 0) {
                newBounds.x += leftDx;
              }
            }
            if (this.wrapVertical) {
            } else {
              var verticalThreshold = this.visibilityRatio * newBounds.height;
              var boundsBottom = newBounds.y + newBounds.height;
              var contentBottom = this._contentBoundsNoRotate.y + this._contentBoundsNoRotate.height;
              var topDy = this._contentBoundsNoRotate.y - boundsBottom + verticalThreshold;
              var bottomDy = contentBottom - newBounds.y - verticalThreshold;
              if (verticalThreshold > this._contentBoundsNoRotate.height) {
                newBounds.y += (topDy + bottomDy) / 2;
              } else if (bottomDy < 0) {
                newBounds.y += bottomDy;
              } else if (topDy > 0) {
                newBounds.y += topDy;
              }
            }
            return newBounds;
          },
          _raiseConstraintsEvent: function(immediately) {
            if (this.viewer) {
              this.viewer.raiseEvent("constrain", {
                immediately
              });
            }
          },
          applyConstraints: function(immediately) {
            var actualZoom = this.getZoom();
            var constrainedZoom = this._applyZoomConstraints(actualZoom);
            if (actualZoom !== constrainedZoom) {
              this.zoomTo(constrainedZoom, this.zoomPoint, immediately);
            }
            var bounds = this.getBoundsNoRotate();
            var constrainedBounds = this._applyBoundaryConstraints(bounds);
            this._raiseConstraintsEvent(immediately);
            if (bounds.x !== constrainedBounds.x || bounds.y !== constrainedBounds.y || immediately) {
              this.fitBounds(constrainedBounds.rotate(-this.getRotation()), immediately);
            }
            return this;
          },
          ensureVisible: function(immediately) {
            return this.applyConstraints(immediately);
          },
          _fitBounds: function(bounds, options) {
            options = options || {};
            var immediately = options.immediately || false;
            var constraints = options.constraints || false;
            var aspect = this.getAspectRatio();
            var center = bounds.getCenter();
            var newBounds = new $3.Rect(bounds.x, bounds.y, bounds.width, bounds.height, bounds.degrees + this.getRotation()).getBoundingBox();
            if (newBounds.getAspectRatio() >= aspect) {
              newBounds.height = newBounds.width / aspect;
            } else {
              newBounds.width = newBounds.height * aspect;
            }
            newBounds.x = center.x - newBounds.width / 2;
            newBounds.y = center.y - newBounds.height / 2;
            var newZoom = 1 / newBounds.width;
            if (constraints) {
              var newBoundsAspectRatio = newBounds.getAspectRatio();
              var newConstrainedZoom = this._applyZoomConstraints(newZoom);
              if (newZoom !== newConstrainedZoom) {
                newZoom = newConstrainedZoom;
                newBounds.width = 1 / newZoom;
                newBounds.x = center.x - newBounds.width / 2;
                newBounds.height = newBounds.width / newBoundsAspectRatio;
                newBounds.y = center.y - newBounds.height / 2;
              }
              newBounds = this._applyBoundaryConstraints(newBounds);
              center = newBounds.getCenter();
              this._raiseConstraintsEvent(immediately);
            }
            if (immediately) {
              this.panTo(center, true);
              return this.zoomTo(newZoom, null, true);
            }
            this.panTo(this.getCenter(true), true);
            this.zoomTo(this.getZoom(true), null, true);
            var oldBounds = this.getBounds();
            var oldZoom = this.getZoom();
            if (oldZoom === 0 || Math.abs(newZoom / oldZoom - 1) < 1e-8) {
              this.zoomTo(newZoom, true);
              return this.panTo(center, immediately);
            }
            newBounds = newBounds.rotate(-this.getRotation());
            var referencePoint = newBounds.getTopLeft().times(newZoom).minus(oldBounds.getTopLeft().times(oldZoom)).divide(newZoom - oldZoom);
            return this.zoomTo(newZoom, referencePoint, immediately);
          },
          fitBounds: function(bounds, immediately) {
            return this._fitBounds(bounds, {
              immediately,
              constraints: false
            });
          },
          fitBoundsWithConstraints: function(bounds, immediately) {
            return this._fitBounds(bounds, {
              immediately,
              constraints: true
            });
          },
          fitVertically: function(immediately) {
            var box = new $3.Rect(this._contentBounds.x + this._contentBounds.width / 2, this._contentBounds.y, 0, this._contentBounds.height);
            return this.fitBounds(box, immediately);
          },
          fitHorizontally: function(immediately) {
            var box = new $3.Rect(this._contentBounds.x, this._contentBounds.y + this._contentBounds.height / 2, this._contentBounds.width, 0);
            return this.fitBounds(box, immediately);
          },
          getConstrainedBounds: function(current) {
            var bounds, constrainedBounds;
            bounds = this.getBounds(current);
            constrainedBounds = this._applyBoundaryConstraints(bounds);
            return constrainedBounds;
          },
          panBy: function(delta, immediately) {
            var center = new $3.Point(this.centerSpringX.target.value, this.centerSpringY.target.value);
            return this.panTo(center.plus(delta), immediately);
          },
          panTo: function(center, immediately) {
            if (immediately) {
              this.centerSpringX.resetTo(center.x);
              this.centerSpringY.resetTo(center.y);
            } else {
              this.centerSpringX.springTo(center.x);
              this.centerSpringY.springTo(center.y);
            }
            if (this.viewer) {
              this.viewer.raiseEvent("pan", {
                center,
                immediately
              });
            }
            return this;
          },
          zoomBy: function(factor, refPoint, immediately) {
            return this.zoomTo(this.zoomSpring.target.value * factor, refPoint, immediately);
          },
          zoomTo: function(zoom, refPoint, immediately) {
            var _this = this;
            this.zoomPoint = refPoint instanceof $3.Point && !isNaN(refPoint.x) && !isNaN(refPoint.y) ? refPoint : null;
            if (immediately) {
              this._adjustCenterSpringsForZoomPoint(function() {
                _this.zoomSpring.resetTo(zoom);
              });
            } else {
              this.zoomSpring.springTo(zoom);
            }
            if (this.viewer) {
              this.viewer.raiseEvent("zoom", {
                zoom,
                refPoint,
                immediately
              });
            }
            return this;
          },
          setRotation: function(degrees) {
            if (!this.viewer || !this.viewer.drawer.canRotate()) {
              return this;
            }
            this.degrees = $3.positiveModulo(degrees, 360);
            this._setContentBounds(this.viewer.world.getHomeBounds(), this.viewer.world.getContentFactor());
            this.viewer.forceRedraw();
            this.viewer.raiseEvent("rotate", { degrees });
            return this;
          },
          getRotation: function() {
            return this.degrees;
          },
          resize: function(newContainerSize, maintain) {
            var oldBounds = this.getBoundsNoRotate(), newBounds = oldBounds, widthDeltaFactor;
            this.containerSize.x = newContainerSize.x;
            this.containerSize.y = newContainerSize.y;
            this._updateContainerInnerSize();
            if (maintain) {
              widthDeltaFactor = newContainerSize.x / this.containerSize.x;
              newBounds.width = oldBounds.width * widthDeltaFactor;
              newBounds.height = newBounds.width / this.getAspectRatio();
            }
            if (this.viewer) {
              this.viewer.raiseEvent("resize", {
                newContainerSize,
                maintain
              });
            }
            return this.fitBounds(newBounds, true);
          },
          _updateContainerInnerSize: function() {
            this._containerInnerSize = new $3.Point(Math.max(1, this.containerSize.x - (this._margins.left + this._margins.right)), Math.max(1, this.containerSize.y - (this._margins.top + this._margins.bottom)));
          },
          update: function() {
            var _this = this;
            this._adjustCenterSpringsForZoomPoint(function() {
              _this.zoomSpring.update();
            });
            this.centerSpringX.update();
            this.centerSpringY.update();
            var changed = this.centerSpringX.current.value !== this._oldCenterX || this.centerSpringY.current.value !== this._oldCenterY || this.zoomSpring.current.value !== this._oldZoom;
            this._oldCenterX = this.centerSpringX.current.value;
            this._oldCenterY = this.centerSpringY.current.value;
            this._oldZoom = this.zoomSpring.current.value;
            return changed;
          },
          _adjustCenterSpringsForZoomPoint: function(zoomSpringHandler) {
            if (this.zoomPoint) {
              var oldZoomPixel = this.pixelFromPoint(this.zoomPoint, true);
              zoomSpringHandler();
              var newZoomPixel = this.pixelFromPoint(this.zoomPoint, true);
              var deltaZoomPixels = newZoomPixel.minus(oldZoomPixel);
              var deltaZoomPoints = this.deltaPointsFromPixels(deltaZoomPixels, true);
              this.centerSpringX.shiftBy(deltaZoomPoints.x);
              this.centerSpringY.shiftBy(deltaZoomPoints.y);
              if (this.zoomSpring.isAtTargetValue()) {
                this.zoomPoint = null;
              }
            } else {
              zoomSpringHandler();
            }
          },
          deltaPixelsFromPointsNoRotate: function(deltaPoints, current) {
            return deltaPoints.times(this._containerInnerSize.x * this.getZoom(current));
          },
          deltaPixelsFromPoints: function(deltaPoints, current) {
            return this.deltaPixelsFromPointsNoRotate(deltaPoints.rotate(this.getRotation()), current);
          },
          deltaPointsFromPixelsNoRotate: function(deltaPixels, current) {
            return deltaPixels.divide(this._containerInnerSize.x * this.getZoom(current));
          },
          deltaPointsFromPixels: function(deltaPixels, current) {
            return this.deltaPointsFromPixelsNoRotate(deltaPixels, current).rotate(-this.getRotation());
          },
          pixelFromPointNoRotate: function(point, current) {
            return this._pixelFromPointNoRotate(point, this.getBoundsNoRotate(current));
          },
          pixelFromPoint: function(point, current) {
            return this._pixelFromPoint(point, this.getBoundsNoRotate(current));
          },
          _pixelFromPointNoRotate: function(point, bounds) {
            return point.minus(bounds.getTopLeft()).times(this._containerInnerSize.x / bounds.width).plus(new $3.Point(this._margins.left, this._margins.top));
          },
          _pixelFromPoint: function(point, bounds) {
            return this._pixelFromPointNoRotate(point.rotate(this.getRotation(), this.getCenter(true)), bounds);
          },
          pointFromPixelNoRotate: function(pixel, current) {
            var bounds = this.getBoundsNoRotate(current);
            return pixel.minus(new $3.Point(this._margins.left, this._margins.top)).divide(this._containerInnerSize.x / bounds.width).plus(bounds.getTopLeft());
          },
          pointFromPixel: function(pixel, current) {
            return this.pointFromPixelNoRotate(pixel, current).rotate(-this.getRotation(), this.getCenter(true));
          },
          _viewportToImageDelta: function(viewerX, viewerY) {
            var scale = this._contentBoundsNoRotate.width;
            return new $3.Point(viewerX * this._contentSizeNoRotate.x / scale, viewerY * this._contentSizeNoRotate.x / scale);
          },
          viewportToImageCoordinates: function(viewerX, viewerY) {
            if (viewerX instanceof $3.Point) {
              return this.viewportToImageCoordinates(viewerX.x, viewerX.y);
            }
            if (this.viewer) {
              var count = this.viewer.world.getItemCount();
              if (count > 1) {
                $3.console.error("[Viewport.viewportToImageCoordinates] is not accurate with multi-image; use TiledImage.viewportToImageCoordinates instead.");
              } else if (count === 1) {
                var item = this.viewer.world.getItemAt(0);
                return item.viewportToImageCoordinates(viewerX, viewerY, true);
              }
            }
            return this._viewportToImageDelta(viewerX - this._contentBoundsNoRotate.x, viewerY - this._contentBoundsNoRotate.y);
          },
          _imageToViewportDelta: function(imageX, imageY) {
            var scale = this._contentBoundsNoRotate.width;
            return new $3.Point(imageX / this._contentSizeNoRotate.x * scale, imageY / this._contentSizeNoRotate.x * scale);
          },
          imageToViewportCoordinates: function(imageX, imageY) {
            if (imageX instanceof $3.Point) {
              return this.imageToViewportCoordinates(imageX.x, imageX.y);
            }
            if (this.viewer) {
              var count = this.viewer.world.getItemCount();
              if (count > 1) {
                $3.console.error("[Viewport.imageToViewportCoordinates] is not accurate with multi-image; use TiledImage.imageToViewportCoordinates instead.");
              } else if (count === 1) {
                var item = this.viewer.world.getItemAt(0);
                return item.imageToViewportCoordinates(imageX, imageY, true);
              }
            }
            var point = this._imageToViewportDelta(imageX, imageY);
            point.x += this._contentBoundsNoRotate.x;
            point.y += this._contentBoundsNoRotate.y;
            return point;
          },
          imageToViewportRectangle: function(imageX, imageY, pixelWidth, pixelHeight) {
            var rect = imageX;
            if (!(rect instanceof $3.Rect)) {
              rect = new $3.Rect(imageX, imageY, pixelWidth, pixelHeight);
            }
            if (this.viewer) {
              var count = this.viewer.world.getItemCount();
              if (count > 1) {
                $3.console.error("[Viewport.imageToViewportRectangle] is not accurate with multi-image; use TiledImage.imageToViewportRectangle instead.");
              } else if (count === 1) {
                var item = this.viewer.world.getItemAt(0);
                return item.imageToViewportRectangle(imageX, imageY, pixelWidth, pixelHeight, true);
              }
            }
            var coordA = this.imageToViewportCoordinates(rect.x, rect.y);
            var coordB = this._imageToViewportDelta(rect.width, rect.height);
            return new $3.Rect(coordA.x, coordA.y, coordB.x, coordB.y, rect.degrees);
          },
          viewportToImageRectangle: function(viewerX, viewerY, pointWidth, pointHeight) {
            var rect = viewerX;
            if (!(rect instanceof $3.Rect)) {
              rect = new $3.Rect(viewerX, viewerY, pointWidth, pointHeight);
            }
            if (this.viewer) {
              var count = this.viewer.world.getItemCount();
              if (count > 1) {
                $3.console.error("[Viewport.viewportToImageRectangle] is not accurate with multi-image; use TiledImage.viewportToImageRectangle instead.");
              } else if (count === 1) {
                var item = this.viewer.world.getItemAt(0);
                return item.viewportToImageRectangle(viewerX, viewerY, pointWidth, pointHeight, true);
              }
            }
            var coordA = this.viewportToImageCoordinates(rect.x, rect.y);
            var coordB = this._viewportToImageDelta(rect.width, rect.height);
            return new $3.Rect(coordA.x, coordA.y, coordB.x, coordB.y, rect.degrees);
          },
          viewerElementToImageCoordinates: function(pixel) {
            var point = this.pointFromPixel(pixel, true);
            return this.viewportToImageCoordinates(point);
          },
          imageToViewerElementCoordinates: function(pixel) {
            var point = this.imageToViewportCoordinates(pixel);
            return this.pixelFromPoint(point, true);
          },
          windowToImageCoordinates: function(pixel) {
            $3.console.assert(this.viewer, "[Viewport.windowToImageCoordinates] the viewport must have a viewer.");
            var viewerCoordinates = pixel.minus($3.getElementPosition(this.viewer.element));
            return this.viewerElementToImageCoordinates(viewerCoordinates);
          },
          imageToWindowCoordinates: function(pixel) {
            $3.console.assert(this.viewer, "[Viewport.imageToWindowCoordinates] the viewport must have a viewer.");
            var viewerCoordinates = this.imageToViewerElementCoordinates(pixel);
            return viewerCoordinates.plus($3.getElementPosition(this.viewer.element));
          },
          viewerElementToViewportCoordinates: function(pixel) {
            return this.pointFromPixel(pixel, true);
          },
          viewportToViewerElementCoordinates: function(point) {
            return this.pixelFromPoint(point, true);
          },
          viewerElementToViewportRectangle: function(rectangle) {
            return $3.Rect.fromSummits(this.pointFromPixel(rectangle.getTopLeft(), true), this.pointFromPixel(rectangle.getTopRight(), true), this.pointFromPixel(rectangle.getBottomLeft(), true));
          },
          viewportToViewerElementRectangle: function(rectangle) {
            return $3.Rect.fromSummits(this.pixelFromPoint(rectangle.getTopLeft(), true), this.pixelFromPoint(rectangle.getTopRight(), true), this.pixelFromPoint(rectangle.getBottomLeft(), true));
          },
          windowToViewportCoordinates: function(pixel) {
            $3.console.assert(this.viewer, "[Viewport.windowToViewportCoordinates] the viewport must have a viewer.");
            var viewerCoordinates = pixel.minus($3.getElementPosition(this.viewer.element));
            return this.viewerElementToViewportCoordinates(viewerCoordinates);
          },
          viewportToWindowCoordinates: function(point) {
            $3.console.assert(this.viewer, "[Viewport.viewportToWindowCoordinates] the viewport must have a viewer.");
            var viewerCoordinates = this.viewportToViewerElementCoordinates(point);
            return viewerCoordinates.plus($3.getElementPosition(this.viewer.element));
          },
          viewportToImageZoom: function(viewportZoom) {
            if (this.viewer) {
              var count = this.viewer.world.getItemCount();
              if (count > 1) {
                $3.console.error("[Viewport.viewportToImageZoom] is not accurate with multi-image.");
              } else if (count === 1) {
                var item = this.viewer.world.getItemAt(0);
                return item.viewportToImageZoom(viewportZoom);
              }
            }
            var imageWidth = this._contentSizeNoRotate.x;
            var containerWidth = this._containerInnerSize.x;
            var scale = this._contentBoundsNoRotate.width;
            var viewportToImageZoomRatio = containerWidth / imageWidth * scale;
            return viewportZoom * viewportToImageZoomRatio;
          },
          imageToViewportZoom: function(imageZoom) {
            if (this.viewer) {
              var count = this.viewer.world.getItemCount();
              if (count > 1) {
                $3.console.error("[Viewport.imageToViewportZoom] is not accurate with multi-image.");
              } else if (count === 1) {
                var item = this.viewer.world.getItemAt(0);
                return item.imageToViewportZoom(imageZoom);
              }
            }
            var imageWidth = this._contentSizeNoRotate.x;
            var containerWidth = this._containerInnerSize.x;
            var scale = this._contentBoundsNoRotate.width;
            var viewportToImageZoomRatio = imageWidth / containerWidth / scale;
            return imageZoom * viewportToImageZoomRatio;
          },
          toggleFlip: function() {
            this.setFlip(!this.getFlip());
            return this;
          },
          getFlip: function() {
            return this.flipped;
          },
          setFlip: function(state) {
            if (this.flipped === state) {
              return this;
            }
            this.flipped = state;
            if (this.viewer.navigator) {
              this.viewer.navigator.setFlip(this.getFlip());
            }
            this.viewer.forceRedraw();
            this.viewer.raiseEvent("flip", { flipped: state });
            return this;
          }
        };
      })(OpenSeadragon2);
      (function($3) {
        $3.TiledImage = function(options) {
          var _this = this;
          $3.console.assert(options.tileCache, "[TiledImage] options.tileCache is required");
          $3.console.assert(options.drawer, "[TiledImage] options.drawer is required");
          $3.console.assert(options.viewer, "[TiledImage] options.viewer is required");
          $3.console.assert(options.imageLoader, "[TiledImage] options.imageLoader is required");
          $3.console.assert(options.source, "[TiledImage] options.source is required");
          $3.console.assert(!options.clip || options.clip instanceof $3.Rect, "[TiledImage] options.clip must be an OpenSeadragon.Rect if present");
          $3.EventSource.call(this);
          this._tileCache = options.tileCache;
          delete options.tileCache;
          this._drawer = options.drawer;
          delete options.drawer;
          this._imageLoader = options.imageLoader;
          delete options.imageLoader;
          if (options.clip instanceof $3.Rect) {
            this._clip = options.clip.clone();
          }
          delete options.clip;
          var x4 = options.x || 0;
          delete options.x;
          var y4 = options.y || 0;
          delete options.y;
          this.normHeight = options.source.dimensions.y / options.source.dimensions.x;
          this.contentAspectX = options.source.dimensions.x / options.source.dimensions.y;
          var scale = 1;
          if (options.width) {
            scale = options.width;
            delete options.width;
            if (options.height) {
              $3.console.error("specifying both width and height to a tiledImage is not supported");
              delete options.height;
            }
          } else if (options.height) {
            scale = options.height / this.normHeight;
            delete options.height;
          }
          var fitBounds = options.fitBounds;
          delete options.fitBounds;
          var fitBoundsPlacement = options.fitBoundsPlacement || OpenSeadragon2.Placement.CENTER;
          delete options.fitBoundsPlacement;
          var degrees = options.degrees || 0;
          delete options.degrees;
          $3.extend(true, this, {
            viewer: null,
            tilesMatrix: {},
            coverage: {},
            loadingCoverage: {},
            lastDrawn: [],
            lastResetTime: 0,
            _midDraw: false,
            _needsDraw: true,
            _hasOpaqueTile: false,
            _tilesLoading: 0,
            springStiffness: $3.DEFAULT_SETTINGS.springStiffness,
            animationTime: $3.DEFAULT_SETTINGS.animationTime,
            minZoomImageRatio: $3.DEFAULT_SETTINGS.minZoomImageRatio,
            wrapHorizontal: $3.DEFAULT_SETTINGS.wrapHorizontal,
            wrapVertical: $3.DEFAULT_SETTINGS.wrapVertical,
            immediateRender: $3.DEFAULT_SETTINGS.immediateRender,
            blendTime: $3.DEFAULT_SETTINGS.blendTime,
            alwaysBlend: $3.DEFAULT_SETTINGS.alwaysBlend,
            minPixelRatio: $3.DEFAULT_SETTINGS.minPixelRatio,
            smoothTileEdgesMinZoom: $3.DEFAULT_SETTINGS.smoothTileEdgesMinZoom,
            iOSDevice: $3.DEFAULT_SETTINGS.iOSDevice,
            debugMode: $3.DEFAULT_SETTINGS.debugMode,
            crossOriginPolicy: $3.DEFAULT_SETTINGS.crossOriginPolicy,
            ajaxWithCredentials: $3.DEFAULT_SETTINGS.ajaxWithCredentials,
            placeholderFillStyle: $3.DEFAULT_SETTINGS.placeholderFillStyle,
            opacity: $3.DEFAULT_SETTINGS.opacity,
            preload: $3.DEFAULT_SETTINGS.preload,
            compositeOperation: $3.DEFAULT_SETTINGS.compositeOperation
          }, options);
          this._preload = this.preload;
          delete this.preload;
          this._fullyLoaded = false;
          this._xSpring = new $3.Spring({
            initial: x4,
            springStiffness: this.springStiffness,
            animationTime: this.animationTime
          });
          this._ySpring = new $3.Spring({
            initial: y4,
            springStiffness: this.springStiffness,
            animationTime: this.animationTime
          });
          this._scaleSpring = new $3.Spring({
            initial: scale,
            springStiffness: this.springStiffness,
            animationTime: this.animationTime
          });
          this._degreesSpring = new $3.Spring({
            initial: degrees,
            springStiffness: this.springStiffness,
            animationTime: this.animationTime
          });
          this._updateForScale();
          if (fitBounds) {
            this.fitBounds(fitBounds, fitBoundsPlacement, true);
          }
          this._drawingHandler = function(args) {
            _this.viewer.raiseEvent("tile-drawing", $3.extend({
              tiledImage: _this
            }, args));
          };
        };
        $3.extend($3.TiledImage.prototype, $3.EventSource.prototype, {
          needsDraw: function() {
            return this._needsDraw;
          },
          getFullyLoaded: function() {
            return this._fullyLoaded;
          },
          _setFullyLoaded: function(flag) {
            if (flag === this._fullyLoaded) {
              return;
            }
            this._fullyLoaded = flag;
            this.raiseEvent("fully-loaded-change", {
              fullyLoaded: this._fullyLoaded
            });
          },
          reset: function() {
            this._tileCache.clearTilesFor(this);
            this.lastResetTime = $3.now();
            this._needsDraw = true;
          },
          update: function() {
            var xUpdated = this._xSpring.update();
            var yUpdated = this._ySpring.update();
            var scaleUpdated = this._scaleSpring.update();
            var degreesUpdated = this._degreesSpring.update();
            if (xUpdated || yUpdated || scaleUpdated || degreesUpdated) {
              this._updateForScale();
              this._needsDraw = true;
              return true;
            }
            return false;
          },
          draw: function() {
            if (this.opacity !== 0 || this._preload) {
              this._midDraw = true;
              this._updateViewport();
              this._midDraw = false;
            } else {
              this._needsDraw = false;
            }
          },
          destroy: function() {
            this.reset();
            if (this.source.destroy) {
              this.source.destroy();
            }
          },
          getBounds: function(current) {
            return this.getBoundsNoRotate(current).rotate(this.getRotation(current), this._getRotationPoint(current));
          },
          getBoundsNoRotate: function(current) {
            return current ? new $3.Rect(this._xSpring.current.value, this._ySpring.current.value, this._worldWidthCurrent, this._worldHeightCurrent) : new $3.Rect(this._xSpring.target.value, this._ySpring.target.value, this._worldWidthTarget, this._worldHeightTarget);
          },
          getWorldBounds: function() {
            $3.console.error("[TiledImage.getWorldBounds] is deprecated; use TiledImage.getBounds instead");
            return this.getBounds();
          },
          getClippedBounds: function(current) {
            var bounds = this.getBoundsNoRotate(current);
            if (this._clip) {
              var worldWidth = current ? this._worldWidthCurrent : this._worldWidthTarget;
              var ratio = worldWidth / this.source.dimensions.x;
              var clip = this._clip.times(ratio);
              bounds = new $3.Rect(bounds.x + clip.x, bounds.y + clip.y, clip.width, clip.height);
            }
            return bounds.rotate(this.getRotation(current), this._getRotationPoint(current));
          },
          getTileBounds: function(level, x4, y4) {
            var numTiles = this.source.getNumTiles(level);
            var xMod = (numTiles.x + x4 % numTiles.x) % numTiles.x;
            var yMod = (numTiles.y + y4 % numTiles.y) % numTiles.y;
            var bounds = this.source.getTileBounds(level, xMod, yMod);
            if (this.getFlip()) {
              bounds.x = 1 - bounds.x - bounds.width;
            }
            bounds.x += (x4 - xMod) / numTiles.x;
            bounds.y += this._worldHeightCurrent / this._worldWidthCurrent * ((y4 - yMod) / numTiles.y);
            return bounds;
          },
          getContentSize: function() {
            return new $3.Point(this.source.dimensions.x, this.source.dimensions.y);
          },
          getSizeInWindowCoordinates: function() {
            var topLeft = this.imageToWindowCoordinates(new $3.Point(0, 0));
            var bottomRight = this.imageToWindowCoordinates(this.getContentSize());
            return new $3.Point(bottomRight.x - topLeft.x, bottomRight.y - topLeft.y);
          },
          _viewportToImageDelta: function(viewerX, viewerY, current) {
            var scale = current ? this._scaleSpring.current.value : this._scaleSpring.target.value;
            return new $3.Point(viewerX * (this.source.dimensions.x / scale), viewerY * (this.source.dimensions.y * this.contentAspectX / scale));
          },
          viewportToImageCoordinates: function(viewerX, viewerY, current) {
            var point;
            if (viewerX instanceof $3.Point) {
              current = viewerY;
              point = viewerX;
            } else {
              point = new $3.Point(viewerX, viewerY);
            }
            point = point.rotate(-this.getRotation(current), this._getRotationPoint(current));
            return current ? this._viewportToImageDelta(point.x - this._xSpring.current.value, point.y - this._ySpring.current.value) : this._viewportToImageDelta(point.x - this._xSpring.target.value, point.y - this._ySpring.target.value);
          },
          _imageToViewportDelta: function(imageX, imageY, current) {
            var scale = current ? this._scaleSpring.current.value : this._scaleSpring.target.value;
            return new $3.Point(imageX / this.source.dimensions.x * scale, imageY / this.source.dimensions.y / this.contentAspectX * scale);
          },
          imageToViewportCoordinates: function(imageX, imageY, current) {
            if (imageX instanceof $3.Point) {
              current = imageY;
              imageY = imageX.y;
              imageX = imageX.x;
            }
            var point = this._imageToViewportDelta(imageX, imageY);
            if (current) {
              point.x += this._xSpring.current.value;
              point.y += this._ySpring.current.value;
            } else {
              point.x += this._xSpring.target.value;
              point.y += this._ySpring.target.value;
            }
            return point.rotate(this.getRotation(current), this._getRotationPoint(current));
          },
          imageToViewportRectangle: function(imageX, imageY, pixelWidth, pixelHeight, current) {
            var rect = imageX;
            if (rect instanceof $3.Rect) {
              current = imageY;
            } else {
              rect = new $3.Rect(imageX, imageY, pixelWidth, pixelHeight);
            }
            var coordA = this.imageToViewportCoordinates(rect.getTopLeft(), current);
            var coordB = this._imageToViewportDelta(rect.width, rect.height, current);
            return new $3.Rect(coordA.x, coordA.y, coordB.x, coordB.y, rect.degrees + this.getRotation(current));
          },
          viewportToImageRectangle: function(viewerX, viewerY, pointWidth, pointHeight, current) {
            var rect = viewerX;
            if (viewerX instanceof $3.Rect) {
              current = viewerY;
            } else {
              rect = new $3.Rect(viewerX, viewerY, pointWidth, pointHeight);
            }
            var coordA = this.viewportToImageCoordinates(rect.getTopLeft(), current);
            var coordB = this._viewportToImageDelta(rect.width, rect.height, current);
            return new $3.Rect(coordA.x, coordA.y, coordB.x, coordB.y, rect.degrees - this.getRotation(current));
          },
          viewerElementToImageCoordinates: function(pixel) {
            var point = this.viewport.pointFromPixel(pixel, true);
            return this.viewportToImageCoordinates(point);
          },
          imageToViewerElementCoordinates: function(pixel) {
            var point = this.imageToViewportCoordinates(pixel);
            return this.viewport.pixelFromPoint(point, true);
          },
          windowToImageCoordinates: function(pixel) {
            var viewerCoordinates = pixel.minus(OpenSeadragon2.getElementPosition(this.viewer.element));
            return this.viewerElementToImageCoordinates(viewerCoordinates);
          },
          imageToWindowCoordinates: function(pixel) {
            var viewerCoordinates = this.imageToViewerElementCoordinates(pixel);
            return viewerCoordinates.plus(OpenSeadragon2.getElementPosition(this.viewer.element));
          },
          _viewportToTiledImageRectangle: function(rect) {
            var scale = this._scaleSpring.current.value;
            rect = rect.rotate(-this.getRotation(true), this._getRotationPoint(true));
            return new $3.Rect((rect.x - this._xSpring.current.value) / scale, (rect.y - this._ySpring.current.value) / scale, rect.width / scale, rect.height / scale, rect.degrees);
          },
          viewportToImageZoom: function(viewportZoom) {
            var ratio = this._scaleSpring.current.value * this.viewport._containerInnerSize.x / this.source.dimensions.x;
            return ratio * viewportZoom;
          },
          imageToViewportZoom: function(imageZoom) {
            var ratio = this._scaleSpring.current.value * this.viewport._containerInnerSize.x / this.source.dimensions.x;
            return imageZoom / ratio;
          },
          setPosition: function(position, immediately) {
            var sameTarget = this._xSpring.target.value === position.x && this._ySpring.target.value === position.y;
            if (immediately) {
              if (sameTarget && this._xSpring.current.value === position.x && this._ySpring.current.value === position.y) {
                return;
              }
              this._xSpring.resetTo(position.x);
              this._ySpring.resetTo(position.y);
              this._needsDraw = true;
            } else {
              if (sameTarget) {
                return;
              }
              this._xSpring.springTo(position.x);
              this._ySpring.springTo(position.y);
              this._needsDraw = true;
            }
            if (!sameTarget) {
              this._raiseBoundsChange();
            }
          },
          setWidth: function(width, immediately) {
            this._setScale(width, immediately);
          },
          setHeight: function(height, immediately) {
            this._setScale(height / this.normHeight, immediately);
          },
          setCroppingPolygons: function(polygons) {
            var isXYObject = function(obj) {
              return obj instanceof $3.Point || typeof obj.x === "number" && typeof obj.y === "number";
            };
            var objectToSimpleXYObject = function(objs) {
              return objs.map(function(obj) {
                try {
                  if (isXYObject(obj)) {
                    return { x: obj.x, y: obj.y };
                  } else {
                    throw new Error();
                  }
                } catch (e4) {
                  throw new Error("A Provided cropping polygon point is not supported");
                }
              });
            };
            try {
              if (!$3.isArray(polygons)) {
                throw new Error("Provided cropping polygon is not an array");
              }
              this._croppingPolygons = polygons.map(function(polygon) {
                return objectToSimpleXYObject(polygon);
              });
            } catch (e4) {
              $3.console.error("[TiledImage.setCroppingPolygons] Cropping polygon format not supported");
              $3.console.error(e4);
              this._croppingPolygons = null;
            }
          },
          resetCroppingPolygons: function() {
            this._croppingPolygons = null;
          },
          fitBounds: function(bounds, anchor, immediately) {
            anchor = anchor || $3.Placement.CENTER;
            var anchorProperties = $3.Placement.properties[anchor];
            var aspectRatio = this.contentAspectX;
            var xOffset = 0;
            var yOffset = 0;
            var displayedWidthRatio = 1;
            var displayedHeightRatio = 1;
            if (this._clip) {
              aspectRatio = this._clip.getAspectRatio();
              displayedWidthRatio = this._clip.width / this.source.dimensions.x;
              displayedHeightRatio = this._clip.height / this.source.dimensions.y;
              if (bounds.getAspectRatio() > aspectRatio) {
                xOffset = this._clip.x / this._clip.height * bounds.height;
                yOffset = this._clip.y / this._clip.height * bounds.height;
              } else {
                xOffset = this._clip.x / this._clip.width * bounds.width;
                yOffset = this._clip.y / this._clip.width * bounds.width;
              }
            }
            if (bounds.getAspectRatio() > aspectRatio) {
              var height = bounds.height / displayedHeightRatio;
              var marginLeft = 0;
              if (anchorProperties.isHorizontallyCentered) {
                marginLeft = (bounds.width - bounds.height * aspectRatio) / 2;
              } else if (anchorProperties.isRight) {
                marginLeft = bounds.width - bounds.height * aspectRatio;
              }
              this.setPosition(new $3.Point(bounds.x - xOffset + marginLeft, bounds.y - yOffset), immediately);
              this.setHeight(height, immediately);
            } else {
              var width = bounds.width / displayedWidthRatio;
              var marginTop = 0;
              if (anchorProperties.isVerticallyCentered) {
                marginTop = (bounds.height - bounds.width / aspectRatio) / 2;
              } else if (anchorProperties.isBottom) {
                marginTop = bounds.height - bounds.width / aspectRatio;
              }
              this.setPosition(new $3.Point(bounds.x - xOffset, bounds.y - yOffset + marginTop), immediately);
              this.setWidth(width, immediately);
            }
          },
          getClip: function() {
            if (this._clip) {
              return this._clip.clone();
            }
            return null;
          },
          setClip: function(newClip) {
            $3.console.assert(!newClip || newClip instanceof $3.Rect, "[TiledImage.setClip] newClip must be an OpenSeadragon.Rect or null");
            if (newClip instanceof $3.Rect) {
              this._clip = newClip.clone();
            } else {
              this._clip = null;
            }
            this._needsDraw = true;
            this.raiseEvent("clip-change");
          },
          getFlip: function() {
            return !!this.flipped;
          },
          setFlip: function(flip) {
            this.flipped = !!flip;
            this._needsDraw = true;
            this._raiseBoundsChange();
          },
          getOpacity: function() {
            return this.opacity;
          },
          setOpacity: function(opacity) {
            if (opacity === this.opacity) {
              return;
            }
            this.opacity = opacity;
            this._needsDraw = true;
            this.raiseEvent("opacity-change", {
              opacity: this.opacity
            });
          },
          getPreload: function() {
            return this._preload;
          },
          setPreload: function(preload) {
            this._preload = !!preload;
            this._needsDraw = true;
          },
          getRotation: function(current) {
            return current ? this._degreesSpring.current.value : this._degreesSpring.target.value;
          },
          setRotation: function(degrees, immediately) {
            if (this._degreesSpring.target.value === degrees && this._degreesSpring.isAtTargetValue()) {
              return;
            }
            if (immediately) {
              this._degreesSpring.resetTo(degrees);
            } else {
              this._degreesSpring.springTo(degrees);
            }
            this._needsDraw = true;
            this._raiseBoundsChange();
          },
          _getRotationPoint: function(current) {
            return this.getBoundsNoRotate(current).getCenter();
          },
          getCompositeOperation: function() {
            return this.compositeOperation;
          },
          setCompositeOperation: function(compositeOperation) {
            if (compositeOperation === this.compositeOperation) {
              return;
            }
            this.compositeOperation = compositeOperation;
            this._needsDraw = true;
            this.raiseEvent("composite-operation-change", {
              compositeOperation: this.compositeOperation
            });
          },
          _setScale: function(scale, immediately) {
            var sameTarget = this._scaleSpring.target.value === scale;
            if (immediately) {
              if (sameTarget && this._scaleSpring.current.value === scale) {
                return;
              }
              this._scaleSpring.resetTo(scale);
              this._updateForScale();
              this._needsDraw = true;
            } else {
              if (sameTarget) {
                return;
              }
              this._scaleSpring.springTo(scale);
              this._updateForScale();
              this._needsDraw = true;
            }
            if (!sameTarget) {
              this._raiseBoundsChange();
            }
          },
          _updateForScale: function() {
            this._worldWidthTarget = this._scaleSpring.target.value;
            this._worldHeightTarget = this.normHeight * this._scaleSpring.target.value;
            this._worldWidthCurrent = this._scaleSpring.current.value;
            this._worldHeightCurrent = this.normHeight * this._scaleSpring.current.value;
          },
          _raiseBoundsChange: function() {
            this.raiseEvent("bounds-change");
          },
          _isBottomItem: function() {
            return this.viewer.world.getItemAt(0) === this;
          },
          _getLevelsInterval: function() {
            var lowestLevel = Math.max(this.source.minLevel, Math.floor(Math.log(this.minZoomImageRatio) / Math.log(2)));
            var currentZeroRatio = this.viewport.deltaPixelsFromPointsNoRotate(this.source.getPixelRatio(0), true).x * this._scaleSpring.current.value;
            var highestLevel = Math.min(Math.abs(this.source.maxLevel), Math.abs(Math.floor(Math.log(currentZeroRatio / this.minPixelRatio) / Math.log(2))));
            highestLevel = Math.max(highestLevel, this.source.minLevel || 0);
            lowestLevel = Math.min(lowestLevel, highestLevel);
            return {
              lowestLevel,
              highestLevel
            };
          },
          _updateViewport: function() {
            this._needsDraw = false;
            this._tilesLoading = 0;
            this.loadingCoverage = {};
            while (this.lastDrawn.length > 0) {
              var tile = this.lastDrawn.pop();
              tile.beingDrawn = false;
            }
            var viewport = this.viewport;
            var drawArea = this._viewportToTiledImageRectangle(viewport.getBoundsWithMargins(true));
            if (!this.wrapHorizontal && !this.wrapVertical) {
              var tiledImageBounds = this._viewportToTiledImageRectangle(this.getClippedBounds(true));
              drawArea = drawArea.intersection(tiledImageBounds);
              if (drawArea === null) {
                return;
              }
            }
            var levelsInterval = this._getLevelsInterval();
            var lowestLevel = levelsInterval.lowestLevel;
            var highestLevel = levelsInterval.highestLevel;
            var bestTile = null;
            var haveDrawn = false;
            var currentTime = $3.now();
            for (var level = highestLevel; level >= lowestLevel; level--) {
              var drawLevel = false;
              var currentRenderPixelRatio = viewport.deltaPixelsFromPointsNoRotate(this.source.getPixelRatio(level), true).x * this._scaleSpring.current.value;
              if (level === lowestLevel || !haveDrawn && currentRenderPixelRatio >= this.minPixelRatio) {
                drawLevel = true;
                haveDrawn = true;
              } else if (!haveDrawn) {
                continue;
              }
              var targetRenderPixelRatio = viewport.deltaPixelsFromPointsNoRotate(this.source.getPixelRatio(level), false).x * this._scaleSpring.current.value;
              var targetZeroRatio = viewport.deltaPixelsFromPointsNoRotate(this.source.getPixelRatio(Math.max(this.source.getClosestLevel(), 0)), false).x * this._scaleSpring.current.value;
              var optimalRatio = this.immediateRender ? 1 : targetZeroRatio;
              var levelOpacity = Math.min(1, (currentRenderPixelRatio - 0.5) / 0.5);
              var levelVisibility = optimalRatio / Math.abs(optimalRatio - targetRenderPixelRatio);
              bestTile = updateLevel(this, haveDrawn, drawLevel, level, levelOpacity, levelVisibility, drawArea, currentTime, bestTile);
              if (providesCoverage(this.coverage, level)) {
                break;
              }
            }
            drawTiles(this, this.lastDrawn);
            if (bestTile && !bestTile.context2D) {
              loadTile(this, bestTile, currentTime);
              this._needsDraw = true;
              this._setFullyLoaded(false);
            } else {
              this._setFullyLoaded(this._tilesLoading === 0);
            }
          },
          _getCornerTiles: function(level, topLeftBound, bottomRightBound) {
            var leftX;
            var rightX;
            if (this.wrapHorizontal) {
              leftX = $3.positiveModulo(topLeftBound.x, 1);
              rightX = $3.positiveModulo(bottomRightBound.x, 1);
            } else {
              leftX = Math.max(0, topLeftBound.x);
              rightX = Math.min(1, bottomRightBound.x);
            }
            var topY;
            var bottomY;
            var aspectRatio = 1 / this.source.aspectRatio;
            if (this.wrapVertical) {
              topY = $3.positiveModulo(topLeftBound.y, aspectRatio);
              bottomY = $3.positiveModulo(bottomRightBound.y, aspectRatio);
            } else {
              topY = Math.max(0, topLeftBound.y);
              bottomY = Math.min(aspectRatio, bottomRightBound.y);
            }
            var topLeftTile = this.source.getTileAtPoint(level, new $3.Point(leftX, topY));
            var bottomRightTile = this.source.getTileAtPoint(level, new $3.Point(rightX, bottomY));
            var numTiles = this.source.getNumTiles(level);
            if (this.wrapHorizontal) {
              topLeftTile.x += numTiles.x * Math.floor(topLeftBound.x);
              bottomRightTile.x += numTiles.x * Math.floor(bottomRightBound.x);
            }
            if (this.wrapVertical) {
              topLeftTile.y += numTiles.y * Math.floor(topLeftBound.y / aspectRatio);
              bottomRightTile.y += numTiles.y * Math.floor(bottomRightBound.y / aspectRatio);
            }
            return {
              topLeft: topLeftTile,
              bottomRight: bottomRightTile
            };
          }
        });
        function updateLevel(tiledImage, haveDrawn, drawLevel, level, levelOpacity, levelVisibility, drawArea, currentTime, best) {
          var topLeftBound = drawArea.getBoundingBox().getTopLeft();
          var bottomRightBound = drawArea.getBoundingBox().getBottomRight();
          if (tiledImage.viewer) {
            tiledImage.viewer.raiseEvent("update-level", {
              tiledImage,
              havedrawn: haveDrawn,
              level,
              opacity: levelOpacity,
              visibility: levelVisibility,
              drawArea,
              topleft: topLeftBound,
              bottomright: bottomRightBound,
              currenttime: currentTime,
              best
            });
          }
          resetCoverage(tiledImage.coverage, level);
          resetCoverage(tiledImage.loadingCoverage, level);
          var cornerTiles = tiledImage._getCornerTiles(level, topLeftBound, bottomRightBound);
          var topLeftTile = cornerTiles.topLeft;
          var bottomRightTile = cornerTiles.bottomRight;
          var numberOfTiles = tiledImage.source.getNumTiles(level);
          var viewportCenter = tiledImage.viewport.pixelFromPoint(tiledImage.viewport.getCenter());
          if (tiledImage.getFlip()) {
            bottomRightTile.x += 1;
            if (!tiledImage.wrapHorizontal) {
              bottomRightTile.x = Math.min(bottomRightTile.x, numberOfTiles.x - 1);
            }
          }
          for (var x4 = topLeftTile.x; x4 <= bottomRightTile.x; x4++) {
            for (var y4 = topLeftTile.y; y4 <= bottomRightTile.y; y4++) {
              var flippedX;
              if (tiledImage.getFlip()) {
                var xMod = (numberOfTiles.x + x4 % numberOfTiles.x) % numberOfTiles.x;
                flippedX = x4 + numberOfTiles.x - xMod - xMod - 1;
              } else {
                flippedX = x4;
              }
              if (drawArea.intersection(tiledImage.getTileBounds(level, flippedX, y4)) === null) {
                continue;
              }
              best = updateTile(tiledImage, drawLevel, haveDrawn, flippedX, y4, level, levelOpacity, levelVisibility, viewportCenter, numberOfTiles, currentTime, best);
            }
          }
          return best;
        }
        function updateTile(tiledImage, haveDrawn, drawLevel, x4, y4, level, levelOpacity, levelVisibility, viewportCenter, numberOfTiles, currentTime, best) {
          var tile = getTile(x4, y4, level, tiledImage, tiledImage.source, tiledImage.tilesMatrix, currentTime, numberOfTiles, tiledImage._worldWidthCurrent, tiledImage._worldHeightCurrent), drawTile = drawLevel;
          if (tiledImage.viewer) {
            tiledImage.viewer.raiseEvent("update-tile", {
              tiledImage,
              tile
            });
          }
          setCoverage(tiledImage.coverage, level, x4, y4, false);
          var loadingCoverage = tile.loaded || tile.loading || isCovered(tiledImage.loadingCoverage, level, x4, y4);
          setCoverage(tiledImage.loadingCoverage, level, x4, y4, loadingCoverage);
          if (!tile.exists) {
            return best;
          }
          if (haveDrawn && !drawTile) {
            if (isCovered(tiledImage.coverage, level, x4, y4)) {
              setCoverage(tiledImage.coverage, level, x4, y4, true);
            } else {
              drawTile = true;
            }
          }
          if (!drawTile) {
            return best;
          }
          positionTile(tile, tiledImage.source.tileOverlap, tiledImage.viewport, viewportCenter, levelVisibility, tiledImage);
          if (!tile.loaded) {
            if (tile.context2D) {
              setTileLoaded(tiledImage, tile);
            } else {
              var imageRecord = tiledImage._tileCache.getImageRecord(tile.cacheKey);
              if (imageRecord) {
                var image = imageRecord.getImage();
                setTileLoaded(tiledImage, tile, image);
              }
            }
          }
          if (tile.loaded) {
            var needsDraw = blendTile(tiledImage, tile, x4, y4, level, levelOpacity, currentTime);
            if (needsDraw) {
              tiledImage._needsDraw = true;
            }
          } else if (tile.loading) {
            tiledImage._tilesLoading++;
          } else if (!loadingCoverage) {
            best = compareTiles(best, tile);
          }
          return best;
        }
        function getTile(x4, y4, level, tiledImage, tileSource, tilesMatrix, time, numTiles, worldWidth, worldHeight) {
          var xMod, yMod, bounds, sourceBounds, exists, url, ajaxHeaders, context2D, tile;
          if (!tilesMatrix[level]) {
            tilesMatrix[level] = {};
          }
          if (!tilesMatrix[level][x4]) {
            tilesMatrix[level][x4] = {};
          }
          if (!tilesMatrix[level][x4][y4] || !tilesMatrix[level][x4][y4].flipped !== !tiledImage.flipped) {
            xMod = (numTiles.x + x4 % numTiles.x) % numTiles.x;
            yMod = (numTiles.y + y4 % numTiles.y) % numTiles.y;
            bounds = tiledImage.getTileBounds(level, x4, y4);
            sourceBounds = tileSource.getTileBounds(level, xMod, yMod, true);
            exists = tileSource.tileExists(level, xMod, yMod);
            url = tileSource.getTileUrl(level, xMod, yMod);
            if (tiledImage.loadTilesWithAjax) {
              ajaxHeaders = tileSource.getTileAjaxHeaders(level, xMod, yMod);
              if ($3.isPlainObject(tiledImage.ajaxHeaders)) {
                ajaxHeaders = $3.extend({}, tiledImage.ajaxHeaders, ajaxHeaders);
              }
            } else {
              ajaxHeaders = null;
            }
            context2D = tileSource.getContext2D ? tileSource.getContext2D(level, xMod, yMod) : void 0;
            tile = new $3.Tile(level, x4, y4, bounds, exists, url, context2D, tiledImage.loadTilesWithAjax, ajaxHeaders, sourceBounds);
            if (tiledImage.getFlip()) {
              if (xMod === 0) {
                tile.isRightMost = true;
              }
            } else {
              if (xMod === numTiles.x - 1) {
                tile.isRightMost = true;
              }
            }
            if (yMod === numTiles.y - 1) {
              tile.isBottomMost = true;
            }
            tile.flipped = tiledImage.flipped;
            tilesMatrix[level][x4][y4] = tile;
          }
          tile = tilesMatrix[level][x4][y4];
          tile.lastTouchTime = time;
          return tile;
        }
        function loadTile(tiledImage, tile, time) {
          tile.loading = true;
          tiledImage._imageLoader.addJob({
            src: tile.url,
            loadWithAjax: tile.loadWithAjax,
            ajaxHeaders: tile.ajaxHeaders,
            crossOriginPolicy: tiledImage.crossOriginPolicy,
            ajaxWithCredentials: tiledImage.ajaxWithCredentials,
            callback: function(image, errorMsg, tileRequest) {
              onTileLoad(tiledImage, tile, time, image, errorMsg, tileRequest);
            },
            abort: function() {
              tile.loading = false;
            }
          });
        }
        function onTileLoad(tiledImage, tile, time, image, errorMsg, tileRequest) {
          if (!image) {
            $3.console.log("Tile %s failed to load: %s - error: %s", tile, tile.url, errorMsg);
            tiledImage.viewer.raiseEvent("tile-load-failed", {
              tile,
              tiledImage,
              time,
              message: errorMsg,
              tileRequest
            });
            tile.loading = false;
            tile.exists = false;
            return;
          }
          if (time < tiledImage.lastResetTime) {
            $3.console.log("Ignoring tile %s loaded before reset: %s", tile, tile.url);
            tile.loading = false;
            return;
          }
          var finish = function() {
            var cutoff = tiledImage.source.getClosestLevel();
            setTileLoaded(tiledImage, tile, image, cutoff, tileRequest);
          };
          if (!tiledImage._midDraw) {
            finish();
          } else {
            window.setTimeout(finish, 1);
          }
        }
        function setTileLoaded(tiledImage, tile, image, cutoff, tileRequest) {
          var increment = 0;
          function getCompletionCallback() {
            increment++;
            return completionCallback;
          }
          function completionCallback() {
            increment--;
            if (increment === 0) {
              tile.loading = false;
              tile.loaded = true;
              if (!tile.context2D) {
                tiledImage._tileCache.cacheTile({
                  image,
                  tile,
                  cutoff,
                  tiledImage
                });
              }
              tiledImage._needsDraw = true;
            }
          }
          tiledImage.viewer.raiseEvent("tile-loaded", {
            tile,
            tiledImage,
            tileRequest,
            image,
            getCompletionCallback
          });
          getCompletionCallback()();
        }
        function positionTile(tile, overlap, viewport, viewportCenter, levelVisibility, tiledImage) {
          var boundsTL = tile.bounds.getTopLeft();
          boundsTL.x *= tiledImage._scaleSpring.current.value;
          boundsTL.y *= tiledImage._scaleSpring.current.value;
          boundsTL.x += tiledImage._xSpring.current.value;
          boundsTL.y += tiledImage._ySpring.current.value;
          var boundsSize = tile.bounds.getSize();
          boundsSize.x *= tiledImage._scaleSpring.current.value;
          boundsSize.y *= tiledImage._scaleSpring.current.value;
          var positionC = viewport.pixelFromPointNoRotate(boundsTL, true), positionT = viewport.pixelFromPointNoRotate(boundsTL, false), sizeC = viewport.deltaPixelsFromPointsNoRotate(boundsSize, true), sizeT = viewport.deltaPixelsFromPointsNoRotate(boundsSize, false), tileCenter = positionT.plus(sizeT.divide(2)), tileSquaredDistance = viewportCenter.squaredDistanceTo(tileCenter);
          if (!overlap) {
            sizeC = sizeC.plus(new $3.Point(1, 1));
          }
          if (tile.isRightMost && tiledImage.wrapHorizontal) {
            sizeC.x += 0.75;
          }
          if (tile.isBottomMost && tiledImage.wrapVertical) {
            sizeC.y += 0.75;
          }
          tile.position = positionC;
          tile.size = sizeC;
          tile.squaredDistance = tileSquaredDistance;
          tile.visibility = levelVisibility;
        }
        function blendTile(tiledImage, tile, x4, y4, level, levelOpacity, currentTime) {
          var blendTimeMillis = 1e3 * tiledImage.blendTime, deltaTime, opacity;
          if (!tile.blendStart) {
            tile.blendStart = currentTime;
          }
          deltaTime = currentTime - tile.blendStart;
          opacity = blendTimeMillis ? Math.min(1, deltaTime / blendTimeMillis) : 1;
          if (tiledImage.alwaysBlend) {
            opacity *= levelOpacity;
          }
          tile.opacity = opacity;
          tiledImage.lastDrawn.push(tile);
          if (opacity === 1) {
            setCoverage(tiledImage.coverage, level, x4, y4, true);
            tiledImage._hasOpaqueTile = true;
          } else if (deltaTime < blendTimeMillis) {
            return true;
          }
          return false;
        }
        function providesCoverage(coverage, level, x4, y4) {
          var rows, cols, i3, j3;
          if (!coverage[level]) {
            return false;
          }
          if (x4 === void 0 || y4 === void 0) {
            rows = coverage[level];
            for (i3 in rows) {
              if (Object.prototype.hasOwnProperty.call(rows, i3)) {
                cols = rows[i3];
                for (j3 in cols) {
                  if (Object.prototype.hasOwnProperty.call(cols, j3) && !cols[j3]) {
                    return false;
                  }
                }
              }
            }
            return true;
          }
          return coverage[level][x4] === void 0 || coverage[level][x4][y4] === void 0 || coverage[level][x4][y4] === true;
        }
        function isCovered(coverage, level, x4, y4) {
          if (x4 === void 0 || y4 === void 0) {
            return providesCoverage(coverage, level + 1);
          } else {
            return providesCoverage(coverage, level + 1, 2 * x4, 2 * y4) && providesCoverage(coverage, level + 1, 2 * x4, 2 * y4 + 1) && providesCoverage(coverage, level + 1, 2 * x4 + 1, 2 * y4) && providesCoverage(coverage, level + 1, 2 * x4 + 1, 2 * y4 + 1);
          }
        }
        function setCoverage(coverage, level, x4, y4, covers) {
          if (!coverage[level]) {
            $3.console.warn("Setting coverage for a tile before its level's coverage has been reset: %s", level);
            return;
          }
          if (!coverage[level][x4]) {
            coverage[level][x4] = {};
          }
          coverage[level][x4][y4] = covers;
        }
        function resetCoverage(coverage, level) {
          coverage[level] = {};
        }
        function compareTiles(previousBest, tile) {
          if (!previousBest) {
            return tile;
          }
          if (tile.visibility > previousBest.visibility) {
            return tile;
          } else if (tile.visibility === previousBest.visibility) {
            if (tile.squaredDistance < previousBest.squaredDistance) {
              return tile;
            }
          }
          return previousBest;
        }
        function drawTiles(tiledImage, lastDrawn) {
          if (tiledImage.opacity === 0 || lastDrawn.length === 0 && !tiledImage.placeholderFillStyle) {
            return;
          }
          var tile = lastDrawn[0];
          var useSketch;
          if (tile) {
            useSketch = tiledImage.opacity < 1 || tiledImage.compositeOperation && tiledImage.compositeOperation !== "source-over" || !tiledImage._isBottomItem() && tile._hasTransparencyChannel();
          }
          var sketchScale;
          var sketchTranslate;
          var zoom = tiledImage.viewport.getZoom(true);
          var imageZoom = tiledImage.viewportToImageZoom(zoom);
          if (lastDrawn.length > 1 && imageZoom > tiledImage.smoothTileEdgesMinZoom && !tiledImage.iOSDevice && tiledImage.getRotation(true) % 360 === 0 && $3.supportsCanvas) {
            useSketch = true;
            sketchScale = tile.getScaleForEdgeSmoothing();
            sketchTranslate = tile.getTranslationForEdgeSmoothing(sketchScale, tiledImage._drawer.getCanvasSize(false), tiledImage._drawer.getCanvasSize(true));
          }
          var bounds;
          if (useSketch) {
            if (!sketchScale) {
              bounds = tiledImage.viewport.viewportToViewerElementRectangle(tiledImage.getClippedBounds(true)).getIntegerBoundingBox();
              if (tiledImage._drawer.viewer.viewport.getFlip()) {
                if (tiledImage.viewport.degrees !== 0 || tiledImage.getRotation(true) % 360 !== 0) {
                  bounds.x = tiledImage._drawer.viewer.container.clientWidth - (bounds.x + bounds.width);
                }
              }
              bounds = bounds.times($3.pixelDensityRatio);
            }
            tiledImage._drawer._clear(true, bounds);
          }
          if (!sketchScale) {
            if (tiledImage.viewport.degrees !== 0) {
              tiledImage._drawer._offsetForRotation({
                degrees: tiledImage.viewport.degrees,
                useSketch
              });
            }
            if (tiledImage.getRotation(true) % 360 !== 0) {
              tiledImage._drawer._offsetForRotation({
                degrees: tiledImage.getRotation(true),
                point: tiledImage.viewport.pixelFromPointNoRotate(tiledImage._getRotationPoint(true), true),
                useSketch
              });
            }
            if (tiledImage.viewport.degrees === 0 && tiledImage.getRotation(true) % 360 === 0) {
              if (tiledImage._drawer.viewer.viewport.getFlip()) {
                tiledImage._drawer._flip();
              }
            }
          }
          var usedClip = false;
          if (tiledImage._clip) {
            tiledImage._drawer.saveContext(useSketch);
            var box = tiledImage.imageToViewportRectangle(tiledImage._clip, true);
            box = box.rotate(-tiledImage.getRotation(true), tiledImage._getRotationPoint(true));
            var clipRect = tiledImage._drawer.viewportToDrawerRectangle(box);
            if (sketchScale) {
              clipRect = clipRect.times(sketchScale);
            }
            if (sketchTranslate) {
              clipRect = clipRect.translate(sketchTranslate);
            }
            tiledImage._drawer.setClip(clipRect, useSketch);
            usedClip = true;
          }
          if (tiledImage._croppingPolygons) {
            tiledImage._drawer.saveContext(useSketch);
            try {
              var polygons = tiledImage._croppingPolygons.map(function(polygon) {
                return polygon.map(function(coord) {
                  var point = tiledImage.imageToViewportCoordinates(coord.x, coord.y, true).rotate(-tiledImage.getRotation(true), tiledImage._getRotationPoint(true));
                  var clipPoint = tiledImage._drawer.viewportCoordToDrawerCoord(point);
                  if (sketchScale) {
                    clipPoint = clipPoint.times(sketchScale);
                  }
                  return clipPoint;
                });
              });
              tiledImage._drawer.clipWithPolygons(polygons, useSketch);
            } catch (e4) {
              $3.console.error(e4);
            }
            usedClip = true;
          }
          if (tiledImage.placeholderFillStyle && tiledImage._hasOpaqueTile === false) {
            var placeholderRect = tiledImage._drawer.viewportToDrawerRectangle(tiledImage.getBounds(true));
            if (sketchScale) {
              placeholderRect = placeholderRect.times(sketchScale);
            }
            if (sketchTranslate) {
              placeholderRect = placeholderRect.translate(sketchTranslate);
            }
            var fillStyle = null;
            if (typeof tiledImage.placeholderFillStyle === "function") {
              fillStyle = tiledImage.placeholderFillStyle(tiledImage, tiledImage._drawer.context);
            } else {
              fillStyle = tiledImage.placeholderFillStyle;
            }
            tiledImage._drawer.drawRectangle(placeholderRect, fillStyle, useSketch);
          }
          for (var i3 = lastDrawn.length - 1; i3 >= 0; i3--) {
            tile = lastDrawn[i3];
            tiledImage._drawer.drawTile(tile, tiledImage._drawingHandler, useSketch, sketchScale, sketchTranslate);
            tile.beingDrawn = true;
            if (tiledImage.viewer) {
              tiledImage.viewer.raiseEvent("tile-drawn", {
                tiledImage,
                tile
              });
            }
          }
          if (usedClip) {
            tiledImage._drawer.restoreContext(useSketch);
          }
          if (!sketchScale) {
            if (tiledImage.getRotation(true) % 360 !== 0) {
              tiledImage._drawer._restoreRotationChanges(useSketch);
            }
            if (tiledImage.viewport.degrees !== 0) {
              tiledImage._drawer._restoreRotationChanges(useSketch);
            }
          }
          if (useSketch) {
            if (sketchScale) {
              if (tiledImage.viewport.degrees !== 0) {
                tiledImage._drawer._offsetForRotation({
                  degrees: tiledImage.viewport.degrees,
                  useSketch: false
                });
              }
              if (tiledImage.getRotation(true) % 360 !== 0) {
                tiledImage._drawer._offsetForRotation({
                  degrees: tiledImage.getRotation(true),
                  point: tiledImage.viewport.pixelFromPointNoRotate(tiledImage._getRotationPoint(true), true),
                  useSketch: false
                });
              }
            }
            tiledImage._drawer.blendSketch({
              opacity: tiledImage.opacity,
              scale: sketchScale,
              translate: sketchTranslate,
              compositeOperation: tiledImage.compositeOperation,
              bounds
            });
            if (sketchScale) {
              if (tiledImage.getRotation(true) % 360 !== 0) {
                tiledImage._drawer._restoreRotationChanges(false);
              }
              if (tiledImage.viewport.degrees !== 0) {
                tiledImage._drawer._restoreRotationChanges(false);
              }
            }
          }
          if (!sketchScale) {
            if (tiledImage.viewport.degrees === 0 && tiledImage.getRotation(true) % 360 === 0) {
              if (tiledImage._drawer.viewer.viewport.getFlip()) {
                tiledImage._drawer._flip();
              }
            }
          }
          drawDebugInfo(tiledImage, lastDrawn);
        }
        function drawDebugInfo(tiledImage, lastDrawn) {
          if (tiledImage.debugMode) {
            for (var i3 = lastDrawn.length - 1; i3 >= 0; i3--) {
              var tile = lastDrawn[i3];
              try {
                tiledImage._drawer.drawDebugInfo(tile, lastDrawn.length, i3, tiledImage);
              } catch (e4) {
                $3.console.error(e4);
              }
            }
          }
        }
      })(OpenSeadragon2);
      (function($3) {
        var TileRecord = function(options) {
          $3.console.assert(options, "[TileCache.cacheTile] options is required");
          $3.console.assert(options.tile, "[TileCache.cacheTile] options.tile is required");
          $3.console.assert(options.tiledImage, "[TileCache.cacheTile] options.tiledImage is required");
          this.tile = options.tile;
          this.tiledImage = options.tiledImage;
        };
        var ImageRecord = function(options) {
          $3.console.assert(options, "[ImageRecord] options is required");
          $3.console.assert(options.image, "[ImageRecord] options.image is required");
          this._image = options.image;
          this._tiles = [];
        };
        ImageRecord.prototype = {
          destroy: function() {
            this._image = null;
            this._renderedContext = null;
            this._tiles = null;
          },
          getImage: function() {
            return this._image;
          },
          getRenderedContext: function() {
            if (!this._renderedContext) {
              var canvas = document.createElement("canvas");
              canvas.width = this._image.width;
              canvas.height = this._image.height;
              this._renderedContext = canvas.getContext("2d");
              this._renderedContext.drawImage(this._image, 0, 0);
              this._image = null;
            }
            return this._renderedContext;
          },
          setRenderedContext: function(renderedContext) {
            $3.console.error("ImageRecord.setRenderedContext is deprecated. The rendered context should be created by the ImageRecord itself when calling ImageRecord.getRenderedContext.");
            this._renderedContext = renderedContext;
          },
          addTile: function(tile) {
            $3.console.assert(tile, "[ImageRecord.addTile] tile is required");
            this._tiles.push(tile);
          },
          removeTile: function(tile) {
            for (var i3 = 0; i3 < this._tiles.length; i3++) {
              if (this._tiles[i3] === tile) {
                this._tiles.splice(i3, 1);
                return;
              }
            }
            $3.console.warn("[ImageRecord.removeTile] trying to remove unknown tile", tile);
          },
          getTileCount: function() {
            return this._tiles.length;
          }
        };
        $3.TileCache = function(options) {
          options = options || {};
          this._maxImageCacheCount = options.maxImageCacheCount || $3.DEFAULT_SETTINGS.maxImageCacheCount;
          this._tilesLoaded = [];
          this._imagesLoaded = [];
          this._imagesLoadedCount = 0;
        };
        $3.TileCache.prototype = {
          numTilesLoaded: function() {
            return this._tilesLoaded.length;
          },
          cacheTile: function(options) {
            $3.console.assert(options, "[TileCache.cacheTile] options is required");
            $3.console.assert(options.tile, "[TileCache.cacheTile] options.tile is required");
            $3.console.assert(options.tile.cacheKey, "[TileCache.cacheTile] options.tile.cacheKey is required");
            $3.console.assert(options.tiledImage, "[TileCache.cacheTile] options.tiledImage is required");
            var cutoff = options.cutoff || 0;
            var insertionIndex = this._tilesLoaded.length;
            var imageRecord = this._imagesLoaded[options.tile.cacheKey];
            if (!imageRecord) {
              $3.console.assert(options.image, "[TileCache.cacheTile] options.image is required to create an ImageRecord");
              imageRecord = this._imagesLoaded[options.tile.cacheKey] = new ImageRecord({
                image: options.image
              });
              this._imagesLoadedCount++;
            }
            imageRecord.addTile(options.tile);
            options.tile.cacheImageRecord = imageRecord;
            if (this._imagesLoadedCount > this._maxImageCacheCount) {
              var worstTile = null;
              var worstTileIndex = -1;
              var worstTileRecord = null;
              var prevTile, worstTime, worstLevel, prevTime, prevLevel, prevTileRecord;
              for (var i3 = this._tilesLoaded.length - 1; i3 >= 0; i3--) {
                prevTileRecord = this._tilesLoaded[i3];
                prevTile = prevTileRecord.tile;
                if (prevTile.level <= cutoff || prevTile.beingDrawn) {
                  continue;
                } else if (!worstTile) {
                  worstTile = prevTile;
                  worstTileIndex = i3;
                  worstTileRecord = prevTileRecord;
                  continue;
                }
                prevTime = prevTile.lastTouchTime;
                worstTime = worstTile.lastTouchTime;
                prevLevel = prevTile.level;
                worstLevel = worstTile.level;
                if (prevTime < worstTime || prevTime === worstTime && prevLevel > worstLevel) {
                  worstTile = prevTile;
                  worstTileIndex = i3;
                  worstTileRecord = prevTileRecord;
                }
              }
              if (worstTile && worstTileIndex >= 0) {
                this._unloadTile(worstTileRecord);
                insertionIndex = worstTileIndex;
              }
            }
            this._tilesLoaded[insertionIndex] = new TileRecord({
              tile: options.tile,
              tiledImage: options.tiledImage
            });
          },
          clearTilesFor: function(tiledImage) {
            $3.console.assert(tiledImage, "[TileCache.clearTilesFor] tiledImage is required");
            var tileRecord;
            for (var i3 = 0; i3 < this._tilesLoaded.length; ++i3) {
              tileRecord = this._tilesLoaded[i3];
              if (tileRecord.tiledImage === tiledImage) {
                this._unloadTile(tileRecord);
                this._tilesLoaded.splice(i3, 1);
                i3--;
              }
            }
          },
          getImageRecord: function(cacheKey) {
            $3.console.assert(cacheKey, "[TileCache.getImageRecord] cacheKey is required");
            return this._imagesLoaded[cacheKey];
          },
          _unloadTile: function(tileRecord) {
            $3.console.assert(tileRecord, "[TileCache._unloadTile] tileRecord is required");
            var tile = tileRecord.tile;
            var tiledImage = tileRecord.tiledImage;
            tile.unload();
            tile.cacheImageRecord = null;
            var imageRecord = this._imagesLoaded[tile.cacheKey];
            imageRecord.removeTile(tile);
            if (!imageRecord.getTileCount()) {
              imageRecord.destroy();
              delete this._imagesLoaded[tile.cacheKey];
              this._imagesLoadedCount--;
            }
            tiledImage.viewer.raiseEvent("tile-unloaded", {
              tile,
              tiledImage
            });
          }
        };
      })(OpenSeadragon2);
      (function($3) {
        $3.World = function(options) {
          var _this = this;
          $3.console.assert(options.viewer, "[World] options.viewer is required");
          $3.EventSource.call(this);
          this.viewer = options.viewer;
          this._items = [];
          this._needsDraw = false;
          this._autoRefigureSizes = true;
          this._needsSizesFigured = false;
          this._delegatedFigureSizes = function(event) {
            if (_this._autoRefigureSizes) {
              _this._figureSizes();
            } else {
              _this._needsSizesFigured = true;
            }
          };
          this._figureSizes();
        };
        $3.extend($3.World.prototype, $3.EventSource.prototype, {
          addItem: function(item, options) {
            $3.console.assert(item, "[World.addItem] item is required");
            $3.console.assert(item instanceof $3.TiledImage, "[World.addItem] only TiledImages supported at this time");
            options = options || {};
            if (options.index !== void 0) {
              var index = Math.max(0, Math.min(this._items.length, options.index));
              this._items.splice(index, 0, item);
            } else {
              this._items.push(item);
            }
            if (this._autoRefigureSizes) {
              this._figureSizes();
            } else {
              this._needsSizesFigured = true;
            }
            this._needsDraw = true;
            item.addHandler("bounds-change", this._delegatedFigureSizes);
            item.addHandler("clip-change", this._delegatedFigureSizes);
            this.raiseEvent("add-item", {
              item
            });
          },
          getItemAt: function(index) {
            $3.console.assert(index !== void 0, "[World.getItemAt] index is required");
            return this._items[index];
          },
          getIndexOfItem: function(item) {
            $3.console.assert(item, "[World.getIndexOfItem] item is required");
            return $3.indexOf(this._items, item);
          },
          getItemCount: function() {
            return this._items.length;
          },
          setItemIndex: function(item, index) {
            $3.console.assert(item, "[World.setItemIndex] item is required");
            $3.console.assert(index !== void 0, "[World.setItemIndex] index is required");
            var oldIndex = this.getIndexOfItem(item);
            if (index >= this._items.length) {
              throw new Error("Index bigger than number of layers.");
            }
            if (index === oldIndex || oldIndex === -1) {
              return;
            }
            this._items.splice(oldIndex, 1);
            this._items.splice(index, 0, item);
            this._needsDraw = true;
            this.raiseEvent("item-index-change", {
              item,
              previousIndex: oldIndex,
              newIndex: index
            });
          },
          removeItem: function(item) {
            $3.console.assert(item, "[World.removeItem] item is required");
            var index = $3.indexOf(this._items, item);
            if (index === -1) {
              return;
            }
            item.removeHandler("bounds-change", this._delegatedFigureSizes);
            item.removeHandler("clip-change", this._delegatedFigureSizes);
            item.destroy();
            this._items.splice(index, 1);
            this._figureSizes();
            this._needsDraw = true;
            this._raiseRemoveItem(item);
          },
          removeAll: function() {
            this.viewer._cancelPendingImages();
            var item;
            var i3;
            for (i3 = 0; i3 < this._items.length; i3++) {
              item = this._items[i3];
              item.removeHandler("bounds-change", this._delegatedFigureSizes);
              item.removeHandler("clip-change", this._delegatedFigureSizes);
              item.destroy();
            }
            var removedItems = this._items;
            this._items = [];
            this._figureSizes();
            this._needsDraw = true;
            for (i3 = 0; i3 < removedItems.length; i3++) {
              item = removedItems[i3];
              this._raiseRemoveItem(item);
            }
          },
          resetItems: function() {
            for (var i3 = 0; i3 < this._items.length; i3++) {
              this._items[i3].reset();
            }
          },
          update: function() {
            var animated = false;
            for (var i3 = 0; i3 < this._items.length; i3++) {
              animated = this._items[i3].update() || animated;
            }
            return animated;
          },
          draw: function() {
            for (var i3 = 0; i3 < this._items.length; i3++) {
              this._items[i3].draw();
            }
            this._needsDraw = false;
          },
          needsDraw: function() {
            for (var i3 = 0; i3 < this._items.length; i3++) {
              if (this._items[i3].needsDraw()) {
                return true;
              }
            }
            return this._needsDraw;
          },
          getHomeBounds: function() {
            return this._homeBounds.clone();
          },
          getContentFactor: function() {
            return this._contentFactor;
          },
          setAutoRefigureSizes: function(value) {
            this._autoRefigureSizes = value;
            if (value & this._needsSizesFigured) {
              this._figureSizes();
              this._needsSizesFigured = false;
            }
          },
          arrange: function(options) {
            options = options || {};
            var immediately = options.immediately || false;
            var layout = options.layout || $3.DEFAULT_SETTINGS.collectionLayout;
            var rows = options.rows || $3.DEFAULT_SETTINGS.collectionRows;
            var columns = options.columns || $3.DEFAULT_SETTINGS.collectionColumns;
            var tileSize = options.tileSize || $3.DEFAULT_SETTINGS.collectionTileSize;
            var tileMargin = options.tileMargin || $3.DEFAULT_SETTINGS.collectionTileMargin;
            var increment = tileSize + tileMargin;
            var wrap;
            if (!options.rows && columns) {
              wrap = columns;
            } else {
              wrap = Math.ceil(this._items.length / rows);
            }
            var x4 = 0;
            var y4 = 0;
            var item, box, width, height, position;
            this.setAutoRefigureSizes(false);
            for (var i3 = 0; i3 < this._items.length; i3++) {
              if (i3 && i3 % wrap === 0) {
                if (layout === "horizontal") {
                  y4 += increment;
                  x4 = 0;
                } else {
                  x4 += increment;
                  y4 = 0;
                }
              }
              item = this._items[i3];
              box = item.getBounds();
              if (box.width > box.height) {
                width = tileSize;
              } else {
                width = tileSize * (box.width / box.height);
              }
              height = width * (box.height / box.width);
              position = new $3.Point(x4 + (tileSize - width) / 2, y4 + (tileSize - height) / 2);
              item.setPosition(position, immediately);
              item.setWidth(width, immediately);
              if (layout === "horizontal") {
                x4 += increment;
              } else {
                y4 += increment;
              }
            }
            this.setAutoRefigureSizes(true);
          },
          _figureSizes: function() {
            var oldHomeBounds = this._homeBounds ? this._homeBounds.clone() : null;
            var oldContentSize = this._contentSize ? this._contentSize.clone() : null;
            var oldContentFactor = this._contentFactor || 0;
            if (!this._items.length) {
              this._homeBounds = new $3.Rect(0, 0, 1, 1);
              this._contentSize = new $3.Point(1, 1);
              this._contentFactor = 1;
            } else {
              var item = this._items[0];
              var bounds = item.getBounds();
              this._contentFactor = item.getContentSize().x / bounds.width;
              var clippedBounds = item.getClippedBounds().getBoundingBox();
              var left = clippedBounds.x;
              var top = clippedBounds.y;
              var right = clippedBounds.x + clippedBounds.width;
              var bottom = clippedBounds.y + clippedBounds.height;
              for (var i3 = 1; i3 < this._items.length; i3++) {
                item = this._items[i3];
                bounds = item.getBounds();
                this._contentFactor = Math.max(this._contentFactor, item.getContentSize().x / bounds.width);
                clippedBounds = item.getClippedBounds().getBoundingBox();
                left = Math.min(left, clippedBounds.x);
                top = Math.min(top, clippedBounds.y);
                right = Math.max(right, clippedBounds.x + clippedBounds.width);
                bottom = Math.max(bottom, clippedBounds.y + clippedBounds.height);
              }
              this._homeBounds = new $3.Rect(left, top, right - left, bottom - top);
              this._contentSize = new $3.Point(this._homeBounds.width * this._contentFactor, this._homeBounds.height * this._contentFactor);
            }
            if (this._contentFactor !== oldContentFactor || !this._homeBounds.equals(oldHomeBounds) || !this._contentSize.equals(oldContentSize)) {
              this.raiseEvent("metrics-change", {});
            }
          },
          _raiseRemoveItem: function(item) {
            this.raiseEvent("remove-item", { item });
          }
        });
      })(OpenSeadragon2);
    }
  });

  // node_modules/react-error-boundary/dist/react-error-boundary.umd.js
  var require_react_error_boundary_umd = __commonJS({
    "node_modules/react-error-boundary/dist/react-error-boundary.umd.js"(exports, module) {
      (function(global2, factory) {
        typeof exports === "object" && typeof module !== "undefined" ? factory(exports, require_react()) : typeof define === "function" && define.amd ? define(["exports", "react"], factory) : (global2 = typeof globalThis !== "undefined" ? globalThis : global2 || self, factory(global2.ReactErrorBoundary = {}, global2.React));
      })(exports, function(exports2, React35) {
        "use strict";
        function _interopNamespace(e4) {
          if (e4 && e4.__esModule)
            return e4;
          var n4 = /* @__PURE__ */ Object.create(null);
          if (e4) {
            Object.keys(e4).forEach(function(k4) {
              if (k4 !== "default") {
                var d3 = Object.getOwnPropertyDescriptor(e4, k4);
                Object.defineProperty(n4, k4, d3.get ? d3 : {
                  enumerable: true,
                  get: function() {
                    return e4[k4];
                  }
                });
              }
            });
          }
          n4["default"] = e4;
          return Object.freeze(n4);
        }
        var React__namespace = /* @__PURE__ */ _interopNamespace(React35);
        function _setPrototypeOf(o3, p5) {
          _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf2(o4, p6) {
            o4.__proto__ = p6;
            return o4;
          };
          return _setPrototypeOf(o3, p5);
        }
        function _inheritsLoose(subClass, superClass) {
          subClass.prototype = Object.create(superClass.prototype);
          subClass.prototype.constructor = subClass;
          _setPrototypeOf(subClass, superClass);
        }
        var changedArray = function changedArray2(a3, b3) {
          if (a3 === void 0) {
            a3 = [];
          }
          if (b3 === void 0) {
            b3 = [];
          }
          return a3.length !== b3.length || a3.some(function(item, index) {
            return !Object.is(item, b3[index]);
          });
        };
        var initialState = {
          error: null
        };
        var ErrorBoundary2 = /* @__PURE__ */ function(_React$Component) {
          _inheritsLoose(ErrorBoundary3, _React$Component);
          function ErrorBoundary3() {
            var _this;
            for (var _len = arguments.length, _args = new Array(_len), _key = 0; _key < _len; _key++) {
              _args[_key] = arguments[_key];
            }
            _this = _React$Component.call.apply(_React$Component, [this].concat(_args)) || this;
            _this.state = initialState;
            _this.resetErrorBoundary = function() {
              var _this$props;
              for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
                args[_key2] = arguments[_key2];
              }
              _this.props.onReset == null ? void 0 : (_this$props = _this.props).onReset.apply(_this$props, args);
              _this.reset();
            };
            return _this;
          }
          ErrorBoundary3.getDerivedStateFromError = function getDerivedStateFromError(error) {
            return {
              error
            };
          };
          var _proto = ErrorBoundary3.prototype;
          _proto.reset = function reset() {
            this.setState(initialState);
          };
          _proto.componentDidCatch = function componentDidCatch(error, info) {
            var _this$props$onError, _this$props2;
            (_this$props$onError = (_this$props2 = this.props).onError) == null ? void 0 : _this$props$onError.call(_this$props2, error, info);
          };
          _proto.componentDidUpdate = function componentDidUpdate(prevProps, prevState) {
            var error = this.state.error;
            var resetKeys = this.props.resetKeys;
            if (error !== null && prevState.error !== null && changedArray(prevProps.resetKeys, resetKeys)) {
              var _this$props$onResetKe, _this$props3;
              (_this$props$onResetKe = (_this$props3 = this.props).onResetKeysChange) == null ? void 0 : _this$props$onResetKe.call(_this$props3, prevProps.resetKeys, resetKeys);
              this.reset();
            }
          };
          _proto.render = function render() {
            var error = this.state.error;
            var _this$props4 = this.props, fallbackRender = _this$props4.fallbackRender, FallbackComponent = _this$props4.FallbackComponent, fallback = _this$props4.fallback;
            if (error !== null) {
              var _props = {
                error,
                resetErrorBoundary: this.resetErrorBoundary
              };
              if (/* @__PURE__ */ React__namespace.isValidElement(fallback)) {
                return fallback;
              } else if (typeof fallbackRender === "function") {
                return fallbackRender(_props);
              } else if (FallbackComponent) {
                return /* @__PURE__ */ React__namespace.createElement(FallbackComponent, _props);
              } else {
                throw new Error("react-error-boundary requires either a fallback, fallbackRender, or FallbackComponent prop");
              }
            }
            return this.props.children;
          };
          return ErrorBoundary3;
        }(React__namespace.Component);
        function withErrorBoundary(Component, errorBoundaryProps) {
          var Wrapped = function Wrapped2(props) {
            return /* @__PURE__ */ React__namespace.createElement(ErrorBoundary2, errorBoundaryProps, /* @__PURE__ */ React__namespace.createElement(Component, props));
          };
          var name = Component.displayName || Component.name || "Unknown";
          Wrapped.displayName = "withErrorBoundary(" + name + ")";
          return Wrapped;
        }
        function useErrorHandler(givenError) {
          var _React$useState = React__namespace.useState(null), error = _React$useState[0], setError = _React$useState[1];
          if (givenError != null)
            throw givenError;
          if (error != null)
            throw error;
          return setError;
        }
        exports2.ErrorBoundary = ErrorBoundary2;
        exports2.useErrorHandler = useErrorHandler;
        exports2.withErrorBoundary = withErrorBoundary;
        Object.defineProperty(exports2, "__esModule", { value: true });
      });
    }
  });

  // node_modules/react-dom/client.js
  var require_client = __commonJS({
    "node_modules/react-dom/client.js"(exports) {
      "use strict";
      var m3 = require_react_dom();
      if (false) {
        exports.createRoot = m3.createRoot;
        exports.hydrateRoot = m3.hydrateRoot;
      } else {
        i3 = m3.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;
        exports.createRoot = function(c4, o3) {
          i3.usingClientEntryPoint = true;
          try {
            return m3.createRoot(c4, o3);
          } finally {
            i3.usingClientEntryPoint = false;
          }
        };
        exports.hydrateRoot = function(c4, h3, o3) {
          i3.usingClientEntryPoint = true;
          try {
            return m3.hydrateRoot(c4, h3, o3);
          } finally {
            i3.usingClientEntryPoint = false;
          }
        };
      }
      var i3;
    }
  });

  // src/dev.tsx
  var import_react96 = __toESM(require_react());

  // src/index.tsx
  var import_react93 = __toESM(require_react());

  // src/context/viewer-context.tsx
  var import_react = __toESM(require_react());

  // node_modules/@iiif/parser/dist/esm/index.mjs
  var k = { id: "https://iiif-parser/annotation-page", type: "AnnotationPage", behavior: [], motivation: null, label: null, thumbnail: [], summary: null, requiredStatement: null, metadata: [], rights: null, provider: [], items: [], seeAlso: [], homepage: [], logo: [], rendering: [], service: [] };
  var N = { id: "https://iiif-parser/empty-canvas", type: "Canvas", label: null, behavior: [], motivation: null, thumbnail: [], posterCanvas: null, accompanyingCanvas: null, placeholderCanvas: null, summary: null, requiredStatement: null, metadata: [], rights: null, navDate: null, provider: [], items: [], annotations: [], seeAlso: [], homepage: [], logo: [], partOf: [], rendering: [], service: [], duration: 0, height: 0, width: 0 };
  var $ = { id: "https://iiif-parser/empty-collection", type: "Collection", label: null, viewingDirection: "left-to-right", behavior: [], motivation: null, thumbnail: [], posterCanvas: null, accompanyingCanvas: null, placeholderCanvas: null, summary: null, requiredStatement: null, metadata: [], rights: null, navDate: null, provider: [], items: [], annotations: [], seeAlso: [], homepage: [], logo: [], partOf: [], rendering: [], service: [], services: [] };
  var j = { id: "https://iiif-parser/empty-manifest", type: "Manifest", annotations: [], behavior: [], homepage: [], items: [], label: null, logo: [], metadata: [], motivation: null, navDate: null, provider: [], partOf: [], posterCanvas: null, accompanyingCanvas: null, placeholderCanvas: null, rendering: [], requiredStatement: null, rights: null, seeAlso: [], service: [], services: [], start: null, structures: [], summary: null, thumbnail: [], viewingDirection: "left-to-right" };
  var G = { id: "https://iiif-parser/empty-canvas", type: "Range", label: null, behavior: [], motivation: null, thumbnail: [], posterCanvas: null, accompanyingCanvas: null, placeholderCanvas: null, summary: null, requiredStatement: null, metadata: [], rights: null, navDate: null, provider: [], items: [], annotations: [], seeAlso: [], homepage: [], logo: [], partOf: [], rendering: [], service: [], start: null, supplementary: null, viewingDirection: "left-to-right" };
  var q = { id: "https://iiif-parser/empty-agent", type: "Agent", label: {}, logo: [], seeAlso: [], homepage: [] };
  var M = ["Collection", "Manifest", "Canvas", "AnnotationPage", "AnnotationCollection", "Annotation", "ContentResource", "Range", "Service", "Selector", "Agent"];
  function U(t4) {
    if (typeof t4 == "undefined" || t4 === null)
      throw new Error("Null or undefined is not a valid entity.");
    if (Array.isArray(t4))
      throw new Error("Array is not a valid entity");
    if (typeof t4 != "object")
      throw new Error(`${typeof t4} is not a valid entity`);
    if (typeof t4.type == "string") {
      const e4 = M.indexOf(t4.type);
      if (e4 !== -1)
        return M[e4];
    }
    if (t4.profile)
      return "Service";
    throw new Error("Resource type is not known");
  }
  var L = class {
    traversals;
    options;
    constructor(e4, i3 = {}) {
      this.traversals = { collection: [], manifest: [], canvas: [], annotationCollection: [], annotationPage: [], annotation: [], contentResource: [], choice: [], range: [], service: [], agent: [], ...e4 }, this.options = { allowUndefinedReturn: false, ...i3 };
    }
    static all(e4) {
      return new L({ collection: [e4], manifest: [e4], canvas: [e4], annotationCollection: [e4], annotationPage: [e4], annotation: [e4], contentResource: [e4], choice: [e4], range: [e4], service: [e4] });
    }
    traverseDescriptive(e4) {
      return e4.thumbnail && (e4.thumbnail = e4.thumbnail.map((i3) => this.traverseType(i3, this.traversals.contentResource))), e4.provider && (e4.provider = e4.provider.map((i3) => this.traverseAgent(i3))), e4;
    }
    traverseLinking(e4) {
      return e4.seeAlso && (e4.seeAlso = e4.seeAlso.map((i3) => this.traverseType(i3, this.traversals.contentResource))), e4.service && (e4.service = e4.service.map((i3) => this.traverseType(i3, this.traversals.service))), e4.services && (e4.services = e4.services.map((i3) => this.traverseType(i3, this.traversals.service))), e4.logo && (e4.logo = e4.logo.map((i3) => this.traverseType(i3, this.traversals.contentResource))), e4.homepage && (e4.homepage = e4.homepage.map((i3) => this.traverseType(i3, this.traversals.contentResource))), e4.partOf && (e4.partOf = e4.partOf.map((i3) => typeof i3 == "string" || !i3.type ? this.traverseType(i3, this.traversals.contentResource) : i3.type === "Canvas" ? this.traverseType(i3, this.traversals.canvas) : i3.type === "AnnotationCollection" ? this.traverseType(i3, this.traversals.annotationCollection) : this.traverseType(i3, this.traversals.contentResource))), e4.start && (e4.start = e4.start ? this.traverseType(e4.start, this.traversals.canvas) : null), e4.rendering && (e4.rendering = e4.rendering.map((i3) => this.traverseType(i3, this.traversals.contentResource))), e4.supplementary && (e4.supplementary = e4.supplementary.map((i3) => this.traverseType(i3, this.traversals.contentResource))), e4;
    }
    traverseCollectionItems(e4) {
      return e4.items && e4.items.map((i3) => i3.type === "Collection" ? this.traverseCollection(i3) : this.traverseManifest(i3)), e4;
    }
    traverseCollection(e4) {
      return this.traverseType(this.traverseDescriptive(this.traverseInlineAnnotationPages(this.traverseLinking(this.traversePosterCanvas(this.traverseCollectionItems(e4))))), this.traversals.collection);
    }
    traverseManifestItems(e4) {
      return e4.items && (e4.items = e4.items.map((i3) => this.traverseCanvas(i3))), e4;
    }
    traverseManifestStructures(e4) {
      return e4.structures && (e4.structures = e4.structures.map((i3) => this.traverseRange(i3))), e4;
    }
    traverseManifest(e4) {
      return this.traverseType(this.traverseInlineAnnotationPages(this.traverseManifestStructures(this.traversePosterCanvas(this.traverseDescriptive(this.traverseLinking(this.traverseManifestItems(e4)))))), this.traversals.manifest);
    }
    traverseCanvasItems(e4) {
      return e4.items = (e4.items || []).map((i3) => this.traverseAnnotationPage(i3)), e4;
    }
    traverseInlineAnnotationPages(e4) {
      return typeof e4 == "string" || !e4 || e4.annotations && (e4.annotations = e4.annotations.map((i3) => this.traverseAnnotationPage(i3))), e4;
    }
    traverseCanvas(e4) {
      return this.traverseType(this.traverseInlineAnnotationPages(this.traversePosterCanvas(this.traverseDescriptive(this.traverseLinking(this.traverseCanvasItems(e4))))), this.traversals.canvas);
    }
    traverseAnnotationPageItems(e4) {
      return e4.items && (e4.items = e4.items.map((i3) => this.traverseAnnotation(i3))), e4;
    }
    traverseAnnotationPage(e4) {
      return this.traverseType(this.traverseDescriptive(this.traverseLinking(this.traverseAnnotationPageItems(e4))), this.traversals.annotationPage);
    }
    traverseAnnotationBody(e4) {
      return Array.isArray(e4.body) ? e4.body = e4.body.map((i3) => this.traverseContentResource(i3)) : e4.body && (e4.body = this.traverseContentResource(e4.body)), e4;
    }
    traversePosterCanvas(e4) {
      return e4.posterCanvas && (e4.posterCanvas = this.traverseType(e4.posterCanvas, this.traversals.canvas)), e4.placeholderCanvas && (e4.placeholderCanvas = this.traverseType(e4.placeholderCanvas, this.traversals.canvas)), e4.accompanyingCanvas && (e4.accompanyingCanvas = this.traverseType(e4.accompanyingCanvas, this.traversals.canvas)), e4;
    }
    traverseAnnotation(e4) {
      return this.traverseType(this.traverseLinking(this.traverseAnnotationBody(e4)), this.traversals.annotation);
    }
    traverseContentResourceLinking(e4) {
      return typeof e4 == "string" || !e4 || e4 && e4.service && (e4.service = (e4.service || []).map((i3) => this.traverseType(i3, this.traversals.service))), e4;
    }
    traverseContentResource(e4) {
      return e4.type === "Choice" && (e4.items = e4.items.map((i3) => this.traverseContentResource(i3))), this.traverseType(this.traverseInlineAnnotationPages(this.traverseContentResourceLinking(e4)), this.traversals.contentResource);
    }
    traverseRangeRanges(e4) {
      return e4.items && (e4.items = e4.items.map((i3) => typeof i3 == "string" ? this.traverseCanvas({ id: i3, type: "Canvas" }) : i3.type === "Manifest" ? this.traverseManifest(i3) : this.traverseRange(i3))), e4;
    }
    traverseRange(e4) {
      return this.traverseType(this.traversePosterCanvas(this.traverseDescriptive(this.traverseLinking(this.traverseRangeRanges(e4)))), this.traversals.range);
    }
    traverseAgent(e4) {
      return this.traverseType(this.traverseDescriptive(this.traverseLinking(e4)), this.traversals.agent);
    }
    traverseType(e4, i3) {
      return i3.reduce((n4, r3) => {
        const a3 = r3(n4);
        return typeof a3 == "undefined" && !this.options.allowUndefinedReturn ? n4 : a3;
      }, e4);
    }
    traverseService(e4) {
      return this.traverseType(e4, this.traversals.service);
    }
    traverseUnknown(e4) {
      const i3 = U(e4);
      switch (i3) {
        case "Collection":
          return this.traverseCollection(e4);
        case "Manifest":
          return this.traverseManifest(e4);
        case "Canvas":
          return this.traverseCanvas(e4);
        case "AnnotationPage":
          return this.traverseAnnotationPage(e4);
        case "Annotation":
          return this.traverseAnnotation(e4);
        case "ContentResource":
          return this.traverseContentResource(e4);
        case "Range":
          return this.traverseRange(e4);
        case "Service":
          return this.traverseService(e4);
        case "Agent":
          return this.traverseAgent(e4);
        default:
          throw new Error(`Unknown or unsupported resource type of ${i3}`);
      }
    }
  };
  var V = ["sc:Collection", "sc:Manifest", "sc:Canvas", "oa:AnnotationList", "oa:Annotation", "sc:Range", "sc:Layer", "sc:Sequence", "oa:Choice", "Service", "ContentResource"];
  function Ie(t4) {
    if (typeof t4 == "undefined" || t4 === null)
      throw new Error("Null or undefined is not a valid entity.");
    if (Array.isArray(t4))
      throw new Error("Array is not a valid entity");
    if (typeof t4 != "object")
      throw new Error(`${typeof t4} is not a valid entity`);
    if (typeof t4["@type"] == "string") {
      const e4 = V.indexOf(t4["@type"]);
      if (e4 !== -1)
        return V[e4];
    }
    if (t4.profile)
      return "Service";
    if (t4.format || t4["@type"])
      return "ContentResource";
    throw new Error("Resource type is not known");
  }
  var x = class {
    traversals;
    options;
    constructor(e4, i3 = {}) {
      this.traversals = { collection: [], manifest: [], canvas: [], annotationList: [], sequence: [], annotation: [], contentResource: [], choice: [], range: [], service: [], layer: [], ...e4 }, this.options = { convertPropsToArray: true, mergeMemberProperties: true, allowUndefinedReturn: false, ...i3 };
    }
    static all(e4) {
      return new x({ collection: [e4], manifest: [e4], canvas: [e4], annotationList: [e4], sequence: [e4], annotation: [e4], contentResource: [e4], choice: [e4], range: [e4], service: [e4], layer: [e4] });
    }
    traverseCollection(e4) {
      return this.traverseType(this.traverseDescriptive(this.traverseLinking(this.traverseCollectionItems(e4))), this.traversals.collection);
    }
    traverseCollectionItems(e4) {
      if (this.options.mergeMemberProperties) {
        const i3 = [...(e4.manifests || []).map((n4) => typeof n4 == "string" ? { "@id": n4, "@type": "sc:Manifest" } : n4), ...(e4.collections || []).map((n4) => typeof n4 == "string" ? { "@id": n4, "@type": "sc:Collection" } : n4), ...e4.members || []];
        delete e4.collections, delete e4.manifests, e4.members = i3;
      }
      return e4.manifests && (e4.manifests = e4.manifests.map((i3) => this.traverseManifest(typeof i3 == "string" ? { "@id": i3, "@type": "sc:Manifest" } : i3))), e4.collections && (e4.collections = e4.collections.map((i3) => this.traverseCollection(typeof i3 == "string" ? { "@id": i3, "@type": "sc:Collection" } : i3))), e4.members && (e4.members = e4.members.map((i3) => typeof i3 == "string" ? i3 : this.traverseUnknown(i3))), e4;
    }
    traverseManifest(e4) {
      return this.traverseType(this.traverseDescriptive(this.traverseLinking(this.traverseManifestItems(e4))), this.traversals.manifest);
    }
    traverseManifestItems(e4) {
      return e4.sequences && (e4.sequences = e4.sequences.map((i3) => this.traverseSequence(i3))), e4.structures && (e4.structures = e4.structures.map((i3) => this.traverseRange(i3))), e4;
    }
    traverseSequence(e4) {
      return this.traverseType(this.traverseDescriptive(this.traverseLinking(this.traverseSequenceItems(e4))), this.traversals.sequence);
    }
    traverseSequenceItems(e4) {
      return e4.canvases && (e4.canvases = e4.canvases.map((i3) => this.traverseCanvas(i3))), e4;
    }
    traverseCanvas(e4) {
      return this.traverseType(this.traverseDescriptive(this.traverseLinking(this.traverseCanvasItems(e4))), this.traversals.canvas);
    }
    traverseCanvasItems(e4) {
      return e4.images && (e4.images = e4.images.map((i3) => this.traverseAnnotation(i3))), e4.otherContent && (e4.otherContent = e4.otherContent.map((i3) => this.traverseAnnotationList(i3))), e4;
    }
    traverseRange(e4) {
      return this.traverseType(this.traverseDescriptive(this.traverseLinking(this.traverseRangeItems(e4))), this.traversals.range);
    }
    traverseRangeItems(e4) {
      if (this.options.mergeMemberProperties) {
        const i3 = [...(e4.ranges || []).map((n4) => typeof n4 == "string" ? { "@id": n4, "@type": "sc:Range" } : n4), ...(e4.canvases || []).map((n4) => typeof n4 == "string" ? { "@id": n4, "@type": "sc:Canvas" } : n4), ...e4.members || []];
        delete e4.ranges, delete e4.canvases, e4.members = i3.length ? i3.map((n4) => this.traverseUnknown(n4)) : void 0;
      }
      return e4;
    }
    traverseAnnotationList(e4) {
      return this.traverseType(this.traverseDescriptive(this.traverseLinking(this.traverseAnnotationListItems(e4))), this.traversals.annotationList);
    }
    traverseAnnotationListItems(e4) {
      return e4.resources && (e4.resources = e4.resources.map((i3) => this.traverseAnnotation(i3))), e4;
    }
    traverseAnnotation(e4) {
      return this.traverseType(this.traverseDescriptive(this.traverseLinking(this.traverseAnnotationItems(e4))), this.traversals.annotation);
    }
    traverseAnnotationItems(e4) {
      return e4.resource && (e4.resource = this.traverseContentResource(e4.resource)), e4.on, e4;
    }
    traverseLayer(e4) {
      return this.traverseType(this.traverseLinking(this.traverseLayerItems(e4)), this.traversals.layer);
    }
    traverseLayerItems(e4) {
      return e4.otherContent && (e4.otherContent = e4.otherContent.map((i3) => this.traverseAnnotationList(i3))), e4;
    }
    traverseChoice(e4) {
      return this.traverseType(this.traverseChoiceItems(e4), this.traversals.choice);
    }
    traverseChoiceItems(e4) {
      return e4.default && e4.default !== "rdf:nil" && (e4.default = this.traverseContentResource(e4.default)), e4.item && e4.item !== "rdf:nil" && (e4.item = e4.item.map((i3) => this.traverseContentResource(i3))), e4;
    }
    traverseService(e4) {
      return this.traverseType(this.traverseLinking(e4), this.traversals.service);
    }
    traverseContentResource(e4) {
      return e4["@type"] === "oa:Choice" ? this.traverseChoice(e4) : this.traverseType(this.traverseDescriptive(this.traverseLinking(e4)), this.traversals.contentResource);
    }
    traverseUnknown(e4) {
      if (!e4["@type"] || typeof e4 == "string")
        return e4;
      switch (Ie(e4)) {
        case "sc:Collection":
          return this.traverseCollection(e4);
        case "sc:Manifest":
          return this.traverseManifest(e4);
        case "sc:Canvas":
          return this.traverseCanvas(e4);
        case "sc:Sequence":
          return this.traverseSequence(e4);
        case "sc:Range":
          return this.traverseRange(e4);
        case "oa:Annotation":
          return this.traverseAnnotation(e4);
        case "oa:AnnotationList":
          return this.traverseAnnotationList(e4);
        case "sc:Layer":
          return this.traverseLayer(e4);
        case "Service":
          return this.traverseService(e4);
        case "oa:Choice":
          return this.traverseChoice(e4);
        case "ContentResource":
          return this.traverseContentResource(e4);
      }
      return e4.profile ? this.traverseService(e4) : e4;
    }
    traverseImageResource(e4) {
      const i3 = Array.isArray(e4), n4 = Array.isArray(e4) ? e4 : [e4], r3 = [];
      for (const a3 of n4)
        typeof a3 == "string" ? r3.push(this.traverseContentResource({ "@id": a3, "@type": "dctypes:Image" })) : r3.push(this.traverseContentResource(a3));
      return !i3 && !this.options.convertPropsToArray ? r3[0] : r3;
    }
    traverseDescriptive(e4) {
      return e4.thumbnail && (e4.thumbnail = this.traverseImageResource(e4.thumbnail)), e4.logo && (e4.logo = this.traverseImageResource(e4.logo)), e4;
    }
    traverseOneOrMoreServices(e4) {
      const i3 = Array.isArray(e4), n4 = Array.isArray(e4) ? e4 : [e4], r3 = [];
      for (const a3 of n4)
        r3.push(this.traverseService(a3));
      return !i3 && !this.options.convertPropsToArray ? r3[0] : r3;
    }
    traverseLinking(e4) {
      return e4.related && (e4.related = this.traverseOneOrManyType(e4.related, this.traversals.contentResource)), e4.rendering && (e4.rendering = this.traverseOneOrManyType(e4.rendering, this.traversals.contentResource)), e4.service && (e4.service = this.traverseOneOrMoreServices(e4.service)), e4.seeAlso && (e4.seeAlso = this.traverseOneOrManyType(e4.seeAlso, this.traversals.contentResource)), e4.within && (typeof e4.within == "string" || (e4.within = this.traverseOneOrManyType(e4.within, this.traversals.contentResource))), e4.startCanvas && (typeof e4.startCanvas == "string" ? e4.startCanvas = this.traverseType({ "@id": e4.startCanvas, "@type": "sc:Canvas" }, this.traversals.canvas) : e4.startCanvas && this.traverseType(e4.startCanvas, this.traversals.canvas)), e4.contentLayer && (typeof e4.contentLayer == "string" ? e4.contentLayer = this.traverseLayer({ "@id": e4.contentLayer, "@type": "sc:Layer" }) : e4.contentLayer = this.traverseLayer(e4.contentLayer)), e4;
    }
    traverseOneOrManyType(e4, i3) {
      if (!Array.isArray(e4))
        if (this.options.convertPropsToArray)
          e4 = [e4];
        else
          return this.traverseType(e4, i3);
      return e4.map((n4) => this.traverseType(n4, i3));
    }
    traverseType(e4, i3) {
      return i3.reduce((n4, r3) => {
        const a3 = r3(n4);
        return typeof a3 == "undefined" && !this.options.allowUndefinedReturn ? n4 : a3;
      }, e4);
    }
  };
  var _e = "http://library.stanford.edu/iiif/image-api/compliance.html#level0";
  var W = "http://library.stanford.edu/iiif/image-api/compliance.html#level1";
  var z = "http://library.stanford.edu/iiif/image-api/compliance.html#level2";
  var be = "http://library.stanford.edu/iiif/image-api/conformance.html#level0";
  var B = "http://library.stanford.edu/iiif/image-api/conformance.html#level1";
  var H = "http://library.stanford.edu/iiif/image-api/conformance.html#level2";
  var Re = "http://library.stanford.edu/iiif/image-api/1.1/compliance.html#level0";
  var K = "http://library.stanford.edu/iiif/image-api/1.1/compliance.html#level1";
  var Q = "http://library.stanford.edu/iiif/image-api/1.1/compliance.html#level2";
  var we = "http://library.stanford.edu/iiif/image-api/1.1/conformance.html#level0";
  var X = "http://library.stanford.edu/iiif/image-api/1.1/conformance.html#level1";
  var Y = "http://library.stanford.edu/iiif/image-api/1.1/conformance.html#level2";
  var Ee = "http://iiif.io/api/image/1/level0.json";
  var Le = "http://iiif.io/api/image/1/profiles/level0.json";
  var Z = "http://iiif.io/api/image/1/level1.json";
  var J = "http://iiif.io/api/image/1/profiles/level1.json";
  var ee = "http://iiif.io/api/image/1/level2.json";
  var te = "http://iiif.io/api/image/1/profiles/level2.json";
  var Te = "http://iiif.io/api/image/2/level0.json";
  var Me = "http://iiif.io/api/image/2/profiles/level0.json";
  var ie = "http://iiif.io/api/image/2/level1.json";
  var ne = "http://iiif.io/api/image/2/profiles/level1.json";
  var re = "http://iiif.io/api/image/2/level2.json";
  var ae = "http://iiif.io/api/image/2/profiles/level2.json";
  var xe = "level0";
  var se = "level1";
  var oe = "level2";
  var Se = "http://iiif.io/api/image/2/level0";
  var le = "http://iiif.io/api/image/2/level1";
  var ve = "http://iiif.io/api/image/2/level2";
  var Oe = [le, ve, W, z, B, H, K, Q, X, Y, Z, J, ee, te, ie, ne, re, ae, se, oe];
  var Pe = [Se, le, ve, _e, W, z, be, B, H, Re, K, Q, we, X, Y, Ee, Le, Z, J, ee, te, Te, Me, ie, ne, re, ae, xe, se, oe];
  var S = { attributionLabel: "Attribution", lang: "none", providerId: "http://example.org/provider", providerName: "Unknown" };
  function u(t4, e4 = "none") {
    if (!t4)
      return {};
    const i3 = Array.isArray(t4) ? t4 : [t4], n4 = {};
    for (const r3 of i3) {
      if (typeof r3 == "string") {
        n4[e4] = n4[e4] ? n4[e4] : [], n4[e4].push(r3 || "");
        continue;
      }
      if (!r3["@language"]) {
        n4[e4] = n4[e4] ? n4[e4] : [], n4[e4].push(r3["@value"] || "");
        continue;
      }
      const a3 = r3["@language"];
      n4[a3] = n4[a3] ? n4[a3] : [], n4[a3].push(r3["@value"] || "");
    }
    return n4;
  }
  function pe(t4) {
    if (Array.isArray(t4))
      return pe(t4.find((e4) => typeof e4 == "string"));
    if (Pe.indexOf(t4) !== -1)
      return "level2";
    if (Oe.indexOf(t4) !== -1)
      return "level1";
    if (typeof t4 == "string")
      return t4;
  }
  function Fe(t4) {
    const e4 = Array.isArray(t4) ? t4 : [t4];
    for (const i3 of e4)
      switch (i3) {
        case "http://iiif.io/api/image/2/context.json":
        case "http://library.stanford.edu/iiif/image-api/1.1/compliance.html#level2":
          return "ImageService2";
        case "http://iiif.io/api/image/1/context.json":
        case "http://library.stanford.edu/iiif/image-api/1.1/context.json":
          return "ImageService1";
        case "http://iiif.io/api/annex/openannotation/context.json":
          return "ImageApiSelector";
      }
  }
  function De(t4) {
    switch (t4) {
      case "http://iiif.io/api/image/2/level0.json":
      case "http://iiif.io/api/image/2/level1.json":
      case "http://iiif.io/api/image/2/level2.json":
        return "ImageService2";
      case "http://iiif.io/api/auth/1/kiosk":
      case "http://iiif.io/api/auth/1/login":
      case "http://iiif.io/api/auth/1/clickthrough":
      case "http://iiif.io/api/auth/1/external":
      case "http://iiif.io/api/auth/0/kiosk":
      case "http://iiif.io/api/auth/0/login":
      case "http://iiif.io/api/auth/0/clickthrough":
      case "http://iiif.io/api/auth/0/external":
        return "AuthCookieService1";
      case "http://iiif.io/api/auth/1/token":
      case "http://iiif.io/api/auth/0/token":
        return "AuthTokenService1";
      case "http://iiif.io/api/auth/1/logout":
      case "http://iiif.io/api/auth/0/logout":
        return "AuthLogoutService1";
      case "http://iiif.io/api/search/1/search":
      case "http://iiif.io/api/search/0/search":
        return "SearchService1";
      case "http://iiif.io/api/search/1/autocomplete":
      case "http://iiif.io/api/search/0/autocomplete":
        return "AutoCompleteService1";
    }
  }
  function ke(t4) {
    return Array.isArray(t4) ? t4 : [t4];
  }
  function Ne(t4) {
    for (const e4 of ["sc", "oa", "dcterms", "dctypes", "iiif"])
      if (t4.startsWith(`${e4}:`))
        return t4.slice(e4.length + 1);
    return t4;
  }
  var $e = ["Collection", "Manifest", "Annotation", "AnnotationPage", "Range", "Service"];
  function O(t4) {
    const e4 = t4["@id"] || t4.id;
    let i3 = t4["@type"] || t4.type;
    const n4 = t4.profile || void 0, r3 = t4["@context"] || void 0;
    if (n4) {
      const a3 = De(n4);
      if (a3)
        return a3;
    }
    if (r3) {
      const a3 = Fe(r3);
      if (a3)
        return a3;
    }
    if (i3) {
      if (Array.isArray(i3)) {
        if (i3.indexOf("oa:CssStylesheet") !== -1)
          return "CssStylesheet";
        if (i3.indexOf("cnt:ContentAsText") !== -1)
          return "TextualBody";
        i3 = i3[0];
      }
      for (const a3 of ["sc", "oa", "dcterms", "dctypes", "iiif"])
        if (i3.startsWith(`${a3}:`)) {
          i3 = i3.slice(a3.length + 1);
          break;
        }
      switch (i3) {
        case "Layer":
          return "AnnotationCollection";
        case "AnnotationList":
          return "AnnotationPage";
        case "cnt:ContentAsText":
          return "TextualBody";
      }
    }
    if (i3 && $e.indexOf(i3) !== -1)
      return i3;
    if (t4.format) {
      if (t4.format.startsWith("image/"))
        return "Image";
      if (t4.format.startsWith("text/") || t4.format === "application/pdf")
        return "Text";
      if (t4.format.startsWith("application/"))
        return "Dataset";
    }
    return e4 && (e4.endsWith(".jpg") || e4.endsWith(".png") || e4.endsWith(".jpeg")) ? "Image" : i3 || "unknown";
  }
  var je = /http(s)?:\/\/(creativecommons.org|rightsstatements.org)[^"'\\<\n]+/gm;
  function Ge(t4) {
    const e4 = t4.match(je);
    return e4 ? e4[0] : t4;
  }
  function qe(t4, e4 = "Rights/License", i3 = "none") {
    let n4 = null;
    const r3 = [], a3 = Array.isArray(t4) ? t4 : [t4];
    for (const I2 of a3) {
      const o3 = I2 ? Ge(I2) : void 0;
      if (o3 && (o3.indexOf("creativecommons.org") !== -1 || o3.indexOf("rightsstatements.org") !== -1)) {
        o3.startsWith("https://") ? n4 = `http://${o3.slice(8)}` : n4 = o3;
        continue;
      }
      o3 && r3.push({ label: { [i3]: [e4] }, value: { [i3]: [o3] } });
    }
    return [n4, r3];
  }
  var Ue = ["http://iiif.io/api/presentation/2/context.json", "http://iiif.io/api/image/2/context.json", "http://iiif.io/api/image/1/context.json", "http://library.stanford.edu/iiif/image-api/1.1/context.json", "http://iiif.io/api/search/1/context.json", "http://iiif.io/api/search/0/context.json", "http://iiif.io/api/auth/1/context.json", "http://iiif.io/api/auth/0/context.json", "http://iiif.io/api/annex/openannotation/context.json"];
  function Ve(t4) {
    if (t4) {
      const e4 = Array.isArray(t4) ? t4 : [t4], i3 = [];
      for (const n4 of e4)
        n4 === "http://iiif.io/api/presentation/2/context.json" && i3.push("http://iiif.io/api/presentation/3/context.json"), Ue.indexOf(n4) === -1 && i3.push(n4);
      if (e4.length)
        return i3.length === 1 ? i3[0] : i3;
    }
  }
  function We(t4) {
    return t4 ? t4.map((e4) => ({ label: u(e4.label), value: u(e4.value) })) : [];
  }
  function v(t4) {
    for (const e4 in t4)
      (typeof t4[e4] == "undefined" || t4[e4] === null) && delete t4[e4];
    return t4;
  }
  var he = 0;
  function ce(t4, e4) {
    const i3 = encodeURI(t4.id || t4["@id"] || "").trim();
    return i3 && e4 ? `${i3}/${e4}` : i3 || (he++, `http://example.org/${t4["@type"]}${e4 ? `/${e4}` : ""}/${he}`);
  }
  function p(t4) {
    const e4 = [...t4.behavior || []];
    return t4.viewingHint && e4.push(t4.viewingHint), { "@context": t4["@context"] ? Ve(t4["@context"]) : void 0, id: (t4["@id"] || ce(t4)).trim(), type: O(t4), behavior: e4.length ? e4 : void 0, height: t4.height ? t4.height : void 0, width: t4.width ? t4.width : void 0, motivation: t4.motivation ? Ne(t4.motivation) : void 0, viewingDirection: t4.viewingDirection, profile: t4.profile, format: t4.format ? t4.format : void 0, duration: void 0, timeMode: void 0 };
  }
  function l(t4) {
    const [e4, i3] = qe(t4.license), n4 = [...t4.metadata ? We(t4.metadata) : [], ...i3];
    return { rights: e4, metadata: n4.length ? n4 : void 0, label: t4.label ? u(t4.label) : void 0, requiredStatement: t4.attribution ? { label: u(S.attributionLabel), value: u(t4.attribution) } : void 0, navDate: t4.navDate, summary: t4.description ? u(t4.description) : void 0, thumbnail: t4.thumbnail };
  }
  function ze(t4) {
    if (!t4.within)
      return;
    const e4 = Array.isArray(t4.within) ? t4.within : [t4.within], i3 = [];
    for (const n4 of e4)
      if (typeof n4 == "string") {
        if (n4)
          switch (t4["@type"]) {
            case "sc:Manifest":
              i3.push({ id: n4, type: "Collection" });
              break;
          }
      } else
        n4["@id"] && i3.push({ id: n4["@id"], type: O(n4) });
    return i3.length ? i3 : void 0;
  }
  function h(t4) {
    const e4 = t4.related ? Array.isArray(t4.related) ? t4.related : [t4.related] : [], i3 = t4.contentLayer;
    return { provider: t4.logo || e4.length ? [{ id: S.providerId, type: "Agent", homepage: e4.length ? [e4[0]] : void 0, logo: t4.logo ? Array.isArray(t4.logo) ? t4.logo : [t4.logo] : void 0, label: u(S.providerName) }] : void 0, partOf: ze(t4), rendering: t4.rendering, seeAlso: t4.seeAlso, start: t4.startCanvas, service: t4.service ? ke(t4.service) : void 0, supplementary: i3 ? [i3] : void 0 };
  }
  function Be(t4) {
    return v({ ...p(t4), ...l(t4), ...h(t4), items: t4.members });
  }
  function He(t4) {
    const e4 = [], i3 = [];
    for (const r3 of t4.sequences || [])
      r3.canvases.length && e4.push(...r3.canvases), r3.behavior && i3.push(...r3.behavior);
    const n4 = p(t4);
    return i3.length && (n4.behavior ? n4.behavior.push(...i3) : n4.behavior = i3), v({ ...n4, ...l(t4), ...h(t4), items: e4, structures: t4.structures });
  }
  function Ke(t4) {
    return v({ ...p(t4), ...l(t4), ...h(t4), items: t4.images && t4.images.length ? [{ id: ce(t4, "annotation-page"), type: "AnnotationPage", items: t4.images }] : void 0 });
  }
  function Qe(t4) {
    return v({ ...p(t4), ...l(t4), ...h(t4), items: t4.resources });
  }
  function Xe(t4) {
    return !t4.canvases || t4.canvases.length === 0 ? { canvases: [], behavior: [] } : { canvases: t4.canvases, behavior: t4.viewingHint ? [t4.viewingHint] : [] };
  }
  function Ye(t4) {
    return v({ ...p(t4), ...l(t4), ...h(t4), target: typeof t4.on == "string" ? encodeURI(t4.on).trim() : t4.on, body: t4.resource });
  }
  function Ze(t4) {
    const e4 = t4;
    return v({ ...p(e4), ...l(e4), ...h(e4) });
  }
  function Je(t4) {
    const e4 = [];
    return t4.default && t4.default !== "rdf:nil" && e4.push(t4.default), t4.item && t4.item !== "rdf:nil" && e4.push(...t4.item), { ...p(t4), ...l(t4), items: e4 };
  }
  function et(t4) {
    return v({ ...p(t4), ...l(t4), ...h(t4), items: t4.members });
  }
  function tt(t4) {
    const { "@id": e4, "@type": i3, "@context": n4, profile: r3, ...a3 } = t4;
    return e4 && (a3.id = e4), a3.type = O(t4), a3.type === "unknown" && (a3.type = "Service"), r3 && (a3.profile = pe(r3)), v({ ...a3, ...l(a3) });
  }
  function it(t4) {
    return v({ ...p(t4), ...l(t4), ...h(t4) });
  }
  var nt = new x({ collection: [Be], manifest: [He], canvas: [Ke], annotationList: [Qe], sequence: [Xe], annotation: [Ye], contentResource: [Ze], choice: [Je], range: [et], service: [tt], layer: [it] });
  function rt(t4) {
    return t4 && t4["@context"] && (t4["@context"] === "http://iiif.io/api/presentation/2/context.json" || t4["@context"].indexOf("http://iiif.io/api/presentation/2/context.json") !== -1 || t4["@context"] === "http://www.shared-canvas.org/ns/context.json") || t4["@context"] === "http://iiif.io/api/image/2/context.json" ? nt.traverseUnknown(t4) : t4;
  }
  function fe() {
    return { Collection: {}, Manifest: {}, Canvas: {}, AnnotationPage: {}, AnnotationCollection: {}, Annotation: {}, ContentResource: {}, Range: {}, Service: {}, Selector: {}, Agent: {} };
  }
  function ue(t4, e4) {
    if (typeof t4 == "string")
      return { id: t4, type: e4 };
    if (!t4.id)
      throw new Error(`Invalid resource does not have an ID (${e4})`);
    return t4;
  }
  function st(t4) {
    return (e4, i3) => {
      const n4 = t4[e4] ? t4[e4] : {};
      return (r3) => {
        const a3 = ue(r3, i3 || e4);
        return a3 && a3.id && e4 ? (n4[a3.id] = n4[a3.id] ? Object.assign({}, n4[a3.id], a3) : Object.assign({}, a3), { id: a3.id, type: e4 === "ContentResource" ? e4 : a3.type }) : a3;
      };
    };
  }
  function ot(t4) {
    return (e4, i3) => (n4) => {
      const { id: r3, type: a3 } = ue(n4, i3 || e4);
      if (typeof r3 == "undefined")
        throw new Error("Found invalid entity without an ID.");
      return e4 === "ContentResource" ? t4[r3] = e4 : t4[r3] = a3, n4;
    };
  }
  function lt(t4) {
    const e4 = JSON.stringify(t4);
    let i3 = 5381, n4 = e4.length;
    for (; n4; )
      i3 = i3 * 33 ^ e4.charCodeAt(--n4);
    const a3 = (i3 >>> 0).toString(16);
    return a3.length % 2 ? "0" + a3 : a3;
  }
  function P(t4) {
    return (e4) => typeof e4 == "string" ? { id: e4, type: t4 } : e4.id ? e4.type ? e4 : { type: t4, ...e4 } : { id: `vault://${lt(e4)}`, type: t4, ...e4 };
  }
  function _(t4) {
    return (e4) => ({ ...t4, ...e4 });
  }
  function b(t4) {
    return Array.isArray(t4) ? t4 : [t4];
  }
  function vt(t4) {
    return t4.body && (t4.body = b(t4.body)), t4.seeAlso && (t4.seeAlso = b(t4.seeAlso)), t4.body && (t4.body = b(t4.body)), t4.audience && (t4.audience = b(t4.audience)), t4.accessibility && (t4.accessibility = b(t4.accessibility)), t4.motivation && (t4.motivation = b(t4.motivation)), t4;
  }
  function pt(t4) {
    const e4 = rt(t4), i3 = fe(), n4 = {}, r3 = st(i3), a3 = ot(n4), o3 = new L({ collection: [_($), a3("Collection"), r3("Collection")], manifest: [_(j), a3("Manifest"), r3("Manifest")], canvas: [_(N), a3("Canvas"), r3("Canvas")], annotationPage: [P("AnnotationPage"), _(k), a3("AnnotationPage"), r3("AnnotationPage")], annotation: [P("Annotation"), vt, a3("Annotation"), r3("Annotation")], contentResource: [P("ContentResource"), a3("ContentResource"), r3("ContentResource")], range: [_(G), a3("Range", "Canvas"), r3("Range", "Canvas")], agent: [_(q), a3("Agent"), r3("Agent")] }).traverseUnknown(e4);
    return { entities: i3, resource: o3, mapping: n4 };
  }
  var c = "__$UNSET$__";
  var F = "__$UNWRAP$__";
  function ht(t4, e4) {
    const i3 = t4.requests[e4], n4 = t4.mapping[e4];
    if (!(!n4 || i3 && i3.resourceUri && !t4.entities[n4][i3.resourceUri]))
      return t4.entities[n4][i3 ? i3.resourceUri : e4];
  }
  function de(t4) {
    const e4 = {};
    for (const [i3, n4] of t4) {
      if (i3 === F && n4 !== c)
        return n4;
      n4 !== c && typeof n4 != "undefined" && n4 !== null && (e4[i3] = n4);
    }
    return e4;
  }
  function ct(t4, e4, i3) {
    if (!e4.type || !e4.id)
      throw new Error("Unknown entity");
    if (!i3[e4.type])
      throw new Error(`Serializer not found for ${e4.type}`);
    function n4(r3) {
      const a3 = i3[r3.type];
      if (!a3)
        return c;
      const I2 = ht(t4, r3.id) || (r3.id && r3.type ? r3 : null);
      if (!I2)
        return c;
      const o3 = a3(I2, t4, { isTopLevel: e4.id === r3.id });
      let R2 = o3.next();
      for (; !R2.done; ) {
        const E2 = R2.value;
        let T3 = c;
        if (E2)
          if (Array.isArray(E2)) {
            const D2 = [];
            for (const Ae of E2)
              D2.push(n4(Ae));
            T3 = D2;
          } else
            T3 = n4(E2);
        R2 = o3.next(T3);
      }
      return R2.value === c ? c : de(R2.value);
    }
    return n4(e4);
  }
  function d(t4) {
    if (!t4)
      return;
    const e4 = Object.keys(t4);
    if (e4.length !== 0) {
      if (e4.length === 1) {
        const i3 = e4[0];
        if (!i3)
          return "";
        const n4 = (t4[i3] || []).join("");
        return i3 === "@none" || i3 === "none" || i3 === "en" ? n4 : { "@language": i3, "@value": n4 };
      }
      return e4.map((i3) => ({ "@language": i3, "@value": (t4[i3] || []).join("") }));
    }
  }
  function me(t4) {
    return Array.isArray(t4) ? t4.map((e4) => me(e4)) : typeof t4 == "string" ? t4 : t4.type && t4.type === "Canvas" ? t4.id : t4;
  }
  function f(t4, e4 = false) {
    if (!!t4)
      return t4.length > 1 && !e4 ? t4 : t4[0] || void 0;
  }
  function ft(t4) {
    if (!!t4) {
      if (typeof t4 == "string")
        return { "@id": t4 };
      if ("@id" in t4) {
        const e4 = { ...t4 };
        return delete e4["@type"], e4;
      }
      return { "@context": "http://iiif.io/api/image/2/context.json", "@id": t4.id, profile: `http://iiif.io/api/image/2/profiles/${t4.profile}.json` };
    }
  }
  function m(t4, e4) {
    return [["@id", t4.id], ["@type", e4], ["format", t4.format], ["height", t4.height], ["width", t4.width], ["viewingDirection", t4.viewingDirection !== "left-to-right" ? t4.viewingDirection : void 0]];
  }
  function* g(t4) {
    const e4 = t4.provider ? yield t4.provider[0] : void 0;
    return [["label", d(t4.label)], ["metadata", t4.metadata && t4.metadata.length ? t4.metadata.map((i3) => ({ label: d(i3.label) || "", value: d(i3.value) || "" })) : void 0], ["description", d(t4.summary)], ["thumbnail", f(yield t4.thumbnail)], ["navDate", t4.navDate], ["logo", e4 ? f(e4.logo) : void 0], ["homepage", e4 ? e4.homepage : void 0], ["attribution", t4.requiredStatement ? d(t4.requiredStatement.value) : void 0]];
  }
  function* w(t4) {
    return [["seeAlso", f(yield t4.seeAlso)], ["service", f((t4.service || []).map(ft))], ["rendering", f(yield t4.rendering)], ["startCanvas", t4.start ? t4.start.id : void 0]];
  }
  var ut = { Manifest: function* (t4) {
    return [...m(t4, "sc:Manifest"), ...yield* g(t4), ...yield* w(t4), ["sequences", [{ "@id": `${t4.id}/sequence0`, "@type": "sc:Sequence", canvases: yield t4.items }]], ["structures", yield t4.structures]];
  }, Canvas: function* (t4) {
    const i3 = (yield t4.items)[0];
    return [...m(t4, "sc:Canvas"), ...yield* g(t4), ...yield* w(t4), ["images", i3 ? [i3.resources] : void 0], ["annotations", t4.annotations && t4.annotations.length ? f(yield t4.annotations) : void 0]];
  }, AnnotationPage: function* (t4) {
    return [...m(t4, "sc:AnnotationList"), ...yield* g(t4), ["resources", t4.items && t4.items.length ? f(yield t4.items) : void 0]];
  }, Annotation: function* (t4) {
    return [["@id", t4.id], ["@type", "oa:Annotation"], ["motivation", "sc:painting"], ["on", me(t4.target)], ["resource", f(yield t4.body, true)]];
  }, ContentResource: function* (t4) {
    switch (t4.type) {
      case "Image":
        return [...m(t4, "dctypes:Image"), ...yield* g(t4), ...yield* w(t4)];
      case "Text":
      case "Dataset":
      default:
        return [...m(t4, void 0), ...yield* g(t4)];
    }
  }, AnnotationCollection: function* (t4) {
    return [["@id", t4.id], ["@type", "sc:Layer"], ["label", d(t4.label)]];
  }, Collection: function* (t4) {
    return [...m(t4, "sc:Collection"), ...yield* g(t4), ...yield* w(t4), ["members", yield* t4.items]];
  }, Range: function* (t4) {
    const e4 = [], i3 = [];
    if (t4.items)
      for (const n4 of t4.items) {
        const r3 = yield n4;
        e4.push({ "@id": n4.id, "@type": n4.type, label: r3 ? r3.label : void 0, within: t4.id }), n4.type === "Canvas" && i3.push(n4.id);
      }
    return [...m(t4, "sc:Range"), ...yield* g(t4), ...yield* w(t4), ["canvases", i3.length === e4.length ? i3 : void 0], ["members", i3.length !== e4.length ? e4 : void 0]];
  } };
  function y(t4) {
    return [["id", t4.id?.startsWith("vault://") ? void 0 : t4.id], ["type", t4.type], ["format", t4.format], ["profile", t4.profile], ["height", t4.height], ["width", t4.width], ["duration", t4.duration || void 0], ["viewingDirection", t4.viewingDirection !== "left-to-right" ? t4.viewingDirection : void 0], ["behavior", t4.behavior && t4.behavior.length ? t4.behavior : void 0], ["timeMode", t4.timeMode], ["motivation", Array.isArray(t4.motivation) ? t4.motivation[0] : t4.motivation]];
  }
  function s(t4) {
    if (!(!t4 || t4.length === 0))
      return t4;
  }
  function ge(t4) {
    if (t4 && t4.type && t4.type === "ImageService2") {
      const { id: e4, type: i3, profile: n4, ...r3 } = t4;
      return { "@id": e4, "@type": i3, profile: n4.startsWith("http") ? n4 : `http://iiif.io/api/image/2/${n4}.json`, ...r3 };
    }
    return t4;
  }
  function ye(t4) {
    if (!(!t4 || t4.length === 0))
      return t4.map(ge);
  }
  function* A(t4) {
    return [["label", t4.label], ["metadata", s(t4.metadata)], ["summary", t4.summary], ["requiredStatement", t4.requiredStatement], ["rights", t4.rights], ["navDate", t4.navDate], ["language", t4.language], ["thumbnail", s(yield t4.thumbnail)], ["placeholderCanvas", yield t4.placeholderCanvas], ["accompanyingCanvas", yield t4.accompanyingCanvas], ["provider", s(yield t4.provider)]];
  }
  function* C(t4) {
    return [["seeAlso", s(yield t4.seeAlso)], ["service", ye(t4.service)], ["services", ye(t4.services)], ["rendering", s(yield t4.rendering)], ["supplementary", s(yield t4.supplementary)], ["homepage", s(yield t4.homepage)], ["logo", s(yield t4.logo)], ["partOf", s(yield t4.partOf)], ["start", t4.start]];
  }
  var dt = { Manifest: function* (t4, e4, { isTopLevel: i3 }) {
    return i3 ? [["@context", "http://iiif.io/api/presentation/3/context.json"], ...y(t4), ...yield* A(t4), ...yield* C(t4), ["items", yield t4.items], ["structures", s(yield t4.structures)], ["annotations", s(yield t4.annotations)]] : [...y(t4), ...yield* A(t4)];
  }, Canvas: function* (t4) {
    return [...y(t4), ...yield* A(t4), ...yield* C(t4), ["items", yield t4.items], ["annotations", s(yield t4.annotations)]];
  }, Agent: function* (t4) {
    return [["id", t4.id], ["type", "Agent"], ["label", t4.label], ...yield* C(t4)];
  }, AnnotationPage: function* (t4) {
    return [...Object.entries(t4).map(([i3, n4]) => [i3, Array.isArray(n4) ? s(n4) : n4]).filter(([i3, n4]) => i3 !== "items"), ...yield* C(t4), ["items", yield t4.items]];
  }, Service: function* (t4) {
    return [[F, ge(t4)]];
  }, Annotation: function* (t4) {
    const e4 = Object.entries(t4).map(([n4, r3]) => n4 === "motivation" ? [n4, Array.isArray(r3) ? r3[0] : r3] : [n4, Array.isArray(r3) ? s(r3) : r3]).filter(([n4]) => n4 !== "body"), i3 = yield t4.body;
    return [...e4, ["body", i3.length === 1 ? i3[0] : i3]];
  }, ContentResource: function* (t4) {
    return [...y(t4), ...yield* A(t4), ...yield* C(t4), ["annotations", s(yield t4.annotations)], ["items", s(yield t4.items)]];
  }, AnnotationCollection: function* (t4) {
    return [["id", t4.id], ["type", "AnnotationCollection"], ["label", t4.label]];
  }, Collection: function* (t4, e4, { isTopLevel: i3 }) {
    return i3 ? [["@context", "http://iiif.io/api/presentation/3/context.json"], ...y(t4), ...yield* A(t4), ...yield* C(t4), ["items", s(yield t4.items)]] : [...y(t4), ...yield* A(t4)];
  }, Range: function* (t4) {
    const e4 = [];
    for (const i3 of t4.items)
      i3.type === "Range" ? e4.push(yield i3) : e4.push(i3);
    return [...y(t4), ...yield* A(t4), ...yield* C(t4), ["items", e4], ["annotations", s(yield t4.annotations)]];
  } };

  // node_modules/@iiif/vault/dist/esm/index.mjs
  var import_typesafe_actions = __toESM(require_typesafe_actions_umd_production(), 1);

  // node_modules/@babel/runtime/helpers/esm/defineProperty.js
  function _defineProperty(obj, key, value) {
    if (key in obj) {
      Object.defineProperty(obj, key, {
        value,
        enumerable: true,
        configurable: true,
        writable: true
      });
    } else {
      obj[key] = value;
    }
    return obj;
  }

  // node_modules/@babel/runtime/helpers/esm/objectSpread2.js
  function ownKeys(object, enumerableOnly) {
    var keys = Object.keys(object);
    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object);
      enumerableOnly && (symbols = symbols.filter(function(sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      })), keys.push.apply(keys, symbols);
    }
    return keys;
  }
  function _objectSpread2(target) {
    for (var i3 = 1; i3 < arguments.length; i3++) {
      var source = arguments[i3] != null ? arguments[i3] : {};
      i3 % 2 ? ownKeys(Object(source), true).forEach(function(key) {
        _defineProperty(target, key, source[key]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function(key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }
    return target;
  }

  // node_modules/redux/es/redux.js
  var $$observable = function() {
    return typeof Symbol === "function" && Symbol.observable || "@@observable";
  }();
  var randomString = function randomString2() {
    return Math.random().toString(36).substring(7).split("").join(".");
  };
  var ActionTypes = {
    INIT: "@@redux/INIT" + randomString(),
    REPLACE: "@@redux/REPLACE" + randomString(),
    PROBE_UNKNOWN_ACTION: function PROBE_UNKNOWN_ACTION() {
      return "@@redux/PROBE_UNKNOWN_ACTION" + randomString();
    }
  };
  function isPlainObject(obj) {
    if (typeof obj !== "object" || obj === null)
      return false;
    var proto = obj;
    while (Object.getPrototypeOf(proto) !== null) {
      proto = Object.getPrototypeOf(proto);
    }
    return Object.getPrototypeOf(obj) === proto;
  }
  function miniKindOf(val) {
    if (val === void 0)
      return "undefined";
    if (val === null)
      return "null";
    var type = typeof val;
    switch (type) {
      case "boolean":
      case "string":
      case "number":
      case "symbol":
      case "function": {
        return type;
      }
    }
    if (Array.isArray(val))
      return "array";
    if (isDate(val))
      return "date";
    if (isError(val))
      return "error";
    var constructorName = ctorName(val);
    switch (constructorName) {
      case "Symbol":
      case "Promise":
      case "WeakMap":
      case "WeakSet":
      case "Map":
      case "Set":
        return constructorName;
    }
    return type.slice(8, -1).toLowerCase().replace(/\s/g, "");
  }
  function ctorName(val) {
    return typeof val.constructor === "function" ? val.constructor.name : null;
  }
  function isError(val) {
    return val instanceof Error || typeof val.message === "string" && val.constructor && typeof val.constructor.stackTraceLimit === "number";
  }
  function isDate(val) {
    if (val instanceof Date)
      return true;
    return typeof val.toDateString === "function" && typeof val.getDate === "function" && typeof val.setDate === "function";
  }
  function kindOf(val) {
    var typeOfVal = typeof val;
    if (true) {
      typeOfVal = miniKindOf(val);
    }
    return typeOfVal;
  }
  function createStore(reducer, preloadedState, enhancer) {
    var _ref2;
    if (typeof preloadedState === "function" && typeof enhancer === "function" || typeof enhancer === "function" && typeof arguments[3] === "function") {
      throw new Error(false ? formatProdErrorMessage(0) : "It looks like you are passing several store enhancers to createStore(). This is not supported. Instead, compose them together to a single function. See https://redux.js.org/tutorials/fundamentals/part-4-store#creating-a-store-with-enhancers for an example.");
    }
    if (typeof preloadedState === "function" && typeof enhancer === "undefined") {
      enhancer = preloadedState;
      preloadedState = void 0;
    }
    if (typeof enhancer !== "undefined") {
      if (typeof enhancer !== "function") {
        throw new Error(false ? formatProdErrorMessage(1) : "Expected the enhancer to be a function. Instead, received: '" + kindOf(enhancer) + "'");
      }
      return enhancer(createStore)(reducer, preloadedState);
    }
    if (typeof reducer !== "function") {
      throw new Error(false ? formatProdErrorMessage(2) : "Expected the root reducer to be a function. Instead, received: '" + kindOf(reducer) + "'");
    }
    var currentReducer = reducer;
    var currentState = preloadedState;
    var currentListeners = [];
    var nextListeners = currentListeners;
    var isDispatching = false;
    function ensureCanMutateNextListeners() {
      if (nextListeners === currentListeners) {
        nextListeners = currentListeners.slice();
      }
    }
    function getState() {
      if (isDispatching) {
        throw new Error(false ? formatProdErrorMessage(3) : "You may not call store.getState() while the reducer is executing. The reducer has already received the state as an argument. Pass it down from the top reducer instead of reading it from the store.");
      }
      return currentState;
    }
    function subscribe(listener) {
      if (typeof listener !== "function") {
        throw new Error(false ? formatProdErrorMessage(4) : "Expected the listener to be a function. Instead, received: '" + kindOf(listener) + "'");
      }
      if (isDispatching) {
        throw new Error(false ? formatProdErrorMessage(5) : "You may not call store.subscribe() while the reducer is executing. If you would like to be notified after the store has been updated, subscribe from a component and invoke store.getState() in the callback to access the latest state. See https://redux.js.org/api/store#subscribelistener for more details.");
      }
      var isSubscribed = true;
      ensureCanMutateNextListeners();
      nextListeners.push(listener);
      return function unsubscribe() {
        if (!isSubscribed) {
          return;
        }
        if (isDispatching) {
          throw new Error(false ? formatProdErrorMessage(6) : "You may not unsubscribe from a store listener while the reducer is executing. See https://redux.js.org/api/store#subscribelistener for more details.");
        }
        isSubscribed = false;
        ensureCanMutateNextListeners();
        var index = nextListeners.indexOf(listener);
        nextListeners.splice(index, 1);
        currentListeners = null;
      };
    }
    function dispatch(action) {
      if (!isPlainObject(action)) {
        throw new Error(false ? formatProdErrorMessage(7) : "Actions must be plain objects. Instead, the actual type was: '" + kindOf(action) + "'. You may need to add middleware to your store setup to handle dispatching other values, such as 'redux-thunk' to handle dispatching functions. See https://redux.js.org/tutorials/fundamentals/part-4-store#middleware and https://redux.js.org/tutorials/fundamentals/part-6-async-logic#using-the-redux-thunk-middleware for examples.");
      }
      if (typeof action.type === "undefined") {
        throw new Error(false ? formatProdErrorMessage(8) : 'Actions may not have an undefined "type" property. You may have misspelled an action type string constant.');
      }
      if (isDispatching) {
        throw new Error(false ? formatProdErrorMessage(9) : "Reducers may not dispatch actions.");
      }
      try {
        isDispatching = true;
        currentState = currentReducer(currentState, action);
      } finally {
        isDispatching = false;
      }
      var listeners = currentListeners = nextListeners;
      for (var i3 = 0; i3 < listeners.length; i3++) {
        var listener = listeners[i3];
        listener();
      }
      return action;
    }
    function replaceReducer(nextReducer) {
      if (typeof nextReducer !== "function") {
        throw new Error(false ? formatProdErrorMessage(10) : "Expected the nextReducer to be a function. Instead, received: '" + kindOf(nextReducer));
      }
      currentReducer = nextReducer;
      dispatch({
        type: ActionTypes.REPLACE
      });
    }
    function observable() {
      var _ref;
      var outerSubscribe = subscribe;
      return _ref = {
        subscribe: function subscribe2(observer) {
          if (typeof observer !== "object" || observer === null) {
            throw new Error(false ? formatProdErrorMessage(11) : "Expected the observer to be an object. Instead, received: '" + kindOf(observer) + "'");
          }
          function observeState() {
            if (observer.next) {
              observer.next(getState());
            }
          }
          observeState();
          var unsubscribe = outerSubscribe(observeState);
          return {
            unsubscribe
          };
        }
      }, _ref[$$observable] = function() {
        return this;
      }, _ref;
    }
    dispatch({
      type: ActionTypes.INIT
    });
    return _ref2 = {
      dispatch,
      subscribe,
      getState,
      replaceReducer
    }, _ref2[$$observable] = observable, _ref2;
  }
  function warning(message) {
    if (typeof console !== "undefined" && typeof console.error === "function") {
      console.error(message);
    }
    try {
      throw new Error(message);
    } catch (e4) {
    }
  }
  function getUnexpectedStateShapeWarningMessage(inputState, reducers2, action, unexpectedKeyCache) {
    var reducerKeys = Object.keys(reducers2);
    var argumentName = action && action.type === ActionTypes.INIT ? "preloadedState argument passed to createStore" : "previous state received by the reducer";
    if (reducerKeys.length === 0) {
      return "Store does not have a valid reducer. Make sure the argument passed to combineReducers is an object whose values are reducers.";
    }
    if (!isPlainObject(inputState)) {
      return "The " + argumentName + ' has unexpected type of "' + kindOf(inputState) + '". Expected argument to be an object with the following ' + ('keys: "' + reducerKeys.join('", "') + '"');
    }
    var unexpectedKeys = Object.keys(inputState).filter(function(key) {
      return !reducers2.hasOwnProperty(key) && !unexpectedKeyCache[key];
    });
    unexpectedKeys.forEach(function(key) {
      unexpectedKeyCache[key] = true;
    });
    if (action && action.type === ActionTypes.REPLACE)
      return;
    if (unexpectedKeys.length > 0) {
      return "Unexpected " + (unexpectedKeys.length > 1 ? "keys" : "key") + " " + ('"' + unexpectedKeys.join('", "') + '" found in ' + argumentName + ". ") + "Expected to find one of the known reducer keys instead: " + ('"' + reducerKeys.join('", "') + '". Unexpected keys will be ignored.');
    }
  }
  function assertReducerShape(reducers2) {
    Object.keys(reducers2).forEach(function(key) {
      var reducer = reducers2[key];
      var initialState = reducer(void 0, {
        type: ActionTypes.INIT
      });
      if (typeof initialState === "undefined") {
        throw new Error(false ? formatProdErrorMessage(12) : 'The slice reducer for key "' + key + `" returned undefined during initialization. If the state passed to the reducer is undefined, you must explicitly return the initial state. The initial state may not be undefined. If you don't want to set a value for this reducer, you can use null instead of undefined.`);
      }
      if (typeof reducer(void 0, {
        type: ActionTypes.PROBE_UNKNOWN_ACTION()
      }) === "undefined") {
        throw new Error(false ? formatProdErrorMessage(13) : 'The slice reducer for key "' + key + '" returned undefined when probed with a random type. ' + ("Don't try to handle '" + ActionTypes.INIT + `' or other actions in "redux/*" `) + "namespace. They are considered private. Instead, you must return the current state for any unknown actions, unless it is undefined, in which case you must return the initial state, regardless of the action type. The initial state may not be undefined, but can be null.");
      }
    });
  }
  function combineReducers(reducers2) {
    var reducerKeys = Object.keys(reducers2);
    var finalReducers = {};
    for (var i3 = 0; i3 < reducerKeys.length; i3++) {
      var key = reducerKeys[i3];
      if (true) {
        if (typeof reducers2[key] === "undefined") {
          warning('No reducer provided for key "' + key + '"');
        }
      }
      if (typeof reducers2[key] === "function") {
        finalReducers[key] = reducers2[key];
      }
    }
    var finalReducerKeys = Object.keys(finalReducers);
    var unexpectedKeyCache;
    if (true) {
      unexpectedKeyCache = {};
    }
    var shapeAssertionError;
    try {
      assertReducerShape(finalReducers);
    } catch (e4) {
      shapeAssertionError = e4;
    }
    return function combination(state, action) {
      if (state === void 0) {
        state = {};
      }
      if (shapeAssertionError) {
        throw shapeAssertionError;
      }
      if (true) {
        var warningMessage = getUnexpectedStateShapeWarningMessage(state, finalReducers, action, unexpectedKeyCache);
        if (warningMessage) {
          warning(warningMessage);
        }
      }
      var hasChanged = false;
      var nextState = {};
      for (var _i = 0; _i < finalReducerKeys.length; _i++) {
        var _key = finalReducerKeys[_i];
        var reducer = finalReducers[_key];
        var previousStateForKey = state[_key];
        var nextStateForKey = reducer(previousStateForKey, action);
        if (typeof nextStateForKey === "undefined") {
          var actionType = action && action.type;
          throw new Error(false ? formatProdErrorMessage(14) : "When called with an action of type " + (actionType ? '"' + String(actionType) + '"' : "(unknown type)") + ', the slice reducer for key "' + _key + '" returned undefined. To ignore an action, you must explicitly return the previous state. If you want this reducer to hold no value, you can return null instead of undefined.');
        }
        nextState[_key] = nextStateForKey;
        hasChanged = hasChanged || nextStateForKey !== previousStateForKey;
      }
      hasChanged = hasChanged || finalReducerKeys.length !== Object.keys(state).length;
      return hasChanged ? nextState : state;
    };
  }
  function compose() {
    for (var _len = arguments.length, funcs = new Array(_len), _key = 0; _key < _len; _key++) {
      funcs[_key] = arguments[_key];
    }
    if (funcs.length === 0) {
      return function(arg) {
        return arg;
      };
    }
    if (funcs.length === 1) {
      return funcs[0];
    }
    return funcs.reduce(function(a3, b3) {
      return function() {
        return a3(b3.apply(void 0, arguments));
      };
    });
  }
  function applyMiddleware() {
    for (var _len = arguments.length, middlewares = new Array(_len), _key = 0; _key < _len; _key++) {
      middlewares[_key] = arguments[_key];
    }
    return function(createStore3) {
      return function() {
        var store = createStore3.apply(void 0, arguments);
        var _dispatch = function dispatch() {
          throw new Error(false ? formatProdErrorMessage(15) : "Dispatching while constructing your middleware is not allowed. Other middleware would not be applied to this dispatch.");
        };
        var middlewareAPI = {
          getState: store.getState,
          dispatch: function dispatch() {
            return _dispatch.apply(void 0, arguments);
          }
        };
        var chain = middlewares.map(function(middleware) {
          return middleware(middlewareAPI);
        });
        _dispatch = compose.apply(void 0, chain)(store.dispatch);
        return _objectSpread2(_objectSpread2({}, store), {}, {
          dispatch: _dispatch
        });
      };
    };
  }
  function isCrushed() {
  }
  if (typeof isCrushed.name === "string" && isCrushed.name !== "isCrushed") {
    warning('You are currently using minified code outside of NODE_ENV === "production". This means that you are running a slower development build of Redux. You can use loose-envify (https://github.com/zertosh/loose-envify) for browserify or setting mode to production in webpack (https://webpack.js.org/concepts/mode/) to ensure you have the correct code for your production build.');
  }

  // node_modules/@iiif/vault/dist/esm/index.mjs
  var IMPORT_ENTITIES = "@iiif/IMPORT_ENTITIES";
  var MODIFY_ENTITY_FIELD = "@iiif/MODIFY_ENTITY_FIELD";
  var REORDER_ENTITY_FIELD = "@iiif/REORDER_ENTITY_FIELD";
  var ADD_REFERENCE = "@iiif/ADD_REFERENCE";
  var REMOVE_REFERENCE = "@iiif/REMOVE_REFERENCE";
  var importEntities = (0, import_typesafe_actions.createAction)(IMPORT_ENTITIES)();
  var modifyEntityField = (0, import_typesafe_actions.createAction)(MODIFY_ENTITY_FIELD)();
  var reorderEntityField = (0, import_typesafe_actions.createAction)(REORDER_ENTITY_FIELD)();
  var addReference = (0, import_typesafe_actions.createAction)(ADD_REFERENCE)();
  var removeReference = (0, import_typesafe_actions.createAction)(REMOVE_REFERENCE)();
  var entityActions = { importEntities, modifyEntityField, reorderEntityField, addReference, removeReference };
  var ADD_MAPPING = "@iiif/ADD_MAPPING";
  var ADD_MAPPINGS = "@iiif/ADD_MAPPINGS";
  var addMapping = (0, import_typesafe_actions.createAction)(ADD_MAPPING)();
  var addMappings = (0, import_typesafe_actions.createAction)(ADD_MAPPINGS)();
  var SET_META_VALUE = "@iiif/SET_META_VALUE";
  var SET_META_VALUE_DYNAMIC = "@iiif/SET_META_VALUE_DYNAMIC";
  var UNSET_META_VALUE = "@iiif/UNSET_META_VALUE";
  var setMetaValue = (0, import_typesafe_actions.createAction)(SET_META_VALUE)();
  var setMetaValueDynamic = (0, import_typesafe_actions.createAction)(SET_META_VALUE_DYNAMIC)();
  var unsetMetaValue = (0, import_typesafe_actions.createAction)(UNSET_META_VALUE)();
  var metaActions = {
    setMetaValue,
    setMetaValueDynamic,
    unsetMetaValue
  };
  var RESOURCE_ERROR = "RESOURCE_ERROR";
  var RESOURCE_LOADING = "RESOURCE_LOADING";
  var RESOURCE_READY = "RESOURCE_READY";
  var REQUEST_RESOURCE = "@iiif/REQUEST_RESOURCE";
  var REQUEST_ERROR = "@iiif/REQUEST_ERROR";
  var REQUEST_MISMATCH = "@iiif/REQUEST_MISMATCH";
  var REQUEST_COMPLETE = "@iiif/REQUEST_COMPLETE";
  var REQUEST_OFFLINE_RESOURCE = "@iiif/REQUEST_OFFLINE_RESOURCE";
  var requestResource = (0, import_typesafe_actions.createAction)(REQUEST_RESOURCE)();
  var requestError = (0, import_typesafe_actions.createAction)(REQUEST_ERROR)();
  var requestMismatch = (0, import_typesafe_actions.createAction)(REQUEST_MISMATCH)();
  var requestComplete = (0, import_typesafe_actions.createAction)(REQUEST_COMPLETE)();
  (0, import_typesafe_actions.createAction)(REQUEST_OFFLINE_RESOURCE)();
  var BATCH_ACTIONS = "@iiif/BATCH";
  var BATCH_IMPORT = "@iiif/BATCH_IMPORT";
  var batchActions = (0, import_typesafe_actions.createAction)(BATCH_ACTIONS)();
  (0, import_typesafe_actions.createAction)(BATCH_IMPORT)();
  var actionListFromResource = (id, response) => {
    const { entities, resource, mapping } = pt(response);
    if (resource.id === void 0) {
      return [requestError({ id, message: "ID is not defined in resource." })];
    }
    const actions = [importEntities({ entities }), addMappings({ mapping })];
    if (resource.id !== id) {
      actions.push(addMapping({ id, type: resource.type }));
      actions.push(requestMismatch({ requestId: id, actualId: resource.id }));
    }
    actions.push(requestComplete({ id }));
    return actions;
  };
  var safeIsNaN = Number.isNaN || function ponyfill(value) {
    return typeof value === "number" && value !== value;
  };
  function isEqual(first, second) {
    if (first === second) {
      return true;
    }
    if (safeIsNaN(first) && safeIsNaN(second)) {
      return true;
    }
    return false;
  }
  function areInputsEqual(newInputs, lastInputs) {
    if (!Array.isArray(newInputs) || !Array.isArray(lastInputs)) {
      return newInputs === lastInputs;
    }
    if (newInputs.length !== lastInputs.length) {
      return false;
    }
    for (let i3 = 0; i3 < newInputs.length; i3++) {
      if (!isEqual(newInputs[i3], lastInputs[i3])) {
        return false;
      }
    }
    return true;
  }
  function resolveIfExists(state, url) {
    const request = state.iiif.requests[url];
    const resourceType = state.iiif.mapping[url];
    if (!resourceType || !state.iiif.entities[resourceType][request.resourceUri]) {
      return void 0;
    }
    return state.iiif.entities[resourceType][request.resourceUri];
  }
  function createFetchHelper(store, fetcher, { waitTimeout = 30 } = {}) {
    return async (url, options) => {
      const state = store.getState();
      const request = state.iiif.requests[url];
      if (request) {
        switch (request.loadingState) {
          case RESOURCE_ERROR:
            break;
          case RESOURCE_LOADING: {
            let cleanupSubscription;
            let didContinue = false;
            try {
              const resolvedEntity = await Promise.race([
                new Promise((resolve, reject) => {
                  if (didContinue) {
                    return;
                  }
                  cleanupSubscription = store.subscribe(() => {
                    const latestState = store.getState();
                    if (latestState.iiif.requests[url].loadingState === RESOURCE_ERROR) {
                      reject();
                      return;
                    }
                    if (latestState.iiif.requests[url].loadingState === RESOURCE_READY) {
                      const maybeResolvedEntity = resolveIfExists(latestState, url);
                      if (maybeResolvedEntity) {
                        resolve(maybeResolvedEntity);
                      } else {
                        reject();
                      }
                    }
                  });
                }),
                new Promise((resolve, reject) => setTimeout(() => {
                  didContinue = true;
                  reject();
                }, waitTimeout * 60))
              ]);
              if (cleanupSubscription) {
                cleanupSubscription();
              }
              if (resolvedEntity) {
                return resolvedEntity;
              }
            } catch (e4) {
              if (cleanupSubscription) {
                cleanupSubscription();
              }
              break;
            }
            break;
          }
          case RESOURCE_READY: {
            const resolvedEntity = resolveIfExists(state, url);
            if (resolvedEntity) {
              return resolvedEntity;
            }
            break;
          }
        }
      }
      store.dispatch(requestResource({ id: url }));
      try {
        const resource = await fetcher(url, options);
        if (!resource.id && !resource["@id"]) {
          if (resource["@type"]) {
            resource["@id"] = url;
            resource.id = url;
          } else {
            resource.id = url;
          }
        }
        const toDispatch = actionListFromResource(url, resource);
        store.dispatch(batchActions({ actions: toDispatch }));
        return resolveIfExists(store.getState(), url);
      } catch (err) {
        store.dispatch(requestError({ id: url, message: err.toString() }));
        throw err;
      }
    };
  }
  function getDefaultEntities() {
    return {
      Collection: {},
      Manifest: {},
      Canvas: {},
      AnnotationPage: {},
      AnnotationCollection: {},
      Annotation: {},
      ContentResource: {},
      Range: {},
      Service: {},
      Selector: {},
      Agent: {}
    };
  }
  var mappingReducer = (state = {}, action) => {
    switch (action.type) {
      case ADD_MAPPING:
        return {
          ...state,
          [action.payload.id]: action.payload.type
        };
      case ADD_MAPPINGS:
        return {
          ...state,
          ...action.payload.mapping
        };
      default:
        return state;
    }
  };
  function isReferenceList(state, id, type, key) {
    return !(!state[type] || !state[type][id] || !state[type][id][key] || !Array.isArray(state[type][id][key]));
  }
  var entitiesReducer = (state = getDefaultEntities(), action) => {
    switch (action.type) {
      case MODIFY_ENTITY_FIELD: {
        if (!state[action.payload.type] || !state[action.payload.type][action.payload.id]) {
          return state;
        }
        const entity = state[action.payload.type][action.payload.id];
        if (typeof entity === "string") {
          return state;
        }
        return {
          ...state,
          [action.payload.type]: {
            ...state[action.payload.type],
            [action.payload.id]: {
              ...entity,
              [action.payload.key]: action.payload.value
            }
          }
        };
      }
      case REORDER_ENTITY_FIELD: {
        if (!isReferenceList(state, action.payload.id, action.payload.type, action.payload.key)) {
          return state;
        }
        const entity = state[action.payload.type][action.payload.id];
        if (typeof entity === "string") {
          return state;
        }
        const result = Array.from(entity[action.payload.key]);
        const [removed] = result.splice(action.payload.startIndex, 1);
        result.splice(action.payload.endIndex, 0, removed);
        return {
          ...state,
          [action.payload.type]: {
            ...state[action.payload.type],
            [action.payload.id]: {
              ...entity,
              [action.payload.key]: result
            }
          }
        };
      }
      case IMPORT_ENTITIES: {
        const keys = Object.keys(action.payload.entities);
        const toReturn = { ...state };
        for (const key of keys) {
          toReturn[key] = {
            ...state[key] || {},
            ...action.payload.entities[key] || {}
          };
        }
        return toReturn;
      }
      case ADD_REFERENCE: {
        if (!isReferenceList(state, action.payload.id, action.payload.type, action.payload.key)) {
          return state;
        }
        const entity = state[action.payload.type][action.payload.id];
        const result = Array.from(entity[action.payload.key]);
        result.splice(action.payload.index || result.length + 1, 0, action.payload.reference);
        return {
          ...state,
          [action.payload.type]: {
            ...state[action.payload.type],
            [action.payload.id]: {
              ...entity,
              [action.payload.key]: result
            }
          }
        };
      }
      case REMOVE_REFERENCE: {
        if (!isReferenceList(state, action.payload.id, action.payload.type, action.payload.key)) {
          return state;
        }
        const entity = state[action.payload.type][action.payload.id];
        const result = Array.from(entity[action.payload.key]);
        const indexToRemove = action.payload.index || result.findIndex((e4) => e4 && e4.id === action.payload.reference.id);
        if (indexToRemove === -1) {
          return state;
        }
        if (result[indexToRemove]?.id !== action.payload.reference.id) {
          return state;
        }
        result.splice(indexToRemove, 1);
        return {
          ...state,
          [action.payload.type]: {
            ...state[action.payload.type],
            [action.payload.id]: {
              ...entity,
              [action.payload.key]: result
            }
          }
        };
      }
      default:
        return state;
    }
  };
  var requestReducer = (state = {}, action) => {
    switch (action.type) {
      case REQUEST_RESOURCE:
      case REQUEST_OFFLINE_RESOURCE:
        return {
          ...state,
          [action.payload.id]: {
            requestUri: action.payload.id,
            loadingState: RESOURCE_LOADING,
            uriMismatch: false,
            resourceUri: action.payload.id
          }
        };
      case REQUEST_MISMATCH:
        return {
          ...state,
          [action.payload.requestId]: {
            ...state[action.payload.requestId] || {},
            uriMismatch: true,
            resourceUri: action.payload.actualId
          },
          [action.payload.actualId]: {
            requestUri: action.payload.requestId,
            loadingState: state[action.payload.requestId].loadingState,
            uriMismatch: true,
            resourceUri: action.payload.actualId
          }
        };
      case REQUEST_ERROR:
        return {
          ...state,
          [action.payload.id]: {
            ...state[action.payload.id] || {},
            loadingState: RESOURCE_ERROR,
            error: action.payload.message
          }
        };
      case REQUEST_COMPLETE:
        return {
          ...state,
          [action.payload.id]: {
            ...state[action.payload.id] || {},
            loadingState: RESOURCE_READY,
            error: void 0
          }
        };
    }
    return state;
  };
  var metaReducer = (state = {}, action) => {
    const { id, updateValue, value, meta, key } = action && action.payload || {};
    switch (action.type) {
      case SET_META_VALUE: {
        return {
          ...state,
          [id]: {
            ...state[id] || {},
            [meta]: {
              ...state[id] ? state[id][meta] || {} : {},
              [key]: value
            }
          }
        };
      }
      case SET_META_VALUE_DYNAMIC: {
        return {
          ...state,
          [id]: {
            ...state[id] || {},
            [meta]: {
              ...state[id] ? state[id][meta] || {} : {},
              [key]: state[id] && state[id][meta] ? updateValue(state[id][meta][key]) : updateValue(void 0)
            }
          }
        };
      }
      case UNSET_META_VALUE: {
        if (state[id] && state[id][meta] && state[id][meta][key]) {
          return {
            ...state,
            [id]: {
              ...state[id] || {},
              [meta]: {
                ...state[id] ? state[id][meta] || {} : {},
                [key]: void 0
              }
            }
          };
        }
        return state;
      }
      default:
        return state;
    }
  };
  function createBatchReducer(rootReducer) {
    return (state, action) => {
      if (action && action.type === BATCH_ACTIONS) {
        return action.payload.actions.reduce(rootReducer, state);
      }
      if (action && action.type === BATCH_IMPORT) {
        return action.payload.state;
      }
      return rootReducer(state, action);
    };
  }
  var reducers = combineReducers({
    mapping: mappingReducer,
    entities: entitiesReducer,
    requests: requestReducer,
    meta: metaReducer
  });
  var composeEnhancers = typeof window !== "undefined" ? window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose : compose;
  function createStore2(options = {}) {
    const {
      enableDevtools = true,
      iiifStoreName = "iiif",
      defaultState: defaultState2 = {},
      extraMiddleware = [],
      customReducers = {}
    } = options;
    const rootReducer = combineReducers({ [iiifStoreName]: reducers, ...customReducers });
    const store = createStore(createBatchReducer(rootReducer), defaultState2, enableDevtools ? composeEnhancers(applyMiddleware(...extraMiddleware)) : compose(applyMiddleware(...extraMiddleware)));
    return store;
  }
  function mitt(n4) {
    return { all: n4 = n4 || /* @__PURE__ */ new Map(), on: function(t4, e4) {
      var i3 = n4.get(t4);
      i3 ? i3.push(e4) : n4.set(t4, [e4]);
    }, off: function(t4, e4) {
      var i3 = n4.get(t4);
      i3 && (e4 ? i3.splice(i3.indexOf(e4) >>> 0, 1) : n4.set(t4, []));
    }, emit: function(t4, e4) {
      var i3 = n4.get(t4);
      i3 && i3.slice().map(function(n5) {
        n5(e4);
      }), (i3 = n4.get("*")) && i3.slice().map(function(n5) {
        n5(t4, e4);
      });
    } };
  }
  var Vault = class {
    options;
    store;
    emitter;
    isBatching = false;
    batchQueue = [];
    remoteFetcher;
    staticFetcher;
    constructor(options, store) {
      this.options = Object.assign({
        reducers: {},
        middleware: [],
        defaultState: {},
        customFetcher: this.defaultFetcher,
        enableDevtools: true
      }, options || {});
      this.store = store || createStore2({
        customReducers: this.options.reducers,
        extraMiddleware: [...this.options.middleware, this.middleware],
        defaultState: this.options.defaultState,
        enableDevtools: this.options.enableDevtools
      });
      this.emitter = mitt();
      this.remoteFetcher = createFetchHelper(this.store, this.options.customFetcher);
      this.staticFetcher = createFetchHelper(this.store, (id, json) => json);
    }
    defaultFetcher = (url) => {
      return fetch(url).then((r3) => r3.json());
    };
    batch(cb) {
      this.isBatching = true;
      try {
        cb(this);
        this.store.dispatch(batchActions({ actions: this.batchQueue }));
      } catch (e4) {
        this.batchQueue = [];
        this.isBatching = false;
        throw e4;
      }
      this.batchQueue = [];
      this.isBatching = false;
    }
    async asyncBatch(cb) {
      this.isBatching = true;
      try {
        await cb(this);
        this.store.dispatch(batchActions({ actions: this.batchQueue }));
      } catch (e4) {
        this.batchQueue = [];
        this.isBatching = false;
        throw e4;
      }
      this.batchQueue = [];
      this.isBatching = false;
    }
    modifyEntityField(entity, key, value) {
      this.dispatch(entityActions.modifyEntityField({
        id: entity.id,
        type: entity.type,
        key,
        value
      }));
    }
    dispatch(action) {
      if (!this.isBatching) {
        this.store.dispatch(action);
      } else {
        this.batchQueue.push(action);
      }
    }
    middleware = (store) => (next) => (action) => {
      if (action.type === BATCH_ACTIONS) {
        for (const realAction of action.payload.actions) {
          this.emitter.emit(realAction.type, { realAction, state: store.getState() });
        }
        const state2 = next(action);
        for (const realAction of action.payload.actions) {
          this.emitter.emit(`after:${action.type}`, { action, state: state2 });
        }
        return state2;
      }
      this.emitter.emit(action.type, { action, state: store.getState() });
      const state = next(action);
      this.emitter.emit(`after:${action.type}`, { action, state });
      return state;
    };
    serialize(entity, config2) {
      return ct(this.getState().iiif, entity, config2);
    }
    toPresentation2(entity) {
      return this.serialize(entity, ut);
    }
    toPresentation3(entity) {
      return this.serialize(entity, dt);
    }
    hydrate(reference, type) {
      return this.get(reference, type, { skipSelfReturn: false });
    }
    get(reference, type, options = {}) {
      if (typeof type !== "string") {
        options = type || {};
        type = void 0;
      }
      const { skipSelfReturn = true } = options || {};
      if (Array.isArray(reference)) {
        return reference.map((i3) => this.get(i3, options));
      }
      const state = this.getState();
      if (typeof reference === "string") {
        const _type2 = type ? type : state.iiif.mapping[reference];
        if (!_type2) {
          if (skipSelfReturn) {
            return null;
          }
          return { id: reference, type: "unknown" };
        }
        reference = { id: reference, type: _type2 };
      }
      const _type = type ? type : reference.type;
      const _id = reference.id;
      const entities = state.iiif.entities[_type];
      if (!entities) {
        const request = state.iiif.requests[_id];
        if (request && request.resourceUri !== _id) {
          return this.get(request.resourceUri, options);
        }
        if (skipSelfReturn) {
          return null;
        }
        return reference;
      }
      return entities[reference.id] || (skipSelfReturn ? null : reference);
    }
    select(selector) {
      return selector(this.getState());
    }
    getStore() {
      return this.store;
    }
    getState() {
      return this.store.getState();
    }
    loadManifest(id, json) {
      const _id = typeof id === "string" ? id : id.id;
      return this.load(_id, json);
    }
    loadCollection(id, json) {
      const _id = typeof id === "string" ? id : id.id;
      return this.load(_id, json);
    }
    load(id, json) {
      const _id = typeof id === "string" ? id : id.id;
      if (json) {
        return this.staticFetcher(_id, json);
      }
      return this.remoteFetcher(_id);
    }
    areInputsEqual(newInputs, lastInputs) {
      return areInputsEqual(newInputs, lastInputs);
    }
    subscribe(selector, subscription, skipInitial) {
      if (typeof skipInitial === "undefined" && (typeof subscription === "undefined" || subscription === false || subscription === true)) {
        skipInitial = subscription;
        subscription = selector;
        selector = (a3) => a3;
      }
      let lastState = skipInitial ? null : selector(this.store.getState());
      if (!skipInitial) {
        subscription(lastState, this);
      }
      return this.store.subscribe(() => {
        const state = this.store.getState();
        const selectedState = selector(state);
        if (!areInputsEqual(lastState, selectedState)) {
          subscription(selectedState, this);
        }
        lastState = selectedState;
      });
    }
    async ensureLoaded(_id) {
      const id = typeof _id === "string" ? _id : _id.id;
      if (!this.requestStatus(id)) {
        await this.load(id);
      }
    }
    requestStatus(id) {
      return this.select((state) => {
        return state.iiif.requests[id];
      });
    }
    getResourceMeta(resource, metaKey) {
      const resourceMeta = this.getState().iiif.meta[resource];
      if (!resourceMeta) {
        return void 0;
      }
      if (!metaKey) {
        return resourceMeta;
      }
      return resourceMeta[metaKey];
    }
    setMetaValue([id, meta, key], newValueOrUpdate) {
      this.dispatch(typeof newValueOrUpdate === "function" ? metaActions.setMetaValueDynamic({
        id,
        meta,
        key,
        updateValue: newValueOrUpdate
      }) : metaActions.setMetaValue({
        id,
        meta,
        key,
        value: newValueOrUpdate
      }));
    }
  };

  // src/context/viewer-context.tsx
  var defaultConfigOptions = {
    showTitle: true,
    showIIIFBadge: true,
    ignoreCaptionLabels: [],
    canvasBackgroundColor: "#e6e8eb",
    canvasHeight: "61.8vh"
  };
  var defaultState = {
    activeCanvas: "",
    activeManifest: "",
    collection: {},
    configOptions: defaultConfigOptions,
    isLoaded: false,
    vault: new Vault()
  };
  var ViewerStateContext = import_react.default.createContext(defaultState);
  var ViewerDispatchContext = import_react.default.createContext(defaultState);
  function viewerReducer(state, action) {
    switch (action.type) {
      case "updateActiveCanvas": {
        if (!action.canvasId)
          action.canvasId = "";
        return __spreadProps(__spreadValues({}, state), {
          activeCanvas: action.canvasId
        });
      }
      case "updateActiveManifest": {
        return __spreadProps(__spreadValues({}, state), {
          activeManifest: action.manifestId
        });
      }
      case "updateCollection": {
        return __spreadProps(__spreadValues({}, state), {
          collection: action.collection
        });
      }
      case "updateConfigOptions": {
        return __spreadProps(__spreadValues({}, state), {
          configOptions: __spreadValues(__spreadValues({}, defaultConfigOptions), action.configOptions)
        });
      }
      case "updateIsLoaded": {
        return __spreadProps(__spreadValues({}, state), {
          isLoaded: action.isLoaded
        });
      }
      default: {
        throw new Error(`Unhandled action type: ${action.type}`);
      }
    }
  }
  var ViewerProvider = ({
    initialState = defaultState,
    children
  }) => {
    const [state, dispatch] = import_react.default.useReducer(viewerReducer, initialState);
    return /* @__PURE__ */ import_react.default.createElement(ViewerStateContext.Provider, {
      value: state
    }, /* @__PURE__ */ import_react.default.createElement(ViewerDispatchContext.Provider, {
      value: dispatch
    }, children));
  };
  function useViewerState() {
    const context = import_react.default.useContext(ViewerStateContext);
    if (context === void 0) {
      throw new Error("useViewerState must be used within a ViewerProvider");
    }
    return context;
  }
  function useViewerDispatch() {
    const context = import_react.default.useContext(ViewerDispatchContext);
    if (context === void 0) {
      throw new Error("useViewerDispatch must be used within a ViewerProvider");
    }
    return context;
  }

  // src/components/Viewer/Viewer.tsx
  var import_react92 = __toESM(require_react());

  // src/hooks/use-iiif/getAccompanyingCanvasImage.ts
  function getUrl(obj) {
    if (!obj.service) {
      return obj.id;
    }
    return `${obj.service[0].id}/full/,${obj.height || 500}/0/default.jpg`;
  }
  var getAccompanyingCanvasImage = (accompanyingCanvas) => {
    if (!accompanyingCanvas)
      return;
    try {
      const thumbnail = accompanyingCanvas.thumbnail;
      if (thumbnail && thumbnail.length > 0) {
        return getUrl(thumbnail[0]);
      }
      return getUrl(accompanyingCanvas.items[0].items[0].body);
    } catch (e4) {
      console.error("Error retrieving accompanying canvas image", e4);
      return;
    }
  };

  // src/hooks/use-iiif/getCanvasByCriteria.ts
  var getCanvasByCriteria = (vault, item, motivation, paintingType) => {
    var _a2, _b2;
    const entity = {
      canvas: void 0,
      accompanyingCanvas: void 0,
      annotationPage: void 0,
      annotations: []
    };
    const filterAnnotations = (annotation) => {
      if (annotation) {
        if (!annotation.body || !annotation.motivation) {
          console.error(`Invalid annotation after Hyperion parsing: missing either 'body' or 'motivation'`, annotation);
          return;
        }
        if (!annotation.body)
          return;
        let annotationBody = annotation.body;
        if (Array.isArray(annotationBody))
          annotationBody = annotationBody[0];
        const resource = vault.get(annotationBody.id);
        if (!resource)
          return;
        switch (motivation) {
          case "painting":
            if (annotation.target === item.id && annotation.motivation && annotation.motivation[0] === "painting" && paintingType.includes(resource.type))
              annotation.body = resource;
            return annotation;
          case "supplementing":
            return;
          default: {
            throw new Error(`Invalid annotation motivation.`);
          }
        }
      }
    };
    entity.canvas = vault.get(item);
    if (entity.canvas) {
      entity.annotationPage = vault.get(entity.canvas.items[0]);
      entity.accompanyingCanvas = ((_a2 = entity.canvas) == null ? void 0 : _a2.accompanyingCanvas) ? vault.get((_b2 = entity.canvas) == null ? void 0 : _b2.accompanyingCanvas) : void 0;
    }
    if (entity.annotationPage)
      entity.annotations = vault.get(entity.annotationPage.items).filter(filterAnnotations);
    return entity;
  };

  // src/hooks/use-iiif/getLabel.ts
  var getLabel = (label, language = "en") => {
    if (!label)
      return "";
    if (!label[language]) {
      const codes = Object.getOwnPropertyNames(label);
      if (codes.length > 0)
        return label[codes[0]];
    }
    return label[language];
  };

  // src/hooks/use-iiif/getPaintingResource.ts
  var getPaintingResource = (vault, id) => {
    const canvasEntity = getCanvasByCriteria(vault, { id, type: "Canvas" }, "painting", ["Image", "Sound", "Video"]);
    if (canvasEntity.annotations.length === 0)
      return;
    if (canvasEntity.annotations[0] && canvasEntity.annotations[0].body)
      return canvasEntity.annotations[0].body;
    return;
  };

  // src/hooks/use-iiif/getSupplementingResources.ts
  var getSupplementingResources = (vault, activeCanvas, format) => {
    const canvas = vault.get({
      id: activeCanvas,
      type: "Canvas"
    });
    if (!(canvas == null ? void 0 : canvas.annotations) || !canvas.annotations[0])
      return [];
    const annotationPage = vault.get(canvas.annotations[0]);
    const annotations = vault.get(annotationPage.items);
    if (!Array.isArray(annotations))
      return [];
    return annotations.filter((annotation) => {
      var _a2;
      if (!annotation.body)
        return;
      if ((_a2 = annotation.motivation) == null ? void 0 : _a2.includes("supplementing")) {
        let annotationBody = annotation.body;
        if (Array.isArray(annotationBody))
          annotationBody = annotationBody[0];
        const resource = vault.get(annotationBody.id);
        if (resource.format === format) {
          annotation.body = resource;
          return annotation;
        }
      }
    }).map((filtered) => {
      return filtered.body;
    });
  };

  // src/hooks/use-iiif/getThumbnail.ts
  var getThumbnail = (vault, entity, width, height) => {
    let candidates = [];
    if (entity.canvas) {
      if (entity.canvas.thumbnail.length > 0) {
        const canvasThumbnail = vault.get(entity.canvas.thumbnail[0]);
        candidates.push(canvasThumbnail);
      }
    }
    if (entity.annotations[0]) {
      if (entity.annotations[0].thumbnail) {
        if (entity.annotations[0].thumbnail.length > 0) {
          const annotationThumbnail = vault.get(entity.annotations[0].thumbnail[0]);
          candidates.push(annotationThumbnail);
        }
      }
      if (!entity.annotations[0].body)
        return;
      const annotationBody = entity.annotations[0].body;
      if (annotationBody.type === "Image")
        candidates.push(annotationBody);
    }
    if (candidates.length === 0)
      return;
    const selectedCandidate = {
      id: candidates[0].id,
      format: candidates[0].format,
      type: candidates[0].type,
      width,
      height
    };
    const thumbnailContent = selectedCandidate;
    return thumbnailContent;
  };

  // node_modules/@stitches/react/dist/index.mjs
  var import_react2 = __toESM(require_react(), 1);
  var e = "colors";
  var t = "sizes";
  var r = "space";
  var n = { gap: r, gridGap: r, columnGap: r, gridColumnGap: r, rowGap: r, gridRowGap: r, inset: r, insetBlock: r, insetBlockEnd: r, insetBlockStart: r, insetInline: r, insetInlineEnd: r, insetInlineStart: r, margin: r, marginTop: r, marginRight: r, marginBottom: r, marginLeft: r, marginBlock: r, marginBlockEnd: r, marginBlockStart: r, marginInline: r, marginInlineEnd: r, marginInlineStart: r, padding: r, paddingTop: r, paddingRight: r, paddingBottom: r, paddingLeft: r, paddingBlock: r, paddingBlockEnd: r, paddingBlockStart: r, paddingInline: r, paddingInlineEnd: r, paddingInlineStart: r, top: r, right: r, bottom: r, left: r, scrollMargin: r, scrollMarginTop: r, scrollMarginRight: r, scrollMarginBottom: r, scrollMarginLeft: r, scrollMarginX: r, scrollMarginY: r, scrollMarginBlock: r, scrollMarginBlockEnd: r, scrollMarginBlockStart: r, scrollMarginInline: r, scrollMarginInlineEnd: r, scrollMarginInlineStart: r, scrollPadding: r, scrollPaddingTop: r, scrollPaddingRight: r, scrollPaddingBottom: r, scrollPaddingLeft: r, scrollPaddingX: r, scrollPaddingY: r, scrollPaddingBlock: r, scrollPaddingBlockEnd: r, scrollPaddingBlockStart: r, scrollPaddingInline: r, scrollPaddingInlineEnd: r, scrollPaddingInlineStart: r, fontSize: "fontSizes", background: e, backgroundColor: e, backgroundImage: e, borderImage: e, border: e, borderBlock: e, borderBlockEnd: e, borderBlockStart: e, borderBottom: e, borderBottomColor: e, borderColor: e, borderInline: e, borderInlineEnd: e, borderInlineStart: e, borderLeft: e, borderLeftColor: e, borderRight: e, borderRightColor: e, borderTop: e, borderTopColor: e, caretColor: e, color: e, columnRuleColor: e, fill: e, outline: e, outlineColor: e, stroke: e, textDecorationColor: e, fontFamily: "fonts", fontWeight: "fontWeights", lineHeight: "lineHeights", letterSpacing: "letterSpacings", blockSize: t, minBlockSize: t, maxBlockSize: t, inlineSize: t, minInlineSize: t, maxInlineSize: t, width: t, minWidth: t, maxWidth: t, height: t, minHeight: t, maxHeight: t, flexBasis: t, gridTemplateColumns: t, gridTemplateRows: t, borderWidth: "borderWidths", borderTopWidth: "borderWidths", borderRightWidth: "borderWidths", borderBottomWidth: "borderWidths", borderLeftWidth: "borderWidths", borderStyle: "borderStyles", borderTopStyle: "borderStyles", borderRightStyle: "borderStyles", borderBottomStyle: "borderStyles", borderLeftStyle: "borderStyles", borderRadius: "radii", borderTopLeftRadius: "radii", borderTopRightRadius: "radii", borderBottomRightRadius: "radii", borderBottomLeftRadius: "radii", boxShadow: "shadows", textShadow: "shadows", transition: "transitions", zIndex: "zIndices" };
  var i = (e4, t4) => typeof t4 == "function" ? { "()": Function.prototype.toString.call(t4) } : t4;
  var o = () => {
    const e4 = /* @__PURE__ */ Object.create(null);
    return (t4, r3, ...n4) => {
      const o3 = ((e5) => JSON.stringify(e5, i))(t4);
      return o3 in e4 ? e4[o3] : e4[o3] = r3(t4, ...n4);
    };
  };
  var l2 = Symbol.for("sxs.internal");
  var s2 = (e4, t4) => Object.defineProperties(e4, Object.getOwnPropertyDescriptors(t4));
  var a = (e4) => {
    for (const t4 in e4)
      return true;
    return false;
  };
  var { hasOwnProperty: c2 } = Object.prototype;
  var d2 = (e4) => e4.includes("-") ? e4 : e4.replace(/[A-Z]/g, (e5) => "-" + e5.toLowerCase());
  var g2 = /\s+(?![^()]*\))/;
  var p2 = (e4) => (t4) => e4(...typeof t4 == "string" ? String(t4).split(g2) : [t4]);
  var u2 = { appearance: (e4) => ({ WebkitAppearance: e4, appearance: e4 }), backfaceVisibility: (e4) => ({ WebkitBackfaceVisibility: e4, backfaceVisibility: e4 }), backdropFilter: (e4) => ({ WebkitBackdropFilter: e4, backdropFilter: e4 }), backgroundClip: (e4) => ({ WebkitBackgroundClip: e4, backgroundClip: e4 }), boxDecorationBreak: (e4) => ({ WebkitBoxDecorationBreak: e4, boxDecorationBreak: e4 }), clipPath: (e4) => ({ WebkitClipPath: e4, clipPath: e4 }), content: (e4) => ({ content: e4.includes('"') || e4.includes("'") || /^([A-Za-z]+\([^]*|[^]*-quote|inherit|initial|none|normal|revert|unset)$/.test(e4) ? e4 : `"${e4}"` }), hyphens: (e4) => ({ WebkitHyphens: e4, hyphens: e4 }), maskImage: (e4) => ({ WebkitMaskImage: e4, maskImage: e4 }), maskSize: (e4) => ({ WebkitMaskSize: e4, maskSize: e4 }), tabSize: (e4) => ({ MozTabSize: e4, tabSize: e4 }), textSizeAdjust: (e4) => ({ WebkitTextSizeAdjust: e4, textSizeAdjust: e4 }), userSelect: (e4) => ({ WebkitUserSelect: e4, userSelect: e4 }), marginBlock: p2((e4, t4) => ({ marginBlockStart: e4, marginBlockEnd: t4 || e4 })), marginInline: p2((e4, t4) => ({ marginInlineStart: e4, marginInlineEnd: t4 || e4 })), maxSize: p2((e4, t4) => ({ maxBlockSize: e4, maxInlineSize: t4 || e4 })), minSize: p2((e4, t4) => ({ minBlockSize: e4, minInlineSize: t4 || e4 })), paddingBlock: p2((e4, t4) => ({ paddingBlockStart: e4, paddingBlockEnd: t4 || e4 })), paddingInline: p2((e4, t4) => ({ paddingInlineStart: e4, paddingInlineEnd: t4 || e4 })) };
  var h2 = /([\d.]+)([^]*)/;
  var f2 = (e4, t4) => e4.length ? e4.reduce((e5, r3) => (e5.push(...t4.map((e6) => e6.includes("&") ? e6.replace(/&/g, /[ +>|~]/.test(r3) && /&.*&/.test(e6) ? `:is(${r3})` : r3) : r3 + " " + e6)), e5), []) : t4;
  var m2 = (e4, t4) => e4 in b2 && typeof t4 == "string" ? t4.replace(/^((?:[^]*[^\w-])?)(fit-content|stretch)((?:[^\w-][^]*)?)$/, (t5, r3, n4, i3) => r3 + (n4 === "stretch" ? `-moz-available${i3};${d2(e4)}:${r3}-webkit-fill-available` : `-moz-fit-content${i3};${d2(e4)}:${r3}fit-content`) + i3) : String(t4);
  var b2 = { blockSize: 1, height: 1, inlineSize: 1, maxBlockSize: 1, maxHeight: 1, maxInlineSize: 1, maxWidth: 1, minBlockSize: 1, minHeight: 1, minInlineSize: 1, minWidth: 1, width: 1 };
  var S2 = (e4) => e4 ? e4 + "-" : "";
  var k2 = (e4, t4, r3) => e4.replace(/([+-])?((?:\d+(?:\.\d*)?|\.\d+)(?:[Ee][+-]?\d+)?)?(\$|--)([$\w-]+)/g, (e5, n4, i3, o3, l4) => o3 == "$" == !!i3 ? e5 : (n4 || o3 == "--" ? "calc(" : "") + "var(--" + (o3 === "$" ? S2(t4) + (l4.includes("$") ? "" : S2(r3)) + l4.replace(/\$/g, "-") : l4) + ")" + (n4 || o3 == "--" ? "*" + (n4 || "") + (i3 || "1") + ")" : ""));
  var y2 = /\s*,\s*(?![^()]*\))/;
  var B2 = Object.prototype.toString;
  var $2 = (e4, t4, r3, n4, i3) => {
    let o3, l4, s5;
    const a3 = (e5, t5, r4) => {
      let c4, g3;
      const p5 = (e6) => {
        for (c4 in e6) {
          const R2 = c4.charCodeAt(0) === 64, z4 = R2 && Array.isArray(e6[c4]) ? e6[c4] : [e6[c4]];
          for (g3 of z4) {
            const e7 = /[A-Z]/.test($3 = c4) ? $3 : $3.replace(/-[^]/g, (e8) => e8[1].toUpperCase()), z5 = typeof g3 == "object" && g3 && g3.toString === B2 && (!n4.utils[e7] || !t5.length);
            if (e7 in n4.utils && !z5) {
              const t6 = n4.utils[e7];
              if (t6 !== l4) {
                l4 = t6, p5(t6(g3)), l4 = null;
                continue;
              }
            } else if (e7 in u2) {
              const t6 = u2[e7];
              if (t6 !== s5) {
                s5 = t6, p5(t6(g3)), s5 = null;
                continue;
              }
            }
            if (R2 && (b3 = c4.slice(1) in n4.media ? "@media " + n4.media[c4.slice(1)] : c4, c4 = b3.replace(/\(\s*([\w-]+)\s*(=|<|<=|>|>=)\s*([\w-]+)\s*(?:(<|<=|>|>=)\s*([\w-]+)\s*)?\)/g, (e8, t6, r5, n5, i4, o4) => {
              const l5 = h2.test(t6), s6 = 0.0625 * (l5 ? -1 : 1), [a4, c5] = l5 ? [n5, t6] : [t6, n5];
              return "(" + (r5[0] === "=" ? "" : r5[0] === ">" === l5 ? "max-" : "min-") + a4 + ":" + (r5[0] !== "=" && r5.length === 1 ? c5.replace(h2, (e9, t7, n6) => Number(t7) + s6 * (r5 === ">" ? 1 : -1) + n6) : c5) + (i4 ? ") and (" + (i4[0] === ">" ? "min-" : "max-") + a4 + ":" + (i4.length === 1 ? o4.replace(h2, (e9, t7, r6) => Number(t7) + s6 * (i4 === ">" ? -1 : 1) + r6) : o4) : "") + ")";
            })), z5) {
              const e8 = R2 ? r4.concat(c4) : [...r4], n5 = R2 ? [...t5] : f2(t5, c4.split(y2));
              o3 !== void 0 && i3(x2(...o3)), o3 = void 0, a3(g3, n5, e8);
            } else
              o3 === void 0 && (o3 = [[], t5, r4]), c4 = R2 || c4.charCodeAt(0) !== 36 ? c4 : `--${S2(n4.prefix)}${c4.slice(1).replace(/\$/g, "-")}`, g3 = z5 ? g3 : typeof g3 == "number" ? g3 && e7 in I ? String(g3) + "px" : String(g3) : k2(m2(e7, g3 == null ? "" : g3), n4.prefix, n4.themeMap[e7]), o3[0].push(`${R2 ? `${c4} ` : `${d2(c4)}:`}${g3}`);
          }
        }
        var b3, $3;
      };
      p5(e5), o3 !== void 0 && i3(x2(...o3)), o3 = void 0;
    };
    a3(e4, t4, r3);
  };
  var x2 = (e4, t4, r3) => `${r3.map((e5) => `${e5}{`).join("")}${t4.length ? `${t4.join(",")}{` : ""}${e4.join(";")}${t4.length ? "}" : ""}${Array(r3.length ? r3.length + 1 : 0).join("}")}`;
  var I = { animationDelay: 1, animationDuration: 1, backgroundSize: 1, blockSize: 1, border: 1, borderBlock: 1, borderBlockEnd: 1, borderBlockEndWidth: 1, borderBlockStart: 1, borderBlockStartWidth: 1, borderBlockWidth: 1, borderBottom: 1, borderBottomLeftRadius: 1, borderBottomRightRadius: 1, borderBottomWidth: 1, borderEndEndRadius: 1, borderEndStartRadius: 1, borderInlineEnd: 1, borderInlineEndWidth: 1, borderInlineStart: 1, borderInlineStartWidth: 1, borderInlineWidth: 1, borderLeft: 1, borderLeftWidth: 1, borderRadius: 1, borderRight: 1, borderRightWidth: 1, borderSpacing: 1, borderStartEndRadius: 1, borderStartStartRadius: 1, borderTop: 1, borderTopLeftRadius: 1, borderTopRightRadius: 1, borderTopWidth: 1, borderWidth: 1, bottom: 1, columnGap: 1, columnRule: 1, columnRuleWidth: 1, columnWidth: 1, containIntrinsicSize: 1, flexBasis: 1, fontSize: 1, gap: 1, gridAutoColumns: 1, gridAutoRows: 1, gridTemplateColumns: 1, gridTemplateRows: 1, height: 1, inlineSize: 1, inset: 1, insetBlock: 1, insetBlockEnd: 1, insetBlockStart: 1, insetInline: 1, insetInlineEnd: 1, insetInlineStart: 1, left: 1, letterSpacing: 1, margin: 1, marginBlock: 1, marginBlockEnd: 1, marginBlockStart: 1, marginBottom: 1, marginInline: 1, marginInlineEnd: 1, marginInlineStart: 1, marginLeft: 1, marginRight: 1, marginTop: 1, maxBlockSize: 1, maxHeight: 1, maxInlineSize: 1, maxWidth: 1, minBlockSize: 1, minHeight: 1, minInlineSize: 1, minWidth: 1, offsetDistance: 1, offsetRotate: 1, outline: 1, outlineOffset: 1, outlineWidth: 1, overflowClipMargin: 1, padding: 1, paddingBlock: 1, paddingBlockEnd: 1, paddingBlockStart: 1, paddingBottom: 1, paddingInline: 1, paddingInlineEnd: 1, paddingInlineStart: 1, paddingLeft: 1, paddingRight: 1, paddingTop: 1, perspective: 1, right: 1, rowGap: 1, scrollMargin: 1, scrollMarginBlock: 1, scrollMarginBlockEnd: 1, scrollMarginBlockStart: 1, scrollMarginBottom: 1, scrollMarginInline: 1, scrollMarginInlineEnd: 1, scrollMarginInlineStart: 1, scrollMarginLeft: 1, scrollMarginRight: 1, scrollMarginTop: 1, scrollPadding: 1, scrollPaddingBlock: 1, scrollPaddingBlockEnd: 1, scrollPaddingBlockStart: 1, scrollPaddingBottom: 1, scrollPaddingInline: 1, scrollPaddingInlineEnd: 1, scrollPaddingInlineStart: 1, scrollPaddingLeft: 1, scrollPaddingRight: 1, scrollPaddingTop: 1, shapeMargin: 1, textDecoration: 1, textDecorationThickness: 1, textIndent: 1, textUnderlineOffset: 1, top: 1, transitionDelay: 1, transitionDuration: 1, verticalAlign: 1, width: 1, wordSpacing: 1 };
  var R = (e4) => String.fromCharCode(e4 + (e4 > 25 ? 39 : 97));
  var z2 = (e4) => ((e5) => {
    let t4, r3 = "";
    for (t4 = Math.abs(e5); t4 > 52; t4 = t4 / 52 | 0)
      r3 = R(t4 % 52) + r3;
    return R(t4 % 52) + r3;
  })(((e5, t4) => {
    let r3 = t4.length;
    for (; r3; )
      e5 = 33 * e5 ^ t4.charCodeAt(--r3);
    return e5;
  })(5381, JSON.stringify(e4)) >>> 0);
  var W2 = ["themed", "global", "styled", "onevar", "resonevar", "allvar", "inline"];
  var j2 = (e4) => {
    if (e4.href && !e4.href.startsWith(location.origin))
      return false;
    try {
      return !!e4.cssRules;
    } catch (e5) {
      return false;
    }
  };
  var E = (e4) => {
    let t4;
    const r3 = () => {
      const { cssRules: e5 } = t4.sheet;
      return [].map.call(e5, (r4, n5) => {
        const { cssText: i3 } = r4;
        let o3 = "";
        if (i3.startsWith("--sxs"))
          return "";
        if (e5[n5 - 1] && (o3 = e5[n5 - 1].cssText).startsWith("--sxs")) {
          if (!r4.cssRules.length)
            return "";
          for (const e6 in t4.rules)
            if (t4.rules[e6].group === r4)
              return `--sxs{--sxs:${[...t4.rules[e6].cache].join(" ")}}${i3}`;
          return r4.cssRules.length ? `${o3}${i3}` : "";
        }
        return i3;
      }).join("");
    }, n4 = () => {
      if (t4) {
        const { rules: e5, sheet: r4 } = t4;
        if (!r4.deleteRule) {
          for (; Object(Object(r4.cssRules)[0]).type === 3; )
            r4.cssRules.splice(0, 1);
          r4.cssRules = [];
        }
        for (const t5 in e5)
          delete e5[t5];
      }
      const i3 = Object(e4).styleSheets || [];
      for (const e5 of i3)
        if (j2(e5)) {
          for (let i4 = 0, o4 = e5.cssRules; o4[i4]; ++i4) {
            const l5 = Object(o4[i4]);
            if (l5.type !== 1)
              continue;
            const s5 = Object(o4[i4 + 1]);
            if (s5.type !== 4)
              continue;
            ++i4;
            const { cssText: a3 } = l5;
            if (!a3.startsWith("--sxs"))
              continue;
            const c4 = a3.slice(14, -3).trim().split(/\s+/), d3 = W2[c4[0]];
            d3 && (t4 || (t4 = { sheet: e5, reset: n4, rules: {}, toString: r3 }), t4.rules[d3] = { group: s5, index: i4, cache: new Set(c4) });
          }
          if (t4)
            break;
        }
      if (!t4) {
        const i4 = (e5, t5) => ({ type: t5, cssRules: [], insertRule(e6, t6) {
          this.cssRules.splice(t6, 0, i4(e6, { import: 3, undefined: 1 }[(e6.toLowerCase().match(/^@([a-z]+)/) || [])[1]] || 4));
        }, get cssText() {
          return e5 === "@media{}" ? `@media{${[].map.call(this.cssRules, (e6) => e6.cssText).join("")}}` : e5;
        } });
        t4 = { sheet: e4 ? (e4.head || e4).appendChild(document.createElement("style")).sheet : i4("", "text/css"), rules: {}, reset: n4, toString: r3 };
      }
      const { sheet: o3, rules: l4 } = t4;
      for (let e5 = W2.length - 1; e5 >= 0; --e5) {
        const t5 = W2[e5];
        if (!l4[t5]) {
          const r4 = W2[e5 + 1], n5 = l4[r4] ? l4[r4].index : o3.cssRules.length;
          o3.insertRule("@media{}", n5), o3.insertRule(`--sxs{--sxs:${e5}}`, n5), l4[t5] = { group: o3.cssRules[n5 + 1], index: n5, cache: /* @__PURE__ */ new Set([e5]) };
        }
        v2(l4[t5]);
      }
    };
    return n4(), t4;
  };
  var v2 = (e4) => {
    const t4 = e4.group;
    let r3 = t4.cssRules.length;
    e4.apply = (e5) => {
      try {
        t4.insertRule(e5, r3), ++r3;
      } catch (e6) {
      }
    };
  };
  var T = Symbol();
  var w2 = o();
  var M2 = (e4, t4) => w2(e4, () => (...r3) => {
    let n4 = { type: null, composers: /* @__PURE__ */ new Set() };
    for (const t5 of r3)
      if (t5 != null)
        if (t5[l2]) {
          n4.type == null && (n4.type = t5[l2].type);
          for (const e5 of t5[l2].composers)
            n4.composers.add(e5);
        } else
          t5.constructor !== Object || t5.$$typeof ? n4.type == null && (n4.type = t5) : n4.composers.add(C2(t5, e4));
    return n4.type == null && (n4.type = "span"), n4.composers.size || n4.composers.add(["PJLV", {}, [], [], {}, []]), P2(e4, n4, t4);
  });
  var C2 = ({ variants: e4, compoundVariants: t4, defaultVariants: r3, ...n4 }, i3) => {
    const o3 = `${S2(i3.prefix)}c-${z2(n4)}`, l4 = [], s5 = [], d3 = /* @__PURE__ */ Object.create(null), g3 = [];
    for (const e5 in r3)
      d3[e5] = String(r3[e5]);
    if (typeof e4 == "object" && e4)
      for (const t5 in e4) {
        p5 = d3, u4 = t5, c2.call(p5, u4) || (d3[t5] = "undefined");
        const r4 = e4[t5];
        for (const e5 in r4) {
          const n5 = { [t5]: String(e5) };
          String(e5) === "undefined" && g3.push(t5);
          const i4 = r4[e5], o4 = [n5, i4, !a(i4)];
          l4.push(o4);
        }
      }
    var p5, u4;
    if (typeof t4 == "object" && t4)
      for (const e5 of t4) {
        let { css: t5, ...r4 } = e5;
        t5 = typeof t5 == "object" && t5 || {};
        for (const e6 in r4)
          r4[e6] = String(r4[e6]);
        const n5 = [r4, t5, !a(t5)];
        s5.push(n5);
      }
    return [o3, n4, l4, s5, d3, g3];
  };
  var P2 = (e4, t4, r3) => {
    const [n4, i3, o3, a3] = L2(t4.composers), c4 = typeof t4.type == "function" || t4.type.$$typeof ? ((e5) => {
      function t5() {
        for (let r4 = 0; r4 < t5[T].length; r4++) {
          const [n5, i4] = t5[T][r4];
          e5.rules[n5].apply(i4);
        }
        return t5[T] = [], null;
      }
      return t5[T] = [], t5.rules = {}, W2.forEach((e6) => t5.rules[e6] = { apply: (r4) => t5[T].push([e6, r4]) }), t5;
    })(r3) : null, d3 = (c4 || r3).rules, g3 = `.${n4}${i3.length > 1 ? `:where(.${i3.slice(1).join(".")})` : ""}`, p5 = (l4) => {
      l4 = typeof l4 == "object" && l4 || A2;
      const { css: s5, ...p6 } = l4, u4 = {};
      for (const e5 in o3)
        if (delete p6[e5], e5 in l4) {
          let t5 = l4[e5];
          typeof t5 == "object" && t5 ? u4[e5] = { "@initial": o3[e5], ...t5 } : (t5 = String(t5), u4[e5] = t5 !== "undefined" || a3.has(e5) ? t5 : o3[e5]);
        } else
          u4[e5] = o3[e5];
      const h3 = /* @__PURE__ */ new Set([...i3]);
      for (const [n5, i4, o4, l5] of t4.composers) {
        r3.rules.styled.cache.has(n5) || (r3.rules.styled.cache.add(n5), $2(i4, [`.${n5}`], [], e4, (e5) => {
          d3.styled.apply(e5);
        }));
        const t5 = O2(o4, u4, e4.media), s6 = O2(l5, u4, e4.media, true);
        for (const i5 of t5)
          if (i5 !== void 0)
            for (const [t6, o5, l6] of i5) {
              const i6 = `${n5}-${z2(o5)}-${t6}`;
              h3.add(i6);
              const s7 = (l6 ? r3.rules.resonevar : r3.rules.onevar).cache, a4 = l6 ? d3.resonevar : d3.onevar;
              s7.has(i6) || (s7.add(i6), $2(o5, [`.${i6}`], [], e4, (e5) => {
                a4.apply(e5);
              }));
            }
        for (const t6 of s6)
          if (t6 !== void 0)
            for (const [i5, o5] of t6) {
              const t7 = `${n5}-${z2(o5)}-${i5}`;
              h3.add(t7), r3.rules.allvar.cache.has(t7) || (r3.rules.allvar.cache.add(t7), $2(o5, [`.${t7}`], [], e4, (e5) => {
                d3.allvar.apply(e5);
              }));
            }
      }
      if (typeof s5 == "object" && s5) {
        const t5 = `${n4}-i${z2(s5)}-css`;
        h3.add(t5), r3.rules.inline.cache.has(t5) || (r3.rules.inline.cache.add(t5), $2(s5, [`.${t5}`], [], e4, (e5) => {
          d3.inline.apply(e5);
        }));
      }
      for (const e5 of String(l4.className || "").trim().split(/\s+/))
        e5 && h3.add(e5);
      const f3 = p6.className = [...h3].join(" ");
      return { type: t4.type, className: f3, selector: g3, props: p6, toString: () => f3, deferredInjector: c4 };
    };
    return s2(p5, { className: n4, selector: g3, [l2]: t4, toString: () => (r3.rules.styled.cache.has(n4) || p5(), n4) });
  };
  var L2 = (e4) => {
    let t4 = "";
    const r3 = [], n4 = {}, i3 = [];
    for (const [o3, , , , l4, s5] of e4) {
      t4 === "" && (t4 = o3), r3.push(o3), i3.push(...s5);
      for (const e5 in l4) {
        const t5 = l4[e5];
        (n4[e5] === void 0 || t5 !== "undefined" || s5.includes(t5)) && (n4[e5] = t5);
      }
    }
    return [t4, r3, n4, new Set(i3)];
  };
  var O2 = (e4, t4, r3, n4) => {
    const i3 = [];
    e:
      for (let [o3, l4, s5] of e4) {
        if (s5)
          continue;
        let e5, a3 = 0, c4 = false;
        for (e5 in o3) {
          const n5 = o3[e5];
          let i4 = t4[e5];
          if (i4 !== n5) {
            if (typeof i4 != "object" || !i4)
              continue e;
            {
              let e6, t5, o4 = 0;
              for (const l5 in i4) {
                if (n5 === String(i4[l5])) {
                  if (l5 !== "@initial") {
                    const e7 = l5.slice(1);
                    (t5 = t5 || []).push(e7 in r3 ? r3[e7] : l5.replace(/^@media ?/, "")), c4 = true;
                  }
                  a3 += o4, e6 = true;
                }
                ++o4;
              }
              if (t5 && t5.length && (l4 = { ["@media " + t5.join(", ")]: l4 }), !e6)
                continue e;
            }
          }
        }
        (i3[a3] = i3[a3] || []).push([n4 ? "cv" : `${e5}-${o3[e5]}`, l4, c4]);
      }
    return i3;
  };
  var A2 = {};
  var N2 = o();
  var D = (e4, t4) => N2(e4, () => (...r3) => {
    const n4 = () => {
      for (let n5 of r3) {
        n5 = typeof n5 == "object" && n5 || {};
        let r4 = z2(n5);
        if (!t4.rules.global.cache.has(r4)) {
          if (t4.rules.global.cache.add(r4), "@import" in n5) {
            let e5 = [].indexOf.call(t4.sheet.cssRules, t4.rules.themed.group) - 1;
            for (let r5 of [].concat(n5["@import"]))
              r5 = r5.includes('"') || r5.includes("'") ? r5 : `"${r5}"`, t4.sheet.insertRule(`@import ${r5};`, e5++);
            delete n5["@import"];
          }
          $2(n5, [], [], e4, (e5) => {
            t4.rules.global.apply(e5);
          });
        }
      }
      return "";
    };
    return s2(n4, { toString: n4 });
  });
  var H2 = o();
  var V2 = (e4, t4) => H2(e4, () => (r3) => {
    const n4 = `${S2(e4.prefix)}k-${z2(r3)}`, i3 = () => {
      if (!t4.rules.global.cache.has(n4)) {
        t4.rules.global.cache.add(n4);
        const i4 = [];
        $2(r3, [], [], e4, (e5) => i4.push(e5));
        const o3 = `@keyframes ${n4}{${i4.join("")}}`;
        t4.rules.global.apply(o3);
      }
      return n4;
    };
    return s2(i3, { get name() {
      return i3();
    }, toString: i3 });
  });
  var G2 = class {
    constructor(e4, t4, r3, n4) {
      this.token = e4 == null ? "" : String(e4), this.value = t4 == null ? "" : String(t4), this.scale = r3 == null ? "" : String(r3), this.prefix = n4 == null ? "" : String(n4);
    }
    get computedValue() {
      return "var(" + this.variable + ")";
    }
    get variable() {
      return "--" + S2(this.prefix) + S2(this.scale) + this.token;
    }
    toString() {
      return this.computedValue;
    }
  };
  var F2 = o();
  var J2 = (e4, t4) => F2(e4, () => (r3, n4) => {
    n4 = typeof r3 == "object" && r3 || Object(n4);
    const i3 = `.${r3 = (r3 = typeof r3 == "string" ? r3 : "") || `${S2(e4.prefix)}t-${z2(n4)}`}`, o3 = {}, l4 = [];
    for (const t5 in n4) {
      o3[t5] = {};
      for (const r4 in n4[t5]) {
        const i4 = `--${S2(e4.prefix)}${t5}-${r4}`, s6 = k2(String(n4[t5][r4]), e4.prefix, t5);
        o3[t5][r4] = new G2(r4, s6, t5, e4.prefix), l4.push(`${i4}:${s6}`);
      }
    }
    const s5 = () => {
      if (l4.length && !t4.rules.themed.cache.has(r3)) {
        t4.rules.themed.cache.add(r3);
        const i4 = `${n4 === e4.theme ? ":root," : ""}.${r3}{${l4.join(";")}}`;
        t4.rules.themed.apply(i4);
      }
      return r3;
    };
    return { ...o3, get className() {
      return s5();
    }, selector: i3, toString: s5 };
  });
  var U2 = o();
  var X2;
  var Y2 = o();
  var q2 = (e4) => {
    const t4 = ((e5) => {
      let t5 = false;
      const r3 = U2(e5, (e6) => {
        t5 = true;
        const r4 = "prefix" in (e6 = typeof e6 == "object" && e6 || {}) ? String(e6.prefix) : "", i3 = typeof e6.media == "object" && e6.media || {}, o3 = typeof e6.root == "object" ? e6.root || null : globalThis.document || null, l4 = typeof e6.theme == "object" && e6.theme || {}, s5 = { prefix: r4, media: i3, theme: l4, themeMap: typeof e6.themeMap == "object" && e6.themeMap || { ...n }, utils: typeof e6.utils == "object" && e6.utils || {} }, a3 = E(o3), c4 = { css: M2(s5, a3), globalCss: D(s5, a3), keyframes: V2(s5, a3), createTheme: J2(s5, a3), reset() {
          a3.reset(), c4.theme.toString();
        }, theme: {}, sheet: a3, config: s5, prefix: r4, getCssText: a3.toString, toString: a3.toString };
        return String(c4.theme = c4.createTheme(l4)), c4;
      });
      return t5 || r3.reset(), r3;
    })(e4);
    return t4.styled = (({ config: e5, sheet: t5 }) => Y2(e5, () => {
      const r3 = M2(e5, t5);
      return (...e6) => {
        const t6 = r3(...e6), n4 = t6[l2].type, i3 = import_react2.default.forwardRef((e7, r4) => {
          const i4 = e7 && e7.as || n4, { props: o3, deferredInjector: l4 } = t6(e7);
          return delete o3.as, o3.ref = r4, l4 ? import_react2.default.createElement(import_react2.default.Fragment, null, import_react2.default.createElement(i4, o3), import_react2.default.createElement(l4, null)) : import_react2.default.createElement(i4, o3);
        });
        return i3.className = t6.className, i3.displayName = `Styled.${n4.displayName || n4.name || n4}`, i3.selector = t6.selector, i3.toString = () => t6.selector, i3[l2] = t6[l2], i3;
      };
    }))(t4), t4;
  };
  var K2 = () => X2 || (X2 = q2());
  var Q2 = (...e4) => K2().createTheme(...e4);
  var re2 = (...e4) => K2().styled(...e4);

  // src/stitches.tsx
  var theme = {
    colors: {
      primary: "#1a1d1e",
      primaryMuted: "#26292b",
      primaryAlt: "#151718",
      accent: "#006adc",
      accentMuted: "#5eb0ef",
      accentAlt: "#00254d",
      secondary: "#FFFFFF",
      secondaryMuted: "#e6e8eb",
      secondaryAlt: "#c1c8cd"
    },
    fonts: {
      sans: "'Inter', Arial, sans-serif",
      display: "'Calistoga', 'Inter', Arial, sans-serif"
    },
    transitions: {
      all: "all 500ms cubic-bezier(0.16, 1, 0.3, 1)"
    }
  };
  var media = {
    xxs: "(max-width: 349px)",
    xs: "(max-width: 575px)",
    sm: "(max-width: 767px)",
    md: "(max-width: 991px)",
    xl: "(max-width: 1199px)",
    lg: "(min-width: 1200px)"
  };
  var { styled, css, keyframes, createTheme } = q2({
    theme,
    media
  });

  // node_modules/@babel/runtime/helpers/esm/extends.js
  function _extends() {
    _extends = Object.assign || function(target) {
      for (var i3 = 1; i3 < arguments.length; i3++) {
        var source = arguments[i3];
        for (var key in source) {
          if (Object.prototype.hasOwnProperty.call(source, key)) {
            target[key] = source[key];
          }
        }
      }
      return target;
    };
    return _extends.apply(this, arguments);
  }

  // node_modules/@radix-ui/react-collapsible/dist/index.module.js
  var import_react12 = __toESM(require_react());

  // node_modules/@radix-ui/primitive/dist/index.module.js
  function composeEventHandlers(e4, n4, { checkForDefaultPrevented: t4 = true } = {}) {
    return function(r3) {
      if (e4 == null || e4(r3), t4 === false || !r3.defaultPrevented)
        return n4 == null ? void 0 : n4(r3);
    };
  }

  // node_modules/@radix-ui/react-context/dist/index.module.js
  var import_react4 = __toESM(require_react());
  function $parcel$export(e4, n4, v5, s5) {
    Object.defineProperty(e4, n4, { get: v5, set: s5, enumerable: true, configurable: true });
  }
  var $c512c27ab02ef895$exports = {};
  $parcel$export($c512c27ab02ef895$exports, "createContext", () => $c512c27ab02ef895$export$fd42f52fd3ae1109);
  $parcel$export($c512c27ab02ef895$exports, "createContextScope", () => $c512c27ab02ef895$export$50c7b4e9d9f19c1);
  function $c512c27ab02ef895$export$fd42f52fd3ae1109(rootComponentName, defaultContext) {
    const Context = /* @__PURE__ */ (0, import_react4.createContext)(defaultContext);
    function Provider(props) {
      const { children, ...context } = props;
      const value = (0, import_react4.useMemo)(() => context, Object.values(context));
      return /* @__PURE__ */ (0, import_react4.createElement)(Context.Provider, {
        value
      }, children);
    }
    function useContext(consumerName) {
      const context = (0, import_react4.useContext)(Context);
      if (context)
        return context;
      if (defaultContext !== void 0)
        return defaultContext;
      throw new Error(`\`${consumerName}\` must be used within \`${rootComponentName}\``);
    }
    Provider.displayName = rootComponentName + "Provider";
    return [
      Provider,
      useContext
    ];
  }
  function $c512c27ab02ef895$export$50c7b4e9d9f19c1(scopeName, createContextScopeDeps = []) {
    let defaultContexts = [];
    function $c512c27ab02ef895$export$fd42f52fd3ae11093(rootComponentName, defaultContext) {
      const BaseContext = /* @__PURE__ */ (0, import_react4.createContext)(defaultContext);
      const index = defaultContexts.length;
      defaultContexts = [
        ...defaultContexts,
        defaultContext
      ];
      function Provider(props) {
        const { scope, children, ...context } = props;
        const Context = (scope === null || scope === void 0 ? void 0 : scope[scopeName][index]) || BaseContext;
        const value = (0, import_react4.useMemo)(() => context, Object.values(context));
        return /* @__PURE__ */ (0, import_react4.createElement)(Context.Provider, {
          value
        }, children);
      }
      function useContext(consumerName, scope) {
        const Context = (scope === null || scope === void 0 ? void 0 : scope[scopeName][index]) || BaseContext;
        const context = (0, import_react4.useContext)(Context);
        if (context)
          return context;
        if (defaultContext !== void 0)
          return defaultContext;
        throw new Error(`\`${consumerName}\` must be used within \`${rootComponentName}\``);
      }
      Provider.displayName = rootComponentName + "Provider";
      return [
        Provider,
        useContext
      ];
    }
    const createScope = () => {
      const scopeContexts = defaultContexts.map((defaultContext) => {
        return /* @__PURE__ */ (0, import_react4.createContext)(defaultContext);
      });
      return function useScope(scope) {
        const contexts = (scope === null || scope === void 0 ? void 0 : scope[scopeName]) || scopeContexts;
        return (0, import_react4.useMemo)(() => ({
          [`__scope${scopeName}`]: {
            ...scope,
            [scopeName]: contexts
          }
        }), [
          scope,
          contexts
        ]);
      };
    };
    createScope.scopeName = scopeName;
    return [
      $c512c27ab02ef895$export$fd42f52fd3ae11093,
      $c512c27ab02ef895$var$composeContextScopes(createScope, ...createContextScopeDeps)
    ];
  }
  function $c512c27ab02ef895$var$composeContextScopes(...scopes) {
    const baseScope = scopes[0];
    if (scopes.length === 1)
      return baseScope;
    const createScope1 = () => {
      const scopeHooks = scopes.map((createScope) => ({
        useScope: createScope(),
        scopeName: createScope.scopeName
      }));
      return function useComposedScopes(overrideScopes) {
        const nextScopes1 = scopeHooks.reduce((nextScopes, { useScope, scopeName }) => {
          const scopeProps = useScope(overrideScopes);
          const currentScope = scopeProps[`__scope${scopeName}`];
          return {
            ...nextScopes,
            ...currentScope
          };
        }, {});
        return (0, import_react4.useMemo)(() => ({
          [`__scope${baseScope.scopeName}`]: nextScopes1
        }), [
          nextScopes1
        ]);
      };
    };
    createScope1.scopeName = baseScope.scopeName;
    return createScope1;
  }

  // node_modules/@radix-ui/react-use-controllable-state/dist/index.module.js
  var import_react6 = __toESM(require_react());

  // node_modules/@radix-ui/react-use-callback-ref/dist/index.module.js
  var import_react5 = __toESM(require_react());
  function $parcel$export2(e4, n4, v5, s5) {
    Object.defineProperty(e4, n4, { get: v5, set: s5, enumerable: true, configurable: true });
  }
  var $b1b2314f5f9a1d84$exports = {};
  $parcel$export2($b1b2314f5f9a1d84$exports, "useCallbackRef", () => $b1b2314f5f9a1d84$export$25bec8c6f54ee79a);
  function $b1b2314f5f9a1d84$export$25bec8c6f54ee79a(callback) {
    const callbackRef = (0, import_react5.useRef)(callback);
    (0, import_react5.useEffect)(() => {
      callbackRef.current = callback;
    });
    return (0, import_react5.useMemo)(() => (...args) => {
      var _callbackRef$current;
      return (_callbackRef$current = callbackRef.current) === null || _callbackRef$current === void 0 ? void 0 : _callbackRef$current.call(callbackRef, ...args);
    }, []);
  }

  // node_modules/@radix-ui/react-use-controllable-state/dist/index.module.js
  function $parcel$export3(e4, n4, v5, s5) {
    Object.defineProperty(e4, n4, { get: v5, set: s5, enumerable: true, configurable: true });
  }
  var $71cd76cc60e0454e$exports = {};
  $parcel$export3($71cd76cc60e0454e$exports, "useControllableState", () => $71cd76cc60e0454e$export$6f32135080cb4c3);
  function $71cd76cc60e0454e$export$6f32135080cb4c3({ prop, defaultProp, onChange = () => {
  } }) {
    const [uncontrolledProp, setUncontrolledProp] = $71cd76cc60e0454e$var$useUncontrolledState({
      defaultProp,
      onChange
    });
    const isControlled = prop !== void 0;
    const value1 = isControlled ? prop : uncontrolledProp;
    const handleChange = $b1b2314f5f9a1d84$export$25bec8c6f54ee79a(onChange);
    const setValue = (0, import_react6.useCallback)((nextValue) => {
      if (isControlled) {
        const setter = nextValue;
        const value = typeof nextValue === "function" ? setter(prop) : nextValue;
        if (value !== prop)
          handleChange(value);
      } else
        setUncontrolledProp(nextValue);
    }, [
      isControlled,
      prop,
      setUncontrolledProp,
      handleChange
    ]);
    return [
      value1,
      setValue
    ];
  }
  function $71cd76cc60e0454e$var$useUncontrolledState({ defaultProp, onChange }) {
    const uncontrolledState = (0, import_react6.useState)(defaultProp);
    const [value] = uncontrolledState;
    const prevValueRef = (0, import_react6.useRef)(value);
    const handleChange = $b1b2314f5f9a1d84$export$25bec8c6f54ee79a(onChange);
    (0, import_react6.useEffect)(() => {
      if (prevValueRef.current !== value) {
        handleChange(value);
        prevValueRef.current = value;
      }
    }, [
      value,
      prevValueRef,
      handleChange
    ]);
    return uncontrolledState;
  }

  // node_modules/@radix-ui/react-use-layout-effect/dist/index.module.js
  var import_react7 = __toESM(require_react());
  function $parcel$export4(e4, n4, v5, s5) {
    Object.defineProperty(e4, n4, { get: v5, set: s5, enumerable: true, configurable: true });
  }
  var $9f79659886946c16$exports = {};
  $parcel$export4($9f79659886946c16$exports, "useLayoutEffect", () => $9f79659886946c16$export$e5c5a5f917a5871c);
  var $9f79659886946c16$export$e5c5a5f917a5871c = Boolean(globalThis === null || globalThis === void 0 ? void 0 : globalThis.document) ? import_react7.useLayoutEffect : () => {
  };

  // node_modules/@radix-ui/react-compose-refs/dist/index.module.js
  var import_react8 = __toESM(require_react());
  function $parcel$export5(e4, n4, v5, s5) {
    Object.defineProperty(e4, n4, { get: v5, set: s5, enumerable: true, configurable: true });
  }
  var $6ed0406888f73fc4$exports = {};
  $parcel$export5($6ed0406888f73fc4$exports, "composeRefs", () => $6ed0406888f73fc4$export$43e446d32b3d21af);
  $parcel$export5($6ed0406888f73fc4$exports, "useComposedRefs", () => $6ed0406888f73fc4$export$c7b2cbe3552a0d05);
  function $6ed0406888f73fc4$var$setRef(ref, value) {
    if (typeof ref === "function")
      ref(value);
    else if (ref !== null && ref !== void 0)
      ref.current = value;
  }
  function $6ed0406888f73fc4$export$43e446d32b3d21af(...refs) {
    return (node) => refs.forEach((ref) => $6ed0406888f73fc4$var$setRef(ref, node));
  }
  function $6ed0406888f73fc4$export$c7b2cbe3552a0d05(...refs) {
    return (0, import_react8.useCallback)($6ed0406888f73fc4$export$43e446d32b3d21af(...refs), refs);
  }

  // node_modules/@radix-ui/react-primitive/dist/index.module.js
  var import_react10 = __toESM(require_react());

  // node_modules/@radix-ui/react-slot/dist/index.module.js
  var import_react9 = __toESM(require_react());
  function $parcel$export6(e4, n4, v5, s5) {
    Object.defineProperty(e4, n4, { get: v5, set: s5, enumerable: true, configurable: true });
  }
  var $5e63c961fc1ce211$exports = {};
  $parcel$export6($5e63c961fc1ce211$exports, "Slot", () => $5e63c961fc1ce211$export$8c6ed5c666ac1360);
  $parcel$export6($5e63c961fc1ce211$exports, "Slottable", () => $5e63c961fc1ce211$export$d9f1ccf0bdb05d45);
  $parcel$export6($5e63c961fc1ce211$exports, "Root", () => $5e63c961fc1ce211$export$be92b6f5f03c0fe9);
  var $5e63c961fc1ce211$export$8c6ed5c666ac1360 = /* @__PURE__ */ (0, import_react9.forwardRef)((props, forwardedRef) => {
    const { children, ...slotProps } = props;
    if (import_react9.Children.toArray(children).some($5e63c961fc1ce211$var$isSlottable))
      return /* @__PURE__ */ (0, import_react9.createElement)(import_react9.Fragment, null, import_react9.Children.map(children, (child) => {
        return $5e63c961fc1ce211$var$isSlottable(child) ? /* @__PURE__ */ (0, import_react9.createElement)($5e63c961fc1ce211$var$SlotClone, _extends({}, slotProps, {
          ref: forwardedRef
        }), child.props.children) : child;
      }));
    return /* @__PURE__ */ (0, import_react9.createElement)($5e63c961fc1ce211$var$SlotClone, _extends({}, slotProps, {
      ref: forwardedRef
    }), children);
  });
  $5e63c961fc1ce211$export$8c6ed5c666ac1360.displayName = "Slot";
  var $5e63c961fc1ce211$var$SlotClone = /* @__PURE__ */ (0, import_react9.forwardRef)((props, forwardedRef) => {
    const { children, ...slotProps } = props;
    if (/* @__PURE__ */ (0, import_react9.isValidElement)(children))
      return /* @__PURE__ */ (0, import_react9.cloneElement)(children, {
        ...$5e63c961fc1ce211$var$mergeProps(slotProps, children.props),
        ref: $6ed0406888f73fc4$export$43e446d32b3d21af(forwardedRef, children.ref)
      });
    return import_react9.Children.count(children) > 1 ? import_react9.Children.only(null) : null;
  });
  $5e63c961fc1ce211$var$SlotClone.displayName = "SlotClone";
  var $5e63c961fc1ce211$export$d9f1ccf0bdb05d45 = ({ children }) => {
    return /* @__PURE__ */ (0, import_react9.createElement)(import_react9.Fragment, null, children);
  };
  function $5e63c961fc1ce211$var$isSlottable(child) {
    return /* @__PURE__ */ (0, import_react9.isValidElement)(child) && child.type === $5e63c961fc1ce211$export$d9f1ccf0bdb05d45;
  }
  function $5e63c961fc1ce211$var$mergeProps(slotProps, childProps) {
    const overrideProps = {
      ...childProps
    };
    for (const propName in childProps) {
      const slotPropValue = slotProps[propName];
      const childPropValue = childProps[propName];
      const isHandler = /^on[A-Z]/.test(propName);
      if (isHandler)
        overrideProps[propName] = (...args) => {
          childPropValue === null || childPropValue === void 0 || childPropValue(...args);
          slotPropValue === null || slotPropValue === void 0 || slotPropValue(...args);
        };
      else if (propName === "style")
        overrideProps[propName] = {
          ...slotPropValue,
          ...childPropValue
        };
      else if (propName === "className")
        overrideProps[propName] = [
          slotPropValue,
          childPropValue
        ].filter(Boolean).join(" ");
    }
    return {
      ...slotProps,
      ...overrideProps
    };
  }
  var $5e63c961fc1ce211$export$be92b6f5f03c0fe9 = $5e63c961fc1ce211$export$8c6ed5c666ac1360;

  // node_modules/@radix-ui/react-primitive/dist/index.module.js
  function $parcel$export7(e4, n4, v5, s5) {
    Object.defineProperty(e4, n4, { get: v5, set: s5, enumerable: true, configurable: true });
  }
  var $8927f6f2acc4f386$exports = {};
  $parcel$export7($8927f6f2acc4f386$exports, "Primitive", () => $8927f6f2acc4f386$export$250ffa63cdc0d034);
  $parcel$export7($8927f6f2acc4f386$exports, "Root", () => $8927f6f2acc4f386$export$be92b6f5f03c0fe9);
  var $8927f6f2acc4f386$var$NODES = [
    "a",
    "button",
    "div",
    "h2",
    "h3",
    "img",
    "li",
    "nav",
    "ol",
    "p",
    "span",
    "svg",
    "ul"
  ];
  var $8927f6f2acc4f386$export$250ffa63cdc0d034 = $8927f6f2acc4f386$var$NODES.reduce((primitive, node) => ({
    ...primitive,
    [node]: /* @__PURE__ */ (0, import_react10.forwardRef)((props, forwardedRef) => {
      const { asChild, ...primitiveProps } = props;
      const Comp = asChild ? $5e63c961fc1ce211$export$8c6ed5c666ac1360 : node;
      (0, import_react10.useEffect)(() => {
        window[Symbol.for("radix-ui")] = true;
      }, []);
      return /* @__PURE__ */ (0, import_react10.createElement)(Comp, _extends({}, primitiveProps, {
        ref: forwardedRef
      }));
    })
  }), {});
  var $8927f6f2acc4f386$export$be92b6f5f03c0fe9 = $8927f6f2acc4f386$export$250ffa63cdc0d034;

  // node_modules/@radix-ui/react-presence/dist/index.module.js
  var import_react11 = __toESM(require_react());
  function $parcel$export8(e4, n4, v5, s5) {
    Object.defineProperty(e4, n4, { get: v5, set: s5, enumerable: true, configurable: true });
  }
  var $921a889cee6df7e8$exports = {};
  $parcel$export8($921a889cee6df7e8$exports, "Presence", () => $921a889cee6df7e8$export$99c2b779aa4e8b8b);
  function $fe963b355347cc68$export$3e6543de14f8614f(initialState, machine) {
    return (0, import_react11.useReducer)((state, event) => {
      const nextState = machine[state][event];
      return nextState !== null && nextState !== void 0 ? nextState : state;
    }, initialState);
  }
  var $921a889cee6df7e8$export$99c2b779aa4e8b8b = (props) => {
    const { present, children } = props;
    const presence = $921a889cee6df7e8$var$usePresence(present);
    const child = typeof children === "function" ? children({
      present: presence.isPresent
    }) : import_react11.Children.only(children);
    const ref = $6ed0406888f73fc4$export$c7b2cbe3552a0d05(presence.ref, child.ref);
    const forceMount = typeof children === "function";
    return forceMount || presence.isPresent ? /* @__PURE__ */ (0, import_react11.cloneElement)(child, {
      ref
    }) : null;
  };
  $921a889cee6df7e8$export$99c2b779aa4e8b8b.displayName = "Presence";
  function $921a889cee6df7e8$var$usePresence(present) {
    const [node1, setNode] = (0, import_react11.useState)();
    const stylesRef = (0, import_react11.useRef)({});
    const prevPresentRef = (0, import_react11.useRef)(present);
    const prevAnimationNameRef = (0, import_react11.useRef)("none");
    const initialState = present ? "mounted" : "unmounted";
    const [state, send] = $fe963b355347cc68$export$3e6543de14f8614f(initialState, {
      mounted: {
        UNMOUNT: "unmounted",
        ANIMATION_OUT: "unmountSuspended"
      },
      unmountSuspended: {
        MOUNT: "mounted",
        ANIMATION_END: "unmounted"
      },
      unmounted: {
        MOUNT: "mounted"
      }
    });
    (0, import_react11.useEffect)(() => {
      const currentAnimationName = $921a889cee6df7e8$var$getAnimationName(stylesRef.current);
      prevAnimationNameRef.current = state === "mounted" ? currentAnimationName : "none";
    }, [
      state
    ]);
    $9f79659886946c16$export$e5c5a5f917a5871c(() => {
      const styles = stylesRef.current;
      const wasPresent = prevPresentRef.current;
      const hasPresentChanged = wasPresent !== present;
      if (hasPresentChanged) {
        const prevAnimationName = prevAnimationNameRef.current;
        const currentAnimationName = $921a889cee6df7e8$var$getAnimationName(styles);
        if (present)
          send("MOUNT");
        else if (currentAnimationName === "none" || (styles === null || styles === void 0 ? void 0 : styles.display) === "none")
          send("UNMOUNT");
        else {
          const isAnimating = prevAnimationName !== currentAnimationName;
          if (wasPresent && isAnimating)
            send("ANIMATION_OUT");
          else
            send("UNMOUNT");
        }
        prevPresentRef.current = present;
      }
    }, [
      present,
      send
    ]);
    $9f79659886946c16$export$e5c5a5f917a5871c(() => {
      if (node1) {
        const handleAnimationEnd = (event) => {
          const currentAnimationName = $921a889cee6df7e8$var$getAnimationName(stylesRef.current);
          const isCurrentAnimation = currentAnimationName.includes(event.animationName);
          if (event.target === node1 && isCurrentAnimation)
            send("ANIMATION_END");
        };
        const handleAnimationStart = (event) => {
          if (event.target === node1)
            prevAnimationNameRef.current = $921a889cee6df7e8$var$getAnimationName(stylesRef.current);
        };
        node1.addEventListener("animationstart", handleAnimationStart);
        node1.addEventListener("animationcancel", handleAnimationEnd);
        node1.addEventListener("animationend", handleAnimationEnd);
        return () => {
          node1.removeEventListener("animationstart", handleAnimationStart);
          node1.removeEventListener("animationcancel", handleAnimationEnd);
          node1.removeEventListener("animationend", handleAnimationEnd);
        };
      } else
        send("ANIMATION_END");
    }, [
      node1,
      send
    ]);
    return {
      isPresent: [
        "mounted",
        "unmountSuspended"
      ].includes(state),
      ref: (0, import_react11.useCallback)((node) => {
        if (node)
          stylesRef.current = getComputedStyle(node);
        setNode(node);
      }, [])
    };
  }
  function $921a889cee6df7e8$var$getAnimationName(styles) {
    return (styles === null || styles === void 0 ? void 0 : styles.animationName) || "none";
  }

  // node_modules/@radix-ui/react-id/dist/index.module.js
  var $2AODx$react = __toESM(require_react());
  function $parcel$export9(e4, n4, v5, s5) {
    Object.defineProperty(e4, n4, { get: v5, set: s5, enumerable: true, configurable: true });
  }
  var $1746a345f3d73bb7$exports = {};
  $parcel$export9($1746a345f3d73bb7$exports, "useId", () => $1746a345f3d73bb7$export$f680877a34711e37);
  $parcel$export9($1746a345f3d73bb7$exports, "IdProvider", () => $1746a345f3d73bb7$export$6be90bcb437e928f);
  var $1746a345f3d73bb7$var$useReactId = $2AODx$react["useId".toString()] || (() => void 0);
  var $1746a345f3d73bb7$var$count = 0;
  function $1746a345f3d73bb7$export$f680877a34711e37(deterministicId) {
    const [id, setId] = $2AODx$react.useState($1746a345f3d73bb7$var$useReactId());
    $9f79659886946c16$export$e5c5a5f917a5871c(() => {
      if (!deterministicId)
        setId((reactId) => reactId !== null && reactId !== void 0 ? reactId : String($1746a345f3d73bb7$var$count++));
    }, [
      deterministicId
    ]);
    return deterministicId || (id ? `radix-${id}` : "");
  }
  function $1746a345f3d73bb7$export$6be90bcb437e928f({ children }) {
    $2AODx$react.useEffect(() => {
    }, []);
    return /* @__PURE__ */ $2AODx$react.createElement($2AODx$react.Fragment, null, children);
  }

  // node_modules/@radix-ui/react-collapsible/dist/index.module.js
  function $parcel$export10(e4, n4, v5, s5) {
    Object.defineProperty(e4, n4, { get: v5, set: s5, enumerable: true, configurable: true });
  }
  var $409067139f391064$exports = {};
  $parcel$export10($409067139f391064$exports, "createCollapsibleScope", () => $409067139f391064$export$952b32dcbe73087a);
  $parcel$export10($409067139f391064$exports, "Collapsible", () => $409067139f391064$export$6eb0f7ddcda6131f);
  $parcel$export10($409067139f391064$exports, "CollapsibleTrigger", () => $409067139f391064$export$c135dce7b15bbbdc);
  $parcel$export10($409067139f391064$exports, "CollapsibleContent", () => $409067139f391064$export$aadde00976f34151);
  $parcel$export10($409067139f391064$exports, "Root", () => $409067139f391064$export$be92b6f5f03c0fe9);
  $parcel$export10($409067139f391064$exports, "Trigger", () => $409067139f391064$export$41fb9f06171c75f4);
  $parcel$export10($409067139f391064$exports, "Content", () => $409067139f391064$export$7c6e2c02157bb7d2);
  var $409067139f391064$var$COLLAPSIBLE_NAME = "Collapsible";
  var [$409067139f391064$var$createCollapsibleContext, $409067139f391064$export$952b32dcbe73087a] = $c512c27ab02ef895$export$50c7b4e9d9f19c1($409067139f391064$var$COLLAPSIBLE_NAME);
  var [$409067139f391064$var$CollapsibleProvider, $409067139f391064$var$useCollapsibleContext] = $409067139f391064$var$createCollapsibleContext($409067139f391064$var$COLLAPSIBLE_NAME);
  var $409067139f391064$export$6eb0f7ddcda6131f = /* @__PURE__ */ (0, import_react12.forwardRef)((props, forwardedRef) => {
    const { __scopeCollapsible, open: openProp, defaultOpen, disabled, onOpenChange, ...collapsibleProps } = props;
    const [open = false, setOpen] = $71cd76cc60e0454e$export$6f32135080cb4c3({
      prop: openProp,
      defaultProp: defaultOpen,
      onChange: onOpenChange
    });
    return /* @__PURE__ */ (0, import_react12.createElement)($409067139f391064$var$CollapsibleProvider, {
      scope: __scopeCollapsible,
      disabled,
      contentId: $1746a345f3d73bb7$export$f680877a34711e37(),
      open,
      onOpenToggle: (0, import_react12.useCallback)(() => setOpen((prevOpen) => !prevOpen), [
        setOpen
      ])
    }, /* @__PURE__ */ (0, import_react12.createElement)($8927f6f2acc4f386$export$250ffa63cdc0d034.div, _extends({
      "data-state": $409067139f391064$var$getState(open),
      "data-disabled": disabled ? "" : void 0
    }, collapsibleProps, {
      ref: forwardedRef
    })));
  });
  var $409067139f391064$var$TRIGGER_NAME = "CollapsibleTrigger";
  var $409067139f391064$export$c135dce7b15bbbdc = /* @__PURE__ */ (0, import_react12.forwardRef)((props, forwardedRef) => {
    const { __scopeCollapsible, ...triggerProps } = props;
    const context = $409067139f391064$var$useCollapsibleContext($409067139f391064$var$TRIGGER_NAME, __scopeCollapsible);
    return /* @__PURE__ */ (0, import_react12.createElement)($8927f6f2acc4f386$export$250ffa63cdc0d034.button, _extends({
      type: "button",
      "aria-controls": context.contentId,
      "aria-expanded": context.open || false,
      "data-state": $409067139f391064$var$getState(context.open),
      "data-disabled": context.disabled ? "" : void 0,
      disabled: context.disabled
    }, triggerProps, {
      ref: forwardedRef,
      onClick: composeEventHandlers(props.onClick, context.onOpenToggle)
    }));
  });
  var $409067139f391064$var$CONTENT_NAME = "CollapsibleContent";
  var $409067139f391064$export$aadde00976f34151 = /* @__PURE__ */ (0, import_react12.forwardRef)((props, forwardedRef) => {
    const { forceMount, ...contentProps } = props;
    const context = $409067139f391064$var$useCollapsibleContext($409067139f391064$var$CONTENT_NAME, props.__scopeCollapsible);
    return /* @__PURE__ */ (0, import_react12.createElement)($921a889cee6df7e8$export$99c2b779aa4e8b8b, {
      present: forceMount || context.open
    }, ({ present }) => /* @__PURE__ */ (0, import_react12.createElement)($409067139f391064$var$CollapsibleContentImpl, _extends({}, contentProps, {
      ref: forwardedRef,
      present
    })));
  });
  var $409067139f391064$var$CollapsibleContentImpl = /* @__PURE__ */ (0, import_react12.forwardRef)((props, forwardedRef) => {
    const { __scopeCollapsible, present, children, ...contentProps } = props;
    const context = $409067139f391064$var$useCollapsibleContext($409067139f391064$var$CONTENT_NAME, __scopeCollapsible);
    const [isPresent, setIsPresent] = (0, import_react12.useState)(present);
    const ref = (0, import_react12.useRef)(null);
    const composedRefs = $6ed0406888f73fc4$export$c7b2cbe3552a0d05(forwardedRef, ref);
    const heightRef = (0, import_react12.useRef)(0);
    const height = heightRef.current;
    const widthRef = (0, import_react12.useRef)(0);
    const width = widthRef.current;
    const isOpen = context.open || isPresent;
    const isMountAnimationPreventedRef = (0, import_react12.useRef)(isOpen);
    const originalStylesRef = (0, import_react12.useRef)();
    (0, import_react12.useEffect)(() => {
      const rAF = requestAnimationFrame(() => isMountAnimationPreventedRef.current = false);
      return () => cancelAnimationFrame(rAF);
    }, []);
    $9f79659886946c16$export$e5c5a5f917a5871c(() => {
      const node = ref.current;
      if (node) {
        originalStylesRef.current = originalStylesRef.current || {
          transitionDuration: node.style.transitionDuration,
          animationDuration: node.style.animationDuration,
          animationFillMode: node.style.animationFillMode
        };
        node.style.transitionDuration = "0s";
        node.style.animationDuration = "0s";
        node.style.animationFillMode = "none";
        const rect = node.getBoundingClientRect();
        heightRef.current = rect.height;
        widthRef.current = rect.width;
        if (!isMountAnimationPreventedRef.current) {
          node.style.transitionDuration = originalStylesRef.current.transitionDuration;
          node.style.animationDuration = originalStylesRef.current.animationDuration;
          node.style.animationFillMode = originalStylesRef.current.animationFillMode;
        }
        setIsPresent(present);
      }
    }, [
      context.open,
      present
    ]);
    return /* @__PURE__ */ (0, import_react12.createElement)($8927f6f2acc4f386$export$250ffa63cdc0d034.div, _extends({
      "data-state": $409067139f391064$var$getState(context.open),
      "data-disabled": context.disabled ? "" : void 0,
      id: context.contentId,
      hidden: !isOpen
    }, contentProps, {
      ref: composedRefs,
      style: {
        [`--radix-collapsible-content-height`]: height ? `${height}px` : void 0,
        [`--radix-collapsible-content-width`]: width ? `${width}px` : void 0,
        ...props.style
      }
    }), isOpen && children);
  });
  function $409067139f391064$var$getState(open) {
    return open ? "open" : "closed";
  }
  var $409067139f391064$export$be92b6f5f03c0fe9 = $409067139f391064$export$6eb0f7ddcda6131f;
  var $409067139f391064$export$41fb9f06171c75f4 = $409067139f391064$export$c135dce7b15bbbdc;
  var $409067139f391064$export$7c6e2c02157bb7d2 = $409067139f391064$export$aadde00976f34151;

  // src/components/Viewer/Viewer.styled.tsx
  var MediaWrapper = styled("div", {
    position: "relative",
    zIndex: "0"
  });
  var Content = styled("div", {
    display: "flex",
    flexDirection: "row",
    overflow: "hidden",
    "@sm": {
      flexDirection: "column"
    }
  });
  var Main = styled("div", {
    display: "flex",
    flexDirection: "column",
    flexGrow: "1",
    flexShrink: "1",
    width: "61.8%",
    "@sm": {
      width: "100%"
    }
  });
  var CollapsibleTrigger = styled($409067139f391064$export$41fb9f06171c75f4, {
    display: "none",
    background: "transparent",
    border: "none",
    margin: "0",
    padding: "0",
    transition: "$all",
    opacity: "1",
    marginTop: "0",
    "&[data-navigator='false']": {
      opacity: "0",
      marginTop: "-59px"
    },
    "@sm": {
      display: "flex",
      "> span": {
        display: "flex",
        flexGrow: "1",
        margin: "1rem 1rem 0"
      }
    }
  });
  var CollapsibleContent = styled($409067139f391064$export$7c6e2c02157bb7d2, {
    width: "100%",
    display: "flex"
  });
  var Aside = styled("aside", {
    display: "flex",
    flexGrow: "1",
    flexShrink: "0",
    width: "38.2%",
    "@sm": {
      width: "100%"
    }
  });
  var Wrapper = styled("div", {
    display: "flex",
    flexDirection: "column",
    fontFamily: "$sans",
    backgroundColor: "$secondary",
    fontSmooth: "auto",
    webkitFontSmoothing: "antialiased",
    "> div": {
      display: "flex",
      flexDirection: "column",
      flexGrow: "1",
      justifyContent: "flex-start",
      "@sm": {
        [`& ${Content}`]: {
          flexGrow: "1"
        },
        [`& ${Main}`]: {
          flexGrow: "0"
        }
      }
    },
    "@sm": {
      padding: "0"
    },
    "&[data-navigator-open='true']": {
      "@sm": {
        position: "fixed",
        height: "100%",
        width: "100%",
        top: "0",
        left: "0",
        zIndex: "2500000000",
        [`& ${MediaWrapper}`]: {
          display: "none"
        },
        [`& ${CollapsibleContent}`]: {
          height: "100%"
        }
      }
    }
  });

  // src/hooks/useMediaQuery.ts
  var import_react13 = __toESM(require_react());
  var useMediaQuery = (mediaQuery) => {
    const match = () => {
      if (!window.matchMedia) {
        return false;
      }
      return window.matchMedia(mediaQuery).matches;
    };
    const [isMatch, setIsMatch] = (0, import_react13.useState)(match);
    (0, import_react13.useEffect)(() => {
      const handler = () => setIsMatch(match);
      window.addEventListener("resize", handler);
      return () => window.removeEventListener("resize", handler);
    });
    return isMatch;
  };

  // src/hooks/useBodyLocked.ts
  var import_react14 = __toESM(require_react());
  var useBodyLocked = (initialLocked = false) => {
    const [locked, setLocked] = (0, import_react14.useState)(initialLocked);
    (0, import_react14.useLayoutEffect)(() => {
      if (!locked) {
        return;
      }
      const originalOverflow = document.documentElement.style.overflow;
      document.documentElement.style.overflow = "hidden";
      return () => {
        document.documentElement.style.overflow = originalOverflow;
      };
    }, [locked]);
    (0, import_react14.useEffect)(() => {
      if (locked !== initialLocked) {
        setLocked(initialLocked);
      }
    }, [initialLocked]);
    return [locked, setLocked];
  };

  // src/components/Viewer/Header.tsx
  var import_react66 = __toESM(require_react());

  // node_modules/@nulib/design-system/dist/index.es.js
  var import_react28 = __toESM(require_react());

  // node_modules/@radix-ui/react-popover/dist/index.module.js
  var import_react26 = __toESM(require_react());

  // node_modules/@radix-ui/react-popper/dist/index.module.js
  var import_react18 = __toESM(require_react());

  // node_modules/@radix-ui/popper/dist/index.module.js
  function getPlacementData({ anchorRect: p5, popperSize: c4, arrowSize: f3, arrowOffset: l4 = 0, side: d3, sideOffset: h3 = 0, align: x4, alignOffset: g3 = 0, shouldAvoidCollisions: u4 = true, collisionBoundariesRect: w4, collisionTolerance: m3 = 0 }) {
    if (!p5 || !c4 || !w4)
      return { popperStyles: o2, arrowStyles: n2 };
    const y4 = function(e4, r3, o3 = 0, n4 = 0, i3) {
      const p6 = i3 ? i3.height : 0, a3 = t2(r3, e4, "x"), s5 = t2(r3, e4, "y"), c5 = s5.before - o3 - p6, f4 = s5.after + o3 + p6, l5 = a3.before - o3 - p6, d4 = a3.after + o3 + p6;
      return { top: { start: { x: a3.start + n4, y: c5 }, center: { x: a3.center, y: c5 }, end: { x: a3.end - n4, y: c5 } }, right: { start: { x: d4, y: s5.start + n4 }, center: { x: d4, y: s5.center }, end: { x: d4, y: s5.end - n4 } }, bottom: { start: { x: a3.start + n4, y: f4 }, center: { x: a3.center, y: f4 }, end: { x: a3.end - n4, y: f4 } }, left: { start: { x: l5, y: s5.start + n4 }, center: { x: l5, y: s5.center }, end: { x: l5, y: s5.end - n4 } } };
    }(c4, p5, h3, g3, f3), b3 = y4[d3][x4];
    if (u4 === false) {
      const t4 = e2(b3);
      let o3 = n2;
      f3 && (o3 = i2({ popperSize: c4, arrowSize: f3, arrowOffset: l4, side: d3, align: x4 }));
      return { popperStyles: { ...t4, "--radix-popper-transform-origin": r2(c4, d3, x4, l4, f3) }, arrowStyles: o3, placedSide: d3, placedAlign: x4 };
    }
    const S3 = DOMRect.fromRect({ ...c4, ...b3 }), $3 = (O4 = w4, z4 = m3, DOMRect.fromRect({ width: O4.width - 2 * z4, height: O4.height - 2 * z4, x: O4.left + z4, y: O4.top + z4 }));
    var O4, z4;
    const R2 = s3(S3, $3), M3 = y4[a2(d3)][x4], D2 = function(t4, e4, r3) {
      const o3 = a2(t4);
      return e4[t4] && !r3[o3] ? o3 : t4;
    }(d3, R2, s3(DOMRect.fromRect({ ...c4, ...M3 }), $3)), A4 = function(t4, e4, r3, o3, n4) {
      const i3 = r3 === "top" || r3 === "bottom", p6 = i3 ? "left" : "top", a3 = i3 ? "right" : "bottom", s5 = i3 ? "width" : "height", c5 = e4[s5] > t4[s5];
      if ((o3 === "start" || o3 === "center") && (n4[p6] && c5 || n4[a3] && !c5))
        return "end";
      if ((o3 === "end" || o3 === "center") && (n4[a3] && c5 || n4[p6] && !c5))
        return "start";
      return o3;
    }(c4, p5, d3, x4, R2), I2 = e2(y4[D2][A4]);
    let C4 = n2;
    f3 && (C4 = i2({ popperSize: c4, arrowSize: f3, arrowOffset: l4, side: D2, align: A4 }));
    return { popperStyles: { ...I2, "--radix-popper-transform-origin": r2(c4, D2, A4, l4, f3) }, arrowStyles: C4, placedSide: D2, placedAlign: A4 };
  }
  function t2(t4, e4, r3) {
    const o3 = t4[r3 === "x" ? "left" : "top"], n4 = r3 === "x" ? "width" : "height", i3 = t4[n4], p5 = e4[n4];
    return { before: o3 - p5, start: o3, center: o3 + (i3 - p5) / 2, end: o3 + i3 - p5, after: o3 + i3 };
  }
  function e2(t4) {
    return { position: "absolute", top: 0, left: 0, minWidth: "max-content", willChange: "transform", transform: `translate3d(${Math.round(t4.x + window.scrollX)}px, ${Math.round(t4.y + window.scrollY)}px, 0)` };
  }
  function r2(t4, e4, r3, o3, n4) {
    const i3 = e4 === "top" || e4 === "bottom", p5 = n4 ? n4.width : 0, a3 = n4 ? n4.height : 0, s5 = p5 / 2 + o3;
    let c4 = "", f3 = "";
    return i3 ? (c4 = { start: `${s5}px`, center: "center", end: t4.width - s5 + "px" }[r3], f3 = e4 === "top" ? `${t4.height + a3}px` : -a3 + "px") : (c4 = e4 === "left" ? `${t4.width + a3}px` : -a3 + "px", f3 = { start: `${s5}px`, center: "center", end: t4.height - s5 + "px" }[r3]), `${c4} ${f3}`;
  }
  var o2 = { position: "fixed", top: 0, left: 0, opacity: 0, transform: "translate3d(0, -200%, 0)" };
  var n2 = { position: "absolute", opacity: 0 };
  function i2({ popperSize: t4, arrowSize: e4, arrowOffset: r3, side: o3, align: n4 }) {
    const i3 = (t4.width - e4.width) / 2, a3 = (t4.height - e4.width) / 2, s5 = { top: 0, right: 90, bottom: 180, left: -90 }[o3], c4 = Math.max(e4.width, e4.height), f3 = { width: `${c4}px`, height: `${c4}px`, transform: `rotate(${s5}deg)`, willChange: "transform", position: "absolute", [o3]: "100%", direction: p3(o3, n4) };
    return o3 !== "top" && o3 !== "bottom" || (n4 === "start" && (f3.left = `${r3}px`), n4 === "center" && (f3.left = `${i3}px`), n4 === "end" && (f3.right = `${r3}px`)), o3 !== "left" && o3 !== "right" || (n4 === "start" && (f3.top = `${r3}px`), n4 === "center" && (f3.top = `${a3}px`), n4 === "end" && (f3.bottom = `${r3}px`)), f3;
  }
  function p3(t4, e4) {
    return (t4 !== "top" && t4 !== "right" || e4 !== "end") && (t4 !== "bottom" && t4 !== "left" || e4 === "end") ? "ltr" : "rtl";
  }
  function a2(t4) {
    return { top: "bottom", right: "left", bottom: "top", left: "right" }[t4];
  }
  function s3(t4, e4) {
    return { top: t4.top < e4.top, right: t4.right > e4.right, bottom: t4.bottom > e4.bottom, left: t4.left < e4.left };
  }

  // node_modules/@radix-ui/react-use-rect/dist/index.module.js
  var import_react15 = __toESM(require_react());

  // node_modules/@radix-ui/rect/dist/index.module.js
  function observeElementRect(n4, o3) {
    const i3 = e3.get(n4);
    return i3 === void 0 ? (e3.set(n4, { rect: {}, callbacks: [o3] }), e3.size === 1 && (t3 = requestAnimationFrame(c3))) : (i3.callbacks.push(o3), o3(n4.getBoundingClientRect())), () => {
      const c4 = e3.get(n4);
      if (c4 === void 0)
        return;
      const i4 = c4.callbacks.indexOf(o3);
      i4 > -1 && c4.callbacks.splice(i4, 1), c4.callbacks.length === 0 && (e3.delete(n4), e3.size === 0 && cancelAnimationFrame(t3));
    };
  }
  var t3;
  var e3 = /* @__PURE__ */ new Map();
  function c3() {
    const n4 = [];
    e3.forEach((t4, e4) => {
      const c4 = e4.getBoundingClientRect();
      var o3, i3;
      o3 = t4.rect, i3 = c4, (o3.width !== i3.width || o3.height !== i3.height || o3.top !== i3.top || o3.right !== i3.right || o3.bottom !== i3.bottom || o3.left !== i3.left) && (t4.rect = c4, n4.push(t4));
    }), n4.forEach((t4) => {
      t4.callbacks.forEach((e4) => e4(t4.rect));
    }), t3 = requestAnimationFrame(c3);
  }

  // node_modules/@radix-ui/react-use-rect/dist/index.module.js
  function $parcel$export11(e4, n4, v5, s5) {
    Object.defineProperty(e4, n4, { get: v5, set: s5, enumerable: true, configurable: true });
  }
  var $ccac1052a272b78b$exports = {};
  $parcel$export11($ccac1052a272b78b$exports, "useRect", () => $ccac1052a272b78b$export$9823a655542017cd);
  function $ccac1052a272b78b$export$9823a655542017cd(measurable) {
    const [rect, setRect] = (0, import_react15.useState)();
    (0, import_react15.useEffect)(() => {
      if (measurable) {
        const unobserve = observeElementRect(measurable, setRect);
        return () => {
          setRect(void 0);
          unobserve();
        };
      }
      return;
    }, [
      measurable
    ]);
    return rect;
  }

  // node_modules/@radix-ui/react-use-size/dist/index.module.js
  var import_react16 = __toESM(require_react());
  function $parcel$export12(e4, n4, v5, s5) {
    Object.defineProperty(e4, n4, { get: v5, set: s5, enumerable: true, configurable: true });
  }
  var $db6c3485150b8e66$exports = {};
  $parcel$export12($db6c3485150b8e66$exports, "useSize", () => $db6c3485150b8e66$export$1ab7ae714698c4b8);
  function $db6c3485150b8e66$export$1ab7ae714698c4b8(element) {
    const [size, setSize] = (0, import_react16.useState)(void 0);
    (0, import_react16.useEffect)(() => {
      if (element) {
        const resizeObserver = new ResizeObserver((entries) => {
          if (!Array.isArray(entries))
            return;
          if (!entries.length)
            return;
          const entry = entries[0];
          let width;
          let height;
          if ("borderBoxSize" in entry) {
            const borderSizeEntry = entry["borderBoxSize"];
            const borderSize = Array.isArray(borderSizeEntry) ? borderSizeEntry[0] : borderSizeEntry;
            width = borderSize["inlineSize"];
            height = borderSize["blockSize"];
          } else {
            const rect = element.getBoundingClientRect();
            width = rect.width;
            height = rect.height;
          }
          setSize({
            width,
            height
          });
        });
        resizeObserver.observe(element, {
          box: "border-box"
        });
        return () => resizeObserver.unobserve(element);
      } else
        setSize(void 0);
    }, [
      element
    ]);
    return size;
  }

  // node_modules/@radix-ui/react-arrow/dist/index.module.js
  var import_react17 = __toESM(require_react());
  function $parcel$export13(e4, n4, v5, s5) {
    Object.defineProperty(e4, n4, { get: v5, set: s5, enumerable: true, configurable: true });
  }
  var $7e8f5cd07187803e$exports = {};
  $parcel$export13($7e8f5cd07187803e$exports, "Arrow", () => $7e8f5cd07187803e$export$21b07c8f274aebd5);
  $parcel$export13($7e8f5cd07187803e$exports, "Root", () => $7e8f5cd07187803e$export$be92b6f5f03c0fe9);
  var $7e8f5cd07187803e$export$21b07c8f274aebd5 = /* @__PURE__ */ (0, import_react17.forwardRef)((props, forwardedRef) => {
    const { children, width = 10, height = 5, ...arrowProps } = props;
    return /* @__PURE__ */ (0, import_react17.createElement)($8927f6f2acc4f386$export$250ffa63cdc0d034.svg, _extends({}, arrowProps, {
      ref: forwardedRef,
      width,
      height,
      viewBox: "0 0 30 10",
      preserveAspectRatio: "none"
    }), props.asChild ? children : /* @__PURE__ */ (0, import_react17.createElement)("polygon", {
      points: "0,0 30,0 15,10"
    }));
  });
  var $7e8f5cd07187803e$export$be92b6f5f03c0fe9 = $7e8f5cd07187803e$export$21b07c8f274aebd5;

  // node_modules/@radix-ui/react-popper/dist/index.module.js
  function $parcel$export14(e4, n4, v5, s5) {
    Object.defineProperty(e4, n4, { get: v5, set: s5, enumerable: true, configurable: true });
  }
  var $cf1ac5d9fe0e8206$exports = {};
  $parcel$export14($cf1ac5d9fe0e8206$exports, "createPopperScope", () => $cf1ac5d9fe0e8206$export$722aac194ae923);
  $parcel$export14($cf1ac5d9fe0e8206$exports, "Popper", () => $cf1ac5d9fe0e8206$export$badac9ada3a0bdf9);
  $parcel$export14($cf1ac5d9fe0e8206$exports, "PopperAnchor", () => $cf1ac5d9fe0e8206$export$ecd4e1ccab6ed6d);
  $parcel$export14($cf1ac5d9fe0e8206$exports, "PopperContent", () => $cf1ac5d9fe0e8206$export$bc4ae5855d3c4fc);
  $parcel$export14($cf1ac5d9fe0e8206$exports, "PopperArrow", () => $cf1ac5d9fe0e8206$export$79d62cd4e10a3fd0);
  $parcel$export14($cf1ac5d9fe0e8206$exports, "Root", () => $cf1ac5d9fe0e8206$export$be92b6f5f03c0fe9);
  $parcel$export14($cf1ac5d9fe0e8206$exports, "Anchor", () => $cf1ac5d9fe0e8206$export$b688253958b8dfe7);
  $parcel$export14($cf1ac5d9fe0e8206$exports, "Content", () => $cf1ac5d9fe0e8206$export$7c6e2c02157bb7d2);
  $parcel$export14($cf1ac5d9fe0e8206$exports, "Arrow", () => $cf1ac5d9fe0e8206$export$21b07c8f274aebd5);
  var $cf1ac5d9fe0e8206$var$POPPER_NAME = "Popper";
  var [$cf1ac5d9fe0e8206$var$createPopperContext, $cf1ac5d9fe0e8206$export$722aac194ae923] = $c512c27ab02ef895$export$50c7b4e9d9f19c1($cf1ac5d9fe0e8206$var$POPPER_NAME);
  var [$cf1ac5d9fe0e8206$var$PopperProvider, $cf1ac5d9fe0e8206$var$usePopperContext] = $cf1ac5d9fe0e8206$var$createPopperContext($cf1ac5d9fe0e8206$var$POPPER_NAME);
  var $cf1ac5d9fe0e8206$export$badac9ada3a0bdf9 = (props) => {
    const { __scopePopper, children } = props;
    const [anchor, setAnchor] = (0, import_react18.useState)(null);
    return /* @__PURE__ */ (0, import_react18.createElement)($cf1ac5d9fe0e8206$var$PopperProvider, {
      scope: __scopePopper,
      anchor,
      onAnchorChange: setAnchor
    }, children);
  };
  var $cf1ac5d9fe0e8206$var$ANCHOR_NAME = "PopperAnchor";
  var $cf1ac5d9fe0e8206$export$ecd4e1ccab6ed6d = /* @__PURE__ */ (0, import_react18.forwardRef)((props, forwardedRef) => {
    const { __scopePopper, virtualRef, ...anchorProps } = props;
    const context = $cf1ac5d9fe0e8206$var$usePopperContext($cf1ac5d9fe0e8206$var$ANCHOR_NAME, __scopePopper);
    const ref = (0, import_react18.useRef)(null);
    const composedRefs = $6ed0406888f73fc4$export$c7b2cbe3552a0d05(forwardedRef, ref);
    (0, import_react18.useEffect)(() => {
      context.onAnchorChange((virtualRef === null || virtualRef === void 0 ? void 0 : virtualRef.current) || ref.current);
    });
    return virtualRef ? null : /* @__PURE__ */ (0, import_react18.createElement)($8927f6f2acc4f386$export$250ffa63cdc0d034.div, _extends({}, anchorProps, {
      ref: composedRefs
    }));
  });
  var $cf1ac5d9fe0e8206$var$CONTENT_NAME = "PopperContent";
  var [$cf1ac5d9fe0e8206$var$PopperContentProvider, $cf1ac5d9fe0e8206$var$useContentContext] = $cf1ac5d9fe0e8206$var$createPopperContext($cf1ac5d9fe0e8206$var$CONTENT_NAME);
  var $cf1ac5d9fe0e8206$export$bc4ae5855d3c4fc = /* @__PURE__ */ (0, import_react18.forwardRef)((props, forwardedRef) => {
    const { __scopePopper, side = "bottom", sideOffset, align = "center", alignOffset, collisionTolerance, avoidCollisions = true, ...contentProps } = props;
    const context = $cf1ac5d9fe0e8206$var$usePopperContext($cf1ac5d9fe0e8206$var$CONTENT_NAME, __scopePopper);
    const [arrowOffset, setArrowOffset] = (0, import_react18.useState)();
    const anchorRect = $ccac1052a272b78b$export$9823a655542017cd(context.anchor);
    const [content, setContent] = (0, import_react18.useState)(null);
    const contentSize = $db6c3485150b8e66$export$1ab7ae714698c4b8(content);
    const [arrow, setArrow] = (0, import_react18.useState)(null);
    const arrowSize = $db6c3485150b8e66$export$1ab7ae714698c4b8(arrow);
    const composedRefs = $6ed0406888f73fc4$export$c7b2cbe3552a0d05(forwardedRef, (node) => setContent(node));
    const windowSize = $cf1ac5d9fe0e8206$var$useWindowSize();
    const collisionBoundariesRect = windowSize ? DOMRect.fromRect({
      ...windowSize,
      x: 0,
      y: 0
    }) : void 0;
    const { popperStyles, arrowStyles, placedSide, placedAlign } = getPlacementData({
      anchorRect,
      popperSize: contentSize,
      arrowSize,
      arrowOffset,
      side,
      sideOffset,
      align,
      alignOffset,
      shouldAvoidCollisions: avoidCollisions,
      collisionBoundariesRect,
      collisionTolerance
    });
    const isPlaced = placedSide !== void 0;
    return /* @__PURE__ */ (0, import_react18.createElement)("div", {
      style: popperStyles,
      "data-radix-popper-content-wrapper": ""
    }, /* @__PURE__ */ (0, import_react18.createElement)($cf1ac5d9fe0e8206$var$PopperContentProvider, {
      scope: __scopePopper,
      arrowStyles,
      onArrowChange: setArrow,
      onArrowOffsetChange: setArrowOffset
    }, /* @__PURE__ */ (0, import_react18.createElement)($8927f6f2acc4f386$export$250ffa63cdc0d034.div, _extends({
      "data-side": placedSide,
      "data-align": placedAlign
    }, contentProps, {
      style: {
        ...contentProps.style,
        animation: !isPlaced ? "none" : void 0
      },
      ref: composedRefs
    }))));
  });
  var $cf1ac5d9fe0e8206$var$ARROW_NAME = "PopperArrow";
  var $cf1ac5d9fe0e8206$export$79d62cd4e10a3fd0 = /* @__PURE__ */ (0, import_react18.forwardRef)(function $cf1ac5d9fe0e8206$export$79d62cd4e10a3fd02(props, forwardedRef) {
    const { __scopePopper, offset, ...arrowProps } = props;
    const context = $cf1ac5d9fe0e8206$var$useContentContext($cf1ac5d9fe0e8206$var$ARROW_NAME, __scopePopper);
    const { onArrowOffsetChange } = context;
    (0, import_react18.useEffect)(() => onArrowOffsetChange(offset), [
      onArrowOffsetChange,
      offset
    ]);
    return /* @__PURE__ */ (0, import_react18.createElement)("span", {
      style: {
        ...context.arrowStyles,
        pointerEvents: "none"
      }
    }, /* @__PURE__ */ (0, import_react18.createElement)("span", {
      ref: context.onArrowChange,
      style: {
        display: "inline-block",
        verticalAlign: "top",
        pointerEvents: "auto"
      }
    }, /* @__PURE__ */ (0, import_react18.createElement)($7e8f5cd07187803e$export$be92b6f5f03c0fe9, _extends({}, arrowProps, {
      ref: forwardedRef,
      style: {
        ...arrowProps.style,
        display: "block"
      }
    }))));
  });
  var $cf1ac5d9fe0e8206$var$WINDOW_RESIZE_DEBOUNCE_WAIT_IN_MS = 100;
  function $cf1ac5d9fe0e8206$var$useWindowSize() {
    const [windowSize, setWindowSize] = (0, import_react18.useState)(void 0);
    (0, import_react18.useEffect)(() => {
      let debounceTimerId;
      function updateWindowSize() {
        setWindowSize({
          width: window.innerWidth,
          height: window.innerHeight
        });
      }
      function handleResize() {
        window.clearTimeout(debounceTimerId);
        debounceTimerId = window.setTimeout(updateWindowSize, $cf1ac5d9fe0e8206$var$WINDOW_RESIZE_DEBOUNCE_WAIT_IN_MS);
      }
      updateWindowSize();
      window.addEventListener("resize", handleResize);
      return () => window.removeEventListener("resize", handleResize);
    }, []);
    return windowSize;
  }
  var $cf1ac5d9fe0e8206$export$be92b6f5f03c0fe9 = $cf1ac5d9fe0e8206$export$badac9ada3a0bdf9;
  var $cf1ac5d9fe0e8206$export$b688253958b8dfe7 = $cf1ac5d9fe0e8206$export$ecd4e1ccab6ed6d;
  var $cf1ac5d9fe0e8206$export$7c6e2c02157bb7d2 = $cf1ac5d9fe0e8206$export$bc4ae5855d3c4fc;
  var $cf1ac5d9fe0e8206$export$21b07c8f274aebd5 = $cf1ac5d9fe0e8206$export$79d62cd4e10a3fd0;

  // node_modules/@radix-ui/react-dismissable-layer/dist/index.module.js
  var import_react21 = __toESM(require_react());

  // node_modules/@radix-ui/react-use-body-pointer-events/dist/index.module.js
  var import_react19 = __toESM(require_react());
  function $parcel$export15(e4, n4, v5, s5) {
    Object.defineProperty(e4, n4, { get: v5, set: s5, enumerable: true, configurable: true });
  }
  var $95af0b826cbc904b$exports = {};
  $parcel$export15($95af0b826cbc904b$exports, "useBodyPointerEvents", () => $95af0b826cbc904b$export$c78b33423ab8317c);
  var $95af0b826cbc904b$var$changeCount = 0;
  var $95af0b826cbc904b$var$originalBodyPointerEvents;
  function $95af0b826cbc904b$export$c78b33423ab8317c({ disabled }) {
    const isTouchOrPenPressedRef = (0, import_react19.useRef)(false);
    $9f79659886946c16$export$e5c5a5f917a5871c(() => {
      if (disabled) {
        let resetPointerEvents = function() {
          $95af0b826cbc904b$var$changeCount--;
          if ($95af0b826cbc904b$var$changeCount === 0)
            document.body.style.pointerEvents = $95af0b826cbc904b$var$originalBodyPointerEvents;
        }, handlePointerUp = function(event) {
          isTouchOrPenPressedRef.current = event.pointerType !== "mouse";
        };
        if ($95af0b826cbc904b$var$changeCount === 0)
          $95af0b826cbc904b$var$originalBodyPointerEvents = document.body.style.pointerEvents;
        document.body.style.pointerEvents = "none";
        $95af0b826cbc904b$var$changeCount++;
        document.addEventListener("pointerup", handlePointerUp);
        return () => {
          if (isTouchOrPenPressedRef.current)
            document.addEventListener("click", resetPointerEvents, {
              once: true
            });
          else
            resetPointerEvents();
          document.removeEventListener("pointerup", handlePointerUp);
        };
      }
    }, [
      disabled
    ]);
  }

  // node_modules/@radix-ui/react-use-escape-keydown/dist/index.module.js
  var import_react20 = __toESM(require_react());
  function $parcel$export16(e4, n4, v5, s5) {
    Object.defineProperty(e4, n4, { get: v5, set: s5, enumerable: true, configurable: true });
  }
  var $addc16e1bbe58fd0$exports = {};
  $parcel$export16($addc16e1bbe58fd0$exports, "useEscapeKeydown", () => $addc16e1bbe58fd0$export$3a72a57244d6e765);
  function $addc16e1bbe58fd0$export$3a72a57244d6e765(onEscapeKeyDownProp) {
    const onEscapeKeyDown = $b1b2314f5f9a1d84$export$25bec8c6f54ee79a(onEscapeKeyDownProp);
    (0, import_react20.useEffect)(() => {
      const handleKeyDown = (event) => {
        if (event.key === "Escape")
          onEscapeKeyDown(event);
      };
      document.addEventListener("keydown", handleKeyDown);
      return () => document.removeEventListener("keydown", handleKeyDown);
    }, [
      onEscapeKeyDown
    ]);
  }

  // node_modules/@radix-ui/react-dismissable-layer/dist/index.module.js
  function $parcel$export17(e4, n4, v5, s5) {
    Object.defineProperty(e4, n4, { get: v5, set: s5, enumerable: true, configurable: true });
  }
  var $5cb92bef7577960e$exports = {};
  $parcel$export17($5cb92bef7577960e$exports, "DismissableLayer", () => $5cb92bef7577960e$export$177fb62ff3ec1f22);
  $parcel$export17($5cb92bef7577960e$exports, "DismissableLayerBranch", () => $5cb92bef7577960e$export$4d5eb2109db14228);
  $parcel$export17($5cb92bef7577960e$exports, "Root", () => $5cb92bef7577960e$export$be92b6f5f03c0fe9);
  $parcel$export17($5cb92bef7577960e$exports, "Branch", () => $5cb92bef7577960e$export$aecb2ddcb55c95be);
  var $5cb92bef7577960e$var$CONTEXT_UPDATE = "dismissableLayer.update";
  var $5cb92bef7577960e$var$POINTER_DOWN_OUTSIDE = "dismissableLayer.pointerDownOutside";
  var $5cb92bef7577960e$var$FOCUS_OUTSIDE = "dismissableLayer.focusOutside";
  var $5cb92bef7577960e$var$DismissableLayerContext = /* @__PURE__ */ (0, import_react21.createContext)({
    layers: /* @__PURE__ */ new Set(),
    layersWithOutsidePointerEventsDisabled: /* @__PURE__ */ new Set(),
    branches: /* @__PURE__ */ new Set()
  });
  var $5cb92bef7577960e$export$177fb62ff3ec1f22 = /* @__PURE__ */ (0, import_react21.forwardRef)((props, forwardedRef) => {
    const { disableOutsidePointerEvents = false, onEscapeKeyDown, onPointerDownOutside, onFocusOutside, onInteractOutside, onDismiss, ...layerProps } = props;
    const context = (0, import_react21.useContext)($5cb92bef7577960e$var$DismissableLayerContext);
    const [node1, setNode] = (0, import_react21.useState)(null);
    const [, force] = (0, import_react21.useState)({});
    const composedRefs = $6ed0406888f73fc4$export$c7b2cbe3552a0d05(forwardedRef, (node) => setNode(node));
    const layers = Array.from(context.layers);
    const [highestLayerWithOutsidePointerEventsDisabled] = [
      ...context.layersWithOutsidePointerEventsDisabled
    ].slice(-1);
    const highestLayerWithOutsidePointerEventsDisabledIndex = layers.indexOf(highestLayerWithOutsidePointerEventsDisabled);
    const index = node1 ? layers.indexOf(node1) : -1;
    const isBodyPointerEventsDisabled = context.layersWithOutsidePointerEventsDisabled.size > 0;
    const isPointerEventsEnabled = index >= highestLayerWithOutsidePointerEventsDisabledIndex;
    const pointerDownOutside = $5cb92bef7577960e$var$usePointerDownOutside((event) => {
      const target = event.target;
      const isPointerDownOnBranch = [
        ...context.branches
      ].some((branch) => branch.contains(target));
      if (!isPointerEventsEnabled || isPointerDownOnBranch)
        return;
      onPointerDownOutside === null || onPointerDownOutside === void 0 || onPointerDownOutside(event);
      onInteractOutside === null || onInteractOutside === void 0 || onInteractOutside(event);
      if (!event.defaultPrevented)
        onDismiss === null || onDismiss === void 0 || onDismiss();
    });
    const focusOutside = $5cb92bef7577960e$var$useFocusOutside((event) => {
      const target = event.target;
      const isFocusInBranch = [
        ...context.branches
      ].some((branch) => branch.contains(target));
      if (isFocusInBranch)
        return;
      onFocusOutside === null || onFocusOutside === void 0 || onFocusOutside(event);
      onInteractOutside === null || onInteractOutside === void 0 || onInteractOutside(event);
      if (!event.defaultPrevented)
        onDismiss === null || onDismiss === void 0 || onDismiss();
    });
    $addc16e1bbe58fd0$export$3a72a57244d6e765((event) => {
      const isHighestLayer = index === context.layers.size - 1;
      if (!isHighestLayer)
        return;
      onEscapeKeyDown === null || onEscapeKeyDown === void 0 || onEscapeKeyDown(event);
      if (!event.defaultPrevented)
        onDismiss === null || onDismiss === void 0 || onDismiss();
    });
    $95af0b826cbc904b$export$c78b33423ab8317c({
      disabled: disableOutsidePointerEvents
    });
    (0, import_react21.useEffect)(() => {
      if (!node1)
        return;
      if (disableOutsidePointerEvents)
        context.layersWithOutsidePointerEventsDisabled.add(node1);
      context.layers.add(node1);
      $5cb92bef7577960e$var$dispatchUpdate();
    }, [
      node1,
      disableOutsidePointerEvents,
      context
    ]);
    (0, import_react21.useEffect)(() => {
      return () => {
        if (!node1)
          return;
        context.layers.delete(node1);
        context.layersWithOutsidePointerEventsDisabled.delete(node1);
        $5cb92bef7577960e$var$dispatchUpdate();
      };
    }, [
      node1,
      context
    ]);
    (0, import_react21.useEffect)(() => {
      const handleUpdate = () => force({});
      document.addEventListener($5cb92bef7577960e$var$CONTEXT_UPDATE, handleUpdate);
      return () => document.removeEventListener($5cb92bef7577960e$var$CONTEXT_UPDATE, handleUpdate);
    }, []);
    return /* @__PURE__ */ (0, import_react21.createElement)($8927f6f2acc4f386$export$250ffa63cdc0d034.div, _extends({}, layerProps, {
      ref: composedRefs,
      style: {
        pointerEvents: isBodyPointerEventsDisabled ? isPointerEventsEnabled ? "auto" : "none" : void 0,
        ...props.style
      },
      onFocusCapture: composeEventHandlers(props.onFocusCapture, focusOutside.onFocusCapture),
      onBlurCapture: composeEventHandlers(props.onBlurCapture, focusOutside.onBlurCapture),
      onPointerDownCapture: composeEventHandlers(props.onPointerDownCapture, pointerDownOutside.onPointerDownCapture)
    }));
  });
  var $5cb92bef7577960e$export$4d5eb2109db14228 = /* @__PURE__ */ (0, import_react21.forwardRef)((props, forwardedRef) => {
    const context = (0, import_react21.useContext)($5cb92bef7577960e$var$DismissableLayerContext);
    const ref = (0, import_react21.useRef)(null);
    const composedRefs = $6ed0406888f73fc4$export$c7b2cbe3552a0d05(forwardedRef, ref);
    (0, import_react21.useEffect)(() => {
      const node = ref.current;
      if (node) {
        context.branches.add(node);
        return () => {
          context.branches.delete(node);
        };
      }
    }, [
      context.branches
    ]);
    return /* @__PURE__ */ (0, import_react21.createElement)($8927f6f2acc4f386$export$250ffa63cdc0d034.div, _extends({}, props, {
      ref: composedRefs
    }));
  });
  function $5cb92bef7577960e$var$usePointerDownOutside(onPointerDownOutside) {
    const handlePointerDownOutside = $b1b2314f5f9a1d84$export$25bec8c6f54ee79a(onPointerDownOutside);
    const isPointerInsideReactTreeRef = (0, import_react21.useRef)(false);
    (0, import_react21.useEffect)(() => {
      const handlePointerDown = (event) => {
        if (event.target && !isPointerInsideReactTreeRef.current) {
          const eventDetail = {
            originalEvent: event
          };
          $5cb92bef7577960e$var$dispatchCustomEvent($5cb92bef7577960e$var$POINTER_DOWN_OUTSIDE, handlePointerDownOutside, eventDetail);
        }
        isPointerInsideReactTreeRef.current = false;
      };
      const timerId = window.setTimeout(() => {
        document.addEventListener("pointerdown", handlePointerDown);
      }, 0);
      return () => {
        window.clearTimeout(timerId);
        document.removeEventListener("pointerdown", handlePointerDown);
      };
    }, [
      handlePointerDownOutside
    ]);
    return {
      onPointerDownCapture: () => isPointerInsideReactTreeRef.current = true
    };
  }
  function $5cb92bef7577960e$var$useFocusOutside(onFocusOutside) {
    const handleFocusOutside = $b1b2314f5f9a1d84$export$25bec8c6f54ee79a(onFocusOutside);
    const isFocusInsideReactTreeRef = (0, import_react21.useRef)(false);
    (0, import_react21.useEffect)(() => {
      const handleFocus = (event) => {
        if (event.target && !isFocusInsideReactTreeRef.current) {
          const eventDetail = {
            originalEvent: event
          };
          $5cb92bef7577960e$var$dispatchCustomEvent($5cb92bef7577960e$var$FOCUS_OUTSIDE, handleFocusOutside, eventDetail);
        }
      };
      document.addEventListener("focusin", handleFocus);
      return () => document.removeEventListener("focusin", handleFocus);
    }, [
      handleFocusOutside
    ]);
    return {
      onFocusCapture: () => isFocusInsideReactTreeRef.current = true,
      onBlurCapture: () => isFocusInsideReactTreeRef.current = false
    };
  }
  function $5cb92bef7577960e$var$dispatchUpdate() {
    const event = new Event($5cb92bef7577960e$var$CONTEXT_UPDATE);
    document.dispatchEvent(event);
  }
  function $5cb92bef7577960e$var$dispatchCustomEvent(name, handler, detail) {
    const target = detail.originalEvent.target;
    const event = new CustomEvent(name, {
      bubbles: false,
      cancelable: true,
      detail
    });
    if (handler)
      target.addEventListener(name, handler, {
        once: true
      });
    return !target.dispatchEvent(event);
  }
  var $5cb92bef7577960e$export$be92b6f5f03c0fe9 = $5cb92bef7577960e$export$177fb62ff3ec1f22;
  var $5cb92bef7577960e$export$aecb2ddcb55c95be = $5cb92bef7577960e$export$4d5eb2109db14228;

  // node_modules/@radix-ui/react-focus-scope/dist/index.module.js
  var import_react22 = __toESM(require_react());
  function $parcel$export18(e4, n4, v5, s5) {
    Object.defineProperty(e4, n4, { get: v5, set: s5, enumerable: true, configurable: true });
  }
  var $d3863c46a17e8a28$exports = {};
  $parcel$export18($d3863c46a17e8a28$exports, "FocusScope", () => $d3863c46a17e8a28$export$20e40289641fbbb6);
  $parcel$export18($d3863c46a17e8a28$exports, "Root", () => $d3863c46a17e8a28$export$be92b6f5f03c0fe9);
  var $d3863c46a17e8a28$var$AUTOFOCUS_ON_MOUNT = "focusScope.autoFocusOnMount";
  var $d3863c46a17e8a28$var$AUTOFOCUS_ON_UNMOUNT = "focusScope.autoFocusOnUnmount";
  var $d3863c46a17e8a28$var$EVENT_OPTIONS = {
    bubbles: false,
    cancelable: true
  };
  var $d3863c46a17e8a28$export$20e40289641fbbb6 = /* @__PURE__ */ (0, import_react22.forwardRef)((props, forwardedRef) => {
    const { loop = false, trapped = false, onMountAutoFocus: onMountAutoFocusProp, onUnmountAutoFocus: onUnmountAutoFocusProp, ...scopeProps } = props;
    const [container1, setContainer] = (0, import_react22.useState)(null);
    const onMountAutoFocus = $b1b2314f5f9a1d84$export$25bec8c6f54ee79a(onMountAutoFocusProp);
    const onUnmountAutoFocus = $b1b2314f5f9a1d84$export$25bec8c6f54ee79a(onUnmountAutoFocusProp);
    const lastFocusedElementRef = (0, import_react22.useRef)(null);
    const composedRefs = $6ed0406888f73fc4$export$c7b2cbe3552a0d05(forwardedRef, (node) => setContainer(node));
    const focusScope = (0, import_react22.useRef)({
      paused: false,
      pause() {
        this.paused = true;
      },
      resume() {
        this.paused = false;
      }
    }).current;
    (0, import_react22.useEffect)(() => {
      if (trapped) {
        let handleFocusIn = function(event) {
          if (focusScope.paused || !container1)
            return;
          const target = event.target;
          if (container1.contains(target))
            lastFocusedElementRef.current = target;
          else
            $d3863c46a17e8a28$var$focus(lastFocusedElementRef.current, {
              select: true
            });
        }, handleFocusOut = function(event) {
          if (focusScope.paused || !container1)
            return;
          if (!container1.contains(event.relatedTarget))
            $d3863c46a17e8a28$var$focus(lastFocusedElementRef.current, {
              select: true
            });
        };
        document.addEventListener("focusin", handleFocusIn);
        document.addEventListener("focusout", handleFocusOut);
        return () => {
          document.removeEventListener("focusin", handleFocusIn);
          document.removeEventListener("focusout", handleFocusOut);
        };
      }
    }, [
      trapped,
      container1,
      focusScope.paused
    ]);
    (0, import_react22.useEffect)(() => {
      if (container1) {
        $d3863c46a17e8a28$var$focusScopesStack.add(focusScope);
        const previouslyFocusedElement = document.activeElement;
        const hasFocusedCandidate = container1.contains(previouslyFocusedElement);
        if (!hasFocusedCandidate) {
          const mountEvent = new Event($d3863c46a17e8a28$var$AUTOFOCUS_ON_MOUNT, $d3863c46a17e8a28$var$EVENT_OPTIONS);
          container1.addEventListener($d3863c46a17e8a28$var$AUTOFOCUS_ON_MOUNT, onMountAutoFocus);
          container1.dispatchEvent(mountEvent);
          if (!mountEvent.defaultPrevented) {
            $d3863c46a17e8a28$var$focusFirst($d3863c46a17e8a28$var$removeLinks($d3863c46a17e8a28$var$getTabbableCandidates(container1)), {
              select: true
            });
            if (document.activeElement === previouslyFocusedElement)
              $d3863c46a17e8a28$var$focus(container1);
          }
        }
        return () => {
          container1.removeEventListener($d3863c46a17e8a28$var$AUTOFOCUS_ON_MOUNT, onMountAutoFocus);
          setTimeout(() => {
            const unmountEvent = new Event($d3863c46a17e8a28$var$AUTOFOCUS_ON_UNMOUNT, $d3863c46a17e8a28$var$EVENT_OPTIONS);
            container1.addEventListener($d3863c46a17e8a28$var$AUTOFOCUS_ON_UNMOUNT, onUnmountAutoFocus);
            container1.dispatchEvent(unmountEvent);
            if (!unmountEvent.defaultPrevented)
              $d3863c46a17e8a28$var$focus(previouslyFocusedElement !== null && previouslyFocusedElement !== void 0 ? previouslyFocusedElement : document.body, {
                select: true
              });
            container1.removeEventListener($d3863c46a17e8a28$var$AUTOFOCUS_ON_UNMOUNT, onUnmountAutoFocus);
            $d3863c46a17e8a28$var$focusScopesStack.remove(focusScope);
          }, 0);
        };
      }
    }, [
      container1,
      onMountAutoFocus,
      onUnmountAutoFocus,
      focusScope
    ]);
    const handleKeyDown = (0, import_react22.useCallback)((event) => {
      if (!loop && !trapped)
        return;
      if (focusScope.paused)
        return;
      const isTabKey = event.key === "Tab" && !event.altKey && !event.ctrlKey && !event.metaKey;
      const focusedElement = document.activeElement;
      if (isTabKey && focusedElement) {
        const container2 = event.currentTarget;
        const [first, last] = $d3863c46a17e8a28$var$getTabbableEdges(container2);
        const hasTabbableElementsInside = first && last;
        if (!hasTabbableElementsInside) {
          if (focusedElement === container2)
            event.preventDefault();
        } else {
          if (!event.shiftKey && focusedElement === last) {
            event.preventDefault();
            if (loop)
              $d3863c46a17e8a28$var$focus(first, {
                select: true
              });
          } else if (event.shiftKey && focusedElement === first) {
            event.preventDefault();
            if (loop)
              $d3863c46a17e8a28$var$focus(last, {
                select: true
              });
          }
        }
      }
    }, [
      loop,
      trapped,
      focusScope.paused
    ]);
    return /* @__PURE__ */ (0, import_react22.createElement)($8927f6f2acc4f386$export$250ffa63cdc0d034.div, _extends({
      tabIndex: -1
    }, scopeProps, {
      ref: composedRefs,
      onKeyDown: handleKeyDown
    }));
  });
  function $d3863c46a17e8a28$var$focusFirst(candidates, { select = false } = {}) {
    const previouslyFocusedElement = document.activeElement;
    for (const candidate of candidates) {
      $d3863c46a17e8a28$var$focus(candidate, {
        select
      });
      if (document.activeElement !== previouslyFocusedElement)
        return;
    }
  }
  function $d3863c46a17e8a28$var$getTabbableEdges(container2) {
    const candidates = $d3863c46a17e8a28$var$getTabbableCandidates(container2);
    const first = $d3863c46a17e8a28$var$findVisible(candidates, container2);
    const last = $d3863c46a17e8a28$var$findVisible(candidates.reverse(), container2);
    return [
      first,
      last
    ];
  }
  function $d3863c46a17e8a28$var$getTabbableCandidates(container2) {
    const nodes = [];
    const walker = document.createTreeWalker(container2, NodeFilter.SHOW_ELEMENT, {
      acceptNode: (node) => {
        const isHiddenInput = node.tagName === "INPUT" && node.type === "hidden";
        if (node.disabled || node.hidden || isHiddenInput)
          return NodeFilter.FILTER_SKIP;
        return node.tabIndex >= 0 ? NodeFilter.FILTER_ACCEPT : NodeFilter.FILTER_SKIP;
      }
    });
    while (walker.nextNode())
      nodes.push(walker.currentNode);
    return nodes;
  }
  function $d3863c46a17e8a28$var$findVisible(elements, container2) {
    for (const element of elements) {
      if (!$d3863c46a17e8a28$var$isHidden(element, {
        upTo: container2
      }))
        return element;
    }
  }
  function $d3863c46a17e8a28$var$isHidden(node, { upTo }) {
    if (getComputedStyle(node).visibility === "hidden")
      return true;
    while (node) {
      if (upTo !== void 0 && node === upTo)
        return false;
      if (getComputedStyle(node).display === "none")
        return true;
      node = node.parentElement;
    }
    return false;
  }
  function $d3863c46a17e8a28$var$isSelectableInput(element) {
    return element instanceof HTMLInputElement && "select" in element;
  }
  function $d3863c46a17e8a28$var$focus(element, { select = false } = {}) {
    if (element && element.focus) {
      const previouslyFocusedElement = document.activeElement;
      element.focus({
        preventScroll: true
      });
      if (element !== previouslyFocusedElement && $d3863c46a17e8a28$var$isSelectableInput(element) && select)
        element.select();
    }
  }
  var $d3863c46a17e8a28$var$focusScopesStack = $d3863c46a17e8a28$var$createFocusScopesStack();
  function $d3863c46a17e8a28$var$createFocusScopesStack() {
    let stack = [];
    return {
      add(focusScope) {
        const activeFocusScope = stack[0];
        if (focusScope !== activeFocusScope)
          activeFocusScope === null || activeFocusScope === void 0 || activeFocusScope.pause();
        stack = $d3863c46a17e8a28$var$arrayRemove(stack, focusScope);
        stack.unshift(focusScope);
      },
      remove(focusScope) {
        var _stack$;
        stack = $d3863c46a17e8a28$var$arrayRemove(stack, focusScope);
        (_stack$ = stack[0]) === null || _stack$ === void 0 || _stack$.resume();
      }
    };
  }
  function $d3863c46a17e8a28$var$arrayRemove(array, item) {
    const updatedArray = [
      ...array
    ];
    const index = updatedArray.indexOf(item);
    if (index !== -1)
      updatedArray.splice(index, 1);
    return updatedArray;
  }
  function $d3863c46a17e8a28$var$removeLinks(items) {
    return items.filter((item) => item.tagName !== "A");
  }
  var $d3863c46a17e8a28$export$be92b6f5f03c0fe9 = $d3863c46a17e8a28$export$20e40289641fbbb6;

  // node_modules/@radix-ui/react-portal/dist/index.module.js
  var import_react23 = __toESM(require_react());
  var import_react_dom = __toESM(require_react_dom());
  function $parcel$export19(e4, n4, v5, s5) {
    Object.defineProperty(e4, n4, { get: v5, set: s5, enumerable: true, configurable: true });
  }
  var $f1701beae083dbae$exports = {};
  $parcel$export19($f1701beae083dbae$exports, "Portal", () => $f1701beae083dbae$export$602eac185826482c);
  $parcel$export19($f1701beae083dbae$exports, "UnstablePortal", () => $f1701beae083dbae$export$aa829b6eed785496);
  $parcel$export19($f1701beae083dbae$exports, "Root", () => $f1701beae083dbae$export$be92b6f5f03c0fe9);
  var $f1701beae083dbae$var$MAX_Z_INDEX = 2147483647;
  var $f1701beae083dbae$export$602eac185826482c = /* @__PURE__ */ (0, import_react23.forwardRef)((props, forwardedRef) => {
    var _containerRef$current, _globalThis$document;
    const { containerRef, style, ...portalProps } = props;
    const hostElement = (_containerRef$current = containerRef === null || containerRef === void 0 ? void 0 : containerRef.current) !== null && _containerRef$current !== void 0 ? _containerRef$current : globalThis === null || globalThis === void 0 ? void 0 : (_globalThis$document = globalThis.document) === null || _globalThis$document === void 0 ? void 0 : _globalThis$document.body;
    const [, forceUpdate] = (0, import_react23.useState)({});
    $9f79659886946c16$export$e5c5a5f917a5871c(() => {
      forceUpdate({});
    }, []);
    if (hostElement)
      return /* @__PURE__ */ import_react_dom.default.createPortal(/* @__PURE__ */ (0, import_react23.createElement)($8927f6f2acc4f386$export$250ffa63cdc0d034.div, _extends({
        "data-radix-portal": ""
      }, portalProps, {
        ref: forwardedRef,
        style: hostElement === document.body ? {
          position: "absolute",
          top: 0,
          left: 0,
          zIndex: $f1701beae083dbae$var$MAX_Z_INDEX,
          ...style
        } : void 0
      })), hostElement);
    return null;
  });
  var $f1701beae083dbae$export$aa829b6eed785496 = /* @__PURE__ */ (0, import_react23.forwardRef)((props, forwardedRef) => {
    var _globalThis$document2;
    const { container: container2 = globalThis === null || globalThis === void 0 ? void 0 : (_globalThis$document2 = globalThis.document) === null || _globalThis$document2 === void 0 ? void 0 : _globalThis$document2.body, ...portalProps } = props;
    return container2 ? /* @__PURE__ */ import_react_dom.default.createPortal(/* @__PURE__ */ (0, import_react23.createElement)($8927f6f2acc4f386$export$250ffa63cdc0d034.div, _extends({}, portalProps, {
      ref: forwardedRef
    })), container2) : null;
  });
  var $f1701beae083dbae$export$be92b6f5f03c0fe9 = $f1701beae083dbae$export$602eac185826482c;

  // node_modules/@radix-ui/react-focus-guards/dist/index.module.js
  var import_react24 = __toESM(require_react());
  function $parcel$export20(e4, n4, v5, s5) {
    Object.defineProperty(e4, n4, { get: v5, set: s5, enumerable: true, configurable: true });
  }
  var $3db38b7d1fb3fe6a$exports = {};
  $parcel$export20($3db38b7d1fb3fe6a$exports, "FocusGuards", () => $3db38b7d1fb3fe6a$export$ac5b58043b79449b);
  $parcel$export20($3db38b7d1fb3fe6a$exports, "useFocusGuards", () => $3db38b7d1fb3fe6a$export$b7ece24a22aeda8c);
  $parcel$export20($3db38b7d1fb3fe6a$exports, "Root", () => $3db38b7d1fb3fe6a$export$be92b6f5f03c0fe9);
  var $3db38b7d1fb3fe6a$var$count = 0;
  function $3db38b7d1fb3fe6a$export$ac5b58043b79449b(props) {
    $3db38b7d1fb3fe6a$export$b7ece24a22aeda8c();
    return props.children;
  }
  function $3db38b7d1fb3fe6a$export$b7ece24a22aeda8c() {
    (0, import_react24.useEffect)(() => {
      var _edgeGuards$, _edgeGuards$2;
      const edgeGuards = document.querySelectorAll("[data-radix-focus-guard]");
      document.body.insertAdjacentElement("afterbegin", (_edgeGuards$ = edgeGuards[0]) !== null && _edgeGuards$ !== void 0 ? _edgeGuards$ : $3db38b7d1fb3fe6a$var$createFocusGuard());
      document.body.insertAdjacentElement("beforeend", (_edgeGuards$2 = edgeGuards[1]) !== null && _edgeGuards$2 !== void 0 ? _edgeGuards$2 : $3db38b7d1fb3fe6a$var$createFocusGuard());
      $3db38b7d1fb3fe6a$var$count++;
      return () => {
        if ($3db38b7d1fb3fe6a$var$count === 1)
          document.querySelectorAll("[data-radix-focus-guard]").forEach((node) => node.remove());
        $3db38b7d1fb3fe6a$var$count--;
      };
    }, []);
  }
  function $3db38b7d1fb3fe6a$var$createFocusGuard() {
    const element = document.createElement("span");
    element.setAttribute("data-radix-focus-guard", "");
    element.tabIndex = 0;
    element.style.cssText = "outline: none; opacity: 0; position: fixed; pointer-events: none";
    return element;
  }
  var $3db38b7d1fb3fe6a$export$be92b6f5f03c0fe9 = $3db38b7d1fb3fe6a$export$ac5b58043b79449b;

  // node_modules/react-remove-scroll/node_modules/tslib/modules/index.js
  var import_tslib = __toESM(require_tslib(), 1);
  var {
    __extends,
    __assign,
    __rest,
    __decorate,
    __param,
    __metadata,
    __awaiter,
    __generator,
    __exportStar,
    __createBinding,
    __values,
    __read,
    __spread,
    __spreadArrays,
    __spreadArray,
    __await,
    __asyncGenerator,
    __asyncDelegator,
    __asyncValues,
    __makeTemplateObject,
    __importStar,
    __importDefault,
    __classPrivateFieldGet,
    __classPrivateFieldSet,
    __classPrivateFieldIn
  } = import_tslib.default;

  // node_modules/react-remove-scroll/dist/es2015/Combination.js
  var React7 = __toESM(require_react());

  // node_modules/react-remove-scroll/dist/es2015/UI.js
  var React3 = __toESM(require_react());

  // node_modules/react-remove-scroll-bar/dist/es2015/constants.js
  var zeroRightClassName = "right-scroll-bar-position";
  var fullWidthClassName = "width-before-scroll-bar";
  var noScrollbarsClassName = "with-scroll-bars-hidden";
  var removedBarSizeVariable = "--removed-body-scroll-bar-size";

  // node_modules/use-callback-ref/dist/es2015/assignRef.js
  function assignRef(ref, value) {
    if (typeof ref === "function") {
      ref(value);
    } else if (ref) {
      ref.current = value;
    }
    return ref;
  }

  // node_modules/use-callback-ref/dist/es2015/useRef.js
  var import_react25 = __toESM(require_react());
  function useCallbackRef(initialValue, callback) {
    var ref = (0, import_react25.useState)(function() {
      return {
        value: initialValue,
        callback,
        facade: {
          get current() {
            return ref.value;
          },
          set current(value) {
            var last = ref.value;
            if (last !== value) {
              ref.value = value;
              ref.callback(value, last);
            }
          }
        }
      };
    })[0];
    ref.callback = callback;
    return ref.facade;
  }

  // node_modules/use-callback-ref/dist/es2015/useMergeRef.js
  function useMergeRefs(refs, defaultValue2) {
    return useCallbackRef(defaultValue2 || null, function(newValue) {
      return refs.forEach(function(ref) {
        return assignRef(ref, newValue);
      });
    });
  }

  // node_modules/use-sidecar/node_modules/tslib/modules/index.js
  var import_tslib2 = __toESM(require_tslib2(), 1);
  var {
    __extends: __extends2,
    __assign: __assign2,
    __rest: __rest2,
    __decorate: __decorate2,
    __param: __param2,
    __metadata: __metadata2,
    __awaiter: __awaiter2,
    __generator: __generator2,
    __exportStar: __exportStar2,
    __createBinding: __createBinding2,
    __values: __values2,
    __read: __read2,
    __spread: __spread2,
    __spreadArrays: __spreadArrays2,
    __spreadArray: __spreadArray2,
    __await: __await2,
    __asyncGenerator: __asyncGenerator2,
    __asyncDelegator: __asyncDelegator2,
    __asyncValues: __asyncValues2,
    __makeTemplateObject: __makeTemplateObject2,
    __importStar: __importStar2,
    __importDefault: __importDefault2,
    __classPrivateFieldGet: __classPrivateFieldGet2,
    __classPrivateFieldSet: __classPrivateFieldSet2,
    __classPrivateFieldIn: __classPrivateFieldIn2
  } = import_tslib2.default;

  // node_modules/use-sidecar/dist/es2015/medium.js
  function ItoI(a3) {
    return a3;
  }
  function innerCreateMedium(defaults, middleware) {
    if (middleware === void 0) {
      middleware = ItoI;
    }
    var buffer = [];
    var assigned = false;
    var medium = {
      read: function() {
        if (assigned) {
          throw new Error("Sidecar: could not `read` from an `assigned` medium. `read` could be used only with `useMedium`.");
        }
        if (buffer.length) {
          return buffer[buffer.length - 1];
        }
        return defaults;
      },
      useMedium: function(data) {
        var item = middleware(data, assigned);
        buffer.push(item);
        return function() {
          buffer = buffer.filter(function(x4) {
            return x4 !== item;
          });
        };
      },
      assignSyncMedium: function(cb) {
        assigned = true;
        while (buffer.length) {
          var cbs = buffer;
          buffer = [];
          cbs.forEach(cb);
        }
        buffer = {
          push: function(x4) {
            return cb(x4);
          },
          filter: function() {
            return buffer;
          }
        };
      },
      assignMedium: function(cb) {
        assigned = true;
        var pendingQueue = [];
        if (buffer.length) {
          var cbs = buffer;
          buffer = [];
          cbs.forEach(cb);
          pendingQueue = buffer;
        }
        var executeQueue = function() {
          var cbs2 = pendingQueue;
          pendingQueue = [];
          cbs2.forEach(cb);
        };
        var cycle = function() {
          return Promise.resolve().then(executeQueue);
        };
        cycle();
        buffer = {
          push: function(x4) {
            pendingQueue.push(x4);
            cycle();
          },
          filter: function(filter) {
            pendingQueue = pendingQueue.filter(filter);
            return buffer;
          }
        };
      }
    };
    return medium;
  }
  function createSidecarMedium(options) {
    if (options === void 0) {
      options = {};
    }
    var medium = innerCreateMedium(null);
    medium.options = __assign2({ async: true, ssr: false }, options);
    return medium;
  }

  // node_modules/use-sidecar/dist/es2015/exports.js
  var React2 = __toESM(require_react());
  var SideCar = function(_a2) {
    var sideCar = _a2.sideCar, rest = __rest2(_a2, ["sideCar"]);
    if (!sideCar) {
      throw new Error("Sidecar: please provide `sideCar` property to import the right car");
    }
    var Target = sideCar.read();
    if (!Target) {
      throw new Error("Sidecar medium not found");
    }
    return React2.createElement(Target, __assign2({}, rest));
  };
  SideCar.isSideCarExport = true;
  function exportSidecar(medium, exported) {
    medium.useMedium(exported);
    return SideCar;
  }

  // node_modules/react-remove-scroll/dist/es2015/medium.js
  var effectCar = createSidecarMedium();

  // node_modules/react-remove-scroll/dist/es2015/UI.js
  var nothing = function() {
    return;
  };
  var RemoveScroll = React3.forwardRef(function(props, parentRef) {
    var ref = React3.useRef(null);
    var _a2 = React3.useState({
      onScrollCapture: nothing,
      onWheelCapture: nothing,
      onTouchMoveCapture: nothing
    }), callbacks = _a2[0], setCallbacks = _a2[1];
    var forwardProps = props.forwardProps, children = props.children, className = props.className, removeScrollBar = props.removeScrollBar, enabled = props.enabled, shards = props.shards, sideCar = props.sideCar, noIsolation = props.noIsolation, inert = props.inert, allowPinchZoom = props.allowPinchZoom, _b2 = props.as, Container = _b2 === void 0 ? "div" : _b2, rest = __rest(props, ["forwardProps", "children", "className", "removeScrollBar", "enabled", "shards", "sideCar", "noIsolation", "inert", "allowPinchZoom", "as"]);
    var SideCar2 = sideCar;
    var containerRef = useMergeRefs([ref, parentRef]);
    var containerProps = __assign(__assign({}, rest), callbacks);
    return React3.createElement(React3.Fragment, null, enabled && React3.createElement(SideCar2, { sideCar: effectCar, removeScrollBar, shards, noIsolation, inert, setCallbacks, allowPinchZoom: !!allowPinchZoom, lockRef: ref }), forwardProps ? React3.cloneElement(React3.Children.only(children), __assign(__assign({}, containerProps), { ref: containerRef })) : React3.createElement(Container, __assign({}, containerProps, { className, ref: containerRef }), children));
  });
  RemoveScroll.defaultProps = {
    enabled: true,
    removeScrollBar: true,
    inert: false
  };
  RemoveScroll.classNames = {
    fullWidth: fullWidthClassName,
    zeroRight: zeroRightClassName
  };

  // node_modules/react-remove-scroll/dist/es2015/SideEffect.js
  var React6 = __toESM(require_react());

  // node_modules/react-remove-scroll-bar/dist/es2015/component.js
  var React5 = __toESM(require_react());

  // node_modules/react-style-singleton/dist/es2015/hook.js
  var React4 = __toESM(require_react());

  // node_modules/get-nonce/dist/es2015/index.js
  var currentNonce;
  var getNonce = function() {
    if (currentNonce) {
      return currentNonce;
    }
    if (typeof __webpack_nonce__ !== "undefined") {
      return __webpack_nonce__;
    }
    return void 0;
  };

  // node_modules/react-style-singleton/dist/es2015/singleton.js
  function makeStyleTag() {
    if (!document)
      return null;
    var tag = document.createElement("style");
    tag.type = "text/css";
    var nonce = getNonce();
    if (nonce) {
      tag.setAttribute("nonce", nonce);
    }
    return tag;
  }
  function injectStyles(tag, css3) {
    if (tag.styleSheet) {
      tag.styleSheet.cssText = css3;
    } else {
      tag.appendChild(document.createTextNode(css3));
    }
  }
  function insertStyleTag(tag) {
    var head = document.head || document.getElementsByTagName("head")[0];
    head.appendChild(tag);
  }
  var stylesheetSingleton = function() {
    var counter = 0;
    var stylesheet = null;
    return {
      add: function(style) {
        if (counter == 0) {
          if (stylesheet = makeStyleTag()) {
            injectStyles(stylesheet, style);
            insertStyleTag(stylesheet);
          }
        }
        counter++;
      },
      remove: function() {
        counter--;
        if (!counter && stylesheet) {
          stylesheet.parentNode && stylesheet.parentNode.removeChild(stylesheet);
          stylesheet = null;
        }
      }
    };
  };

  // node_modules/react-style-singleton/dist/es2015/hook.js
  var styleHookSingleton = function() {
    var sheet = stylesheetSingleton();
    return function(styles, isDynamic) {
      React4.useEffect(function() {
        sheet.add(styles);
        return function() {
          sheet.remove();
        };
      }, [styles && isDynamic]);
    };
  };

  // node_modules/react-style-singleton/dist/es2015/component.js
  var styleSingleton = function() {
    var useStyle = styleHookSingleton();
    var Sheet = function(_a2) {
      var styles = _a2.styles, dynamic = _a2.dynamic;
      useStyle(styles, dynamic);
      return null;
    };
    return Sheet;
  };

  // node_modules/react-remove-scroll-bar/dist/es2015/utils.js
  var zeroGap = {
    left: 0,
    top: 0,
    right: 0,
    gap: 0
  };
  var parse = function(x4) {
    return parseInt(x4 || "", 10) || 0;
  };
  var getOffset = function(gapMode) {
    var cs = window.getComputedStyle(document.body);
    if (true) {
      if (cs.overflowY === "hidden") {
        console.error("react-remove-scroll-bar: cannot calculate scrollbar size because it is removed (overflow:hidden on body");
      }
    }
    var left = cs[gapMode === "padding" ? "paddingLeft" : "marginLeft"];
    var top = cs[gapMode === "padding" ? "paddingTop" : "marginTop"];
    var right = cs[gapMode === "padding" ? "paddingRight" : "marginRight"];
    return [parse(left), parse(top), parse(right)];
  };
  var getGapWidth = function(gapMode) {
    if (gapMode === void 0) {
      gapMode = "margin";
    }
    if (typeof window === "undefined") {
      return zeroGap;
    }
    var offsets = getOffset(gapMode);
    var documentWidth = document.documentElement.clientWidth;
    var windowWidth = window.innerWidth;
    return {
      left: offsets[0],
      top: offsets[1],
      right: offsets[2],
      gap: Math.max(0, windowWidth - documentWidth + offsets[2] - offsets[0])
    };
  };

  // node_modules/react-remove-scroll-bar/dist/es2015/component.js
  var Style = styleSingleton();
  var getStyles = function(_a2, allowRelative, gapMode, important) {
    var left = _a2.left, top = _a2.top, right = _a2.right, gap = _a2.gap;
    if (gapMode === void 0) {
      gapMode = "margin";
    }
    return "\n  .".concat(noScrollbarsClassName, " {\n   overflow: hidden ").concat(important, ";\n   padding-right: ").concat(gap, "px ").concat(important, ";\n  }\n  body {\n    overflow: hidden ").concat(important, ";\n    overscroll-behavior: contain;\n    ").concat([
      allowRelative && "position: relative ".concat(important, ";"),
      gapMode === "margin" && "\n    padding-left: ".concat(left, "px;\n    padding-top: ").concat(top, "px;\n    padding-right: ").concat(right, "px;\n    margin-left:0;\n    margin-top:0;\n    margin-right: ").concat(gap, "px ").concat(important, ";\n    "),
      gapMode === "padding" && "padding-right: ".concat(gap, "px ").concat(important, ";")
    ].filter(Boolean).join(""), "\n  }\n  \n  .").concat(zeroRightClassName, " {\n    right: ").concat(gap, "px ").concat(important, ";\n  }\n  \n  .").concat(fullWidthClassName, " {\n    margin-right: ").concat(gap, "px ").concat(important, ";\n  }\n  \n  .").concat(zeroRightClassName, " .").concat(zeroRightClassName, " {\n    right: 0 ").concat(important, ";\n  }\n  \n  .").concat(fullWidthClassName, " .").concat(fullWidthClassName, " {\n    margin-right: 0 ").concat(important, ";\n  }\n  \n  body {\n    ").concat(removedBarSizeVariable, ": ").concat(gap, "px;\n  }\n");
  };
  var RemoveScrollBar = function(props) {
    var noRelative = props.noRelative, noImportant = props.noImportant, _a2 = props.gapMode, gapMode = _a2 === void 0 ? "margin" : _a2;
    var gap = React5.useMemo(function() {
      return getGapWidth(gapMode);
    }, [gapMode]);
    return React5.createElement(Style, { styles: getStyles(gap, !noRelative, gapMode, !noImportant ? "!important" : "") });
  };

  // node_modules/react-remove-scroll/dist/es2015/aggresiveCapture.js
  var passiveSupported = false;
  if (typeof window !== "undefined") {
    try {
      options = Object.defineProperty({}, "passive", {
        get: function() {
          passiveSupported = true;
          return true;
        }
      });
      window.addEventListener("test", options, options);
      window.removeEventListener("test", options, options);
    } catch (err) {
      passiveSupported = false;
    }
  }
  var options;
  var nonPassive = passiveSupported ? { passive: false } : false;

  // node_modules/react-remove-scroll/dist/es2015/handleScroll.js
  var elementCouldBeVScrolled = function(node) {
    var styles = window.getComputedStyle(node);
    return styles.overflowY !== "hidden" && !(styles.overflowY === styles.overflowX && styles.overflowY === "visible");
  };
  var elementCouldBeHScrolled = function(node) {
    var styles = window.getComputedStyle(node);
    return styles.overflowX !== "hidden" && !(styles.overflowY === styles.overflowX && styles.overflowX === "visible");
  };
  var locationCouldBeScrolled = function(axis, node) {
    var current = node;
    do {
      if (typeof ShadowRoot !== "undefined" && current instanceof ShadowRoot) {
        current = current.host;
      }
      var isScrollable = elementCouldBeScrolled(axis, current);
      if (isScrollable) {
        var _a2 = getScrollVariables(axis, current), s5 = _a2[1], d3 = _a2[2];
        if (s5 > d3) {
          return true;
        }
      }
      current = current.parentNode;
    } while (current && current !== document.body);
    return false;
  };
  var getVScrollVariables = function(_a2) {
    var scrollTop = _a2.scrollTop, scrollHeight = _a2.scrollHeight, clientHeight = _a2.clientHeight;
    return [
      scrollTop,
      scrollHeight,
      clientHeight
    ];
  };
  var getHScrollVariables = function(_a2) {
    var scrollLeft = _a2.scrollLeft, scrollWidth = _a2.scrollWidth, clientWidth = _a2.clientWidth;
    return [
      scrollLeft,
      scrollWidth,
      clientWidth
    ];
  };
  var elementCouldBeScrolled = function(axis, node) {
    return axis === "v" ? elementCouldBeVScrolled(node) : elementCouldBeHScrolled(node);
  };
  var getScrollVariables = function(axis, node) {
    return axis === "v" ? getVScrollVariables(node) : getHScrollVariables(node);
  };
  var getDirectionFactor = function(axis, direction) {
    return axis === "h" && direction === "rtl" ? -1 : 1;
  };
  var handleScroll = function(axis, endTarget, event, sourceDelta, noOverscroll) {
    var directionFactor = getDirectionFactor(axis, window.getComputedStyle(endTarget).direction);
    var delta = directionFactor * sourceDelta;
    var target = event.target;
    var targetInLock = endTarget.contains(target);
    var shouldCancelScroll = false;
    var isDeltaPositive = delta > 0;
    var availableScroll = 0;
    var availableScrollTop = 0;
    do {
      var _a2 = getScrollVariables(axis, target), position = _a2[0], scroll_1 = _a2[1], capacity = _a2[2];
      var elementScroll = scroll_1 - capacity - directionFactor * position;
      if (position || elementScroll) {
        if (elementCouldBeScrolled(axis, target)) {
          availableScroll += elementScroll;
          availableScrollTop += position;
        }
      }
      target = target.parentNode;
    } while (!targetInLock && target !== document.body || targetInLock && (endTarget.contains(target) || endTarget === target));
    if (isDeltaPositive && (noOverscroll && availableScroll === 0 || !noOverscroll && delta > availableScroll)) {
      shouldCancelScroll = true;
    } else if (!isDeltaPositive && (noOverscroll && availableScrollTop === 0 || !noOverscroll && -delta > availableScrollTop)) {
      shouldCancelScroll = true;
    }
    return shouldCancelScroll;
  };

  // node_modules/react-remove-scroll/dist/es2015/SideEffect.js
  var getTouchXY = function(event) {
    return "changedTouches" in event ? [event.changedTouches[0].clientX, event.changedTouches[0].clientY] : [0, 0];
  };
  var getDeltaXY = function(event) {
    return [event.deltaX, event.deltaY];
  };
  var extractRef = function(ref) {
    return ref && "current" in ref ? ref.current : ref;
  };
  var deltaCompare = function(x4, y4) {
    return x4[0] === y4[0] && x4[1] === y4[1];
  };
  var generateStyle = function(id) {
    return "\n  .block-interactivity-".concat(id, " {pointer-events: none;}\n  .allow-interactivity-").concat(id, " {pointer-events: all;}\n");
  };
  var idCounter = 0;
  var lockStack = [];
  function RemoveScrollSideCar(props) {
    var shouldPreventQueue = React6.useRef([]);
    var touchStartRef = React6.useRef([0, 0]);
    var activeAxis = React6.useRef();
    var id = React6.useState(idCounter++)[0];
    var Style2 = React6.useState(function() {
      return styleSingleton();
    })[0];
    var lastProps = React6.useRef(props);
    React6.useEffect(function() {
      lastProps.current = props;
    }, [props]);
    React6.useEffect(function() {
      if (props.inert) {
        document.body.classList.add("block-interactivity-".concat(id));
        var allow_1 = __spreadArray([props.lockRef.current], (props.shards || []).map(extractRef), true).filter(Boolean);
        allow_1.forEach(function(el) {
          return el.classList.add("allow-interactivity-".concat(id));
        });
        return function() {
          document.body.classList.remove("block-interactivity-".concat(id));
          allow_1.forEach(function(el) {
            return el.classList.remove("allow-interactivity-".concat(id));
          });
        };
      }
      return;
    }, [props.inert, props.lockRef.current, props.shards]);
    var shouldCancelEvent = React6.useCallback(function(event, parent) {
      if ("touches" in event && event.touches.length === 2) {
        return !lastProps.current.allowPinchZoom;
      }
      var touch = getTouchXY(event);
      var touchStart = touchStartRef.current;
      var deltaX = "deltaX" in event ? event.deltaX : touchStart[0] - touch[0];
      var deltaY = "deltaY" in event ? event.deltaY : touchStart[1] - touch[1];
      var currentAxis;
      var target = event.target;
      var moveDirection = Math.abs(deltaX) > Math.abs(deltaY) ? "h" : "v";
      if ("touches" in event && moveDirection === "h" && target.type === "range") {
        return false;
      }
      var canBeScrolledInMainDirection = locationCouldBeScrolled(moveDirection, target);
      if (!canBeScrolledInMainDirection) {
        return true;
      }
      if (canBeScrolledInMainDirection) {
        currentAxis = moveDirection;
      } else {
        currentAxis = moveDirection === "v" ? "h" : "v";
        canBeScrolledInMainDirection = locationCouldBeScrolled(moveDirection, target);
      }
      if (!canBeScrolledInMainDirection) {
        return false;
      }
      if (!activeAxis.current && "changedTouches" in event && (deltaX || deltaY)) {
        activeAxis.current = currentAxis;
      }
      if (!currentAxis) {
        return true;
      }
      var cancelingAxis = activeAxis.current || currentAxis;
      return handleScroll(cancelingAxis, parent, event, cancelingAxis === "h" ? deltaX : deltaY, true);
    }, []);
    var shouldPrevent = React6.useCallback(function(_event) {
      var event = _event;
      if (!lockStack.length || lockStack[lockStack.length - 1] !== Style2) {
        return;
      }
      var delta = "deltaY" in event ? getDeltaXY(event) : getTouchXY(event);
      var sourceEvent = shouldPreventQueue.current.filter(function(e4) {
        return e4.name === event.type && e4.target === event.target && deltaCompare(e4.delta, delta);
      })[0];
      if (sourceEvent && sourceEvent.should) {
        event.preventDefault();
        return;
      }
      if (!sourceEvent) {
        var shardNodes = (lastProps.current.shards || []).map(extractRef).filter(Boolean).filter(function(node) {
          return node.contains(event.target);
        });
        var shouldStop = shardNodes.length > 0 ? shouldCancelEvent(event, shardNodes[0]) : !lastProps.current.noIsolation;
        if (shouldStop) {
          event.preventDefault();
        }
      }
    }, []);
    var shouldCancel = React6.useCallback(function(name, delta, target, should) {
      var event = { name, delta, target, should };
      shouldPreventQueue.current.push(event);
      setTimeout(function() {
        shouldPreventQueue.current = shouldPreventQueue.current.filter(function(e4) {
          return e4 !== event;
        });
      }, 1);
    }, []);
    var scrollTouchStart = React6.useCallback(function(event) {
      touchStartRef.current = getTouchXY(event);
      activeAxis.current = void 0;
    }, []);
    var scrollWheel = React6.useCallback(function(event) {
      shouldCancel(event.type, getDeltaXY(event), event.target, shouldCancelEvent(event, props.lockRef.current));
    }, []);
    var scrollTouchMove = React6.useCallback(function(event) {
      shouldCancel(event.type, getTouchXY(event), event.target, shouldCancelEvent(event, props.lockRef.current));
    }, []);
    React6.useEffect(function() {
      lockStack.push(Style2);
      props.setCallbacks({
        onScrollCapture: scrollWheel,
        onWheelCapture: scrollWheel,
        onTouchMoveCapture: scrollTouchMove
      });
      document.addEventListener("wheel", shouldPrevent, nonPassive);
      document.addEventListener("touchmove", shouldPrevent, nonPassive);
      document.addEventListener("touchstart", scrollTouchStart, nonPassive);
      return function() {
        lockStack = lockStack.filter(function(inst) {
          return inst !== Style2;
        });
        document.removeEventListener("wheel", shouldPrevent, nonPassive);
        document.removeEventListener("touchmove", shouldPrevent, nonPassive);
        document.removeEventListener("touchstart", scrollTouchStart, nonPassive);
      };
    }, []);
    var removeScrollBar = props.removeScrollBar, inert = props.inert;
    return React6.createElement(React6.Fragment, null, inert ? React6.createElement(Style2, { styles: generateStyle(id) }) : null, removeScrollBar ? React6.createElement(RemoveScrollBar, { gapMode: "margin" }) : null);
  }

  // node_modules/react-remove-scroll/dist/es2015/sidecar.js
  var sidecar_default = exportSidecar(effectCar, RemoveScrollSideCar);

  // node_modules/react-remove-scroll/dist/es2015/Combination.js
  var ReactRemoveScroll = React7.forwardRef(function(props, ref) {
    return React7.createElement(RemoveScroll, __assign({}, props, { ref, sideCar: sidecar_default }));
  });
  ReactRemoveScroll.classNames = RemoveScroll.classNames;
  var Combination_default = ReactRemoveScroll;

  // node_modules/aria-hidden/dist/es2015/index.js
  var getDefaultParent = function(originalTarget) {
    if (typeof document === "undefined") {
      return null;
    }
    var sampleTarget = Array.isArray(originalTarget) ? originalTarget[0] : originalTarget;
    return sampleTarget.ownerDocument.body;
  };
  var counterMap = /* @__PURE__ */ new WeakMap();
  var uncontrolledNodes = /* @__PURE__ */ new WeakMap();
  var markerMap = {};
  var lockCount = 0;
  var hideOthers = function(originalTarget, parentNode, markerName) {
    if (parentNode === void 0) {
      parentNode = getDefaultParent(originalTarget);
    }
    if (markerName === void 0) {
      markerName = "data-aria-hidden";
    }
    var targets = Array.isArray(originalTarget) ? originalTarget : [originalTarget];
    if (!markerMap[markerName]) {
      markerMap[markerName] = /* @__PURE__ */ new WeakMap();
    }
    var markerCounter = markerMap[markerName];
    var hiddenNodes = [];
    var elementsToKeep = /* @__PURE__ */ new Set();
    var keep = function(el) {
      if (!el || elementsToKeep.has(el)) {
        return;
      }
      elementsToKeep.add(el);
      keep(el.parentNode);
    };
    targets.forEach(keep);
    var deep = function(parent) {
      if (!parent || targets.indexOf(parent) >= 0) {
        return;
      }
      Array.prototype.forEach.call(parent.children, function(node) {
        if (elementsToKeep.has(node)) {
          deep(node);
        } else {
          var attr = node.getAttribute("aria-hidden");
          var alreadyHidden = attr !== null && attr !== "false";
          var counterValue = (counterMap.get(node) || 0) + 1;
          var markerValue = (markerCounter.get(node) || 0) + 1;
          counterMap.set(node, counterValue);
          markerCounter.set(node, markerValue);
          hiddenNodes.push(node);
          if (counterValue === 1 && alreadyHidden) {
            uncontrolledNodes.set(node, true);
          }
          if (markerValue === 1) {
            node.setAttribute(markerName, "true");
          }
          if (!alreadyHidden) {
            node.setAttribute("aria-hidden", "true");
          }
        }
      });
    };
    deep(parentNode);
    elementsToKeep.clear();
    lockCount++;
    return function() {
      hiddenNodes.forEach(function(node) {
        var counterValue = counterMap.get(node) - 1;
        var markerValue = markerCounter.get(node) - 1;
        counterMap.set(node, counterValue);
        markerCounter.set(node, markerValue);
        if (!counterValue) {
          if (!uncontrolledNodes.has(node)) {
            node.removeAttribute("aria-hidden");
          }
          uncontrolledNodes.delete(node);
        }
        if (!markerValue) {
          node.removeAttribute(markerName);
        }
      });
      lockCount--;
      if (!lockCount) {
        counterMap = /* @__PURE__ */ new WeakMap();
        counterMap = /* @__PURE__ */ new WeakMap();
        uncontrolledNodes = /* @__PURE__ */ new WeakMap();
        markerMap = {};
      }
    };
  };

  // node_modules/@radix-ui/react-popover/dist/index.module.js
  function $parcel$export21(e4, n4, v5, s5) {
    Object.defineProperty(e4, n4, { get: v5, set: s5, enumerable: true, configurable: true });
  }
  var $cb5cc270b50c6fcd$exports = {};
  $parcel$export21($cb5cc270b50c6fcd$exports, "createPopoverScope", () => $cb5cc270b50c6fcd$export$c8393c9e73286932);
  $parcel$export21($cb5cc270b50c6fcd$exports, "Popover", () => $cb5cc270b50c6fcd$export$5b6b19405a83ff9d);
  $parcel$export21($cb5cc270b50c6fcd$exports, "PopoverAnchor", () => $cb5cc270b50c6fcd$export$96e5381f42521a79);
  $parcel$export21($cb5cc270b50c6fcd$exports, "PopoverTrigger", () => $cb5cc270b50c6fcd$export$7dacb05d26466c3);
  $parcel$export21($cb5cc270b50c6fcd$exports, "PopoverContent", () => $cb5cc270b50c6fcd$export$d7e1f420b25549ff);
  $parcel$export21($cb5cc270b50c6fcd$exports, "PopoverClose", () => $cb5cc270b50c6fcd$export$d6ac43ebaa40d53e);
  $parcel$export21($cb5cc270b50c6fcd$exports, "PopoverArrow", () => $cb5cc270b50c6fcd$export$3152841115e061b2);
  $parcel$export21($cb5cc270b50c6fcd$exports, "Root", () => $cb5cc270b50c6fcd$export$be92b6f5f03c0fe9);
  $parcel$export21($cb5cc270b50c6fcd$exports, "Anchor", () => $cb5cc270b50c6fcd$export$b688253958b8dfe7);
  $parcel$export21($cb5cc270b50c6fcd$exports, "Trigger", () => $cb5cc270b50c6fcd$export$41fb9f06171c75f4);
  $parcel$export21($cb5cc270b50c6fcd$exports, "Content", () => $cb5cc270b50c6fcd$export$7c6e2c02157bb7d2);
  $parcel$export21($cb5cc270b50c6fcd$exports, "Close", () => $cb5cc270b50c6fcd$export$f39c2d165cd861fe);
  $parcel$export21($cb5cc270b50c6fcd$exports, "Arrow", () => $cb5cc270b50c6fcd$export$21b07c8f274aebd5);
  var $cb5cc270b50c6fcd$var$POPOVER_NAME = "Popover";
  var [$cb5cc270b50c6fcd$var$createPopoverContext, $cb5cc270b50c6fcd$export$c8393c9e73286932] = $c512c27ab02ef895$export$50c7b4e9d9f19c1($cb5cc270b50c6fcd$var$POPOVER_NAME, [
    $cf1ac5d9fe0e8206$export$722aac194ae923
  ]);
  var $cb5cc270b50c6fcd$var$usePopperScope = $cf1ac5d9fe0e8206$export$722aac194ae923();
  var [$cb5cc270b50c6fcd$var$PopoverProvider, $cb5cc270b50c6fcd$var$usePopoverContext] = $cb5cc270b50c6fcd$var$createPopoverContext($cb5cc270b50c6fcd$var$POPOVER_NAME);
  var $cb5cc270b50c6fcd$export$5b6b19405a83ff9d = (props) => {
    const { __scopePopover, children, open: openProp, defaultOpen, onOpenChange, modal = false } = props;
    const popperScope = $cb5cc270b50c6fcd$var$usePopperScope(__scopePopover);
    const triggerRef = (0, import_react26.useRef)(null);
    const [hasCustomAnchor, setHasCustomAnchor] = (0, import_react26.useState)(false);
    const [open = false, setOpen] = $71cd76cc60e0454e$export$6f32135080cb4c3({
      prop: openProp,
      defaultProp: defaultOpen,
      onChange: onOpenChange
    });
    return /* @__PURE__ */ (0, import_react26.createElement)($cf1ac5d9fe0e8206$export$be92b6f5f03c0fe9, popperScope, /* @__PURE__ */ (0, import_react26.createElement)($cb5cc270b50c6fcd$var$PopoverProvider, {
      scope: __scopePopover,
      contentId: $1746a345f3d73bb7$export$f680877a34711e37(),
      triggerRef,
      open,
      onOpenChange: setOpen,
      onOpenToggle: (0, import_react26.useCallback)(() => setOpen((prevOpen) => !prevOpen), [
        setOpen
      ]),
      hasCustomAnchor,
      onCustomAnchorAdd: (0, import_react26.useCallback)(() => setHasCustomAnchor(true), []),
      onCustomAnchorRemove: (0, import_react26.useCallback)(() => setHasCustomAnchor(false), []),
      modal
    }, children));
  };
  var $cb5cc270b50c6fcd$var$ANCHOR_NAME = "PopoverAnchor";
  var $cb5cc270b50c6fcd$export$96e5381f42521a79 = /* @__PURE__ */ (0, import_react26.forwardRef)((props, forwardedRef) => {
    const { __scopePopover, ...anchorProps } = props;
    const context = $cb5cc270b50c6fcd$var$usePopoverContext($cb5cc270b50c6fcd$var$ANCHOR_NAME, __scopePopover);
    const popperScope = $cb5cc270b50c6fcd$var$usePopperScope(__scopePopover);
    const { onCustomAnchorAdd, onCustomAnchorRemove } = context;
    (0, import_react26.useEffect)(() => {
      onCustomAnchorAdd();
      return () => onCustomAnchorRemove();
    }, [
      onCustomAnchorAdd,
      onCustomAnchorRemove
    ]);
    return /* @__PURE__ */ (0, import_react26.createElement)($cf1ac5d9fe0e8206$export$b688253958b8dfe7, _extends({}, popperScope, anchorProps, {
      ref: forwardedRef
    }));
  });
  var $cb5cc270b50c6fcd$var$TRIGGER_NAME = "PopoverTrigger";
  var $cb5cc270b50c6fcd$export$7dacb05d26466c3 = /* @__PURE__ */ (0, import_react26.forwardRef)((props, forwardedRef) => {
    const { __scopePopover, ...triggerProps } = props;
    const context = $cb5cc270b50c6fcd$var$usePopoverContext($cb5cc270b50c6fcd$var$TRIGGER_NAME, __scopePopover);
    const popperScope = $cb5cc270b50c6fcd$var$usePopperScope(__scopePopover);
    const composedTriggerRef = $6ed0406888f73fc4$export$c7b2cbe3552a0d05(forwardedRef, context.triggerRef);
    const trigger = /* @__PURE__ */ (0, import_react26.createElement)($8927f6f2acc4f386$export$250ffa63cdc0d034.button, _extends({
      type: "button",
      "aria-haspopup": "dialog",
      "aria-expanded": context.open,
      "aria-controls": context.contentId,
      "data-state": $cb5cc270b50c6fcd$var$getState(context.open)
    }, triggerProps, {
      ref: composedTriggerRef,
      onClick: composeEventHandlers(props.onClick, context.onOpenToggle)
    }));
    return context.hasCustomAnchor ? trigger : /* @__PURE__ */ (0, import_react26.createElement)($cf1ac5d9fe0e8206$export$b688253958b8dfe7, _extends({
      asChild: true
    }, popperScope), trigger);
  });
  var $cb5cc270b50c6fcd$var$CONTENT_NAME = "PopoverContent";
  var $cb5cc270b50c6fcd$export$d7e1f420b25549ff = /* @__PURE__ */ (0, import_react26.forwardRef)((props, forwardedRef) => {
    const { forceMount, ...contentProps } = props;
    const context = $cb5cc270b50c6fcd$var$usePopoverContext($cb5cc270b50c6fcd$var$CONTENT_NAME, props.__scopePopover);
    return /* @__PURE__ */ (0, import_react26.createElement)($921a889cee6df7e8$export$99c2b779aa4e8b8b, {
      present: forceMount || context.open
    }, context.modal ? /* @__PURE__ */ (0, import_react26.createElement)($cb5cc270b50c6fcd$var$PopoverContentModal, _extends({}, contentProps, {
      ref: forwardedRef
    })) : /* @__PURE__ */ (0, import_react26.createElement)($cb5cc270b50c6fcd$var$PopoverContentNonModal, _extends({}, contentProps, {
      ref: forwardedRef
    })));
  });
  var $cb5cc270b50c6fcd$var$PopoverContentModal = /* @__PURE__ */ (0, import_react26.forwardRef)((props, forwardedRef) => {
    const { allowPinchZoom, portalled = true, ...contentModalProps } = props;
    const context = $cb5cc270b50c6fcd$var$usePopoverContext($cb5cc270b50c6fcd$var$CONTENT_NAME, props.__scopePopover);
    const contentRef = (0, import_react26.useRef)(null);
    const composedRefs = $6ed0406888f73fc4$export$c7b2cbe3552a0d05(forwardedRef, contentRef);
    const isRightClickOutsideRef = (0, import_react26.useRef)(false);
    (0, import_react26.useEffect)(() => {
      const content = contentRef.current;
      if (content)
        return hideOthers(content);
    }, []);
    const PortalWrapper = portalled ? $f1701beae083dbae$export$602eac185826482c : import_react26.Fragment;
    return /* @__PURE__ */ (0, import_react26.createElement)(PortalWrapper, null, /* @__PURE__ */ (0, import_react26.createElement)(Combination_default, {
      allowPinchZoom
    }, /* @__PURE__ */ (0, import_react26.createElement)($cb5cc270b50c6fcd$var$PopoverContentImpl, _extends({}, contentModalProps, {
      ref: composedRefs,
      trapFocus: context.open,
      disableOutsidePointerEvents: true,
      onCloseAutoFocus: composeEventHandlers(props.onCloseAutoFocus, (event) => {
        var _context$triggerRef$c;
        event.preventDefault();
        if (!isRightClickOutsideRef.current)
          (_context$triggerRef$c = context.triggerRef.current) === null || _context$triggerRef$c === void 0 || _context$triggerRef$c.focus();
      }),
      onPointerDownOutside: composeEventHandlers(props.onPointerDownOutside, (event) => {
        const originalEvent = event.detail.originalEvent;
        const ctrlLeftClick = originalEvent.button === 0 && originalEvent.ctrlKey === true;
        const isRightClick = originalEvent.button === 2 || ctrlLeftClick;
        isRightClickOutsideRef.current = isRightClick;
      }, {
        checkForDefaultPrevented: false
      }),
      onFocusOutside: composeEventHandlers(props.onFocusOutside, (event) => event.preventDefault(), {
        checkForDefaultPrevented: false
      })
    }))));
  });
  var $cb5cc270b50c6fcd$var$PopoverContentNonModal = /* @__PURE__ */ (0, import_react26.forwardRef)((props, forwardedRef) => {
    const { portalled = true, ...contentNonModalProps } = props;
    const context = $cb5cc270b50c6fcd$var$usePopoverContext($cb5cc270b50c6fcd$var$CONTENT_NAME, props.__scopePopover);
    const hasInteractedOutsideRef = (0, import_react26.useRef)(false);
    const PortalWrapper = portalled ? $f1701beae083dbae$export$602eac185826482c : import_react26.Fragment;
    return /* @__PURE__ */ (0, import_react26.createElement)(PortalWrapper, null, /* @__PURE__ */ (0, import_react26.createElement)($cb5cc270b50c6fcd$var$PopoverContentImpl, _extends({}, contentNonModalProps, {
      ref: forwardedRef,
      trapFocus: false,
      disableOutsidePointerEvents: false,
      onCloseAutoFocus: (event) => {
        var _props$onCloseAutoFoc;
        (_props$onCloseAutoFoc = props.onCloseAutoFocus) === null || _props$onCloseAutoFoc === void 0 || _props$onCloseAutoFoc.call(props, event);
        if (!event.defaultPrevented) {
          var _context$triggerRef$c2;
          if (!hasInteractedOutsideRef.current)
            (_context$triggerRef$c2 = context.triggerRef.current) === null || _context$triggerRef$c2 === void 0 || _context$triggerRef$c2.focus();
          event.preventDefault();
        }
        hasInteractedOutsideRef.current = false;
      },
      onInteractOutside: (event) => {
        var _props$onInteractOuts, _context$triggerRef$c3;
        (_props$onInteractOuts = props.onInteractOutside) === null || _props$onInteractOuts === void 0 || _props$onInteractOuts.call(props, event);
        if (!event.defaultPrevented)
          hasInteractedOutsideRef.current = true;
        const target = event.target;
        const targetIsTrigger = (_context$triggerRef$c3 = context.triggerRef.current) === null || _context$triggerRef$c3 === void 0 ? void 0 : _context$triggerRef$c3.contains(target);
        if (targetIsTrigger)
          event.preventDefault();
      }
    })));
  });
  var $cb5cc270b50c6fcd$var$PopoverContentImpl = /* @__PURE__ */ (0, import_react26.forwardRef)((props, forwardedRef) => {
    const { __scopePopover, trapFocus, onOpenAutoFocus, onCloseAutoFocus, disableOutsidePointerEvents, onEscapeKeyDown, onPointerDownOutside, onFocusOutside, onInteractOutside, ...contentProps } = props;
    const context = $cb5cc270b50c6fcd$var$usePopoverContext($cb5cc270b50c6fcd$var$CONTENT_NAME, __scopePopover);
    const popperScope = $cb5cc270b50c6fcd$var$usePopperScope(__scopePopover);
    $3db38b7d1fb3fe6a$export$b7ece24a22aeda8c();
    return /* @__PURE__ */ (0, import_react26.createElement)($d3863c46a17e8a28$export$20e40289641fbbb6, {
      asChild: true,
      loop: true,
      trapped: trapFocus,
      onMountAutoFocus: onOpenAutoFocus,
      onUnmountAutoFocus: onCloseAutoFocus
    }, /* @__PURE__ */ (0, import_react26.createElement)($5cb92bef7577960e$export$177fb62ff3ec1f22, {
      asChild: true,
      disableOutsidePointerEvents,
      onInteractOutside,
      onEscapeKeyDown,
      onPointerDownOutside,
      onFocusOutside,
      onDismiss: () => context.onOpenChange(false)
    }, /* @__PURE__ */ (0, import_react26.createElement)($cf1ac5d9fe0e8206$export$7c6e2c02157bb7d2, _extends({
      "data-state": $cb5cc270b50c6fcd$var$getState(context.open),
      role: "dialog",
      id: context.contentId
    }, popperScope, contentProps, {
      ref: forwardedRef,
      style: {
        ...contentProps.style,
        ["--radix-popover-content-transform-origin"]: "var(--radix-popper-transform-origin)"
      }
    }))));
  });
  var $cb5cc270b50c6fcd$var$CLOSE_NAME = "PopoverClose";
  var $cb5cc270b50c6fcd$export$d6ac43ebaa40d53e = /* @__PURE__ */ (0, import_react26.forwardRef)((props, forwardedRef) => {
    const { __scopePopover, ...closeProps } = props;
    const context = $cb5cc270b50c6fcd$var$usePopoverContext($cb5cc270b50c6fcd$var$CLOSE_NAME, __scopePopover);
    return /* @__PURE__ */ (0, import_react26.createElement)($8927f6f2acc4f386$export$250ffa63cdc0d034.button, _extends({
      type: "button"
    }, closeProps, {
      ref: forwardedRef,
      onClick: composeEventHandlers(props.onClick, () => context.onOpenChange(false))
    }));
  });
  var $cb5cc270b50c6fcd$export$3152841115e061b2 = /* @__PURE__ */ (0, import_react26.forwardRef)((props, forwardedRef) => {
    const { __scopePopover, ...arrowProps } = props;
    const popperScope = $cb5cc270b50c6fcd$var$usePopperScope(__scopePopover);
    return /* @__PURE__ */ (0, import_react26.createElement)($cf1ac5d9fe0e8206$export$21b07c8f274aebd5, _extends({}, popperScope, arrowProps, {
      ref: forwardedRef
    }));
  });
  function $cb5cc270b50c6fcd$var$getState(open) {
    return open ? "open" : "closed";
  }
  var $cb5cc270b50c6fcd$export$be92b6f5f03c0fe9 = $cb5cc270b50c6fcd$export$5b6b19405a83ff9d;
  var $cb5cc270b50c6fcd$export$b688253958b8dfe7 = $cb5cc270b50c6fcd$export$96e5381f42521a79;
  var $cb5cc270b50c6fcd$export$41fb9f06171c75f4 = $cb5cc270b50c6fcd$export$7dacb05d26466c3;
  var $cb5cc270b50c6fcd$export$7c6e2c02157bb7d2 = $cb5cc270b50c6fcd$export$d7e1f420b25549ff;
  var $cb5cc270b50c6fcd$export$f39c2d165cd861fe = $cb5cc270b50c6fcd$export$d6ac43ebaa40d53e;
  var $cb5cc270b50c6fcd$export$21b07c8f274aebd5 = $cb5cc270b50c6fcd$export$3152841115e061b2;

  // node_modules/@nulib/design-system/dist/index.es.js
  var Block = re2("div", {
    marginBottom: "$4"
  });
  var __assign3 = function() {
    __assign3 = Object.assign || function __assign4(t4) {
      for (var s5, i3 = 1, n4 = arguments.length; i3 < n4; i3++) {
        s5 = arguments[i3];
        for (var p5 in s5)
          if (Object.prototype.hasOwnProperty.call(s5, p5))
            t4[p5] = s5[p5];
      }
      return t4;
    };
    return __assign3.apply(this, arguments);
  };
  var _a$2;
  var nuPurples = {
    nuPurple120: "#401f68",
    nuPurple: "#4e2a84",
    nuPurple70: "#765da0",
    nuPurple60: "#836eaa",
    nuPurple30: "#b6acd1",
    nuPurple10: "#e4e0ee"
  };
  var richBlacks = {
    richBlack80: "#342f2e",
    richBlack50: "#716c6b",
    richBlack20: "#bbb8b8",
    richBlack10: "#d8d6d6"
  };
  var nuGreys = {
    mediumGrey: "#ccc",
    lightGrey: "#f0f0f0",
    lightGrey2: "#e3e3e3"
  };
  var nuGreen = {
    green: "#58b947",
    greenDark: "#008656"
  };
  var nuBlue = {
    blue: "#5091cd",
    blueDark: "#0d2d6c"
  };
  var nuYellow = {
    yellow: "#ede93b"
  };
  var nuGold = {
    gold: "#ffc520"
  };
  var nuRed2 = {
    red: "#ef553f"
  };
  var white = {
    white: "#fff"
  };
  var styled2 = (_a$2 = q2({
    theme: {
      colors: __assign3(__assign3(__assign3(__assign3(__assign3(__assign3(__assign3(__assign3(__assign3({}, nuPurples), richBlacks), nuGreys), nuGreen), nuBlue), nuYellow), nuGold), nuRed2), white),
      fonts: {
        sans: "Akkurat Pro Regular, Arial, sans-serif",
        sansBold: "Akkurat Pro Bold, Arial, sans-serif",
        display: "Campton, 'Akkurat Pro Regular', Arial, sans-serif",
        headline: "Campton Extra Light, Courier New, sans-serif",
        headlineBold: "Campton Bold, Impact, sans-serif"
      },
      fontSizes: {
        1: "12px",
        2: "13px",
        3: "15px",
        4: "17px",
        5: "19px",
        6: "21px",
        7: "27px",
        8: "35px",
        9: "59px"
      },
      lineHeights: {
        1: "12px",
        2: "13px",
        3: "15px",
        4: "17px",
        5: "19px",
        6: "21px",
        7: "27px",
        8: "35px",
        9: "59px"
      },
      sizes: {
        1: "5px",
        2: "10px",
        3: "15px",
        4: "20px",
        5: "25px",
        6: "35px",
        7: "45px",
        8: "65px",
        9: "80px"
      },
      space: {
        1: "5px",
        2: "10px",
        3: "15px",
        4: "20px",
        5: "25px",
        6: "35px",
        7: "45px",
        8: "65px",
        9: "80px"
      },
      radii: {
        1: "4px",
        2: "6px",
        3: "8px",
        4: "12px",
        round: "50%",
        pill: "9999px"
      },
      zIndices: {
        1: "100",
        2: "200",
        3: "300",
        4: "400",
        max: "999"
      }
    },
    media: {
      bp1: "(min-width: 520px)",
      bp2: "(min-width: 900px)",
      bp3: "(min-width: 1200px)",
      bp4: "(min-width: 1800px)",
      motion: "(prefers-reduced-motion)",
      hover: "(any-hover: hover)",
      dark: "(prefers-color-scheme: dark)",
      light: "(prefers-color-scheme: light)"
    },
    utils: {
      p: function(value) {
        return {
          padding: value
        };
      },
      pt: function(value) {
        return {
          paddingTop: value
        };
      },
      pr: function(value) {
        return {
          paddingRight: value
        };
      },
      pb: function(value) {
        return {
          paddingBottom: value
        };
      },
      pl: function(value) {
        return {
          paddingLeft: value
        };
      },
      px: function(value) {
        return {
          paddingLeft: value,
          paddingRight: value
        };
      },
      py: function(value) {
        return {
          paddingTop: value,
          paddingBottom: value
        };
      },
      m: function(value) {
        return {
          margin: value
        };
      },
      mt: function(value) {
        return {
          marginTop: value
        };
      },
      mr: function(value) {
        return {
          marginRight: value
        };
      },
      mb: function(value) {
        return {
          marginBottom: value
        };
      },
      ml: function(value) {
        return {
          marginLeft: value
        };
      },
      mx: function(value) {
        return {
          marginLeft: value,
          marginRight: value
        };
      },
      my: function(value) {
        return {
          marginTop: value,
          marginBottom: value
        };
      },
      ta: function(value) {
        return { textAlign: value };
      },
      fd: function(value) {
        return {
          flexDirection: value
        };
      },
      fw: function(value) {
        return { flexWrap: value };
      },
      ai: function(value) {
        return {
          alignItems: value
        };
      },
      ac: function(value) {
        return {
          alignContent: value
        };
      },
      jc: function(value) {
        return {
          justifyContent: value
        };
      },
      as: function(value) {
        return { alignSelf: value };
      },
      fg: function(value) {
        return { flexGrow: value };
      },
      fs: function(value) {
        return {
          flexShrink: value
        };
      },
      fb: function(value) {
        return { flexBasis: value };
      },
      bc: function(value) {
        return {
          backgroundColor: value
        };
      },
      br: function(value) {
        return {
          borderRadius: value
        };
      },
      btrr: function(value) {
        return {
          borderTopRightRadius: value
        };
      },
      bbrr: function(value) {
        return {
          borderBottomRightRadius: value
        };
      },
      bblr: function(value) {
        return {
          borderBottomLeftRadius: value
        };
      },
      btlr: function(value) {
        return {
          borderTopLeftRadius: value
        };
      },
      bs: function(value) {
        return { boxShadow: value };
      },
      lh: function(value) {
        return {
          lineHeight: value
        };
      },
      ox: function(value) {
        return { overflowX: value };
      },
      oy: function(value) {
        return { overflowY: value };
      },
      pe: function(value) {
        return {
          pointerEvents: value
        };
      },
      us: function(value) {
        return {
          WebkitUserSelect: value,
          userSelect: value
        };
      },
      userSelect: function(value) {
        return {
          WebkitUserSelect: value,
          userSelect: value
        };
      },
      size: function(value) {
        return {
          width: value,
          height: value
        };
      },
      appearance: function(value) {
        return {
          WebkitAppearance: value,
          appearance: value
        };
      },
      backgroundClip: function(value) {
        return {
          WebkitBackgroundClip: value,
          backgroundClip: value
        };
      }
    }
  }), _a$2.styled);
  var css2 = _a$2.css;
  var globalCss = _a$2.globalCss;
  var keyframes2 = _a$2.keyframes;
  var getCssText = _a$2.getCssText;
  var theme2 = _a$2.theme;
  var createTheme2 = _a$2.createTheme;
  var config = _a$2.config;
  globalCss({
    html: {
      color: "$richBlack50"
    },
    body: {
      fontFamily: "$sans"
    },
    h1: {
      fontFamily: "$headline",
      fontSize: "$9",
      color: "$nuPurple",
      fontWeight: "normal",
      margin: "0 0 $5"
    },
    h2: {
      fontFamily: "$headlineBold",
      fontSize: "$8",
      color: "$nuPurple",
      fontWeight: "normal",
      margin: "0 0 $5"
    },
    h3: {
      fontFamily: "$sans",
      fontSize: "$7",
      color: "$richBlack50",
      fontWeight: "normal",
      margin: "0 0 $5"
    },
    pre: {
      "& code": {
        display: "block",
        background: "none",
        whiteSpace: "pre",
        overflowX: "scroll",
        maxWidth: "100%",
        minWidth: "100px",
        padding: "0"
      }
    },
    a: {
      color: "$nuPurple",
      textDecoration: "none",
      borderBottom: "1px dashed $nuPurple30",
      fontFamily: "$sansBold",
      paddingBottom: "$1",
      "&:hover": {
        borderBottom: "1px solid $nuPurple"
      }
    },
    p: {
      lineHeight: "$7",
      marginBlockEnd: "$4"
    }
  });
  var colorHelpers = {
    isDanger: { color: "$white", backgroundColor: "$red", fill: "$white" },
    isLight: {
      color: "$richBlack80",
      backgroundColor: "$lightGrey",
      fill: "$richBlack80"
    },
    isInfo: { color: "$white", backgroundColor: "$blue", fill: "$white" },
    isPrimary: { color: "$white", backgroundColor: "$nuPurple", fill: "$white" },
    isSuccess: { color: "$white", backgroundColor: "$green", fill: "$white" },
    isWarning: {
      color: "$richBlack80",
      backgroundColor: "$gold",
      fill: "$richBlack80"
    }
  };
  var StyledButton = styled2("button", {
    all: "unset",
    alignItems: "center",
    boxSizing: "content-box",
    userSelect: "none",
    "&::before": {
      boxSizing: "border-box"
    },
    "&::after": {
      boxSizing: "border-box"
    },
    flexShrink: 0,
    justifyContent: "center",
    lineHeight: "1",
    WebkitTapHighlightColor: "rgba(0,0,0,0)",
    border: "1px solid $richBlack10",
    backgroundColor: "$white",
    color: "$richBlack50",
    cursor: "pointer",
    display: "inline-flex",
    fontSize: "$4",
    margin: "0 .5em .5em 0",
    padding: "calc(0.75em - 1px) calc(1em - 1px)",
    position: "relative",
    textTransform: "uppercase",
    transition: "all 0.3s ease 0s",
    textDecoration: "none",
    textAlign: "center",
    "&:after": {
      content: "",
      position: "absolute",
      transition: "all 0.3s ease 0s",
      zIndex: "-1"
    },
    "&:hover, &:active": {
      borderColor: "$richBlack20"
    },
    "&:focus": {
      border: "2px dashed"
    },
    "&:disabled": {
      opacity: 0.5,
      cursor: "not-allowed"
    },
    "&:disabled:hover": {
      opacity: 0.5
    },
    "& span": {
      paddingLeft: "$1"
    },
    variants: {
      isLowercase: {
        true: {
          padding: "0.75em 1em",
          textTransform: "unset"
        }
      },
      isLight: {
        true: __assign3({ padding: "0.75em 1em", border: "none", "&:hover": {
          opacity: "0.75"
        } }, colorHelpers.isLight)
      },
      isPrimary: {
        true: __assign3({ padding: "0.75em 1em", border: "none", "&:hover": {
          opacity: "0.75"
        } }, colorHelpers.isPrimary)
      },
      isText: {
        true: {
          padding: "0",
          border: "none",
          backgroundColor: "transparent",
          "&:hover": {
            textDecoration: "underline"
          }
        }
      },
      isDanger: {
        true: __assign3({ padding: "0.75em 1em", border: "none", "&:hover": {
          opacity: "0.75"
        } }, colorHelpers.isDanger)
      }
    }
  });
  var Button = function(props) {
    return import_react28.default.createElement(StyledButton, __assign3({ type: "button", role: "button" }, props));
  };
  var StyledIcon = styled2("svg", {
    display: "inline-flex",
    variants: {
      isLarge: {
        true: {
          height: "4rem",
          width: "4rem"
        }
      },
      isMedium: {
        true: {
          height: "2rem",
          width: "2rem"
        }
      },
      isSmall: {
        true: {
          height: "1rem",
          width: "1rem"
        }
      }
    }
  });
  var Add = function() {
    return import_react28.default.createElement("path", { fill: "none", stroke: "currentColor", strokeLinecap: "round", strokeLinejoin: "round", strokeWidth: "32", d: "M256 112v288M400 256H112" });
  };
  var Audio = function() {
    return import_react28.default.createElement(import_react28.default.Fragment, null, import_react28.default.createElement("path", { d: "M232 416a23.88 23.88 0 01-14.2-4.68 8.27 8.27 0 01-.66-.51L125.76 336H56a24 24 0 01-24-24V200a24 24 0 0124-24h69.75l91.37-74.81a8.27 8.27 0 01.66-.51A24 24 0 01256 120v272a24 24 0 01-24 24zm-106.18-80zm-.27-159.86zM320 336a16 16 0 01-14.29-23.19c9.49-18.87 14.3-38 14.3-56.81 0-19.38-4.66-37.94-14.25-56.73a16 16 0 0128.5-14.54C346.19 208.12 352 231.44 352 256c0 23.86-6 47.81-17.7 71.19A16 16 0 01320 336z" }), import_react28.default.createElement("path", { d: "M368 384a16 16 0 01-13.86-24C373.05 327.09 384 299.51 384 256c0-44.17-10.93-71.56-29.82-103.94a16 16 0 0127.64-16.12C402.92 172.11 416 204.81 416 256c0 50.43-13.06 83.29-34.13 120a16 16 0 01-13.87 8z" }), import_react28.default.createElement("path", { d: "M416 432a16 16 0 01-13.39-24.74C429.85 365.47 448 323.76 448 256c0-66.5-18.18-108.62-45.49-151.39a16 16 0 1127-17.22C459.81 134.89 480 181.74 480 256c0 64.75-14.66 113.63-50.6 168.74A16 16 0 01416 432z" }));
  };
  var Close = function() {
    return import_react28.default.createElement("path", { d: "M289.94 256l95-95A24 24 0 00351 127l-95 95-95-95a24 24 0 00-34 34l95 95-95 95a24 24 0 1034 34l95-95 95 95a24 24 0 0034-34z" });
  };
  var Image2 = function() {
    return import_react28.default.createElement("path", { d: "M416 64H96a64.07 64.07 0 00-64 64v256a64.07 64.07 0 0064 64h320a64.07 64.07 0 0064-64V128a64.07 64.07 0 00-64-64zm-80 64a48 48 0 11-48 48 48.05 48.05 0 0148-48zM96 416a32 32 0 01-32-32v-67.63l94.84-84.3a48.06 48.06 0 0165.8 1.9l64.95 64.81L172.37 416zm352-32a32 32 0 01-32 32H217.63l121.42-121.42a47.72 47.72 0 0161.64-.16L448 333.84z" });
  };
  var Video = function() {
    return import_react28.default.createElement("path", { d: "M464 384.39a32 32 0 01-13-2.77 15.77 15.77 0 01-2.71-1.54l-82.71-58.22A32 32 0 01352 295.7v-79.4a32 32 0 0113.58-26.16l82.71-58.22a15.77 15.77 0 012.71-1.54 32 32 0 0145 29.24v192.76a32 32 0 01-32 32zM268 400H84a68.07 68.07 0 01-68-68V180a68.07 68.07 0 0168-68h184.48A67.6 67.6 0 01336 179.52V332a68.07 68.07 0 01-68 68z" });
  };
  var Title = function(_a2) {
    var children = _a2.children;
    return import_react28.default.createElement("title", null, children);
  };
  var Icon = function(props) {
    return import_react28.default.createElement(StyledIcon, __assign3({}, props, { "data-testid": "icon-svg", role: "img", viewBox: "0 0 512 512", xmlns: "http://www.w3.org/2000/svg" }), props.children);
  };
  Icon.Title = Title;
  Icon.Add = Add;
  Icon.Audio = Audio;
  Icon.Close = Close;
  Icon.Image = Image2;
  Icon.Video = Video;
  var StyledNotification = styled2("div", {
    boxSizing: "border-box",
    padding: "$5",
    marginBottom: "$2",
    backgroundColor: "$nuPurple10",
    color: "$nuPurple",
    fill: "$nuPurple",
    position: "relative",
    "& svg": {
      fill: "inherit"
    },
    "& span": {
      color: "inherit"
    },
    variants: {
      isDanger: {
        true: __assign3({}, colorHelpers.isDanger)
      },
      isCentered: {
        true: {
          textAlign: "center"
        }
      },
      isInfo: {
        true: __assign3({}, colorHelpers.isInfo)
      },
      isSuccess: {
        true: __assign3({}, colorHelpers.isSuccess)
      },
      isWarning: {
        true: __assign3({}, colorHelpers.isWarning)
      }
    }
  });
  var StyledClose$1 = styled2("button", {
    cursor: "pointer",
    right: "$2",
    position: "absolute",
    top: "$2",
    background: "transparent",
    border: "none"
  });
  var StyledPlaceholder = styled2("div", {
    display: "flex",
    height: "calc(100% - 2rem)",
    width: "calc(100% - 2rem)",
    alignContent: "center",
    alignItems: "center",
    flexDirection: "column",
    justifyContent: "center",
    padding: "1rem",
    textAlign: "center",
    lineHeight: "1.55em",
    boxSizing: "content-box",
    "> span": {
      display: "inline-flex",
      maxHeight: "100%",
      maxWidth: "100%",
      alignContent: "center",
      alignSelf: "center",
      flexDirection: "column",
      flexGrow: "0",
      flexShrink: "1",
      margin: "auto"
    },
    img: {
      maxHeight: "100%",
      maxWidth: "100%",
      objectFit: "contain"
    },
    variants: {
      isLight: {
        true: __assign3({}, colorHelpers.isLight)
      }
    }
  });
  var _a$1;
  var _b;
  var _c;
  var slideDown = keyframes2({
    "0%": { opacity: 0, transform: "translateY(1rem)" },
    "100%": { opacity: 1, transform: "translateY(0)" }
  });
  var slideUp = keyframes2({
    "0%": { opacity: 0, transform: "translateY(1rem)" },
    "100%": { opacity: 1, transform: "translateY(0)" }
  });
  var StyledArrow = styled2($cb5cc270b50c6fcd$export$21b07c8f274aebd5, {
    fill: "$richBlack10"
  });
  var StyledClose = styled2($cb5cc270b50c6fcd$export$f39c2d165cd861fe, {
    position: "absolute",
    right: "0",
    top: "0",
    padding: "0.5rem",
    margin: "0",
    cursor: "pointer",
    border: "none",
    background: "none",
    fill: "inherit",
    "&:hover": {
      opacity: "0.75"
    }
  });
  var StyledContent = styled2($cb5cc270b50c6fcd$export$7c6e2c02157bb7d2, {
    border: "1px solid $richBlack10",
    backgroundColor: "$white",
    fill: "$richBlack50",
    padding: "1rem 2rem 1rem 1rem",
    width: "auto",
    minWidth: "200px",
    maxWidth: "350px",
    borderRadius: "3px",
    boxShadow: "5px 5px 13px #0002",
    animationDuration: "0.3s",
    animationTimingFunction: "cubic-bezier(0.16, 1, 0.3, 1)",
    '&[data-side="top"]': { animationName: slideUp },
    '&[data-side="bottom"]': { animationName: slideDown },
    '&[data-align="end"]': (_a$1 = {}, _a$1["& ".concat(StyledArrow)] = {
      margin: "0 0.7rem"
    }, _a$1),
    variants: {
      isLight: {
        true: __assign3(__assign3({}, colorHelpers.isLight), (_b = { border: "none" }, _b["& ".concat(StyledArrow)] = {
          fill: "$lightGrey"
        }, _b))
      },
      isPrimary: {
        true: __assign3(__assign3({}, colorHelpers.isPrimary), (_c = { border: "none" }, _c["& ".concat(StyledArrow)] = {
          fill: "$nuPurple"
        }, _c))
      }
    }
  });
  var StyledTrigger = styled2($cb5cc270b50c6fcd$export$41fb9f06171c75f4, {
    display: "inline-flex",
    padding: "0.5rem 0",
    margin: "0 0.5rem 0 0",
    cursor: "pointer",
    border: "none",
    background: "none",
    "> button, > span": {
      margin: "0"
    }
  });
  var StyledPopover = styled2($cb5cc270b50c6fcd$export$be92b6f5f03c0fe9, {
    boxSizing: "content-box"
  });
  var Trigger = function(props) {
    return import_react28.default.createElement(StyledTrigger, __assign3({}, props), props.children);
  };
  var Content2 = function(props) {
    return import_react28.default.createElement(StyledContent, __assign3({}, props), import_react28.default.createElement(StyledArrow, null), import_react28.default.createElement(StyledClose, null, import_react28.default.createElement(Icon, { isSmall: true }, import_react28.default.createElement(Icon.Close, null))), props.children);
  };
  var Popover = function(_a2) {
    var children = _a2.children;
    return import_react28.default.createElement(StyledPopover, null, children);
  };
  Popover.Trigger = Trigger;
  Popover.Content = Content2;
  var Section = styled2("section", {
    boxSizing: "border-box",
    flexShrink: 0,
    "&::before": {
      boxSizing: "border-box",
      content: '""'
    },
    "&::after": {
      boxSizing: "border-box",
      content: '""'
    },
    variants: {
      size: {
        "1": {
          py: "$3"
        },
        "2": {
          py: "$5"
        },
        "3": {
          py: "$9"
        }
      }
    },
    defaultVariants: {
      size: "3"
    }
  });
  var SpacerLine = styled2("div", {
    height: "1px",
    backgroundColor: "#efefef",
    width: "100%",
    margin: "$3 0"
  });
  var _a;
  var Tag = styled2("div", (_a = {
    boxSizing: "border-box",
    display: "inline-flex",
    alignItems: "center",
    borderRadius: "5px",
    padding: "$1",
    marginBottom: "$2",
    marginRight: "$2",
    backgroundColor: "$lightGrey",
    color: "$richBlack50",
    textTransform: "uppercase",
    fontSize: "$2",
    objectFit: "contain",
    lineHeight: "1em !important",
    "&:last-child": {
      marginRight: "0"
    }
  }, _a["".concat(StyledIcon)] = {
    position: "absolute",
    left: "$1",
    height: "$3",
    width: "$3"
  }, _a.variants = {
    isIcon: {
      true: { position: "relative", paddingLeft: "$5" }
    },
    isDanger: {
      true: __assign3({}, colorHelpers.isDanger)
    },
    isInfo: {
      true: __assign3({}, colorHelpers.isInfo)
    },
    isPrimary: {
      true: {
        backgroundColor: "$nuPurple10",
        color: "$nuPurple"
      }
    },
    isSuccess: {
      true: __assign3({}, colorHelpers.isSuccess)
    },
    isWarning: {
      true: __assign3({}, colorHelpers.isWarning)
    }
  }, _a));

  // src/components/Viewer/Header.styled.ts
  var IIIFBadgeButton = styled(Popover.Trigger, {
    width: "30px",
    padding: "5px",
    margin: "0 0 0 2rem"
  });
  var IIIFBadgeContent = styled(Popover.Content, {
    display: "flex",
    flexDirection: "column",
    fontSize: "0.8333rem",
    border: "none",
    boxShadow: "2px 2px 5px #0003",
    button: {
      display: "flex",
      textDecoration: "none",
      fontFamily: "$sans",
      marginBottom: "0.5em",
      color: "$accentAlt",
      cursor: "pointer",
      background: "$secondary",
      border: "none",
      ["&:last-child"]: {
        marginBottom: "0"
      }
    }
  });
  var ManifestLabel = styled("span", {
    fontSize: "1.25rem",
    fontWeight: "700",
    fontFamily: "$display",
    alignSelf: "flex-start",
    flexGrow: "1",
    "@sm": {
      fontSize: "1rem"
    }
  });
  var Header = styled("header", {
    display: "flex",
    backgroundColor: "transparent !important",
    justifyContent: "space-between",
    padding: "1rem"
  });

  // src/components/Viewer/IIIFBadge.tsx
  var import_react29 = __toESM(require_react());
  var IIIFBadge = () => {
    const red = "#ed1d33";
    const blue = "#2873ab";
    return /* @__PURE__ */ import_react29.default.createElement("svg", {
      viewBox: "0 0 493.35999 441.33334",
      id: "iiif-logo",
      version: "1.1"
    }, /* @__PURE__ */ import_react29.default.createElement("title", null, "IIIF Manifest Options"), /* @__PURE__ */ import_react29.default.createElement("g", {
      transform: "matrix(1.3333333,0,0,-1.3333333,0,441.33333)"
    }, /* @__PURE__ */ import_react29.default.createElement("g", {
      transform: "scale(0.1)"
    }, /* @__PURE__ */ import_react29.default.createElement("path", {
      style: { fill: blue },
      d: "M 65.2422,2178.75 775.242,1915 773.992,15 65.2422,276.25 v 1902.5"
    }), /* @__PURE__ */ import_react29.default.createElement("path", {
      style: { fill: blue },
      d: "m 804.145,2640.09 c 81.441,-240.91 -26.473,-436.2 -241.04,-436.2 -214.558,0 -454.511,195.29 -535.9527,436.2 -81.4335,240.89 26.4805,436.18 241.0387,436.18 214.567,0 454.512,-195.29 535.954,-436.18"
    }), /* @__PURE__ */ import_react29.default.createElement("path", {
      style: { fill: red },
      d: "M 1678.58,2178.75 968.578,1915 969.828,15 1678.58,276.25 v 1902.5"
    }), /* @__PURE__ */ import_react29.default.createElement("path", {
      style: { fill: red },
      d: "m 935.082,2640.09 c -81.437,-240.91 26.477,-436.2 241.038,-436.2 214.56,0 454.51,195.29 535.96,436.2 81.43,240.89 -26.48,436.18 -241.04,436.18 -214.57,0 -454.52,-195.29 -535.958,-436.18"
    }), /* @__PURE__ */ import_react29.default.createElement("path", {
      style: { fill: blue },
      d: "m 1860.24,2178.75 710,-263.75 -1.25,-1900 -708.75,261.25 v 1902.5"
    }), /* @__PURE__ */ import_react29.default.createElement("path", {
      style: { fill: blue },
      d: "m 2603.74,2640.09 c 81.45,-240.91 -26.47,-436.2 -241.03,-436.2 -214.58,0 -454.52,195.29 -535.96,436.2 -81.44,240.89 26.48,436.18 241.03,436.18 214.57,0 454.51,-195.29 535.96,-436.18"
    }), /* @__PURE__ */ import_react29.default.createElement("path", {
      style: { fill: red },
      d: "m 3700.24,3310 v -652.5 c 0,0 -230,90 -257.5,-142.5 -2.5,-247.5 0,-336.25 0,-336.25 l 257.5,83.75 V 1690 l -258.61,-92.5 V 262.5 L 2735.24,0 v 2360 c 0,0 -15,850 965,950"
    }))));
  };
  var IIIFBadge_default = IIIFBadge;

  // src/components/CopyText.tsx
  var import_react31 = __toESM(require_react());

  // src/hooks/useCopyToClipboard.ts
  var import_react30 = __toESM(require_react());
  var useCopyToClipboard = (text, notifyTimeout = 2500) => {
    const [copyStatus, setCopyStatus] = (0, import_react30.useState)();
    const copy = (0, import_react30.useCallback)(() => {
      navigator.clipboard.writeText(text).then(() => setCopyStatus("copied"), () => setCopyStatus("failed"));
    }, [text]);
    (0, import_react30.useEffect)(() => {
      if (!copyStatus) {
        return;
      }
      const timeoutId = setTimeout(() => setCopyStatus(void 0), notifyTimeout);
      return () => clearTimeout(timeoutId);
    }, [copyStatus]);
    return [copyStatus, copy];
  };

  // src/components/CopyText.tsx
  var Status = styled("span", {
    display: "flex",
    alignContent: "center",
    alignItems: "center",
    padding: "0.125rem 0.25rem 0",
    marginTop: "-0.125rem",
    marginLeft: "0.5rem",
    backgroundColor: "$accent",
    color: "$secondary",
    borderRadius: "3px",
    fontSize: "0.6111rem",
    textTransform: "uppercase",
    lineHeight: "1em"
  });
  var CopyTextStatus = ({ status }) => {
    if (!status)
      return null;
    return /* @__PURE__ */ import_react31.default.createElement(Status, {
      "data-copy-status": status
    }, status);
  };
  var CopyText = ({
    textPrompt,
    textToCopy
  }) => {
    const [copyStatus, copyText] = useCopyToClipboard(textToCopy);
    return /* @__PURE__ */ import_react31.default.createElement("button", {
      onClick: copyText
    }, textPrompt, " ", /* @__PURE__ */ import_react31.default.createElement(CopyTextStatus, {
      status: copyStatus
    }));
  };
  var CopyText_default = CopyText;

  // node_modules/@radix-ui/react-select/dist/index.module.js
  var import_react51 = __toESM(require_react());
  var import_react_dom4 = __toESM(require_react_dom());

  // node_modules/@radix-ui/number/dist/index.module.js
  function $ae6933e535247d3d$export$7d15b64cf5a3a4c4(value, [min, max]) {
    return Math.min(max, Math.max(min, value));
  }

  // node_modules/@radix-ui/react-select/node_modules/@radix-ui/primitive/dist/index.module.js
  function $e42e1063c40fb3ef$export$b9ecd428b558ff10(originalEventHandler, ourEventHandler, { checkForDefaultPrevented = true } = {}) {
    return function handleEvent(event) {
      originalEventHandler === null || originalEventHandler === void 0 || originalEventHandler(event);
      if (checkForDefaultPrevented === false || !event.defaultPrevented)
        return ourEventHandler === null || ourEventHandler === void 0 ? void 0 : ourEventHandler(event);
    };
  }

  // node_modules/@radix-ui/react-select/node_modules/@radix-ui/react-collection/dist/index.module.js
  var import_react35 = __toESM(require_react());

  // node_modules/@radix-ui/react-select/node_modules/@radix-ui/react-context/dist/index.module.js
  var import_react32 = __toESM(require_react());
  function $c512c27ab02ef895$export$fd42f52fd3ae11092(rootComponentName, defaultContext) {
    const Context = /* @__PURE__ */ (0, import_react32.createContext)(defaultContext);
    function Provider(props) {
      const { children, ...context } = props;
      const value = (0, import_react32.useMemo)(() => context, Object.values(context));
      return /* @__PURE__ */ (0, import_react32.createElement)(Context.Provider, {
        value
      }, children);
    }
    function useContext(consumerName) {
      const context = (0, import_react32.useContext)(Context);
      if (context)
        return context;
      if (defaultContext !== void 0)
        return defaultContext;
      throw new Error(`\`${consumerName}\` must be used within \`${rootComponentName}\``);
    }
    Provider.displayName = rootComponentName + "Provider";
    return [
      Provider,
      useContext
    ];
  }
  function $c512c27ab02ef895$export$50c7b4e9d9f19c12(scopeName, createContextScopeDeps = []) {
    let defaultContexts = [];
    function $c512c27ab02ef895$export$fd42f52fd3ae11093(rootComponentName, defaultContext) {
      const BaseContext = /* @__PURE__ */ (0, import_react32.createContext)(defaultContext);
      const index = defaultContexts.length;
      defaultContexts = [
        ...defaultContexts,
        defaultContext
      ];
      function Provider(props) {
        const { scope, children, ...context } = props;
        const Context = (scope === null || scope === void 0 ? void 0 : scope[scopeName][index]) || BaseContext;
        const value = (0, import_react32.useMemo)(() => context, Object.values(context));
        return /* @__PURE__ */ (0, import_react32.createElement)(Context.Provider, {
          value
        }, children);
      }
      function useContext(consumerName, scope) {
        const Context = (scope === null || scope === void 0 ? void 0 : scope[scopeName][index]) || BaseContext;
        const context = (0, import_react32.useContext)(Context);
        if (context)
          return context;
        if (defaultContext !== void 0)
          return defaultContext;
        throw new Error(`\`${consumerName}\` must be used within \`${rootComponentName}\``);
      }
      Provider.displayName = rootComponentName + "Provider";
      return [
        Provider,
        useContext
      ];
    }
    const createScope = () => {
      const scopeContexts = defaultContexts.map((defaultContext) => {
        return /* @__PURE__ */ (0, import_react32.createContext)(defaultContext);
      });
      return function useScope(scope) {
        const contexts = (scope === null || scope === void 0 ? void 0 : scope[scopeName]) || scopeContexts;
        return (0, import_react32.useMemo)(() => ({
          [`__scope${scopeName}`]: {
            ...scope,
            [scopeName]: contexts
          }
        }), [
          scope,
          contexts
        ]);
      };
    };
    createScope.scopeName = scopeName;
    return [
      $c512c27ab02ef895$export$fd42f52fd3ae11093,
      $c512c27ab02ef895$var$composeContextScopes2(createScope, ...createContextScopeDeps)
    ];
  }
  function $c512c27ab02ef895$var$composeContextScopes2(...scopes) {
    const baseScope = scopes[0];
    if (scopes.length === 1)
      return baseScope;
    const createScope1 = () => {
      const scopeHooks = scopes.map((createScope) => ({
        useScope: createScope(),
        scopeName: createScope.scopeName
      }));
      return function useComposedScopes(overrideScopes) {
        const nextScopes1 = scopeHooks.reduce((nextScopes, { useScope, scopeName }) => {
          const scopeProps = useScope(overrideScopes);
          const currentScope = scopeProps[`__scope${scopeName}`];
          return {
            ...nextScopes,
            ...currentScope
          };
        }, {});
        return (0, import_react32.useMemo)(() => ({
          [`__scope${baseScope.scopeName}`]: nextScopes1
        }), [
          nextScopes1
        ]);
      };
    };
    createScope1.scopeName = baseScope.scopeName;
    return createScope1;
  }

  // node_modules/@radix-ui/react-select/node_modules/@radix-ui/react-compose-refs/dist/index.module.js
  var import_react33 = __toESM(require_react());
  function $6ed0406888f73fc4$var$setRef2(ref, value) {
    if (typeof ref === "function")
      ref(value);
    else if (ref !== null && ref !== void 0)
      ref.current = value;
  }
  function $6ed0406888f73fc4$export$43e446d32b3d21af2(...refs) {
    return (node) => refs.forEach((ref) => $6ed0406888f73fc4$var$setRef2(ref, node));
  }
  function $6ed0406888f73fc4$export$c7b2cbe3552a0d052(...refs) {
    return (0, import_react33.useCallback)($6ed0406888f73fc4$export$43e446d32b3d21af2(...refs), refs);
  }

  // node_modules/@radix-ui/react-select/node_modules/@radix-ui/react-slot/dist/index.module.js
  var import_react34 = __toESM(require_react());
  var $5e63c961fc1ce211$export$8c6ed5c666ac13602 = /* @__PURE__ */ (0, import_react34.forwardRef)((props, forwardedRef) => {
    const { children, ...slotProps } = props;
    const childrenArray = import_react34.Children.toArray(children);
    const slottable = childrenArray.find($5e63c961fc1ce211$var$isSlottable2);
    if (slottable) {
      const newElement = slottable.props.children;
      const newChildren = childrenArray.map((child) => {
        if (child === slottable) {
          if (import_react34.Children.count(newElement) > 1)
            return import_react34.Children.only(null);
          return /* @__PURE__ */ (0, import_react34.isValidElement)(newElement) ? newElement.props.children : null;
        } else
          return child;
      });
      return /* @__PURE__ */ (0, import_react34.createElement)($5e63c961fc1ce211$var$SlotClone2, _extends({}, slotProps, {
        ref: forwardedRef
      }), /* @__PURE__ */ (0, import_react34.isValidElement)(newElement) ? /* @__PURE__ */ (0, import_react34.cloneElement)(newElement, void 0, newChildren) : null);
    }
    return /* @__PURE__ */ (0, import_react34.createElement)($5e63c961fc1ce211$var$SlotClone2, _extends({}, slotProps, {
      ref: forwardedRef
    }), children);
  });
  $5e63c961fc1ce211$export$8c6ed5c666ac13602.displayName = "Slot";
  var $5e63c961fc1ce211$var$SlotClone2 = /* @__PURE__ */ (0, import_react34.forwardRef)((props, forwardedRef) => {
    const { children, ...slotProps } = props;
    if (/* @__PURE__ */ (0, import_react34.isValidElement)(children))
      return /* @__PURE__ */ (0, import_react34.cloneElement)(children, {
        ...$5e63c961fc1ce211$var$mergeProps2(slotProps, children.props),
        ref: $6ed0406888f73fc4$export$43e446d32b3d21af2(forwardedRef, children.ref)
      });
    return import_react34.Children.count(children) > 1 ? import_react34.Children.only(null) : null;
  });
  $5e63c961fc1ce211$var$SlotClone2.displayName = "SlotClone";
  var $5e63c961fc1ce211$export$d9f1ccf0bdb05d452 = ({ children }) => {
    return /* @__PURE__ */ (0, import_react34.createElement)(import_react34.Fragment, null, children);
  };
  function $5e63c961fc1ce211$var$isSlottable2(child) {
    return /* @__PURE__ */ (0, import_react34.isValidElement)(child) && child.type === $5e63c961fc1ce211$export$d9f1ccf0bdb05d452;
  }
  function $5e63c961fc1ce211$var$mergeProps2(slotProps, childProps) {
    const overrideProps = {
      ...childProps
    };
    for (const propName in childProps) {
      const slotPropValue = slotProps[propName];
      const childPropValue = childProps[propName];
      const isHandler = /^on[A-Z]/.test(propName);
      if (isHandler)
        overrideProps[propName] = (...args) => {
          childPropValue === null || childPropValue === void 0 || childPropValue(...args);
          slotPropValue === null || slotPropValue === void 0 || slotPropValue(...args);
        };
      else if (propName === "style")
        overrideProps[propName] = {
          ...slotPropValue,
          ...childPropValue
        };
      else if (propName === "className")
        overrideProps[propName] = [
          slotPropValue,
          childPropValue
        ].filter(Boolean).join(" ");
    }
    return {
      ...slotProps,
      ...overrideProps
    };
  }

  // node_modules/@radix-ui/react-select/node_modules/@radix-ui/react-collection/dist/index.module.js
  function $e02a7d9cb1dc128c$export$c74125a8e3af6bb2(name) {
    const PROVIDER_NAME = name + "CollectionProvider";
    const [createCollectionContext, createCollectionScope] = $c512c27ab02ef895$export$50c7b4e9d9f19c12(PROVIDER_NAME);
    const [CollectionProviderImpl, useCollectionContext] = createCollectionContext(PROVIDER_NAME, {
      collectionRef: {
        current: null
      },
      itemMap: /* @__PURE__ */ new Map()
    });
    const CollectionProvider = (props) => {
      const { scope, children } = props;
      const ref = import_react35.default.useRef(null);
      const itemMap = import_react35.default.useRef(/* @__PURE__ */ new Map()).current;
      return /* @__PURE__ */ import_react35.default.createElement(CollectionProviderImpl, {
        scope,
        itemMap,
        collectionRef: ref
      }, children);
    };
    /* @__PURE__ */ Object.assign(CollectionProvider, {
      displayName: PROVIDER_NAME
    });
    const COLLECTION_SLOT_NAME = name + "CollectionSlot";
    const CollectionSlot = /* @__PURE__ */ import_react35.default.forwardRef((props, forwardedRef) => {
      const { scope, children } = props;
      const context = useCollectionContext(COLLECTION_SLOT_NAME, scope);
      const composedRefs = $6ed0406888f73fc4$export$c7b2cbe3552a0d052(forwardedRef, context.collectionRef);
      return /* @__PURE__ */ import_react35.default.createElement($5e63c961fc1ce211$export$8c6ed5c666ac13602, {
        ref: composedRefs
      }, children);
    });
    /* @__PURE__ */ Object.assign(CollectionSlot, {
      displayName: COLLECTION_SLOT_NAME
    });
    const ITEM_SLOT_NAME = name + "CollectionItemSlot";
    const ITEM_DATA_ATTR = "data-radix-collection-item";
    const CollectionItemSlot = /* @__PURE__ */ import_react35.default.forwardRef((props, forwardedRef) => {
      const { scope, children, ...itemData } = props;
      const ref = import_react35.default.useRef(null);
      const composedRefs = $6ed0406888f73fc4$export$c7b2cbe3552a0d052(forwardedRef, ref);
      const context = useCollectionContext(ITEM_SLOT_NAME, scope);
      import_react35.default.useEffect(() => {
        context.itemMap.set(ref, {
          ref,
          ...itemData
        });
        return () => void context.itemMap.delete(ref);
      });
      return /* @__PURE__ */ import_react35.default.createElement($5e63c961fc1ce211$export$8c6ed5c666ac13602, {
        [ITEM_DATA_ATTR]: "",
        ref: composedRefs
      }, children);
    });
    /* @__PURE__ */ Object.assign(CollectionItemSlot, {
      displayName: ITEM_SLOT_NAME
    });
    function useCollection(scope) {
      const context = useCollectionContext(name + "CollectionConsumer", scope);
      const getItems = import_react35.default.useCallback(() => {
        const collectionNode = context.collectionRef.current;
        if (!collectionNode)
          return [];
        const orderedNodes = Array.from(collectionNode.querySelectorAll(`[${ITEM_DATA_ATTR}]`));
        const items = Array.from(context.itemMap.values());
        const orderedItems = items.sort((a3, b3) => orderedNodes.indexOf(a3.ref.current) - orderedNodes.indexOf(b3.ref.current));
        return orderedItems;
      }, [
        context.collectionRef,
        context.itemMap
      ]);
      return getItems;
    }
    return [
      {
        Provider: CollectionProvider,
        Slot: CollectionSlot,
        ItemSlot: CollectionItemSlot
      },
      useCollection,
      createCollectionScope
    ];
  }

  // node_modules/@radix-ui/react-select/node_modules/@radix-ui/react-direction/dist/index.module.js
  var import_react36 = __toESM(require_react());
  var $f631663db3294ace$var$DirectionContext = /* @__PURE__ */ (0, import_react36.createContext)(void 0);
  function $f631663db3294ace$export$b39126d51d94e6f3(localDir) {
    const globalDir = (0, import_react36.useContext)($f631663db3294ace$var$DirectionContext);
    return localDir || globalDir || "ltr";
  }

  // node_modules/@radix-ui/react-select/node_modules/@radix-ui/react-dismissable-layer/dist/index.module.js
  var import_react40 = __toESM(require_react());

  // node_modules/@radix-ui/react-select/node_modules/@radix-ui/react-primitive/dist/index.module.js
  var import_react37 = __toESM(require_react());
  var import_react_dom2 = __toESM(require_react_dom());
  var $8927f6f2acc4f386$var$NODES2 = [
    "a",
    "button",
    "div",
    "h2",
    "h3",
    "img",
    "li",
    "nav",
    "ol",
    "p",
    "span",
    "svg",
    "ul"
  ];
  var $8927f6f2acc4f386$export$250ffa63cdc0d0342 = $8927f6f2acc4f386$var$NODES2.reduce((primitive, node) => {
    const Node = /* @__PURE__ */ (0, import_react37.forwardRef)((props, forwardedRef) => {
      const { asChild, ...primitiveProps } = props;
      const Comp = asChild ? $5e63c961fc1ce211$export$8c6ed5c666ac13602 : node;
      (0, import_react37.useEffect)(() => {
        window[Symbol.for("radix-ui")] = true;
      }, []);
      return /* @__PURE__ */ (0, import_react37.createElement)(Comp, _extends({}, primitiveProps, {
        ref: forwardedRef
      }));
    });
    Node.displayName = `Primitive.${node}`;
    return {
      ...primitive,
      [node]: Node
    };
  }, {});
  function $8927f6f2acc4f386$export$6d1a0317bde7de7f(target, event) {
    if (target)
      (0, import_react_dom2.flushSync)(() => target.dispatchEvent(event));
  }

  // node_modules/@radix-ui/react-select/node_modules/@radix-ui/react-use-callback-ref/dist/index.module.js
  var import_react38 = __toESM(require_react());
  function $b1b2314f5f9a1d84$export$25bec8c6f54ee79a2(callback) {
    const callbackRef = (0, import_react38.useRef)(callback);
    (0, import_react38.useEffect)(() => {
      callbackRef.current = callback;
    });
    return (0, import_react38.useMemo)(() => (...args) => {
      var _callbackRef$current;
      return (_callbackRef$current = callbackRef.current) === null || _callbackRef$current === void 0 ? void 0 : _callbackRef$current.call(callbackRef, ...args);
    }, []);
  }

  // node_modules/@radix-ui/react-select/node_modules/@radix-ui/react-use-escape-keydown/dist/index.module.js
  var import_react39 = __toESM(require_react());
  function $addc16e1bbe58fd0$export$3a72a57244d6e7652(onEscapeKeyDownProp) {
    const onEscapeKeyDown = $b1b2314f5f9a1d84$export$25bec8c6f54ee79a2(onEscapeKeyDownProp);
    (0, import_react39.useEffect)(() => {
      const handleKeyDown = (event) => {
        if (event.key === "Escape")
          onEscapeKeyDown(event);
      };
      document.addEventListener("keydown", handleKeyDown);
      return () => document.removeEventListener("keydown", handleKeyDown);
    }, [
      onEscapeKeyDown
    ]);
  }

  // node_modules/@radix-ui/react-select/node_modules/@radix-ui/react-dismissable-layer/dist/index.module.js
  var $5cb92bef7577960e$var$CONTEXT_UPDATE2 = "dismissableLayer.update";
  var $5cb92bef7577960e$var$POINTER_DOWN_OUTSIDE2 = "dismissableLayer.pointerDownOutside";
  var $5cb92bef7577960e$var$FOCUS_OUTSIDE2 = "dismissableLayer.focusOutside";
  var $5cb92bef7577960e$var$originalBodyPointerEvents;
  var $5cb92bef7577960e$var$DismissableLayerContext2 = /* @__PURE__ */ (0, import_react40.createContext)({
    layers: /* @__PURE__ */ new Set(),
    layersWithOutsidePointerEventsDisabled: /* @__PURE__ */ new Set(),
    branches: /* @__PURE__ */ new Set()
  });
  var $5cb92bef7577960e$export$177fb62ff3ec1f222 = /* @__PURE__ */ (0, import_react40.forwardRef)((props, forwardedRef) => {
    const { disableOutsidePointerEvents = false, onEscapeKeyDown, onPointerDownOutside, onFocusOutside, onInteractOutside, onDismiss, ...layerProps } = props;
    const context = (0, import_react40.useContext)($5cb92bef7577960e$var$DismissableLayerContext2);
    const [node1, setNode] = (0, import_react40.useState)(null);
    const [, force] = (0, import_react40.useState)({});
    const composedRefs = $6ed0406888f73fc4$export$c7b2cbe3552a0d052(forwardedRef, (node) => setNode(node));
    const layers = Array.from(context.layers);
    const [highestLayerWithOutsidePointerEventsDisabled] = [
      ...context.layersWithOutsidePointerEventsDisabled
    ].slice(-1);
    const highestLayerWithOutsidePointerEventsDisabledIndex = layers.indexOf(highestLayerWithOutsidePointerEventsDisabled);
    const index = node1 ? layers.indexOf(node1) : -1;
    const isBodyPointerEventsDisabled = context.layersWithOutsidePointerEventsDisabled.size > 0;
    const isPointerEventsEnabled = index >= highestLayerWithOutsidePointerEventsDisabledIndex;
    const pointerDownOutside = $5cb92bef7577960e$var$usePointerDownOutside2((event) => {
      const target = event.target;
      const isPointerDownOnBranch = [
        ...context.branches
      ].some((branch) => branch.contains(target));
      if (!isPointerEventsEnabled || isPointerDownOnBranch)
        return;
      onPointerDownOutside === null || onPointerDownOutside === void 0 || onPointerDownOutside(event);
      onInteractOutside === null || onInteractOutside === void 0 || onInteractOutside(event);
      if (!event.defaultPrevented)
        onDismiss === null || onDismiss === void 0 || onDismiss();
    });
    const focusOutside = $5cb92bef7577960e$var$useFocusOutside2((event) => {
      const target = event.target;
      const isFocusInBranch = [
        ...context.branches
      ].some((branch) => branch.contains(target));
      if (isFocusInBranch)
        return;
      onFocusOutside === null || onFocusOutside === void 0 || onFocusOutside(event);
      onInteractOutside === null || onInteractOutside === void 0 || onInteractOutside(event);
      if (!event.defaultPrevented)
        onDismiss === null || onDismiss === void 0 || onDismiss();
    });
    $addc16e1bbe58fd0$export$3a72a57244d6e7652((event) => {
      const isHighestLayer = index === context.layers.size - 1;
      if (!isHighestLayer)
        return;
      onEscapeKeyDown === null || onEscapeKeyDown === void 0 || onEscapeKeyDown(event);
      if (!event.defaultPrevented && onDismiss) {
        event.preventDefault();
        onDismiss();
      }
    });
    (0, import_react40.useEffect)(() => {
      if (!node1)
        return;
      if (disableOutsidePointerEvents) {
        if (context.layersWithOutsidePointerEventsDisabled.size === 0) {
          $5cb92bef7577960e$var$originalBodyPointerEvents = document.body.style.pointerEvents;
          document.body.style.pointerEvents = "none";
        }
        context.layersWithOutsidePointerEventsDisabled.add(node1);
      }
      context.layers.add(node1);
      $5cb92bef7577960e$var$dispatchUpdate2();
      return () => {
        if (disableOutsidePointerEvents && context.layersWithOutsidePointerEventsDisabled.size === 1)
          document.body.style.pointerEvents = $5cb92bef7577960e$var$originalBodyPointerEvents;
      };
    }, [
      node1,
      disableOutsidePointerEvents,
      context
    ]);
    (0, import_react40.useEffect)(() => {
      return () => {
        if (!node1)
          return;
        context.layers.delete(node1);
        context.layersWithOutsidePointerEventsDisabled.delete(node1);
        $5cb92bef7577960e$var$dispatchUpdate2();
      };
    }, [
      node1,
      context
    ]);
    (0, import_react40.useEffect)(() => {
      const handleUpdate = () => force({});
      document.addEventListener($5cb92bef7577960e$var$CONTEXT_UPDATE2, handleUpdate);
      return () => document.removeEventListener($5cb92bef7577960e$var$CONTEXT_UPDATE2, handleUpdate);
    }, []);
    return /* @__PURE__ */ (0, import_react40.createElement)($8927f6f2acc4f386$export$250ffa63cdc0d0342.div, _extends({}, layerProps, {
      ref: composedRefs,
      style: {
        pointerEvents: isBodyPointerEventsDisabled ? isPointerEventsEnabled ? "auto" : "none" : void 0,
        ...props.style
      },
      onFocusCapture: $e42e1063c40fb3ef$export$b9ecd428b558ff10(props.onFocusCapture, focusOutside.onFocusCapture),
      onBlurCapture: $e42e1063c40fb3ef$export$b9ecd428b558ff10(props.onBlurCapture, focusOutside.onBlurCapture),
      onPointerDownCapture: $e42e1063c40fb3ef$export$b9ecd428b558ff10(props.onPointerDownCapture, pointerDownOutside.onPointerDownCapture)
    }));
  });
  function $5cb92bef7577960e$var$usePointerDownOutside2(onPointerDownOutside) {
    const handlePointerDownOutside = $b1b2314f5f9a1d84$export$25bec8c6f54ee79a2(onPointerDownOutside);
    const isPointerInsideReactTreeRef = (0, import_react40.useRef)(false);
    const handleClickRef = (0, import_react40.useRef)(() => {
    });
    (0, import_react40.useEffect)(() => {
      const handlePointerDown = (event) => {
        if (event.target && !isPointerInsideReactTreeRef.current) {
          let handleAndDispatchPointerDownOutsideEvent = function() {
            $5cb92bef7577960e$var$handleAndDispatchCustomEvent($5cb92bef7577960e$var$POINTER_DOWN_OUTSIDE2, handlePointerDownOutside, eventDetail, {
              discrete: true
            });
          };
          const eventDetail = {
            originalEvent: event
          };
          if (event.pointerType === "touch") {
            document.removeEventListener("click", handleClickRef.current);
            handleClickRef.current = handleAndDispatchPointerDownOutsideEvent;
            document.addEventListener("click", handleClickRef.current, {
              once: true
            });
          } else
            handleAndDispatchPointerDownOutsideEvent();
        }
        isPointerInsideReactTreeRef.current = false;
      };
      const timerId = window.setTimeout(() => {
        document.addEventListener("pointerdown", handlePointerDown);
      }, 0);
      return () => {
        window.clearTimeout(timerId);
        document.removeEventListener("pointerdown", handlePointerDown);
        document.removeEventListener("click", handleClickRef.current);
      };
    }, [
      handlePointerDownOutside
    ]);
    return {
      onPointerDownCapture: () => isPointerInsideReactTreeRef.current = true
    };
  }
  function $5cb92bef7577960e$var$useFocusOutside2(onFocusOutside) {
    const handleFocusOutside = $b1b2314f5f9a1d84$export$25bec8c6f54ee79a2(onFocusOutside);
    const isFocusInsideReactTreeRef = (0, import_react40.useRef)(false);
    (0, import_react40.useEffect)(() => {
      const handleFocus = (event) => {
        if (event.target && !isFocusInsideReactTreeRef.current) {
          const eventDetail = {
            originalEvent: event
          };
          $5cb92bef7577960e$var$handleAndDispatchCustomEvent($5cb92bef7577960e$var$FOCUS_OUTSIDE2, handleFocusOutside, eventDetail, {
            discrete: false
          });
        }
      };
      document.addEventListener("focusin", handleFocus);
      return () => document.removeEventListener("focusin", handleFocus);
    }, [
      handleFocusOutside
    ]);
    return {
      onFocusCapture: () => isFocusInsideReactTreeRef.current = true,
      onBlurCapture: () => isFocusInsideReactTreeRef.current = false
    };
  }
  function $5cb92bef7577960e$var$dispatchUpdate2() {
    const event = new CustomEvent($5cb92bef7577960e$var$CONTEXT_UPDATE2);
    document.dispatchEvent(event);
  }
  function $5cb92bef7577960e$var$handleAndDispatchCustomEvent(name, handler, detail, { discrete }) {
    const target = detail.originalEvent.target;
    const event = new CustomEvent(name, {
      bubbles: false,
      cancelable: true,
      detail
    });
    if (handler)
      target.addEventListener(name, handler, {
        once: true
      });
    if (discrete)
      $8927f6f2acc4f386$export$6d1a0317bde7de7f(target, event);
    else
      target.dispatchEvent(event);
  }

  // node_modules/@radix-ui/react-select/node_modules/@radix-ui/react-focus-guards/dist/index.module.js
  var import_react41 = __toESM(require_react());
  var $3db38b7d1fb3fe6a$var$count2 = 0;
  function $3db38b7d1fb3fe6a$export$b7ece24a22aeda8c2() {
    (0, import_react41.useEffect)(() => {
      var _edgeGuards$, _edgeGuards$2;
      const edgeGuards = document.querySelectorAll("[data-radix-focus-guard]");
      document.body.insertAdjacentElement("afterbegin", (_edgeGuards$ = edgeGuards[0]) !== null && _edgeGuards$ !== void 0 ? _edgeGuards$ : $3db38b7d1fb3fe6a$var$createFocusGuard2());
      document.body.insertAdjacentElement("beforeend", (_edgeGuards$2 = edgeGuards[1]) !== null && _edgeGuards$2 !== void 0 ? _edgeGuards$2 : $3db38b7d1fb3fe6a$var$createFocusGuard2());
      $3db38b7d1fb3fe6a$var$count2++;
      return () => {
        if ($3db38b7d1fb3fe6a$var$count2 === 1)
          document.querySelectorAll("[data-radix-focus-guard]").forEach((node) => node.remove());
        $3db38b7d1fb3fe6a$var$count2--;
      };
    }, []);
  }
  function $3db38b7d1fb3fe6a$var$createFocusGuard2() {
    const element = document.createElement("span");
    element.setAttribute("data-radix-focus-guard", "");
    element.tabIndex = 0;
    element.style.cssText = "outline: none; opacity: 0; position: fixed; pointer-events: none";
    return element;
  }

  // node_modules/@radix-ui/react-select/node_modules/@radix-ui/react-focus-scope/dist/index.module.js
  var import_react42 = __toESM(require_react());
  var $d3863c46a17e8a28$var$AUTOFOCUS_ON_MOUNT2 = "focusScope.autoFocusOnMount";
  var $d3863c46a17e8a28$var$AUTOFOCUS_ON_UNMOUNT2 = "focusScope.autoFocusOnUnmount";
  var $d3863c46a17e8a28$var$EVENT_OPTIONS2 = {
    bubbles: false,
    cancelable: true
  };
  var $d3863c46a17e8a28$export$20e40289641fbbb62 = /* @__PURE__ */ (0, import_react42.forwardRef)((props, forwardedRef) => {
    const { loop = false, trapped = false, onMountAutoFocus: onMountAutoFocusProp, onUnmountAutoFocus: onUnmountAutoFocusProp, ...scopeProps } = props;
    const [container1, setContainer] = (0, import_react42.useState)(null);
    const onMountAutoFocus = $b1b2314f5f9a1d84$export$25bec8c6f54ee79a2(onMountAutoFocusProp);
    const onUnmountAutoFocus = $b1b2314f5f9a1d84$export$25bec8c6f54ee79a2(onUnmountAutoFocusProp);
    const lastFocusedElementRef = (0, import_react42.useRef)(null);
    const composedRefs = $6ed0406888f73fc4$export$c7b2cbe3552a0d052(forwardedRef, (node) => setContainer(node));
    const focusScope = (0, import_react42.useRef)({
      paused: false,
      pause() {
        this.paused = true;
      },
      resume() {
        this.paused = false;
      }
    }).current;
    (0, import_react42.useEffect)(() => {
      if (trapped) {
        let handleFocusIn = function(event) {
          if (focusScope.paused || !container1)
            return;
          const target = event.target;
          if (container1.contains(target))
            lastFocusedElementRef.current = target;
          else
            $d3863c46a17e8a28$var$focus2(lastFocusedElementRef.current, {
              select: true
            });
        }, handleFocusOut = function(event) {
          if (focusScope.paused || !container1)
            return;
          if (!container1.contains(event.relatedTarget))
            $d3863c46a17e8a28$var$focus2(lastFocusedElementRef.current, {
              select: true
            });
        };
        document.addEventListener("focusin", handleFocusIn);
        document.addEventListener("focusout", handleFocusOut);
        return () => {
          document.removeEventListener("focusin", handleFocusIn);
          document.removeEventListener("focusout", handleFocusOut);
        };
      }
    }, [
      trapped,
      container1,
      focusScope.paused
    ]);
    (0, import_react42.useEffect)(() => {
      if (container1) {
        $d3863c46a17e8a28$var$focusScopesStack2.add(focusScope);
        const previouslyFocusedElement = document.activeElement;
        const hasFocusedCandidate = container1.contains(previouslyFocusedElement);
        if (!hasFocusedCandidate) {
          const mountEvent = new CustomEvent($d3863c46a17e8a28$var$AUTOFOCUS_ON_MOUNT2, $d3863c46a17e8a28$var$EVENT_OPTIONS2);
          container1.addEventListener($d3863c46a17e8a28$var$AUTOFOCUS_ON_MOUNT2, onMountAutoFocus);
          container1.dispatchEvent(mountEvent);
          if (!mountEvent.defaultPrevented) {
            $d3863c46a17e8a28$var$focusFirst2($d3863c46a17e8a28$var$removeLinks2($d3863c46a17e8a28$var$getTabbableCandidates2(container1)), {
              select: true
            });
            if (document.activeElement === previouslyFocusedElement)
              $d3863c46a17e8a28$var$focus2(container1);
          }
        }
        return () => {
          container1.removeEventListener($d3863c46a17e8a28$var$AUTOFOCUS_ON_MOUNT2, onMountAutoFocus);
          setTimeout(() => {
            const unmountEvent = new CustomEvent($d3863c46a17e8a28$var$AUTOFOCUS_ON_UNMOUNT2, $d3863c46a17e8a28$var$EVENT_OPTIONS2);
            container1.addEventListener($d3863c46a17e8a28$var$AUTOFOCUS_ON_UNMOUNT2, onUnmountAutoFocus);
            container1.dispatchEvent(unmountEvent);
            if (!unmountEvent.defaultPrevented)
              $d3863c46a17e8a28$var$focus2(previouslyFocusedElement !== null && previouslyFocusedElement !== void 0 ? previouslyFocusedElement : document.body, {
                select: true
              });
            container1.removeEventListener($d3863c46a17e8a28$var$AUTOFOCUS_ON_UNMOUNT2, onUnmountAutoFocus);
            $d3863c46a17e8a28$var$focusScopesStack2.remove(focusScope);
          }, 0);
        };
      }
    }, [
      container1,
      onMountAutoFocus,
      onUnmountAutoFocus,
      focusScope
    ]);
    const handleKeyDown = (0, import_react42.useCallback)((event) => {
      if (!loop && !trapped)
        return;
      if (focusScope.paused)
        return;
      const isTabKey = event.key === "Tab" && !event.altKey && !event.ctrlKey && !event.metaKey;
      const focusedElement = document.activeElement;
      if (isTabKey && focusedElement) {
        const container2 = event.currentTarget;
        const [first, last] = $d3863c46a17e8a28$var$getTabbableEdges2(container2);
        const hasTabbableElementsInside = first && last;
        if (!hasTabbableElementsInside) {
          if (focusedElement === container2)
            event.preventDefault();
        } else {
          if (!event.shiftKey && focusedElement === last) {
            event.preventDefault();
            if (loop)
              $d3863c46a17e8a28$var$focus2(first, {
                select: true
              });
          } else if (event.shiftKey && focusedElement === first) {
            event.preventDefault();
            if (loop)
              $d3863c46a17e8a28$var$focus2(last, {
                select: true
              });
          }
        }
      }
    }, [
      loop,
      trapped,
      focusScope.paused
    ]);
    return /* @__PURE__ */ (0, import_react42.createElement)($8927f6f2acc4f386$export$250ffa63cdc0d0342.div, _extends({
      tabIndex: -1
    }, scopeProps, {
      ref: composedRefs,
      onKeyDown: handleKeyDown
    }));
  });
  function $d3863c46a17e8a28$var$focusFirst2(candidates, { select = false } = {}) {
    const previouslyFocusedElement = document.activeElement;
    for (const candidate of candidates) {
      $d3863c46a17e8a28$var$focus2(candidate, {
        select
      });
      if (document.activeElement !== previouslyFocusedElement)
        return;
    }
  }
  function $d3863c46a17e8a28$var$getTabbableEdges2(container2) {
    const candidates = $d3863c46a17e8a28$var$getTabbableCandidates2(container2);
    const first = $d3863c46a17e8a28$var$findVisible2(candidates, container2);
    const last = $d3863c46a17e8a28$var$findVisible2(candidates.reverse(), container2);
    return [
      first,
      last
    ];
  }
  function $d3863c46a17e8a28$var$getTabbableCandidates2(container2) {
    const nodes = [];
    const walker = document.createTreeWalker(container2, NodeFilter.SHOW_ELEMENT, {
      acceptNode: (node) => {
        const isHiddenInput = node.tagName === "INPUT" && node.type === "hidden";
        if (node.disabled || node.hidden || isHiddenInput)
          return NodeFilter.FILTER_SKIP;
        return node.tabIndex >= 0 ? NodeFilter.FILTER_ACCEPT : NodeFilter.FILTER_SKIP;
      }
    });
    while (walker.nextNode())
      nodes.push(walker.currentNode);
    return nodes;
  }
  function $d3863c46a17e8a28$var$findVisible2(elements, container2) {
    for (const element of elements) {
      if (!$d3863c46a17e8a28$var$isHidden2(element, {
        upTo: container2
      }))
        return element;
    }
  }
  function $d3863c46a17e8a28$var$isHidden2(node, { upTo }) {
    if (getComputedStyle(node).visibility === "hidden")
      return true;
    while (node) {
      if (upTo !== void 0 && node === upTo)
        return false;
      if (getComputedStyle(node).display === "none")
        return true;
      node = node.parentElement;
    }
    return false;
  }
  function $d3863c46a17e8a28$var$isSelectableInput2(element) {
    return element instanceof HTMLInputElement && "select" in element;
  }
  function $d3863c46a17e8a28$var$focus2(element, { select = false } = {}) {
    if (element && element.focus) {
      const previouslyFocusedElement = document.activeElement;
      element.focus({
        preventScroll: true
      });
      if (element !== previouslyFocusedElement && $d3863c46a17e8a28$var$isSelectableInput2(element) && select)
        element.select();
    }
  }
  var $d3863c46a17e8a28$var$focusScopesStack2 = $d3863c46a17e8a28$var$createFocusScopesStack2();
  function $d3863c46a17e8a28$var$createFocusScopesStack2() {
    let stack = [];
    return {
      add(focusScope) {
        const activeFocusScope = stack[0];
        if (focusScope !== activeFocusScope)
          activeFocusScope === null || activeFocusScope === void 0 || activeFocusScope.pause();
        stack = $d3863c46a17e8a28$var$arrayRemove2(stack, focusScope);
        stack.unshift(focusScope);
      },
      remove(focusScope) {
        var _stack$;
        stack = $d3863c46a17e8a28$var$arrayRemove2(stack, focusScope);
        (_stack$ = stack[0]) === null || _stack$ === void 0 || _stack$.resume();
      }
    };
  }
  function $d3863c46a17e8a28$var$arrayRemove2(array, item) {
    const updatedArray = [
      ...array
    ];
    const index = updatedArray.indexOf(item);
    if (index !== -1)
      updatedArray.splice(index, 1);
    return updatedArray;
  }
  function $d3863c46a17e8a28$var$removeLinks2(items) {
    return items.filter((item) => item.tagName !== "A");
  }

  // node_modules/@radix-ui/react-select/node_modules/@radix-ui/react-id/dist/index.module.js
  var $2AODx$react2 = __toESM(require_react());

  // node_modules/@radix-ui/react-select/node_modules/@radix-ui/react-use-layout-effect/dist/index.module.js
  var import_react43 = __toESM(require_react());
  var $9f79659886946c16$export$e5c5a5f917a5871c2 = Boolean(globalThis === null || globalThis === void 0 ? void 0 : globalThis.document) ? import_react43.useLayoutEffect : () => {
  };

  // node_modules/@radix-ui/react-select/node_modules/@radix-ui/react-id/dist/index.module.js
  var $1746a345f3d73bb7$var$useReactId2 = $2AODx$react2["useId".toString()] || (() => void 0);
  var $1746a345f3d73bb7$var$count2 = 0;
  function $1746a345f3d73bb7$export$f680877a34711e372(deterministicId) {
    const [id, setId] = $2AODx$react2.useState($1746a345f3d73bb7$var$useReactId2());
    $9f79659886946c16$export$e5c5a5f917a5871c2(() => {
      if (!deterministicId)
        setId((reactId) => reactId !== null && reactId !== void 0 ? reactId : String($1746a345f3d73bb7$var$count2++));
    }, [
      deterministicId
    ]);
    return deterministicId || (id ? `radix-${id}` : "");
  }

  // node_modules/@radix-ui/react-select/node_modules/@radix-ui/react-label/dist/index.module.js
  var import_react44 = __toESM(require_react());
  var $b73a6c6685e72184$var$NAME = "Label";
  var [$b73a6c6685e72184$var$LabelProvider, $b73a6c6685e72184$var$useLabelContextImpl] = $c512c27ab02ef895$export$fd42f52fd3ae11092($b73a6c6685e72184$var$NAME, {
    id: void 0,
    controlRef: {
      current: null
    }
  });
  var $b73a6c6685e72184$export$feddbbf47baabdb9 = (element) => {
    const context = $b73a6c6685e72184$var$useLabelContextImpl("LabelConsumer");
    const { controlRef } = context;
    (0, import_react44.useEffect)(() => {
      if (element)
        controlRef.current = element;
    }, [
      element,
      controlRef
    ]);
    return context.id;
  };

  // node_modules/@radix-ui/react-select/node_modules/@radix-ui/react-use-controllable-state/dist/index.module.js
  var import_react45 = __toESM(require_react());
  function $71cd76cc60e0454e$export$6f32135080cb4c32({ prop, defaultProp, onChange = () => {
  } }) {
    const [uncontrolledProp, setUncontrolledProp] = $71cd76cc60e0454e$var$useUncontrolledState2({
      defaultProp,
      onChange
    });
    const isControlled = prop !== void 0;
    const value1 = isControlled ? prop : uncontrolledProp;
    const handleChange = $b1b2314f5f9a1d84$export$25bec8c6f54ee79a2(onChange);
    const setValue = (0, import_react45.useCallback)((nextValue) => {
      if (isControlled) {
        const setter = nextValue;
        const value = typeof nextValue === "function" ? setter(prop) : nextValue;
        if (value !== prop)
          handleChange(value);
      } else
        setUncontrolledProp(nextValue);
    }, [
      isControlled,
      prop,
      setUncontrolledProp,
      handleChange
    ]);
    return [
      value1,
      setValue
    ];
  }
  function $71cd76cc60e0454e$var$useUncontrolledState2({ defaultProp, onChange }) {
    const uncontrolledState = (0, import_react45.useState)(defaultProp);
    const [value] = uncontrolledState;
    const prevValueRef = (0, import_react45.useRef)(value);
    const handleChange = $b1b2314f5f9a1d84$export$25bec8c6f54ee79a2(onChange);
    (0, import_react45.useEffect)(() => {
      if (prevValueRef.current !== value) {
        handleChange(value);
        prevValueRef.current = value;
      }
    }, [
      value,
      prevValueRef,
      handleChange
    ]);
    return uncontrolledState;
  }

  // node_modules/@radix-ui/react-select/node_modules/@radix-ui/react-use-previous/dist/index.module.js
  var import_react46 = __toESM(require_react());
  function $010c2913dbd2fe3d$export$5cae361ad82dce8b(value) {
    const ref = (0, import_react46.useRef)({
      value,
      previous: value
    });
    return (0, import_react46.useMemo)(() => {
      if (ref.current.value !== value) {
        ref.current.previous = ref.current.value;
        ref.current.value = value;
      }
      return ref.current.previous;
    }, [
      value
    ]);
  }

  // node_modules/@radix-ui/react-visually-hidden/dist/index.module.js
  var import_react50 = __toESM(require_react());

  // node_modules/@radix-ui/react-visually-hidden/node_modules/@radix-ui/react-primitive/dist/index.module.js
  var import_react49 = __toESM(require_react());
  var import_react_dom3 = __toESM(require_react_dom());

  // node_modules/@radix-ui/react-visually-hidden/node_modules/@radix-ui/react-slot/dist/index.module.js
  var import_react48 = __toESM(require_react());

  // node_modules/@radix-ui/react-visually-hidden/node_modules/@radix-ui/react-compose-refs/dist/index.module.js
  var import_react47 = __toESM(require_react());
  function $6ed0406888f73fc4$var$setRef3(ref, value) {
    if (typeof ref === "function")
      ref(value);
    else if (ref !== null && ref !== void 0)
      ref.current = value;
  }
  function $6ed0406888f73fc4$export$43e446d32b3d21af3(...refs) {
    return (node) => refs.forEach((ref) => $6ed0406888f73fc4$var$setRef3(ref, node));
  }

  // node_modules/@radix-ui/react-visually-hidden/node_modules/@radix-ui/react-slot/dist/index.module.js
  var $5e63c961fc1ce211$export$8c6ed5c666ac13603 = /* @__PURE__ */ (0, import_react48.forwardRef)((props, forwardedRef) => {
    const { children, ...slotProps } = props;
    const childrenArray = import_react48.Children.toArray(children);
    const slottable = childrenArray.find($5e63c961fc1ce211$var$isSlottable3);
    if (slottable) {
      const newElement = slottable.props.children;
      const newChildren = childrenArray.map((child) => {
        if (child === slottable) {
          if (import_react48.Children.count(newElement) > 1)
            return import_react48.Children.only(null);
          return /* @__PURE__ */ (0, import_react48.isValidElement)(newElement) ? newElement.props.children : null;
        } else
          return child;
      });
      return /* @__PURE__ */ (0, import_react48.createElement)($5e63c961fc1ce211$var$SlotClone3, _extends({}, slotProps, {
        ref: forwardedRef
      }), /* @__PURE__ */ (0, import_react48.isValidElement)(newElement) ? /* @__PURE__ */ (0, import_react48.cloneElement)(newElement, void 0, newChildren) : null);
    }
    return /* @__PURE__ */ (0, import_react48.createElement)($5e63c961fc1ce211$var$SlotClone3, _extends({}, slotProps, {
      ref: forwardedRef
    }), children);
  });
  $5e63c961fc1ce211$export$8c6ed5c666ac13603.displayName = "Slot";
  var $5e63c961fc1ce211$var$SlotClone3 = /* @__PURE__ */ (0, import_react48.forwardRef)((props, forwardedRef) => {
    const { children, ...slotProps } = props;
    if (/* @__PURE__ */ (0, import_react48.isValidElement)(children))
      return /* @__PURE__ */ (0, import_react48.cloneElement)(children, {
        ...$5e63c961fc1ce211$var$mergeProps3(slotProps, children.props),
        ref: $6ed0406888f73fc4$export$43e446d32b3d21af3(forwardedRef, children.ref)
      });
    return import_react48.Children.count(children) > 1 ? import_react48.Children.only(null) : null;
  });
  $5e63c961fc1ce211$var$SlotClone3.displayName = "SlotClone";
  var $5e63c961fc1ce211$export$d9f1ccf0bdb05d453 = ({ children }) => {
    return /* @__PURE__ */ (0, import_react48.createElement)(import_react48.Fragment, null, children);
  };
  function $5e63c961fc1ce211$var$isSlottable3(child) {
    return /* @__PURE__ */ (0, import_react48.isValidElement)(child) && child.type === $5e63c961fc1ce211$export$d9f1ccf0bdb05d453;
  }
  function $5e63c961fc1ce211$var$mergeProps3(slotProps, childProps) {
    const overrideProps = {
      ...childProps
    };
    for (const propName in childProps) {
      const slotPropValue = slotProps[propName];
      const childPropValue = childProps[propName];
      const isHandler = /^on[A-Z]/.test(propName);
      if (isHandler)
        overrideProps[propName] = (...args) => {
          childPropValue === null || childPropValue === void 0 || childPropValue(...args);
          slotPropValue === null || slotPropValue === void 0 || slotPropValue(...args);
        };
      else if (propName === "style")
        overrideProps[propName] = {
          ...slotPropValue,
          ...childPropValue
        };
      else if (propName === "className")
        overrideProps[propName] = [
          slotPropValue,
          childPropValue
        ].filter(Boolean).join(" ");
    }
    return {
      ...slotProps,
      ...overrideProps
    };
  }

  // node_modules/@radix-ui/react-visually-hidden/node_modules/@radix-ui/react-primitive/dist/index.module.js
  var $8927f6f2acc4f386$var$NODES3 = [
    "a",
    "button",
    "div",
    "h2",
    "h3",
    "img",
    "li",
    "nav",
    "ol",
    "p",
    "span",
    "svg",
    "ul"
  ];
  var $8927f6f2acc4f386$export$250ffa63cdc0d0343 = $8927f6f2acc4f386$var$NODES3.reduce((primitive, node) => {
    const Node = /* @__PURE__ */ (0, import_react49.forwardRef)((props, forwardedRef) => {
      const { asChild, ...primitiveProps } = props;
      const Comp = asChild ? $5e63c961fc1ce211$export$8c6ed5c666ac13603 : node;
      (0, import_react49.useEffect)(() => {
        window[Symbol.for("radix-ui")] = true;
      }, []);
      return /* @__PURE__ */ (0, import_react49.createElement)(Comp, _extends({}, primitiveProps, {
        ref: forwardedRef
      }));
    });
    Node.displayName = `Primitive.${node}`;
    return {
      ...primitive,
      [node]: Node
    };
  }, {});

  // node_modules/@radix-ui/react-visually-hidden/dist/index.module.js
  var $ea1ef594cf570d83$export$439d29a4e110a164 = /* @__PURE__ */ (0, import_react50.forwardRef)((props, forwardedRef) => {
    return /* @__PURE__ */ (0, import_react50.createElement)($8927f6f2acc4f386$export$250ffa63cdc0d0343.span, _extends({}, props, {
      ref: forwardedRef,
      style: {
        position: "absolute",
        border: 0,
        width: 1,
        height: 1,
        padding: 0,
        margin: -1,
        overflow: "hidden",
        clip: "rect(0, 0, 0, 0)",
        whiteSpace: "nowrap",
        wordWrap: "normal",
        ...props.style
      }
    }));
  });

  // node_modules/@radix-ui/react-select/dist/index.module.js
  var $cc7e05a45900e73f$var$OPEN_KEYS = [
    " ",
    "Enter",
    "ArrowUp",
    "ArrowDown"
  ];
  var $cc7e05a45900e73f$var$SELECTION_KEYS = [
    " ",
    "Enter"
  ];
  var $cc7e05a45900e73f$var$SELECT_NAME = "Select";
  var [$cc7e05a45900e73f$var$Collection, $cc7e05a45900e73f$var$useCollection, $cc7e05a45900e73f$var$createCollectionScope] = $e02a7d9cb1dc128c$export$c74125a8e3af6bb2($cc7e05a45900e73f$var$SELECT_NAME);
  var [$cc7e05a45900e73f$var$createSelectContext, $cc7e05a45900e73f$export$286727a75dc039bd] = $c512c27ab02ef895$export$50c7b4e9d9f19c12($cc7e05a45900e73f$var$SELECT_NAME, [
    $cc7e05a45900e73f$var$createCollectionScope
  ]);
  var [$cc7e05a45900e73f$var$SelectProvider, $cc7e05a45900e73f$var$useSelectContext] = $cc7e05a45900e73f$var$createSelectContext($cc7e05a45900e73f$var$SELECT_NAME);
  var [$cc7e05a45900e73f$var$SelectNativeOptionsProvider, $cc7e05a45900e73f$var$useSelectNativeOptionsContext] = $cc7e05a45900e73f$var$createSelectContext($cc7e05a45900e73f$var$SELECT_NAME);
  var $cc7e05a45900e73f$export$ef9b1a59e592288f = (props) => {
    const { __scopeSelect, children, open: openProp, defaultOpen, onOpenChange, value: valueProp, defaultValue: defaultValue2, onValueChange, dir, name, autoComplete } = props;
    const [trigger, setTrigger] = (0, import_react51.useState)(null);
    const [valueNode, setValueNode] = (0, import_react51.useState)(null);
    const [valueNodeHasChildren, setValueNodeHasChildren] = (0, import_react51.useState)(false);
    const direction = $f631663db3294ace$export$b39126d51d94e6f3(dir);
    const [open = false, setOpen] = $71cd76cc60e0454e$export$6f32135080cb4c32({
      prop: openProp,
      defaultProp: defaultOpen,
      onChange: onOpenChange
    });
    const [value, setValue] = $71cd76cc60e0454e$export$6f32135080cb4c32({
      prop: valueProp,
      defaultProp: defaultValue2,
      onChange: onValueChange
    });
    const triggerPointerDownPosRef = (0, import_react51.useRef)(null);
    const isFormControl = trigger ? Boolean(trigger.closest("form")) : true;
    const [nativeOptionsSet, setNativeOptionsSet] = (0, import_react51.useState)(/* @__PURE__ */ new Set());
    const nativeSelectKey = Array.from(nativeOptionsSet).map((option) => option.props.value).join(";");
    return /* @__PURE__ */ (0, import_react51.createElement)($cc7e05a45900e73f$var$SelectProvider, {
      scope: __scopeSelect,
      trigger,
      onTriggerChange: setTrigger,
      valueNode,
      onValueNodeChange: setValueNode,
      valueNodeHasChildren,
      onValueNodeHasChildrenChange: setValueNodeHasChildren,
      contentId: $1746a345f3d73bb7$export$f680877a34711e372(),
      value,
      onValueChange: setValue,
      open,
      onOpenChange: setOpen,
      dir: direction,
      triggerPointerDownPosRef
    }, /* @__PURE__ */ (0, import_react51.createElement)($cc7e05a45900e73f$var$Collection.Provider, {
      scope: __scopeSelect
    }, /* @__PURE__ */ (0, import_react51.createElement)($cc7e05a45900e73f$var$SelectNativeOptionsProvider, {
      scope: props.__scopeSelect,
      onNativeOptionAdd: (0, import_react51.useCallback)((option) => {
        setNativeOptionsSet((prev) => new Set(prev).add(option));
      }, []),
      onNativeOptionRemove: (0, import_react51.useCallback)((option) => {
        setNativeOptionsSet((prev) => {
          const optionsSet = new Set(prev);
          optionsSet.delete(option);
          return optionsSet;
        });
      }, [])
    }, children)), isFormControl ? /* @__PURE__ */ (0, import_react51.createElement)($cc7e05a45900e73f$var$BubbleSelect, {
      key: nativeSelectKey,
      "aria-hidden": true,
      tabIndex: -1,
      name,
      autoComplete,
      value,
      onChange: (event) => setValue(event.target.value)
    }, Array.from(nativeOptionsSet)) : null);
  };
  var $cc7e05a45900e73f$var$TRIGGER_NAME = "SelectTrigger";
  var $cc7e05a45900e73f$export$3ac1e88a1c0b9f1 = /* @__PURE__ */ (0, import_react51.forwardRef)((props, forwardedRef) => {
    const { __scopeSelect, disabled = false, "aria-labelledby": ariaLabelledby, ...triggerProps } = props;
    const context = $cc7e05a45900e73f$var$useSelectContext($cc7e05a45900e73f$var$TRIGGER_NAME, __scopeSelect);
    const composedRefs = $6ed0406888f73fc4$export$c7b2cbe3552a0d052(forwardedRef, context.onTriggerChange);
    const getItems = $cc7e05a45900e73f$var$useCollection(__scopeSelect);
    const labelId = $b73a6c6685e72184$export$feddbbf47baabdb9(context.trigger);
    const labelledBy = ariaLabelledby || labelId;
    const [searchRef, handleTypeaheadSearch, resetTypeahead] = $cc7e05a45900e73f$var$useTypeaheadSearch((search) => {
      const enabledItems = getItems().filter((item) => !item.disabled);
      const currentItem = enabledItems.find((item) => item.value === context.value);
      const nextItem = $cc7e05a45900e73f$var$findNextItem(enabledItems, search, currentItem);
      if (nextItem !== void 0)
        context.onValueChange(nextItem.value);
    });
    const handleOpen = () => {
      if (!disabled) {
        context.onOpenChange(true);
        resetTypeahead();
      }
    };
    return /* @__PURE__ */ (0, import_react51.createElement)($8927f6f2acc4f386$export$250ffa63cdc0d0342.button, _extends({
      type: "button",
      role: "combobox",
      "aria-controls": context.contentId,
      "aria-expanded": context.open,
      "aria-autocomplete": "none",
      "aria-labelledby": labelledBy,
      dir: context.dir,
      "data-state": context.open ? "open" : "closed",
      disabled,
      "data-disabled": disabled ? "" : void 0,
      "data-placeholder": context.value === void 0 ? "" : void 0
    }, triggerProps, {
      ref: composedRefs,
      onPointerDown: $e42e1063c40fb3ef$export$b9ecd428b558ff10(triggerProps.onPointerDown, (event) => {
        event.target.releasePointerCapture(event.pointerId);
        if (event.button === 0 && event.ctrlKey === false) {
          handleOpen();
          context.triggerPointerDownPosRef.current = {
            x: Math.round(event.pageX),
            y: Math.round(event.pageY)
          };
          event.preventDefault();
        }
      }),
      onKeyDown: $e42e1063c40fb3ef$export$b9ecd428b558ff10(triggerProps.onKeyDown, (event) => {
        const isTypingAhead = searchRef.current !== "";
        const isModifierKey = event.ctrlKey || event.altKey || event.metaKey;
        if (!isModifierKey && event.key.length === 1)
          handleTypeaheadSearch(event.key);
        if (isTypingAhead && event.key === " ")
          return;
        if ($cc7e05a45900e73f$var$OPEN_KEYS.includes(event.key)) {
          handleOpen();
          event.preventDefault();
        }
      })
    }));
  });
  var $cc7e05a45900e73f$var$VALUE_NAME = "SelectValue";
  var $cc7e05a45900e73f$export$e288731fd71264f0 = /* @__PURE__ */ (0, import_react51.forwardRef)((props, forwardedRef) => {
    const { __scopeSelect, className, style, children, placeholder, ...valueProps } = props;
    const context = $cc7e05a45900e73f$var$useSelectContext($cc7e05a45900e73f$var$VALUE_NAME, __scopeSelect);
    const { onValueNodeHasChildrenChange } = context;
    const hasChildren = children !== void 0;
    const composedRefs = $6ed0406888f73fc4$export$c7b2cbe3552a0d052(forwardedRef, context.onValueNodeChange);
    $9f79659886946c16$export$e5c5a5f917a5871c2(() => {
      onValueNodeHasChildrenChange(hasChildren);
    }, [
      onValueNodeHasChildrenChange,
      hasChildren
    ]);
    return /* @__PURE__ */ (0, import_react51.createElement)($8927f6f2acc4f386$export$250ffa63cdc0d0342.span, _extends({}, valueProps, {
      ref: composedRefs,
      style: {
        pointerEvents: "none"
      }
    }), context.value === void 0 && placeholder !== void 0 ? placeholder : children);
  });
  var $cc7e05a45900e73f$export$99b400cabb58c515 = /* @__PURE__ */ (0, import_react51.forwardRef)((props, forwardedRef) => {
    const { __scopeSelect, children, ...iconProps } = props;
    return /* @__PURE__ */ (0, import_react51.createElement)($8927f6f2acc4f386$export$250ffa63cdc0d0342.span, _extends({
      "aria-hidden": true
    }, iconProps, {
      ref: forwardedRef
    }), children || "\u25BC");
  });
  var $cc7e05a45900e73f$var$CONTENT_NAME = "SelectContent";
  var $cc7e05a45900e73f$export$c973a4b3cb86a03d = /* @__PURE__ */ (0, import_react51.forwardRef)((props, forwardedRef) => {
    const context = $cc7e05a45900e73f$var$useSelectContext($cc7e05a45900e73f$var$CONTENT_NAME, props.__scopeSelect);
    const [fragment, setFragment] = (0, import_react51.useState)();
    $9f79659886946c16$export$e5c5a5f917a5871c2(() => {
      setFragment(new DocumentFragment());
    }, []);
    return /* @__PURE__ */ (0, import_react51.createElement)(import_react51.Fragment, null, context.open ? /* @__PURE__ */ (0, import_react51.createElement)($cc7e05a45900e73f$var$SelectContentImpl, _extends({}, props, {
      ref: forwardedRef
    })) : fragment ? /* @__PURE__ */ (0, import_react_dom4.createPortal)(/* @__PURE__ */ (0, import_react51.createElement)($cc7e05a45900e73f$var$SelectContentProvider, {
      scope: props.__scopeSelect
    }, /* @__PURE__ */ (0, import_react51.createElement)($cc7e05a45900e73f$var$Collection.Slot, {
      scope: props.__scopeSelect
    }, /* @__PURE__ */ (0, import_react51.createElement)("div", null, props.children))), fragment) : null);
  });
  var $cc7e05a45900e73f$var$CONTENT_MARGIN = 10;
  var [$cc7e05a45900e73f$var$SelectContentProvider, $cc7e05a45900e73f$var$useSelectContentContext] = $cc7e05a45900e73f$var$createSelectContext($cc7e05a45900e73f$var$CONTENT_NAME);
  var $cc7e05a45900e73f$var$SelectContentImpl = /* @__PURE__ */ (0, import_react51.forwardRef)((props, forwardedRef) => {
    const { __scopeSelect, onCloseAutoFocus, ...contentProps } = props;
    const context = $cc7e05a45900e73f$var$useSelectContext($cc7e05a45900e73f$var$CONTENT_NAME, __scopeSelect);
    const [contentWrapper, setContentWrapper] = (0, import_react51.useState)(null);
    const [content, setContent] = (0, import_react51.useState)(null);
    const [viewport, setViewport] = (0, import_react51.useState)(null);
    const composedRefs = $6ed0406888f73fc4$export$c7b2cbe3552a0d052(forwardedRef, (node) => setContent(node));
    const [selectedItem, setSelectedItem] = (0, import_react51.useState)(null);
    const [selectedItemText, setSelectedItemText] = (0, import_react51.useState)(null);
    const getItems = $cc7e05a45900e73f$var$useCollection(__scopeSelect);
    const [isPositioned, setIsPositioned] = (0, import_react51.useState)(false);
    const shouldRepositionRef = (0, import_react51.useRef)(true);
    const shouldExpandOnScrollRef = (0, import_react51.useRef)(false);
    const firstValidItemFoundRef = (0, import_react51.useRef)(false);
    (0, import_react51.useEffect)(() => {
      if (content)
        return hideOthers(content);
    }, [
      content
    ]);
    $3db38b7d1fb3fe6a$export$b7ece24a22aeda8c2();
    const [contentZIndex, setContentZIndex] = (0, import_react51.useState)();
    $9f79659886946c16$export$e5c5a5f917a5871c2(() => {
      if (content)
        setContentZIndex(window.getComputedStyle(content).zIndex);
    }, [
      content
    ]);
    const focusFirst = (0, import_react51.useCallback)((candidates) => {
      const [firstItem, ...restItems] = getItems().map((item) => item.ref.current);
      const [lastItem] = restItems.slice(-1);
      const PREVIOUSLY_FOCUSED_ELEMENT = document.activeElement;
      for (const candidate of candidates) {
        if (candidate === PREVIOUSLY_FOCUSED_ELEMENT)
          return;
        candidate === null || candidate === void 0 || candidate.scrollIntoView({
          block: "nearest"
        });
        if (candidate === firstItem && viewport)
          viewport.scrollTop = 0;
        if (candidate === lastItem && viewport)
          viewport.scrollTop = viewport.scrollHeight;
        candidate === null || candidate === void 0 || candidate.focus();
        if (document.activeElement !== PREVIOUSLY_FOCUSED_ELEMENT)
          return;
      }
    }, [
      getItems,
      viewport
    ]);
    const position = (0, import_react51.useCallback)(() => {
      if (context.trigger && context.valueNode && contentWrapper && content && viewport && selectedItem && selectedItemText) {
        const triggerRect = context.trigger.getBoundingClientRect();
        const contentRect = content.getBoundingClientRect();
        const valueNodeRect = context.valueNode.getBoundingClientRect();
        const itemTextRect = selectedItemText.getBoundingClientRect();
        if (context.dir !== "rtl") {
          const itemTextOffset = itemTextRect.left - contentRect.left;
          const left = valueNodeRect.left - itemTextOffset;
          const leftDelta = triggerRect.left - left;
          const minContentWidth = triggerRect.width + leftDelta;
          const contentWidth = Math.max(minContentWidth, contentRect.width);
          const rightEdge = window.innerWidth - $cc7e05a45900e73f$var$CONTENT_MARGIN;
          const clampedLeft = $ae6933e535247d3d$export$7d15b64cf5a3a4c4(left, [
            $cc7e05a45900e73f$var$CONTENT_MARGIN,
            rightEdge - contentWidth
          ]);
          contentWrapper.style.minWidth = minContentWidth + "px";
          contentWrapper.style.left = clampedLeft + "px";
        } else {
          const itemTextOffset = contentRect.right - itemTextRect.right;
          const right = window.innerWidth - valueNodeRect.right - itemTextOffset;
          const rightDelta = window.innerWidth - triggerRect.right - right;
          const minContentWidth = triggerRect.width + rightDelta;
          const contentWidth = Math.max(minContentWidth, contentRect.width);
          const leftEdge = window.innerWidth - $cc7e05a45900e73f$var$CONTENT_MARGIN;
          const clampedRight = $ae6933e535247d3d$export$7d15b64cf5a3a4c4(right, [
            $cc7e05a45900e73f$var$CONTENT_MARGIN,
            leftEdge - contentWidth
          ]);
          contentWrapper.style.minWidth = minContentWidth + "px";
          contentWrapper.style.right = clampedRight + "px";
        }
        const items = getItems();
        const availableHeight = window.innerHeight - $cc7e05a45900e73f$var$CONTENT_MARGIN * 2;
        const itemsHeight = viewport.scrollHeight;
        const contentStyles = window.getComputedStyle(content);
        const contentBorderTopWidth = parseInt(contentStyles.borderTopWidth, 10);
        const contentPaddingTop = parseInt(contentStyles.paddingTop, 10);
        const contentBorderBottomWidth = parseInt(contentStyles.borderBottomWidth, 10);
        const contentPaddingBottom = parseInt(contentStyles.paddingBottom, 10);
        const fullContentHeight = contentBorderTopWidth + contentPaddingTop + itemsHeight + contentPaddingBottom + contentBorderBottomWidth;
        const minContentHeight = Math.min(selectedItem.offsetHeight * 5, fullContentHeight);
        const viewportStyles = window.getComputedStyle(viewport);
        const viewportPaddingTop = parseInt(viewportStyles.paddingTop, 10);
        const viewportPaddingBottom = parseInt(viewportStyles.paddingBottom, 10);
        const topEdgeToTriggerMiddle = triggerRect.top + triggerRect.height / 2 - $cc7e05a45900e73f$var$CONTENT_MARGIN;
        const triggerMiddleToBottomEdge = availableHeight - topEdgeToTriggerMiddle;
        const selectedItemHalfHeight = selectedItem.offsetHeight / 2;
        const itemOffsetMiddle = selectedItem.offsetTop + selectedItemHalfHeight;
        const contentTopToItemMiddle = contentBorderTopWidth + contentPaddingTop + itemOffsetMiddle;
        const itemMiddleToContentBottom = fullContentHeight - contentTopToItemMiddle;
        const willAlignWithoutTopOverflow = contentTopToItemMiddle <= topEdgeToTriggerMiddle;
        if (willAlignWithoutTopOverflow) {
          const isLastItem = selectedItem === items[items.length - 1].ref.current;
          contentWrapper.style.bottom = "0px";
          const viewportOffsetBottom = content.clientHeight - viewport.offsetTop - viewport.offsetHeight;
          const clampedTriggerMiddleToBottomEdge = Math.max(triggerMiddleToBottomEdge, selectedItemHalfHeight + (isLastItem ? viewportPaddingBottom : 0) + viewportOffsetBottom + contentBorderBottomWidth);
          const height = contentTopToItemMiddle + clampedTriggerMiddleToBottomEdge;
          contentWrapper.style.height = height + "px";
        } else {
          const isFirstItem = selectedItem === items[0].ref.current;
          contentWrapper.style.top = "0px";
          const clampedTopEdgeToTriggerMiddle = Math.max(topEdgeToTriggerMiddle, contentBorderTopWidth + viewport.offsetTop + (isFirstItem ? viewportPaddingTop : 0) + selectedItemHalfHeight);
          const height = clampedTopEdgeToTriggerMiddle + itemMiddleToContentBottom;
          contentWrapper.style.height = height + "px";
          viewport.scrollTop = contentTopToItemMiddle - topEdgeToTriggerMiddle + viewport.offsetTop;
        }
        contentWrapper.style.margin = `${$cc7e05a45900e73f$var$CONTENT_MARGIN}px 0`;
        contentWrapper.style.minHeight = minContentHeight + "px";
        contentWrapper.style.maxHeight = availableHeight + "px";
        setIsPositioned(true);
        requestAnimationFrame(() => shouldExpandOnScrollRef.current = true);
      }
    }, [
      getItems,
      context.trigger,
      context.valueNode,
      contentWrapper,
      content,
      viewport,
      selectedItem,
      selectedItemText,
      context.dir
    ]);
    $9f79659886946c16$export$e5c5a5f917a5871c2(() => position(), [
      position
    ]);
    const focusSelectedItem = (0, import_react51.useCallback)(() => focusFirst([
      selectedItem,
      content
    ]), [
      focusFirst,
      selectedItem,
      content
    ]);
    (0, import_react51.useEffect)(() => {
      if (isPositioned)
        focusSelectedItem();
    }, [
      isPositioned,
      focusSelectedItem
    ]);
    const handleScrollButtonChange = (0, import_react51.useCallback)((node) => {
      if (node && shouldRepositionRef.current === true) {
        position();
        focusSelectedItem();
        shouldRepositionRef.current = false;
      }
    }, [
      position,
      focusSelectedItem
    ]);
    const { onOpenChange, triggerPointerDownPosRef } = context;
    (0, import_react51.useEffect)(() => {
      if (content) {
        let pointerMoveDelta = {
          x: 0,
          y: 0
        };
        const handlePointerMove = (event) => {
          var _triggerPointerDownPo, _triggerPointerDownPo2, _triggerPointerDownPo3, _triggerPointerDownPo4;
          pointerMoveDelta = {
            x: Math.abs(Math.round(event.pageX) - ((_triggerPointerDownPo = (_triggerPointerDownPo2 = triggerPointerDownPosRef.current) === null || _triggerPointerDownPo2 === void 0 ? void 0 : _triggerPointerDownPo2.x) !== null && _triggerPointerDownPo !== void 0 ? _triggerPointerDownPo : 0)),
            y: Math.abs(Math.round(event.pageY) - ((_triggerPointerDownPo3 = (_triggerPointerDownPo4 = triggerPointerDownPosRef.current) === null || _triggerPointerDownPo4 === void 0 ? void 0 : _triggerPointerDownPo4.y) !== null && _triggerPointerDownPo3 !== void 0 ? _triggerPointerDownPo3 : 0))
          };
        };
        const handlePointerUp = (event) => {
          if (pointerMoveDelta.x <= 10 && pointerMoveDelta.y <= 10)
            event.preventDefault();
          else if (!content.contains(event.target))
            onOpenChange(false);
          document.removeEventListener("pointermove", handlePointerMove);
          triggerPointerDownPosRef.current = null;
        };
        if (triggerPointerDownPosRef.current !== null) {
          document.addEventListener("pointermove", handlePointerMove);
          document.addEventListener("pointerup", handlePointerUp, {
            capture: true,
            once: true
          });
        }
        return () => {
          document.removeEventListener("pointermove", handlePointerMove);
          document.removeEventListener("pointerup", handlePointerUp, {
            capture: true
          });
        };
      }
    }, [
      content,
      onOpenChange,
      triggerPointerDownPosRef
    ]);
    (0, import_react51.useEffect)(() => {
      const close = () => onOpenChange(false);
      window.addEventListener("blur", close);
      window.addEventListener("resize", close);
      return () => {
        window.removeEventListener("blur", close);
        window.removeEventListener("resize", close);
      };
    }, [
      onOpenChange
    ]);
    const [searchRef, handleTypeaheadSearch] = $cc7e05a45900e73f$var$useTypeaheadSearch((search) => {
      const enabledItems = getItems().filter((item) => !item.disabled);
      const currentItem = enabledItems.find((item) => item.ref.current === document.activeElement);
      const nextItem = $cc7e05a45900e73f$var$findNextItem(enabledItems, search, currentItem);
      if (nextItem)
        setTimeout(() => nextItem.ref.current.focus());
    });
    const itemRefCallback = (0, import_react51.useCallback)((node, value, disabled) => {
      const isFirstValidItem = !firstValidItemFoundRef.current && !disabled;
      const isSelectedItem = context.value !== void 0 && context.value === value;
      if (isSelectedItem || isFirstValidItem) {
        setSelectedItem(node);
        if (isFirstValidItem)
          firstValidItemFoundRef.current = true;
      }
    }, [
      context.value
    ]);
    const handleItemLeave = (0, import_react51.useCallback)(() => content === null || content === void 0 ? void 0 : content.focus(), [
      content
    ]);
    const itemTextRefCallback = (0, import_react51.useCallback)((node, value, disabled) => {
      const isFirstValidItem = !firstValidItemFoundRef.current && !disabled;
      const isSelectedItem = context.value !== void 0 && context.value === value;
      if (isSelectedItem || isFirstValidItem)
        setSelectedItemText(node);
    }, [
      context.value
    ]);
    return /* @__PURE__ */ (0, import_react51.createElement)($cc7e05a45900e73f$var$SelectContentProvider, {
      scope: __scopeSelect,
      contentWrapper,
      content,
      viewport,
      onViewportChange: setViewport,
      itemRefCallback,
      selectedItem,
      onItemLeave: handleItemLeave,
      itemTextRefCallback,
      selectedItemText,
      onScrollButtonChange: handleScrollButtonChange,
      isPositioned,
      shouldExpandOnScrollRef,
      searchRef
    }, /* @__PURE__ */ (0, import_react51.createElement)(Combination_default, {
      as: $5e63c961fc1ce211$export$8c6ed5c666ac13602,
      allowPinchZoom: true
    }, /* @__PURE__ */ (0, import_react51.createElement)("div", {
      ref: setContentWrapper,
      style: {
        display: "flex",
        flexDirection: "column",
        position: "fixed",
        zIndex: contentZIndex
      }
    }, /* @__PURE__ */ (0, import_react51.createElement)($d3863c46a17e8a28$export$20e40289641fbbb62, {
      asChild: true,
      trapped: context.open,
      onMountAutoFocus: (event) => {
        event.preventDefault();
      },
      onUnmountAutoFocus: $e42e1063c40fb3ef$export$b9ecd428b558ff10(onCloseAutoFocus, (event) => {
        var _context$trigger;
        (_context$trigger = context.trigger) === null || _context$trigger === void 0 || _context$trigger.focus({
          preventScroll: true
        });
        event.preventDefault();
      })
    }, /* @__PURE__ */ (0, import_react51.createElement)($5cb92bef7577960e$export$177fb62ff3ec1f222, _extends({
      role: "listbox",
      id: context.contentId,
      "data-state": context.open ? "open" : "closed",
      dir: context.dir,
      onContextMenu: (event) => event.preventDefault()
    }, contentProps, {
      ref: composedRefs,
      style: {
        display: "flex",
        flexDirection: "column",
        boxSizing: "border-box",
        maxHeight: "100%",
        outline: "none",
        ...contentProps.style
      },
      disableOutsidePointerEvents: true,
      onFocusOutside: (event) => event.preventDefault(),
      onDismiss: () => context.onOpenChange(false),
      onKeyDown: $e42e1063c40fb3ef$export$b9ecd428b558ff10(contentProps.onKeyDown, (event) => {
        const isModifierKey = event.ctrlKey || event.altKey || event.metaKey;
        if (event.key === "Tab")
          event.preventDefault();
        if (!isModifierKey && event.key.length === 1)
          handleTypeaheadSearch(event.key);
        if ([
          "ArrowUp",
          "ArrowDown",
          "Home",
          "End"
        ].includes(event.key)) {
          const items = getItems().filter((item) => !item.disabled);
          let candidateNodes = items.map((item) => item.ref.current);
          if ([
            "ArrowUp",
            "End"
          ].includes(event.key))
            candidateNodes = candidateNodes.slice().reverse();
          if ([
            "ArrowUp",
            "ArrowDown"
          ].includes(event.key)) {
            const currentElement = event.target;
            const currentIndex = candidateNodes.indexOf(currentElement);
            candidateNodes = candidateNodes.slice(currentIndex + 1);
          }
          setTimeout(() => focusFirst(candidateNodes));
          event.preventDefault();
        }
      })
    }))))));
  });
  var $cc7e05a45900e73f$var$VIEWPORT_NAME = "SelectViewport";
  var $cc7e05a45900e73f$export$9ed6e7b40248d36d = /* @__PURE__ */ (0, import_react51.forwardRef)((props, forwardedRef) => {
    const { __scopeSelect, ...viewportProps } = props;
    const contentContext = $cc7e05a45900e73f$var$useSelectContentContext($cc7e05a45900e73f$var$VIEWPORT_NAME, __scopeSelect);
    const composedRefs = $6ed0406888f73fc4$export$c7b2cbe3552a0d052(forwardedRef, contentContext.onViewportChange);
    const prevScrollTopRef = (0, import_react51.useRef)(0);
    return /* @__PURE__ */ (0, import_react51.createElement)(import_react51.Fragment, null, /* @__PURE__ */ (0, import_react51.createElement)("style", {
      dangerouslySetInnerHTML: {
        __html: `[data-radix-select-viewport]{scrollbar-width:none;-ms-overflow-style:none;-webkit-overflow-scrolling:touch;}[data-radix-select-viewport]::-webkit-scrollbar{display:none}`
      }
    }), /* @__PURE__ */ (0, import_react51.createElement)($cc7e05a45900e73f$var$Collection.Slot, {
      scope: __scopeSelect
    }, /* @__PURE__ */ (0, import_react51.createElement)($8927f6f2acc4f386$export$250ffa63cdc0d0342.div, _extends({
      "data-radix-select-viewport": "",
      role: "presentation"
    }, viewportProps, {
      ref: composedRefs,
      style: {
        position: "relative",
        flex: 1,
        overflow: "auto",
        ...viewportProps.style
      },
      onScroll: $e42e1063c40fb3ef$export$b9ecd428b558ff10(viewportProps.onScroll, (event) => {
        const viewport = event.currentTarget;
        const { contentWrapper, shouldExpandOnScrollRef } = contentContext;
        if (shouldExpandOnScrollRef !== null && shouldExpandOnScrollRef !== void 0 && shouldExpandOnScrollRef.current && contentWrapper) {
          const scrolledBy = Math.abs(prevScrollTopRef.current - viewport.scrollTop);
          if (scrolledBy > 0) {
            const availableHeight = window.innerHeight - $cc7e05a45900e73f$var$CONTENT_MARGIN * 2;
            const cssMinHeight = parseFloat(contentWrapper.style.minHeight);
            const cssHeight = parseFloat(contentWrapper.style.height);
            const prevHeight = Math.max(cssMinHeight, cssHeight);
            if (prevHeight < availableHeight) {
              const nextHeight = prevHeight + scrolledBy;
              const clampedNextHeight = Math.min(availableHeight, nextHeight);
              const heightDiff = nextHeight - clampedNextHeight;
              contentWrapper.style.height = clampedNextHeight + "px";
              if (contentWrapper.style.bottom === "0px") {
                viewport.scrollTop = heightDiff > 0 ? heightDiff : 0;
                contentWrapper.style.justifyContent = "flex-end";
              }
            }
          }
        }
        prevScrollTopRef.current = viewport.scrollTop;
      })
    }))));
  });
  var $cc7e05a45900e73f$var$GROUP_NAME = "SelectGroup";
  var [$cc7e05a45900e73f$var$SelectGroupContextProvider, $cc7e05a45900e73f$var$useSelectGroupContext] = $cc7e05a45900e73f$var$createSelectContext($cc7e05a45900e73f$var$GROUP_NAME);
  var $cc7e05a45900e73f$export$ee25a334c55de1f4 = /* @__PURE__ */ (0, import_react51.forwardRef)((props, forwardedRef) => {
    const { __scopeSelect, ...groupProps } = props;
    const groupId = $1746a345f3d73bb7$export$f680877a34711e372();
    return /* @__PURE__ */ (0, import_react51.createElement)($cc7e05a45900e73f$var$SelectGroupContextProvider, {
      scope: __scopeSelect,
      id: groupId
    }, /* @__PURE__ */ (0, import_react51.createElement)($8927f6f2acc4f386$export$250ffa63cdc0d0342.div, _extends({
      role: "group",
      "aria-labelledby": groupId
    }, groupProps, {
      ref: forwardedRef
    })));
  });
  var $cc7e05a45900e73f$var$LABEL_NAME = "SelectLabel";
  var $cc7e05a45900e73f$export$f67338d29bd972f8 = /* @__PURE__ */ (0, import_react51.forwardRef)((props, forwardedRef) => {
    const { __scopeSelect, ...labelProps } = props;
    const groupContext = $cc7e05a45900e73f$var$useSelectGroupContext($cc7e05a45900e73f$var$LABEL_NAME, __scopeSelect);
    return /* @__PURE__ */ (0, import_react51.createElement)($8927f6f2acc4f386$export$250ffa63cdc0d0342.div, _extends({
      id: groupContext.id
    }, labelProps, {
      ref: forwardedRef
    }));
  });
  var $cc7e05a45900e73f$var$ITEM_NAME = "SelectItem";
  var [$cc7e05a45900e73f$var$SelectItemContextProvider, $cc7e05a45900e73f$var$useSelectItemContext] = $cc7e05a45900e73f$var$createSelectContext($cc7e05a45900e73f$var$ITEM_NAME);
  var $cc7e05a45900e73f$export$13ef48a934230896 = /* @__PURE__ */ (0, import_react51.forwardRef)((props, forwardedRef) => {
    const { __scopeSelect, value, disabled = false, textValue: textValueProp, ...itemProps } = props;
    const context = $cc7e05a45900e73f$var$useSelectContext($cc7e05a45900e73f$var$ITEM_NAME, __scopeSelect);
    const contentContext = $cc7e05a45900e73f$var$useSelectContentContext($cc7e05a45900e73f$var$ITEM_NAME, __scopeSelect);
    const isSelected = context.value === value;
    const [textValue, setTextValue] = (0, import_react51.useState)(textValueProp !== null && textValueProp !== void 0 ? textValueProp : "");
    const [isFocused, setIsFocused] = (0, import_react51.useState)(false);
    const composedRefs = $6ed0406888f73fc4$export$c7b2cbe3552a0d052(forwardedRef, (node) => {
      var _contentContext$itemR;
      return (_contentContext$itemR = contentContext.itemRefCallback) === null || _contentContext$itemR === void 0 ? void 0 : _contentContext$itemR.call(contentContext, node, value, disabled);
    });
    const textId = $1746a345f3d73bb7$export$f680877a34711e372();
    const handleSelect = () => {
      if (!disabled) {
        context.onValueChange(value);
        context.onOpenChange(false);
      }
    };
    return /* @__PURE__ */ (0, import_react51.createElement)($cc7e05a45900e73f$var$SelectItemContextProvider, {
      scope: __scopeSelect,
      value,
      disabled,
      textId,
      isSelected,
      onItemTextChange: (0, import_react51.useCallback)((node) => {
        setTextValue((prevTextValue) => {
          var _node$textContent;
          return prevTextValue || ((_node$textContent = node === null || node === void 0 ? void 0 : node.textContent) !== null && _node$textContent !== void 0 ? _node$textContent : "").trim();
        });
      }, [])
    }, /* @__PURE__ */ (0, import_react51.createElement)($cc7e05a45900e73f$var$Collection.ItemSlot, {
      scope: __scopeSelect,
      value,
      disabled,
      textValue
    }, /* @__PURE__ */ (0, import_react51.createElement)($8927f6f2acc4f386$export$250ffa63cdc0d0342.div, _extends({
      role: "option",
      "aria-labelledby": textId,
      "data-highlighted": isFocused ? "" : void 0,
      "aria-selected": isSelected && isFocused,
      "data-state": isSelected ? "checked" : "unchecked",
      "aria-disabled": disabled || void 0,
      "data-disabled": disabled ? "" : void 0,
      tabIndex: disabled ? void 0 : -1
    }, itemProps, {
      ref: composedRefs,
      onFocus: $e42e1063c40fb3ef$export$b9ecd428b558ff10(itemProps.onFocus, () => setIsFocused(true)),
      onBlur: $e42e1063c40fb3ef$export$b9ecd428b558ff10(itemProps.onBlur, () => setIsFocused(false)),
      onPointerUp: $e42e1063c40fb3ef$export$b9ecd428b558ff10(itemProps.onPointerUp, handleSelect),
      onPointerMove: $e42e1063c40fb3ef$export$b9ecd428b558ff10(itemProps.onPointerMove, (event) => {
        if (disabled) {
          var _contentContext$onIte;
          (_contentContext$onIte = contentContext.onItemLeave) === null || _contentContext$onIte === void 0 || _contentContext$onIte.call(contentContext);
        } else
          event.currentTarget.focus({
            preventScroll: true
          });
      }),
      onPointerLeave: $e42e1063c40fb3ef$export$b9ecd428b558ff10(itemProps.onPointerLeave, (event) => {
        if (event.currentTarget === document.activeElement) {
          var _contentContext$onIte2;
          (_contentContext$onIte2 = contentContext.onItemLeave) === null || _contentContext$onIte2 === void 0 || _contentContext$onIte2.call(contentContext);
        }
      }),
      onKeyDown: $e42e1063c40fb3ef$export$b9ecd428b558ff10(itemProps.onKeyDown, (event) => {
        var _contentContext$searc;
        const isTypingAhead = ((_contentContext$searc = contentContext.searchRef) === null || _contentContext$searc === void 0 ? void 0 : _contentContext$searc.current) !== "";
        if (isTypingAhead && event.key === " ")
          return;
        if ($cc7e05a45900e73f$var$SELECTION_KEYS.includes(event.key))
          handleSelect();
        if (event.key === " ")
          event.preventDefault();
      })
    }))));
  });
  var $cc7e05a45900e73f$var$ITEM_TEXT_NAME = "SelectItemText";
  var $cc7e05a45900e73f$export$3572fb0fb821ff49 = /* @__PURE__ */ (0, import_react51.forwardRef)((props, forwardedRef) => {
    const { __scopeSelect, className, style, ...itemTextProps } = props;
    const context = $cc7e05a45900e73f$var$useSelectContext($cc7e05a45900e73f$var$ITEM_TEXT_NAME, __scopeSelect);
    const contentContext = $cc7e05a45900e73f$var$useSelectContentContext($cc7e05a45900e73f$var$ITEM_TEXT_NAME, __scopeSelect);
    const itemContext = $cc7e05a45900e73f$var$useSelectItemContext($cc7e05a45900e73f$var$ITEM_TEXT_NAME, __scopeSelect);
    const nativeOptionsContext = $cc7e05a45900e73f$var$useSelectNativeOptionsContext($cc7e05a45900e73f$var$ITEM_TEXT_NAME, __scopeSelect);
    const [itemTextNode, setItemTextNode] = (0, import_react51.useState)(null);
    const composedRefs = $6ed0406888f73fc4$export$c7b2cbe3552a0d052(forwardedRef, (node) => setItemTextNode(node), itemContext.onItemTextChange, (node) => {
      var _contentContext$itemT;
      return (_contentContext$itemT = contentContext.itemTextRefCallback) === null || _contentContext$itemT === void 0 ? void 0 : _contentContext$itemT.call(contentContext, node, itemContext.value, itemContext.disabled);
    });
    const textContent = itemTextNode === null || itemTextNode === void 0 ? void 0 : itemTextNode.textContent;
    const nativeOption = (0, import_react51.useMemo)(() => /* @__PURE__ */ (0, import_react51.createElement)("option", {
      key: itemContext.value,
      value: itemContext.value,
      disabled: itemContext.disabled
    }, textContent), [
      itemContext.disabled,
      itemContext.value,
      textContent
    ]);
    const { onNativeOptionAdd, onNativeOptionRemove } = nativeOptionsContext;
    $9f79659886946c16$export$e5c5a5f917a5871c2(() => {
      onNativeOptionAdd(nativeOption);
      return () => onNativeOptionRemove(nativeOption);
    }, [
      onNativeOptionAdd,
      onNativeOptionRemove,
      nativeOption
    ]);
    return /* @__PURE__ */ (0, import_react51.createElement)(import_react51.Fragment, null, /* @__PURE__ */ (0, import_react51.createElement)($8927f6f2acc4f386$export$250ffa63cdc0d0342.span, _extends({
      id: itemContext.textId
    }, itemTextProps, {
      ref: composedRefs
    })), itemContext.isSelected && context.valueNode && !context.valueNodeHasChildren ? /* @__PURE__ */ (0, import_react_dom4.createPortal)(itemTextProps.children, context.valueNode) : null);
  });
  var $cc7e05a45900e73f$var$ITEM_INDICATOR_NAME = "SelectItemIndicator";
  var $cc7e05a45900e73f$export$6b9198de19accfe6 = /* @__PURE__ */ (0, import_react51.forwardRef)((props, forwardedRef) => {
    const { __scopeSelect, ...itemIndicatorProps } = props;
    const itemContext = $cc7e05a45900e73f$var$useSelectItemContext($cc7e05a45900e73f$var$ITEM_INDICATOR_NAME, __scopeSelect);
    return itemContext.isSelected ? /* @__PURE__ */ (0, import_react51.createElement)($8927f6f2acc4f386$export$250ffa63cdc0d0342.span, _extends({
      "aria-hidden": true
    }, itemIndicatorProps, {
      ref: forwardedRef
    })) : null;
  });
  var $cc7e05a45900e73f$var$SCROLL_UP_BUTTON_NAME = "SelectScrollUpButton";
  var $cc7e05a45900e73f$export$d8117927658af6d7 = /* @__PURE__ */ (0, import_react51.forwardRef)((props, forwardedRef) => {
    const contentContext = $cc7e05a45900e73f$var$useSelectContentContext($cc7e05a45900e73f$var$SCROLL_UP_BUTTON_NAME, props.__scopeSelect);
    const [canScrollUp1, setCanScrollUp] = (0, import_react51.useState)(false);
    const composedRefs = $6ed0406888f73fc4$export$c7b2cbe3552a0d052(forwardedRef, contentContext.onScrollButtonChange);
    $9f79659886946c16$export$e5c5a5f917a5871c2(() => {
      if (contentContext.viewport && contentContext.isPositioned) {
        let handleScroll2 = function() {
          const canScrollUp = viewport.scrollTop > 0;
          setCanScrollUp(canScrollUp);
        };
        const viewport = contentContext.viewport;
        handleScroll2();
        viewport.addEventListener("scroll", handleScroll2);
        return () => viewport.removeEventListener("scroll", handleScroll2);
      }
    }, [
      contentContext.viewport,
      contentContext.isPositioned
    ]);
    return canScrollUp1 ? /* @__PURE__ */ (0, import_react51.createElement)($cc7e05a45900e73f$var$SelectScrollButtonImpl, _extends({}, props, {
      ref: composedRefs,
      onAutoScroll: () => {
        const { viewport, selectedItem } = contentContext;
        if (viewport && selectedItem)
          viewport.scrollTop = viewport.scrollTop - selectedItem.offsetHeight;
      }
    })) : null;
  });
  var $cc7e05a45900e73f$var$SCROLL_DOWN_BUTTON_NAME = "SelectScrollDownButton";
  var $cc7e05a45900e73f$export$ff951e476c12189 = /* @__PURE__ */ (0, import_react51.forwardRef)((props, forwardedRef) => {
    const contentContext = $cc7e05a45900e73f$var$useSelectContentContext($cc7e05a45900e73f$var$SCROLL_DOWN_BUTTON_NAME, props.__scopeSelect);
    const [canScrollDown1, setCanScrollDown] = (0, import_react51.useState)(false);
    const composedRefs = $6ed0406888f73fc4$export$c7b2cbe3552a0d052(forwardedRef, contentContext.onScrollButtonChange);
    $9f79659886946c16$export$e5c5a5f917a5871c2(() => {
      if (contentContext.viewport && contentContext.isPositioned) {
        let handleScroll2 = function() {
          const maxScroll = viewport.scrollHeight - viewport.clientHeight;
          const canScrollDown = Math.ceil(viewport.scrollTop) < maxScroll;
          setCanScrollDown(canScrollDown);
        };
        const viewport = contentContext.viewport;
        handleScroll2();
        viewport.addEventListener("scroll", handleScroll2);
        return () => viewport.removeEventListener("scroll", handleScroll2);
      }
    }, [
      contentContext.viewport,
      contentContext.isPositioned
    ]);
    return canScrollDown1 ? /* @__PURE__ */ (0, import_react51.createElement)($cc7e05a45900e73f$var$SelectScrollButtonImpl, _extends({}, props, {
      ref: composedRefs,
      onAutoScroll: () => {
        const { viewport, selectedItem } = contentContext;
        if (viewport && selectedItem)
          viewport.scrollTop = viewport.scrollTop + selectedItem.offsetHeight;
      }
    })) : null;
  });
  var $cc7e05a45900e73f$var$SelectScrollButtonImpl = /* @__PURE__ */ (0, import_react51.forwardRef)((props, forwardedRef) => {
    const { __scopeSelect, onAutoScroll, ...scrollIndicatorProps } = props;
    const contentContext = $cc7e05a45900e73f$var$useSelectContentContext("SelectScrollButton", __scopeSelect);
    const autoScrollTimerRef = (0, import_react51.useRef)(null);
    const getItems = $cc7e05a45900e73f$var$useCollection(__scopeSelect);
    const clearAutoScrollTimer = (0, import_react51.useCallback)(() => {
      if (autoScrollTimerRef.current !== null) {
        window.clearInterval(autoScrollTimerRef.current);
        autoScrollTimerRef.current = null;
      }
    }, []);
    (0, import_react51.useEffect)(() => {
      return () => clearAutoScrollTimer();
    }, [
      clearAutoScrollTimer
    ]);
    $9f79659886946c16$export$e5c5a5f917a5871c2(() => {
      var _activeItem$ref$curre;
      const activeItem = getItems().find((item) => item.ref.current === document.activeElement);
      activeItem === null || activeItem === void 0 || (_activeItem$ref$curre = activeItem.ref.current) === null || _activeItem$ref$curre === void 0 || _activeItem$ref$curre.scrollIntoView({
        block: "nearest"
      });
    }, [
      getItems
    ]);
    return /* @__PURE__ */ (0, import_react51.createElement)($8927f6f2acc4f386$export$250ffa63cdc0d0342.div, _extends({
      "aria-hidden": true
    }, scrollIndicatorProps, {
      ref: forwardedRef,
      style: {
        flexShrink: 0,
        ...scrollIndicatorProps.style
      },
      onPointerMove: $e42e1063c40fb3ef$export$b9ecd428b558ff10(scrollIndicatorProps.onPointerMove, () => {
        var _contentContext$onIte3;
        (_contentContext$onIte3 = contentContext.onItemLeave) === null || _contentContext$onIte3 === void 0 || _contentContext$onIte3.call(contentContext);
        if (autoScrollTimerRef.current === null)
          autoScrollTimerRef.current = window.setInterval(onAutoScroll, 50);
      }),
      onPointerLeave: $e42e1063c40fb3ef$export$b9ecd428b558ff10(scrollIndicatorProps.onPointerLeave, () => {
        clearAutoScrollTimer();
      })
    }));
  });
  var $cc7e05a45900e73f$var$BubbleSelect = /* @__PURE__ */ (0, import_react51.forwardRef)((props, forwardedRef) => {
    const { value, ...selectProps } = props;
    const ref = (0, import_react51.useRef)(null);
    const composedRefs = $6ed0406888f73fc4$export$c7b2cbe3552a0d052(forwardedRef, ref);
    const prevValue = $010c2913dbd2fe3d$export$5cae361ad82dce8b(value);
    (0, import_react51.useEffect)(() => {
      const select = ref.current;
      const selectProto = window.HTMLSelectElement.prototype;
      const descriptor = Object.getOwnPropertyDescriptor(selectProto, "value");
      const setValue = descriptor.set;
      if (prevValue !== value && setValue) {
        const event = new Event("change", {
          bubbles: true
        });
        setValue.call(select, value);
        select.dispatchEvent(event);
      }
    }, [
      prevValue,
      value
    ]);
    return /* @__PURE__ */ (0, import_react51.createElement)($ea1ef594cf570d83$export$439d29a4e110a164, {
      asChild: true
    }, /* @__PURE__ */ (0, import_react51.createElement)("select", _extends({}, selectProps, {
      ref: composedRefs,
      defaultValue: value
    })));
  });
  $cc7e05a45900e73f$var$BubbleSelect.displayName = "BubbleSelect";
  function $cc7e05a45900e73f$var$useTypeaheadSearch(onSearchChange) {
    const handleSearchChange = $b1b2314f5f9a1d84$export$25bec8c6f54ee79a2(onSearchChange);
    const searchRef = (0, import_react51.useRef)("");
    const timerRef = (0, import_react51.useRef)(0);
    const handleTypeaheadSearch = (0, import_react51.useCallback)((key) => {
      const search = searchRef.current + key;
      handleSearchChange(search);
      (function updateSearch(value) {
        searchRef.current = value;
        window.clearTimeout(timerRef.current);
        if (value !== "")
          timerRef.current = window.setTimeout(() => updateSearch(""), 1e3);
      })(search);
    }, [
      handleSearchChange
    ]);
    const resetTypeahead = (0, import_react51.useCallback)(() => {
      searchRef.current = "";
      window.clearTimeout(timerRef.current);
    }, []);
    (0, import_react51.useEffect)(() => {
      return () => window.clearTimeout(timerRef.current);
    }, []);
    return [
      searchRef,
      handleTypeaheadSearch,
      resetTypeahead
    ];
  }
  function $cc7e05a45900e73f$var$findNextItem(items, search, currentItem) {
    const isRepeated = search.length > 1 && Array.from(search).every((char) => char === search[0]);
    const normalizedSearch = isRepeated ? search[0] : search;
    const currentItemIndex = currentItem ? items.indexOf(currentItem) : -1;
    let wrappedItems = $cc7e05a45900e73f$var$wrapArray(items, Math.max(currentItemIndex, 0));
    const excludeCurrentItem = normalizedSearch.length === 1;
    if (excludeCurrentItem)
      wrappedItems = wrappedItems.filter((v5) => v5 !== currentItem);
    const nextItem = wrappedItems.find((item) => item.textValue.toLowerCase().startsWith(normalizedSearch.toLowerCase()));
    return nextItem !== currentItem ? nextItem : void 0;
  }
  function $cc7e05a45900e73f$var$wrapArray(array, startIndex) {
    return array.map((_3, index) => array[(startIndex + index) % array.length]);
  }
  var $cc7e05a45900e73f$export$be92b6f5f03c0fe9 = $cc7e05a45900e73f$export$ef9b1a59e592288f;
  var $cc7e05a45900e73f$export$41fb9f06171c75f4 = $cc7e05a45900e73f$export$3ac1e88a1c0b9f1;
  var $cc7e05a45900e73f$export$4c8d1a57a761ef94 = $cc7e05a45900e73f$export$e288731fd71264f0;
  var $cc7e05a45900e73f$export$f04a61298a47a40f = $cc7e05a45900e73f$export$99b400cabb58c515;
  var $cc7e05a45900e73f$export$7c6e2c02157bb7d2 = $cc7e05a45900e73f$export$c973a4b3cb86a03d;
  var $cc7e05a45900e73f$export$d5c6c08dc2d3ca7 = $cc7e05a45900e73f$export$9ed6e7b40248d36d;
  var $cc7e05a45900e73f$export$eb2fcfdbd7ba97d4 = $cc7e05a45900e73f$export$ee25a334c55de1f4;
  var $cc7e05a45900e73f$export$b04be29aa201d4f5 = $cc7e05a45900e73f$export$f67338d29bd972f8;
  var $cc7e05a45900e73f$export$6d08773d2e66f8f2 = $cc7e05a45900e73f$export$13ef48a934230896;
  var $cc7e05a45900e73f$export$d6e5bf9c43ea9319 = $cc7e05a45900e73f$export$3572fb0fb821ff49;
  var $cc7e05a45900e73f$export$c3468e2714d175fa = $cc7e05a45900e73f$export$6b9198de19accfe6;
  var $cc7e05a45900e73f$export$2f60d3ec9ad468f2 = $cc7e05a45900e73f$export$d8117927658af6d7;
  var $cc7e05a45900e73f$export$bf1aedc3039c8d63 = $cc7e05a45900e73f$export$ff951e476c12189;

  // src/components/Collection/Collection.styled.ts
  var CollectionIcon = styled("svg", {
    height: "19px",
    color: "$accent",
    fill: "$accent",
    stroke: "$accent",
    display: "flex",
    margin: "0.25rem 0.85rem"
  });
  var CollectionButton = styled($cc7e05a45900e73f$export$41fb9f06171c75f4, {
    fontSize: "1.25rem",
    fontWeight: "400",
    fontFamily: "$display",
    alignSelf: "flex-start",
    flexGrow: "1",
    backgroundColor: "$secondary",
    cursor: "pointer",
    transition: "$all",
    border: "1px solid $secondaryMuted",
    boxShadow: "2px 2px 5px #0001",
    borderRadius: "3px",
    display: "flex",
    alignItems: "center",
    paddingLeft: "0.5rem",
    "@sm": {
      fontSize: "1rem"
    }
  });
  var CollectionContent = styled($cc7e05a45900e73f$export$7c6e2c02157bb7d2, {
    borderRadius: "3px",
    boxShadow: "3px 3px 8px #0003",
    backgroundColor: "$secondary",
    marginTop: "2.25rem",
    marginLeft: "6px",
    paddingBottom: "0.25rem",
    maxHeight: "calc(61.8vh - 2.5rem) !important",
    borderTopLeftRadius: "0",
    border: "1px solid $secondaryMuted",
    maxWidth: "90vw"
  });
  var CollectionItem = styled($cc7e05a45900e73f$export$6d08773d2e66f8f2, {
    display: "flex",
    alignItems: "center",
    fontFamily: "$sans",
    padding: "0.25rem 0.5rem",
    color: "$primary",
    fontWeight: "400",
    fontSize: "0.8333rem",
    cursor: "pointer",
    backgroundColor: "$secondary",
    width: "calc(100% - 1rem)",
    "> span": {
      whiteSpace: "nowrap",
      textOverflow: "ellipsis",
      overflow: "hidden"
    },
    '&[data-state="checked"]': {
      fontWeight: "700",
      color: "$primary !important"
    },
    "&:hover": {
      color: "$accent"
    },
    img: {
      width: "31px",
      height: "31px",
      marginRight: "0.5rem",
      borderRadius: "3px"
    }
  });
  var CollectionLabel = styled($cc7e05a45900e73f$export$b04be29aa201d4f5, {
    color: "$primaryMuted",
    fontFamily: "$sans",
    fontSize: "0.85rem",
    padding: "0.5rem 1rem 0.5rem 0.5rem",
    display: "flex",
    alignItems: "center",
    marginBottom: "0.25rem",
    borderRadius: "3px",
    borderTopLeftRadius: "0",
    borderBottomLeftRadius: "0",
    borderBottomRightRadius: "0",
    backgroundColor: "$secondaryMuted"
  });
  var CollectionStyled = styled("div", {
    position: "relative",
    zIndex: "5"
  });

  // node_modules/@samvera/nectar-iiif/dist/index.esm.js
  var import_react52 = __toESM(require_react());
  var import_react54 = __toESM(require_react());
  var import_react55 = __toESM(require_react());
  var import_react56 = __toESM(require_react());
  var import_react57 = __toESM(require_react());
  var import_react58 = __toESM(require_react());
  var import_react59 = __toESM(require_react());
  var import_react60 = __toESM(require_react());
  var import_react61 = __toESM(require_react());
  var import_react62 = __toESM(require_react());
  var import_react63 = __toESM(require_react());
  var import_hls = __toESM(require_hls());
  var _2 = Object.defineProperty;
  var w3 = Object.getOwnPropertySymbols;
  var K3 = Object.prototype.hasOwnProperty;
  var B3 = Object.prototype.propertyIsEnumerable;
  var z3 = (t4, e4, r3) => e4 in t4 ? _2(t4, e4, { enumerable: true, configurable: true, writable: true, value: r3 }) : t4[e4] = r3;
  var n3 = (t4, e4) => {
    for (var r3 in e4 || (e4 = {}))
      K3.call(e4, r3) && z3(t4, r3, e4[r3]);
    if (w3)
      for (var r3 of w3(e4))
        B3.call(e4, r3) && z3(t4, r3, e4[r3]);
    return t4;
  };
  var { styled: l3, css: xt, keyframes: Et } = q2({ prefix: "nectar" });
  var u3 = (t4, e4 = "none") => {
    var i3;
    if (!t4)
      return null;
    if (typeof t4 == "string")
      return [t4];
    if (!t4[e4]) {
      let o3 = Object.getOwnPropertyNames(t4);
      if (o3.length > 0)
        return (i3 = t4[o3[0]]) == null ? void 0 : i3.join(", ");
    }
    return !t4[e4] || !Array.isArray(t4[e4]) ? null : t4[e4].join(", ");
  };
  function s4(t4, e4) {
    let r3 = Object.keys(t4).filter((o3) => e4.includes(o3) ? null : o3), i3 = new Object();
    return r3.forEach((o3) => {
      i3[o3] = t4[o3];
    }), i3;
  }
  var X3 = l3("a", {});
  var et2 = l3("span", {});
  var rt2 = (t4) => {
    let { as: e4, label: r3 } = t4, o3 = s4(t4, ["as", "label"]);
    return import_react54.default.createElement(et2, n3({ as: e4 }, o3), u3(r3, o3.lang));
  };
  var L3 = rt2;
  var ot2 = l3("span", {});
  var mt = l3("dl", {});
  var ct2 = l3("dl", {});
  var dt2 = l3("li", {});
  var gt = l3("ul", {});
  var q3 = (t4, e4 = "200,", r3 = "full") => {
    Array.isArray(t4) && (t4 = t4[0]);
    let { id: i3, service: o3 } = t4, a3;
    if (!o3)
      return i3;
    if (Array.isArray(t4.service) && t4.service.length > 0 && (a3 = o3[0]), a3) {
      if (a3["@id"])
        return `${a3["@id"]}/${r3}/${e4}/0/default.jpg`;
      if (a3.id)
        return `${a3.id}/${r3}/${e4}/0/default.jpg`;
    }
  };
  var O3 = l3("img", { objectFit: "cover" });
  var Mt = (t4) => {
    let e4 = (0, import_react63.useRef)(null), { contentResource: r3, altAsLabel: i3, region: o3 = "full" } = t4, a3;
    i3 && (a3 = u3(i3));
    let W3 = s4(t4, ["contentResource", "altAsLabel"]), { type: M3, id: c4, width: N3 = 200, height: I2 = 200, format: Rt, duration: b3 } = r3;
    (0, import_react63.useEffect)(() => {
      if (!c4 && !e4.current || ["Image"].includes(M3) || !c4.includes("m3u8"))
        return;
      let m3 = new import_hls.default();
      return e4.current && (m3.attachMedia(e4.current), m3.on(import_hls.default.Events.MEDIA_ATTACHED, function() {
        m3.loadSource(c4);
      })), m3.on(import_hls.default.Events.ERROR, function(d3, g3) {
        if (g3.fatal)
          switch (g3.type) {
            case import_hls.default.ErrorTypes.NETWORK_ERROR:
              console.error(`fatal ${d3} network error encountered, try to recover`), m3.startLoad();
              break;
            case import_hls.default.ErrorTypes.MEDIA_ERROR:
              console.error(`fatal ${d3} media error encountered, try to recover`), m3.recoverMediaError();
              break;
            default:
              m3.destroy();
              break;
          }
      }), () => {
        m3 && (m3.detachMedia(), m3.destroy());
      };
    }, []), (0, import_react63.useEffect)(() => R2(), []);
    let R2 = () => {
      if (!e4.current)
        return;
      let m3 = 0, d3 = 30;
      if (b3 && (d3 = b3), !c4.split("#t=") && b3 && (m3 = b3 * 0.1), c4.split("#t=").pop()) {
        let H3 = c4.split("#t=").pop();
        H3 && (m3 = parseInt(H3.split(",")[0]));
      }
      let g3 = e4.current;
      g3.autoplay = true, g3.currentTime = m3, setTimeout(() => R2(), d3 * 1e3);
    };
    switch (M3) {
      case "Image":
        let m3 = q3(r3, `${N3},${I2}`, o3);
        return import_react63.default.createElement(O3, n3({ as: "img", alt: a3, css: { width: N3, height: I2 }, key: c4, src: m3 }, W3));
      case "Video":
        return import_react63.default.createElement(O3, { as: "video", css: { width: N3, height: I2 }, disablePictureInPicture: true, key: c4, loop: true, muted: true, onPause: R2, ref: e4, src: c4 });
      default:
        return console.warn(`Resource type: ${M3} is not valid or not yet supported in Nectar.`), import_react63.default.createElement(import_react63.default.Fragment, null);
    }
  };
  var V3 = Mt;
  var Nt = (t4) => {
    let { thumbnail: e4, region: r3 } = t4, o3 = s4(t4, ["thumbnail"]);
    return import_react62.default.createElement(import_react62.default.Fragment, null, e4 && e4.map((a3) => import_react62.default.createElement(V3, n3({ contentResource: a3, key: a3.id, region: r3 }, o3))));
  };
  var It = Nt;

  // src/components/Collection/Collection.tsx
  var import_react65 = __toESM(require_react());

  // src/components/Collection/Icon.tsx
  var import_react64 = __toESM(require_react());
  var SelectIcon = ({ direction, title }) => {
    const CaretUp = () => {
      return /* @__PURE__ */ import_react64.default.createElement("path", {
        d: "M414 321.94L274.22 158.82a24 24 0 00-36.44 0L98 321.94c-13.34 15.57-2.28 39.62 18.22 39.62h279.6c20.5 0 31.56-24.05 18.18-39.62z"
      });
    };
    const CaretDown = () => {
      return /* @__PURE__ */ import_react64.default.createElement("path", {
        d: "M98 190.06l139.78 163.12a24 24 0 0036.44 0L414 190.06c13.34-15.57 2.28-39.62-18.22-39.62h-279.6c-20.5 0-31.56 24.05-18.18 39.62z"
      });
    };
    return /* @__PURE__ */ import_react64.default.createElement(CollectionIcon, {
      xmlns: "http://www.w3.org/2000/svg",
      focusable: "false",
      viewBox: "0 0 512 512",
      role: "img"
    }, /* @__PURE__ */ import_react64.default.createElement("title", null, title), direction === "up" && /* @__PURE__ */ import_react64.default.createElement(CaretUp, null), direction === "down" && /* @__PURE__ */ import_react64.default.createElement(CaretDown, null));
  };
  var Icon_default = SelectIcon;

  // src/components/Collection/Collection.tsx
  var Collection = () => {
    const dispatch = useViewerDispatch();
    const viewerState = useViewerState();
    const { activeManifest, collection, configOptions, vault } = viewerState;
    const maxHeight = configOptions == null ? void 0 : configOptions.canvasHeight;
    const handleValueChange = (manifestId) => {
      dispatch({
        type: "updateActiveManifest",
        manifestId
      });
    };
    return /* @__PURE__ */ import_react65.default.createElement(CollectionStyled, null, /* @__PURE__ */ import_react65.default.createElement($cc7e05a45900e73f$export$be92b6f5f03c0fe9, {
      value: activeManifest,
      onValueChange: handleValueChange
    }, /* @__PURE__ */ import_react65.default.createElement(CollectionButton, null, /* @__PURE__ */ import_react65.default.createElement($cc7e05a45900e73f$export$4c8d1a57a761ef94, null), /* @__PURE__ */ import_react65.default.createElement($cc7e05a45900e73f$export$f04a61298a47a40f, null, /* @__PURE__ */ import_react65.default.createElement(Icon_default, {
      direction: "down",
      title: "select from collection"
    }))), /* @__PURE__ */ import_react65.default.createElement(CollectionContent, {
      css: { maxHeight: `${maxHeight} !important` }
    }, /* @__PURE__ */ import_react65.default.createElement($cc7e05a45900e73f$export$2f60d3ec9ad468f2, null, /* @__PURE__ */ import_react65.default.createElement(Icon_default, {
      direction: "up",
      title: "scroll up for more"
    })), /* @__PURE__ */ import_react65.default.createElement($cc7e05a45900e73f$export$d5c6c08dc2d3ca7, null, /* @__PURE__ */ import_react65.default.createElement($cc7e05a45900e73f$export$eb2fcfdbd7ba97d4, null, /* @__PURE__ */ import_react65.default.createElement(CollectionLabel, null, /* @__PURE__ */ import_react65.default.createElement(L3, {
      label: collection.label
    })), collection.items.map((item) => /* @__PURE__ */ import_react65.default.createElement(CollectionItem, {
      value: item.id,
      key: item.id
    }, /* @__PURE__ */ import_react65.default.createElement(It, {
      thumbnail: vault.get(item.thumbnail)
    }), /* @__PURE__ */ import_react65.default.createElement($cc7e05a45900e73f$export$d6e5bf9c43ea9319, null, /* @__PURE__ */ import_react65.default.createElement(L3, {
      label: item.label
    })), /* @__PURE__ */ import_react65.default.createElement($cc7e05a45900e73f$export$c3468e2714d175fa, null))))), /* @__PURE__ */ import_react65.default.createElement($cc7e05a45900e73f$export$bf1aedc3039c8d63, null, /* @__PURE__ */ import_react65.default.createElement(Icon_default, {
      direction: "down",
      title: "scroll down for more"
    })))));
  };
  var Collection_default = Collection;

  // src/components/Viewer/Header.tsx
  var ViewerHeader = ({ manifestId, manifestLabel }) => {
    const viewerState = useViewerState();
    const { collection, configOptions } = viewerState;
    const { showTitle, showIIIFBadge } = configOptions;
    if (!showTitle && !showIIIFBadge)
      return /* @__PURE__ */ import_react66.default.createElement(import_react66.default.Fragment, null);
    return /* @__PURE__ */ import_react66.default.createElement(Header, {
      className: "clover-header"
    }, (collection == null ? void 0 : collection.items) ? /* @__PURE__ */ import_react66.default.createElement(Collection_default, null) : /* @__PURE__ */ import_react66.default.createElement(ManifestLabel, null, getLabel(manifestLabel, "en")), showIIIFBadge && /* @__PURE__ */ import_react66.default.createElement(Popover, null, /* @__PURE__ */ import_react66.default.createElement(IIIFBadgeButton, null, /* @__PURE__ */ import_react66.default.createElement(IIIFBadge_default, null)), /* @__PURE__ */ import_react66.default.createElement(IIIFBadgeContent, null, /* @__PURE__ */ import_react66.default.createElement("button", {
      onClick: (e4) => {
        e4.preventDefault();
        window.open(manifestId, "_blank");
      }
    }, "View Manifest"), /* @__PURE__ */ import_react66.default.createElement(CopyText_default, {
      textPrompt: "Copy Manifest URL",
      textToCopy: manifestId
    }))));
  };
  var Header_default = ViewerHeader;

  // src/components/Viewer/Content.tsx
  var import_react90 = __toESM(require_react());

  // src/components/Media/Media.tsx
  var import_react76 = __toESM(require_react());

  // node_modules/@radix-ui/react-radio-group/dist/index.module.js
  var import_react72 = __toESM(require_react());

  // node_modules/@radix-ui/react-label/dist/index.module.js
  var import_react67 = __toESM(require_react());
  function $parcel$export22(e4, n4, v5, s5) {
    Object.defineProperty(e4, n4, { get: v5, set: s5, enumerable: true, configurable: true });
  }
  var $b73a6c6685e72184$exports = {};
  $parcel$export22($b73a6c6685e72184$exports, "Label", () => $b73a6c6685e72184$export$b04be29aa201d4f5);
  $parcel$export22($b73a6c6685e72184$exports, "useLabelContext", () => $b73a6c6685e72184$export$feddbbf47baabdb92);
  $parcel$export22($b73a6c6685e72184$exports, "Root", () => $b73a6c6685e72184$export$be92b6f5f03c0fe9);
  var $b73a6c6685e72184$var$NAME2 = "Label";
  var [$b73a6c6685e72184$var$LabelProvider2, $b73a6c6685e72184$var$useLabelContextImpl2] = $c512c27ab02ef895$export$fd42f52fd3ae1109($b73a6c6685e72184$var$NAME2, {
    id: void 0,
    controlRef: {
      current: null
    }
  });
  var $b73a6c6685e72184$export$b04be29aa201d4f5 = /* @__PURE__ */ (0, import_react67.forwardRef)((props, forwardedRef) => {
    const { htmlFor, id: idProp, ...labelProps } = props;
    const controlRef = (0, import_react67.useRef)(null);
    const ref = (0, import_react67.useRef)(null);
    const composedRefs = $6ed0406888f73fc4$export$c7b2cbe3552a0d05(forwardedRef, ref);
    const id = $1746a345f3d73bb7$export$f680877a34711e37(idProp);
    (0, import_react67.useEffect)(() => {
      if (htmlFor) {
        const element = document.getElementById(htmlFor);
        const label = ref.current;
        if (label && element) {
          const getAriaLabel = () => element.getAttribute("aria-labelledby");
          const ariaLabelledBy1 = [
            id,
            getAriaLabel()
          ].filter(Boolean).join(" ");
          element.setAttribute("aria-labelledby", ariaLabelledBy1);
          controlRef.current = element;
          return () => {
            var _getAriaLabel;
            const ariaLabelledBy = (_getAriaLabel = getAriaLabel()) === null || _getAriaLabel === void 0 ? void 0 : _getAriaLabel.replace(id, "");
            if (ariaLabelledBy === "")
              element.removeAttribute("aria-labelledby");
            else if (ariaLabelledBy)
              element.setAttribute("aria-labelledby", ariaLabelledBy);
          };
        }
      }
    }, [
      id,
      htmlFor
    ]);
    return /* @__PURE__ */ (0, import_react67.createElement)($b73a6c6685e72184$var$LabelProvider2, {
      id,
      controlRef
    }, /* @__PURE__ */ (0, import_react67.createElement)($8927f6f2acc4f386$export$250ffa63cdc0d034.span, _extends({
      role: "label",
      id
    }, labelProps, {
      ref: composedRefs,
      onMouseDown: (event) => {
        var _props$onMouseDown;
        (_props$onMouseDown = props.onMouseDown) === null || _props$onMouseDown === void 0 || _props$onMouseDown.call(props, event);
        if (!event.defaultPrevented && event.detail > 1)
          event.preventDefault();
      },
      onClick: (event) => {
        var _props$onClick;
        (_props$onClick = props.onClick) === null || _props$onClick === void 0 || _props$onClick.call(props, event);
        if (!controlRef.current || event.defaultPrevented)
          return;
        const isClickingControl = controlRef.current.contains(event.target);
        const isUserClick = event.isTrusted === true;
        if (!isClickingControl && isUserClick) {
          controlRef.current.click();
          controlRef.current.focus();
        }
      }
    })));
  });
  var $b73a6c6685e72184$export$feddbbf47baabdb92 = (element) => {
    const context = $b73a6c6685e72184$var$useLabelContextImpl2("LabelConsumer");
    const { controlRef } = context;
    (0, import_react67.useEffect)(() => {
      if (element)
        controlRef.current = element;
    }, [
      element,
      controlRef
    ]);
    return context.id;
  };
  var $b73a6c6685e72184$export$be92b6f5f03c0fe9 = $b73a6c6685e72184$export$b04be29aa201d4f5;

  // node_modules/@radix-ui/react-roving-focus/dist/index.module.js
  var import_react70 = __toESM(require_react());

  // node_modules/@radix-ui/react-collection/dist/index.module.js
  var import_react68 = __toESM(require_react());
  function $parcel$export23(e4, n4, v5, s5) {
    Object.defineProperty(e4, n4, { get: v5, set: s5, enumerable: true, configurable: true });
  }
  var $e02a7d9cb1dc128c$exports = {};
  $parcel$export23($e02a7d9cb1dc128c$exports, "createCollection", () => $e02a7d9cb1dc128c$export$c74125a8e3af6bb22);
  function $e02a7d9cb1dc128c$export$c74125a8e3af6bb22(name) {
    const PROVIDER_NAME = name + "CollectionProvider";
    const [createCollectionContext, createCollectionScope] = $c512c27ab02ef895$export$50c7b4e9d9f19c1(PROVIDER_NAME);
    const [CollectionProviderImpl, useCollectionContext] = createCollectionContext(PROVIDER_NAME, {
      collectionRef: {
        current: null
      },
      itemMap: /* @__PURE__ */ new Map()
    });
    const CollectionProvider = (props) => {
      const { scope, children } = props;
      const ref = import_react68.default.useRef(null);
      const itemMap = import_react68.default.useRef(/* @__PURE__ */ new Map()).current;
      return /* @__PURE__ */ import_react68.default.createElement(CollectionProviderImpl, {
        scope,
        itemMap,
        collectionRef: ref
      }, children);
    };
    /* @__PURE__ */ Object.assign(CollectionProvider, {
      displayName: PROVIDER_NAME
    });
    const COLLECTION_SLOT_NAME = name + "CollectionSlot";
    const CollectionSlot = /* @__PURE__ */ import_react68.default.forwardRef((props, forwardedRef) => {
      const { scope, children } = props;
      const context = useCollectionContext(COLLECTION_SLOT_NAME, scope);
      const composedRefs = $6ed0406888f73fc4$export$c7b2cbe3552a0d05(forwardedRef, context.collectionRef);
      return /* @__PURE__ */ import_react68.default.createElement($5e63c961fc1ce211$export$8c6ed5c666ac1360, {
        ref: composedRefs
      }, children);
    });
    /* @__PURE__ */ Object.assign(CollectionSlot, {
      displayName: COLLECTION_SLOT_NAME
    });
    const ITEM_SLOT_NAME = name + "CollectionItemSlot";
    const ITEM_DATA_ATTR = "data-radix-collection-item";
    const CollectionItemSlot = /* @__PURE__ */ import_react68.default.forwardRef((props, forwardedRef) => {
      const { scope, children, ...itemData } = props;
      const ref = import_react68.default.useRef(null);
      const composedRefs = $6ed0406888f73fc4$export$c7b2cbe3552a0d05(forwardedRef, ref);
      const context = useCollectionContext(ITEM_SLOT_NAME, scope);
      import_react68.default.useEffect(() => {
        context.itemMap.set(ref, {
          ref,
          ...itemData
        });
        return () => void context.itemMap.delete(ref);
      });
      return /* @__PURE__ */ import_react68.default.createElement($5e63c961fc1ce211$export$8c6ed5c666ac1360, {
        [ITEM_DATA_ATTR]: "",
        ref: composedRefs
      }, children);
    });
    /* @__PURE__ */ Object.assign(CollectionItemSlot, {
      displayName: ITEM_SLOT_NAME
    });
    function useCollection(scope) {
      const context = useCollectionContext(name + "CollectionConsumer", scope);
      const getItems = import_react68.default.useCallback(() => {
        const collectionNode = context.collectionRef.current;
        if (!collectionNode)
          return [];
        const orderedNodes = Array.from(collectionNode.querySelectorAll(`[${ITEM_DATA_ATTR}]`));
        const items = Array.from(context.itemMap.values());
        const orderedItems = items.sort((a3, b3) => orderedNodes.indexOf(a3.ref.current) - orderedNodes.indexOf(b3.ref.current));
        return orderedItems;
      }, [
        context.collectionRef,
        context.itemMap
      ]);
      return getItems;
    }
    return [
      {
        Provider: CollectionProvider,
        Slot: CollectionSlot,
        ItemSlot: CollectionItemSlot
      },
      useCollection,
      createCollectionScope
    ];
  }

  // node_modules/@radix-ui/react-direction/dist/index.module.js
  var import_react69 = __toESM(require_react());
  function $parcel$export24(e4, n4, v5, s5) {
    Object.defineProperty(e4, n4, { get: v5, set: s5, enumerable: true, configurable: true });
  }
  var $f631663db3294ace$exports = {};
  $parcel$export24($f631663db3294ace$exports, "DirectionProvider", () => $f631663db3294ace$export$c760c09fdd558351);
  $parcel$export24($f631663db3294ace$exports, "useDirection", () => $f631663db3294ace$export$b39126d51d94e6f32);
  $parcel$export24($f631663db3294ace$exports, "Provider", () => $f631663db3294ace$export$2881499e37b75b9a);
  var $f631663db3294ace$var$DirectionContext2 = /* @__PURE__ */ (0, import_react69.createContext)(void 0);
  var $f631663db3294ace$export$c760c09fdd558351 = (props) => {
    const { dir, children } = props;
    return /* @__PURE__ */ (0, import_react69.createElement)($f631663db3294ace$var$DirectionContext2.Provider, {
      value: dir
    }, children);
  };
  function $f631663db3294ace$export$b39126d51d94e6f32(localDir) {
    const globalDir = (0, import_react69.useContext)($f631663db3294ace$var$DirectionContext2);
    return localDir || globalDir || "ltr";
  }
  var $f631663db3294ace$export$2881499e37b75b9a = $f631663db3294ace$export$c760c09fdd558351;

  // node_modules/@radix-ui/react-roving-focus/dist/index.module.js
  function $parcel$export25(e4, n4, v5, s5) {
    Object.defineProperty(e4, n4, { get: v5, set: s5, enumerable: true, configurable: true });
  }
  var $d7bdfb9eb0fdf311$exports = {};
  $parcel$export25($d7bdfb9eb0fdf311$exports, "createRovingFocusGroupScope", () => $d7bdfb9eb0fdf311$export$c7109489551a4f4);
  $parcel$export25($d7bdfb9eb0fdf311$exports, "RovingFocusGroup", () => $d7bdfb9eb0fdf311$export$8699f7c8af148338);
  $parcel$export25($d7bdfb9eb0fdf311$exports, "RovingFocusGroupItem", () => $d7bdfb9eb0fdf311$export$ab9df7c53fe8454);
  $parcel$export25($d7bdfb9eb0fdf311$exports, "Root", () => $d7bdfb9eb0fdf311$export$be92b6f5f03c0fe9);
  $parcel$export25($d7bdfb9eb0fdf311$exports, "Item", () => $d7bdfb9eb0fdf311$export$6d08773d2e66f8f2);
  var $d7bdfb9eb0fdf311$var$ENTRY_FOCUS = "rovingFocusGroup.onEntryFocus";
  var $d7bdfb9eb0fdf311$var$EVENT_OPTIONS = {
    bubbles: false,
    cancelable: true
  };
  var $d7bdfb9eb0fdf311$var$GROUP_NAME = "RovingFocusGroup";
  var [$d7bdfb9eb0fdf311$var$Collection, $d7bdfb9eb0fdf311$var$useCollection, $d7bdfb9eb0fdf311$var$createCollectionScope] = $e02a7d9cb1dc128c$export$c74125a8e3af6bb22($d7bdfb9eb0fdf311$var$GROUP_NAME);
  var [$d7bdfb9eb0fdf311$var$createRovingFocusGroupContext, $d7bdfb9eb0fdf311$export$c7109489551a4f4] = $c512c27ab02ef895$export$50c7b4e9d9f19c1($d7bdfb9eb0fdf311$var$GROUP_NAME, [
    $d7bdfb9eb0fdf311$var$createCollectionScope
  ]);
  var [$d7bdfb9eb0fdf311$var$RovingFocusProvider, $d7bdfb9eb0fdf311$var$useRovingFocusContext] = $d7bdfb9eb0fdf311$var$createRovingFocusGroupContext($d7bdfb9eb0fdf311$var$GROUP_NAME);
  var $d7bdfb9eb0fdf311$export$8699f7c8af148338 = /* @__PURE__ */ (0, import_react70.forwardRef)((props, forwardedRef) => {
    return /* @__PURE__ */ (0, import_react70.createElement)($d7bdfb9eb0fdf311$var$Collection.Provider, {
      scope: props.__scopeRovingFocusGroup
    }, /* @__PURE__ */ (0, import_react70.createElement)($d7bdfb9eb0fdf311$var$Collection.Slot, {
      scope: props.__scopeRovingFocusGroup
    }, /* @__PURE__ */ (0, import_react70.createElement)($d7bdfb9eb0fdf311$var$RovingFocusGroupImpl, _extends({}, props, {
      ref: forwardedRef
    }))));
  });
  var $d7bdfb9eb0fdf311$var$RovingFocusGroupImpl = /* @__PURE__ */ (0, import_react70.forwardRef)((props, forwardedRef) => {
    const { __scopeRovingFocusGroup, orientation, loop = false, dir, currentTabStopId: currentTabStopIdProp, defaultCurrentTabStopId, onCurrentTabStopIdChange, onEntryFocus, ...groupProps } = props;
    const ref = (0, import_react70.useRef)(null);
    const composedRefs = $6ed0406888f73fc4$export$c7b2cbe3552a0d05(forwardedRef, ref);
    const direction = $f631663db3294ace$export$b39126d51d94e6f32(dir);
    const [currentTabStopId = null, setCurrentTabStopId] = $71cd76cc60e0454e$export$6f32135080cb4c3({
      prop: currentTabStopIdProp,
      defaultProp: defaultCurrentTabStopId,
      onChange: onCurrentTabStopIdChange
    });
    const [isTabbingBackOut, setIsTabbingBackOut] = (0, import_react70.useState)(false);
    const handleEntryFocus = $b1b2314f5f9a1d84$export$25bec8c6f54ee79a(onEntryFocus);
    const getItems = $d7bdfb9eb0fdf311$var$useCollection(__scopeRovingFocusGroup);
    const isClickFocusRef = (0, import_react70.useRef)(false);
    (0, import_react70.useEffect)(() => {
      const node = ref.current;
      if (node) {
        node.addEventListener($d7bdfb9eb0fdf311$var$ENTRY_FOCUS, handleEntryFocus);
        return () => node.removeEventListener($d7bdfb9eb0fdf311$var$ENTRY_FOCUS, handleEntryFocus);
      }
    }, [
      handleEntryFocus
    ]);
    return /* @__PURE__ */ (0, import_react70.createElement)($d7bdfb9eb0fdf311$var$RovingFocusProvider, {
      scope: __scopeRovingFocusGroup,
      orientation,
      dir: direction,
      loop,
      currentTabStopId,
      onItemFocus: (0, import_react70.useCallback)((tabStopId) => setCurrentTabStopId(tabStopId), [
        setCurrentTabStopId
      ]),
      onItemShiftTab: (0, import_react70.useCallback)(() => setIsTabbingBackOut(true), [])
    }, /* @__PURE__ */ (0, import_react70.createElement)($8927f6f2acc4f386$export$250ffa63cdc0d034.div, _extends({
      tabIndex: isTabbingBackOut ? -1 : 0,
      "data-orientation": orientation
    }, groupProps, {
      ref: composedRefs,
      style: {
        outline: "none",
        ...props.style
      },
      onMouseDown: composeEventHandlers(props.onMouseDown, () => {
        isClickFocusRef.current = true;
      }),
      onFocus: composeEventHandlers(props.onFocus, (event) => {
        const isKeyboardFocus = !isClickFocusRef.current;
        if (event.target === event.currentTarget && isKeyboardFocus && !isTabbingBackOut) {
          const entryFocusEvent = new Event($d7bdfb9eb0fdf311$var$ENTRY_FOCUS, $d7bdfb9eb0fdf311$var$EVENT_OPTIONS);
          event.currentTarget.dispatchEvent(entryFocusEvent);
          if (!entryFocusEvent.defaultPrevented) {
            const items = getItems().filter((item) => item.focusable);
            const activeItem = items.find((item) => item.active);
            const currentItem = items.find((item) => item.id === currentTabStopId);
            const candidateItems = [
              activeItem,
              currentItem,
              ...items
            ].filter(Boolean);
            const candidateNodes = candidateItems.map((item) => item.ref.current);
            $d7bdfb9eb0fdf311$var$focusFirst(candidateNodes);
          }
        }
        isClickFocusRef.current = false;
      }),
      onBlur: composeEventHandlers(props.onBlur, () => setIsTabbingBackOut(false))
    })));
  });
  var $d7bdfb9eb0fdf311$var$ITEM_NAME = "RovingFocusGroupItem";
  var $d7bdfb9eb0fdf311$export$ab9df7c53fe8454 = /* @__PURE__ */ (0, import_react70.forwardRef)((props, forwardedRef) => {
    const { __scopeRovingFocusGroup, focusable = true, active = false, ...itemProps } = props;
    const id = $1746a345f3d73bb7$export$f680877a34711e37();
    const context = $d7bdfb9eb0fdf311$var$useRovingFocusContext($d7bdfb9eb0fdf311$var$ITEM_NAME, __scopeRovingFocusGroup);
    const isCurrentTabStop = context.currentTabStopId === id;
    const getItems = $d7bdfb9eb0fdf311$var$useCollection(__scopeRovingFocusGroup);
    return /* @__PURE__ */ (0, import_react70.createElement)($d7bdfb9eb0fdf311$var$Collection.ItemSlot, {
      scope: __scopeRovingFocusGroup,
      id,
      focusable,
      active
    }, /* @__PURE__ */ (0, import_react70.createElement)($8927f6f2acc4f386$export$250ffa63cdc0d034.span, _extends({
      tabIndex: isCurrentTabStop ? 0 : -1,
      "data-orientation": context.orientation
    }, itemProps, {
      ref: forwardedRef,
      onMouseDown: composeEventHandlers(props.onMouseDown, (event) => {
        if (!focusable)
          event.preventDefault();
        else
          context.onItemFocus(id);
      }),
      onFocus: composeEventHandlers(props.onFocus, () => context.onItemFocus(id)),
      onKeyDown: composeEventHandlers(props.onKeyDown, (event) => {
        if (event.key === "Tab" && event.shiftKey) {
          context.onItemShiftTab();
          return;
        }
        if (event.target !== event.currentTarget)
          return;
        const focusIntent = $d7bdfb9eb0fdf311$var$getFocusIntent(event, context.orientation, context.dir);
        if (focusIntent !== void 0) {
          event.preventDefault();
          const items = getItems().filter((item) => item.focusable);
          let candidateNodes = items.map((item) => item.ref.current);
          if (focusIntent === "last")
            candidateNodes.reverse();
          else if (focusIntent === "prev" || focusIntent === "next") {
            if (focusIntent === "prev")
              candidateNodes.reverse();
            const currentIndex = candidateNodes.indexOf(event.currentTarget);
            candidateNodes = context.loop ? $d7bdfb9eb0fdf311$var$wrapArray(candidateNodes, currentIndex + 1) : candidateNodes.slice(currentIndex + 1);
          }
          setTimeout(() => $d7bdfb9eb0fdf311$var$focusFirst(candidateNodes));
        }
      })
    })));
  });
  var $d7bdfb9eb0fdf311$var$MAP_KEY_TO_FOCUS_INTENT = {
    ArrowLeft: "prev",
    ArrowUp: "prev",
    ArrowRight: "next",
    ArrowDown: "next",
    PageUp: "first",
    Home: "first",
    PageDown: "last",
    End: "last"
  };
  function $d7bdfb9eb0fdf311$var$getDirectionAwareKey(key, dir) {
    if (dir !== "rtl")
      return key;
    return key === "ArrowLeft" ? "ArrowRight" : key === "ArrowRight" ? "ArrowLeft" : key;
  }
  function $d7bdfb9eb0fdf311$var$getFocusIntent(event, orientation, dir) {
    const key = $d7bdfb9eb0fdf311$var$getDirectionAwareKey(event.key, dir);
    if (orientation === "vertical" && [
      "ArrowLeft",
      "ArrowRight"
    ].includes(key))
      return void 0;
    if (orientation === "horizontal" && [
      "ArrowUp",
      "ArrowDown"
    ].includes(key))
      return void 0;
    return $d7bdfb9eb0fdf311$var$MAP_KEY_TO_FOCUS_INTENT[key];
  }
  function $d7bdfb9eb0fdf311$var$focusFirst(candidates) {
    const PREVIOUSLY_FOCUSED_ELEMENT = document.activeElement;
    for (const candidate of candidates) {
      if (candidate === PREVIOUSLY_FOCUSED_ELEMENT)
        return;
      candidate.focus();
      if (document.activeElement !== PREVIOUSLY_FOCUSED_ELEMENT)
        return;
    }
  }
  function $d7bdfb9eb0fdf311$var$wrapArray(array, startIndex) {
    return array.map((_3, index) => array[(startIndex + index) % array.length]);
  }
  var $d7bdfb9eb0fdf311$export$be92b6f5f03c0fe9 = $d7bdfb9eb0fdf311$export$8699f7c8af148338;
  var $d7bdfb9eb0fdf311$export$6d08773d2e66f8f2 = $d7bdfb9eb0fdf311$export$ab9df7c53fe8454;

  // node_modules/@radix-ui/react-use-previous/dist/index.module.js
  var import_react71 = __toESM(require_react());
  function $parcel$export26(e4, n4, v5, s5) {
    Object.defineProperty(e4, n4, { get: v5, set: s5, enumerable: true, configurable: true });
  }
  var $010c2913dbd2fe3d$exports = {};
  $parcel$export26($010c2913dbd2fe3d$exports, "usePrevious", () => $010c2913dbd2fe3d$export$5cae361ad82dce8b2);
  function $010c2913dbd2fe3d$export$5cae361ad82dce8b2(value) {
    const ref = (0, import_react71.useRef)({
      value,
      previous: value
    });
    return (0, import_react71.useMemo)(() => {
      if (ref.current.value !== value) {
        ref.current.previous = ref.current.value;
        ref.current.value = value;
      }
      return ref.current.previous;
    }, [
      value
    ]);
  }

  // node_modules/@radix-ui/react-radio-group/dist/index.module.js
  function $parcel$export27(e4, n4, v5, s5) {
    Object.defineProperty(e4, n4, { get: v5, set: s5, enumerable: true, configurable: true });
  }
  var $f99a8c78507165f7$exports = {};
  $parcel$export27($f99a8c78507165f7$exports, "createRadioGroupScope", () => $f99a8c78507165f7$export$c547093f11b76da2);
  $parcel$export27($f99a8c78507165f7$exports, "RadioGroup", () => $f99a8c78507165f7$export$a98f0dcb43a68a25);
  $parcel$export27($f99a8c78507165f7$exports, "RadioGroupItem", () => $f99a8c78507165f7$export$9f866c100ef519e4);
  $parcel$export27($f99a8c78507165f7$exports, "RadioGroupIndicator", () => $f99a8c78507165f7$export$5fb54c671a65c88);
  $parcel$export27($f99a8c78507165f7$exports, "Root", () => $f99a8c78507165f7$export$be92b6f5f03c0fe9);
  $parcel$export27($f99a8c78507165f7$exports, "Item", () => $f99a8c78507165f7$export$6d08773d2e66f8f2);
  $parcel$export27($f99a8c78507165f7$exports, "Indicator", () => $f99a8c78507165f7$export$adb584737d712b70);
  var $ce77a8961b41be9e$var$RADIO_NAME = "Radio";
  var [$ce77a8961b41be9e$var$createRadioContext, $ce77a8961b41be9e$export$67d2296460f1b002] = $c512c27ab02ef895$export$50c7b4e9d9f19c1($ce77a8961b41be9e$var$RADIO_NAME);
  var [$ce77a8961b41be9e$var$RadioProvider, $ce77a8961b41be9e$var$useRadioContext] = $ce77a8961b41be9e$var$createRadioContext($ce77a8961b41be9e$var$RADIO_NAME);
  var $ce77a8961b41be9e$export$d7b12c4107be0d61 = /* @__PURE__ */ (0, import_react72.forwardRef)((props, forwardedRef) => {
    const { __scopeRadio, "aria-labelledby": ariaLabelledby, name, checked = false, required, disabled, value = "on", onCheck, ...radioProps } = props;
    const [button, setButton] = (0, import_react72.useState)(null);
    const composedRefs = $6ed0406888f73fc4$export$c7b2cbe3552a0d05(forwardedRef, (node) => setButton(node));
    const labelId = $b73a6c6685e72184$export$feddbbf47baabdb92(button);
    const labelledBy = ariaLabelledby || labelId;
    const hasConsumerStoppedPropagationRef = (0, import_react72.useRef)(false);
    const isFormControl = button ? Boolean(button.closest("form")) : true;
    return /* @__PURE__ */ (0, import_react72.createElement)($ce77a8961b41be9e$var$RadioProvider, {
      scope: __scopeRadio,
      checked,
      disabled
    }, /* @__PURE__ */ (0, import_react72.createElement)($8927f6f2acc4f386$export$250ffa63cdc0d034.button, _extends({
      type: "button",
      role: "radio",
      "aria-checked": checked,
      "aria-labelledby": labelledBy,
      "data-state": $ce77a8961b41be9e$var$getState(checked),
      "data-disabled": disabled ? "" : void 0,
      disabled,
      value
    }, radioProps, {
      ref: composedRefs,
      onClick: composeEventHandlers(props.onClick, (event) => {
        if (!checked)
          onCheck === null || onCheck === void 0 || onCheck();
        if (isFormControl) {
          hasConsumerStoppedPropagationRef.current = event.isPropagationStopped();
          if (!hasConsumerStoppedPropagationRef.current)
            event.stopPropagation();
        }
      })
    })), isFormControl && /* @__PURE__ */ (0, import_react72.createElement)($ce77a8961b41be9e$var$BubbleInput, {
      control: button,
      bubbles: !hasConsumerStoppedPropagationRef.current,
      name,
      value,
      checked,
      required,
      disabled,
      style: {
        transform: "translateX(-100%)"
      }
    }));
  });
  var $ce77a8961b41be9e$var$INDICATOR_NAME = "RadioIndicator";
  var $ce77a8961b41be9e$export$d35a9ffa9a04f9e7 = /* @__PURE__ */ (0, import_react72.forwardRef)((props, forwardedRef) => {
    const { __scopeRadio, forceMount, ...indicatorProps } = props;
    const context = $ce77a8961b41be9e$var$useRadioContext($ce77a8961b41be9e$var$INDICATOR_NAME, __scopeRadio);
    return /* @__PURE__ */ (0, import_react72.createElement)($921a889cee6df7e8$export$99c2b779aa4e8b8b, {
      present: forceMount || context.checked
    }, /* @__PURE__ */ (0, import_react72.createElement)($8927f6f2acc4f386$export$250ffa63cdc0d034.span, _extends({
      "data-state": $ce77a8961b41be9e$var$getState(context.checked),
      "data-disabled": context.disabled ? "" : void 0
    }, indicatorProps, {
      ref: forwardedRef
    })));
  });
  var $ce77a8961b41be9e$var$BubbleInput = (props) => {
    const { control, checked, bubbles = true, ...inputProps } = props;
    const ref = (0, import_react72.useRef)(null);
    const prevChecked = $010c2913dbd2fe3d$export$5cae361ad82dce8b2(checked);
    const controlSize = $db6c3485150b8e66$export$1ab7ae714698c4b8(control);
    (0, import_react72.useEffect)(() => {
      const input = ref.current;
      const inputProto = window.HTMLInputElement.prototype;
      const descriptor = Object.getOwnPropertyDescriptor(inputProto, "checked");
      const setChecked = descriptor.set;
      if (prevChecked !== checked && setChecked) {
        const event = new Event("click", {
          bubbles
        });
        setChecked.call(input, checked);
        input.dispatchEvent(event);
      }
    }, [
      prevChecked,
      checked,
      bubbles
    ]);
    return /* @__PURE__ */ (0, import_react72.createElement)("input", _extends({
      type: "radio",
      "aria-hidden": true,
      defaultChecked: checked
    }, inputProps, {
      tabIndex: -1,
      ref,
      style: {
        ...props.style,
        ...controlSize,
        position: "absolute",
        pointerEvents: "none",
        opacity: 0,
        margin: 0
      }
    }));
  };
  function $ce77a8961b41be9e$var$getState(checked) {
    return checked ? "checked" : "unchecked";
  }
  var $f99a8c78507165f7$var$ARROW_KEYS = [
    "ArrowUp",
    "ArrowDown",
    "ArrowLeft",
    "ArrowRight"
  ];
  var $f99a8c78507165f7$var$RADIO_GROUP_NAME = "RadioGroup";
  var [$f99a8c78507165f7$var$createRadioGroupContet, $f99a8c78507165f7$export$c547093f11b76da2] = $c512c27ab02ef895$export$50c7b4e9d9f19c1($f99a8c78507165f7$var$RADIO_GROUP_NAME, [
    $d7bdfb9eb0fdf311$export$c7109489551a4f4,
    $ce77a8961b41be9e$export$67d2296460f1b002
  ]);
  var $f99a8c78507165f7$var$useRovingFocusGroupScope = $d7bdfb9eb0fdf311$export$c7109489551a4f4();
  var $f99a8c78507165f7$var$useRadioScope = $ce77a8961b41be9e$export$67d2296460f1b002();
  var [$f99a8c78507165f7$var$RadioGroupProvider, $f99a8c78507165f7$var$useRadioGroupContext] = $f99a8c78507165f7$var$createRadioGroupContet($f99a8c78507165f7$var$RADIO_GROUP_NAME);
  var $f99a8c78507165f7$export$a98f0dcb43a68a25 = /* @__PURE__ */ (0, import_react72.forwardRef)((props, forwardedRef) => {
    const { __scopeRadioGroup, name, "aria-labelledby": ariaLabelledby, defaultValue: defaultValue2, value: valueProp, required = false, orientation, dir, loop = true, onValueChange, ...groupProps } = props;
    const labelId = $b73a6c6685e72184$export$feddbbf47baabdb92();
    const labelledBy = ariaLabelledby || labelId;
    const rovingFocusGroupScope = $f99a8c78507165f7$var$useRovingFocusGroupScope(__scopeRadioGroup);
    const direction = $f631663db3294ace$export$b39126d51d94e6f32(dir);
    const [value, setValue] = $71cd76cc60e0454e$export$6f32135080cb4c3({
      prop: valueProp,
      defaultProp: defaultValue2,
      onChange: onValueChange
    });
    return /* @__PURE__ */ (0, import_react72.createElement)($f99a8c78507165f7$var$RadioGroupProvider, {
      scope: __scopeRadioGroup,
      name,
      required,
      value,
      onValueChange: setValue
    }, /* @__PURE__ */ (0, import_react72.createElement)($d7bdfb9eb0fdf311$export$be92b6f5f03c0fe9, _extends({
      asChild: true
    }, rovingFocusGroupScope, {
      orientation,
      dir: direction,
      loop
    }), /* @__PURE__ */ (0, import_react72.createElement)($8927f6f2acc4f386$export$250ffa63cdc0d034.div, _extends({
      role: "radiogroup",
      "aria-orientation": orientation,
      "aria-labelledby": labelledBy,
      dir: direction
    }, groupProps, {
      ref: forwardedRef
    }))));
  });
  var $f99a8c78507165f7$var$ITEM_NAME = "RadioGroupItem";
  var $f99a8c78507165f7$export$9f866c100ef519e4 = /* @__PURE__ */ (0, import_react72.forwardRef)((props, forwardedRef) => {
    const { __scopeRadioGroup, disabled, ...itemProps } = props;
    const context = $f99a8c78507165f7$var$useRadioGroupContext($f99a8c78507165f7$var$ITEM_NAME, __scopeRadioGroup);
    const rovingFocusGroupScope = $f99a8c78507165f7$var$useRovingFocusGroupScope(__scopeRadioGroup);
    const radioScope = $f99a8c78507165f7$var$useRadioScope(__scopeRadioGroup);
    const ref = (0, import_react72.useRef)(null);
    const composedRefs = $6ed0406888f73fc4$export$c7b2cbe3552a0d05(forwardedRef, ref);
    const checked = context.value === itemProps.value;
    const isArrowKeyPressedRef = (0, import_react72.useRef)(false);
    (0, import_react72.useEffect)(() => {
      const handleKeyDown = (event) => {
        if ($f99a8c78507165f7$var$ARROW_KEYS.includes(event.key))
          isArrowKeyPressedRef.current = true;
      };
      const handleKeyUp = () => isArrowKeyPressedRef.current = false;
      document.addEventListener("keydown", handleKeyDown);
      document.addEventListener("keyup", handleKeyUp);
      return () => {
        document.removeEventListener("keydown", handleKeyDown);
        document.removeEventListener("keyup", handleKeyUp);
      };
    }, []);
    return /* @__PURE__ */ (0, import_react72.createElement)($d7bdfb9eb0fdf311$export$6d08773d2e66f8f2, _extends({
      asChild: true
    }, rovingFocusGroupScope, {
      focusable: !disabled,
      active: checked
    }), /* @__PURE__ */ (0, import_react72.createElement)($ce77a8961b41be9e$export$d7b12c4107be0d61, _extends({
      disabled,
      required: context.required,
      checked
    }, radioScope, itemProps, {
      name: context.name,
      ref: composedRefs,
      onCheck: () => context.onValueChange(itemProps.value),
      onKeyDown: composeEventHandlers((event) => {
        if (event.key === "Enter")
          event.preventDefault();
      }),
      onFocus: composeEventHandlers(itemProps.onFocus, () => {
        var _ref$current;
        if (isArrowKeyPressedRef.current)
          (_ref$current = ref.current) === null || _ref$current === void 0 || _ref$current.click();
      })
    })));
  });
  var $f99a8c78507165f7$export$5fb54c671a65c88 = /* @__PURE__ */ (0, import_react72.forwardRef)((props, forwardedRef) => {
    const { __scopeRadioGroup, ...indicatorProps } = props;
    const radioScope = $f99a8c78507165f7$var$useRadioScope(__scopeRadioGroup);
    return /* @__PURE__ */ (0, import_react72.createElement)($ce77a8961b41be9e$export$d35a9ffa9a04f9e7, _extends({}, radioScope, indicatorProps, {
      ref: forwardedRef
    }));
  });
  var $f99a8c78507165f7$export$be92b6f5f03c0fe9 = $f99a8c78507165f7$export$a98f0dcb43a68a25;
  var $f99a8c78507165f7$export$6d08773d2e66f8f2 = $f99a8c78507165f7$export$9f866c100ef519e4;
  var $f99a8c78507165f7$export$adb584737d712b70 = $f99a8c78507165f7$export$5fb54c671a65c88;

  // src/components/Media/Media.styled.tsx
  var Group = styled($f99a8c78507165f7$export$be92b6f5f03c0fe9, {
    display: "flex",
    flexDirection: "row",
    flexGrow: "1",
    padding: "1.618rem",
    overflowX: "scroll",
    position: "relative",
    zIndex: "0"
  });

  // src/components/Media/Thumbnail.tsx
  var import_react73 = __toESM(require_react());

  // src/services/utils.ts
  var cleanTime = (standardNotation) => {
    var array = standardNotation.toString().split(":");
    var hours = Math.ceil(parseInt(array[0]));
    var minutes = Math.ceil(parseInt(array[1]));
    var seconds = zeroPad(Math.ceil(parseInt(array[2])), 2);
    let formattedMinutes = hours !== 0 && minutes < 10 ? (minutes + "").padStart(2, "0") : minutes;
    let time = `${formattedMinutes}:${seconds}`;
    if (hours !== 0) {
      time = `${hours}:${time}`;
    }
    return time;
  };
  var convertTime = (duration) => {
    const standardNotation = new Date(duration * 1e3).toISOString().substr(11, 8);
    return cleanTime(standardNotation);
  };
  var zeroPad = (num, places) => String(num).padStart(places, "0");

  // src/components/Media/Thumbnail.styled.tsx
  var Type = styled("span", {
    display: "flex"
  });
  var Spacer = styled("span", {
    display: "flex",
    width: "1.2111rem",
    height: "0.7222rem"
  });
  var Duration = styled("span", {
    display: "inline-flex",
    marginLeft: "5px",
    marginBottom: "-1px"
  });
  var Item = styled($f99a8c78507165f7$export$6d08773d2e66f8f2, {
    display: "flex",
    flexShrink: "0",
    margin: "0 1.618rem 0 0",
    padding: "0",
    cursor: "pointer",
    background: "none",
    border: "none",
    fontFamily: "inherit",
    lineHeight: "1.25em",
    fontSize: "1rem",
    textAlign: "left",
    "&:last-child": {
      marginRight: "1rem"
    },
    figure: {
      margin: "0",
      width: "161.8px",
      "> div": {
        position: "relative",
        display: "flex",
        backgroundColor: "$secondaryAlt",
        width: "inherit",
        height: "100px",
        overflow: "hidden",
        borderRadius: "3px",
        transition: "$all",
        img: {
          width: "100%",
          height: "100%",
          objectFit: "cover",
          filter: "blur(0)",
          transform: "scale3d(1, 1, 1)",
          transition: "$all",
          color: "transparent"
        },
        [`& ${Type}`]: {
          position: "absolute",
          right: "0",
          bottom: "0",
          [`& ${Tag}`]: {
            margin: "0",
            paddingLeft: "0",
            fontSize: "0.7222rem",
            backgroundColor: "#000d",
            color: "$secondary",
            fill: "$secondary",
            borderBottomLeftRadius: "0",
            borderTopRightRadius: "0"
          }
        }
      },
      figcaption: {
        marginTop: "0.5rem",
        color: "$primaryMuted",
        fontWeight: "400",
        fontSize: "0.8333rem",
        display: "-webkit-box",
        overflow: "hidden",
        MozBoxOrient: "vertical",
        WebkitLineClamp: "5",
        "@sm": {
          fontSize: "0.8333rem"
        }
      }
    },
    "&[aria-checked='true']": {
      figure: {
        "> div": {
          backgroundColor: "$primaryAlt",
          "&::before": {
            position: "absolute",
            zIndex: "1",
            color: "$secondaryMuted",
            content: "Active Item",
            textTransform: "uppercase",
            fontWeight: "700",
            fontSize: "0.6111rem",
            letterSpacing: "0.03rem",
            display: "flex",
            width: "100%",
            height: "100%",
            flexDirection: "column",
            justifyContent: "center",
            textAlign: "center",
            textShadow: "5px 5px 5px #0003"
          },
          img: {
            opacity: "0.3",
            transform: "scale3d(1.1, 1.1, 1.1)",
            filter: "blur(2px)"
          },
          [`& ${Type}`]: {
            [`& ${Tag}`]: {
              backgroundColor: "$accent"
            }
          }
        }
      },
      figcaption: {
        fontWeight: "700",
        color: "$primary"
      }
    }
  });

  // src/components/Media/Thumbnail.tsx
  var IconPath = ({ type }) => {
    switch (type) {
      case "Sound":
        return /* @__PURE__ */ import_react73.default.createElement(Icon.Audio, null);
      case "Image":
        return /* @__PURE__ */ import_react73.default.createElement(Icon.Image, null);
      case "Video":
        return /* @__PURE__ */ import_react73.default.createElement(Icon.Video, null);
      default:
        return /* @__PURE__ */ import_react73.default.createElement(Icon.Image, null);
    }
  };
  var Thumbnail = ({
    canvas,
    canvasIndex,
    isActive,
    thumbnail,
    type,
    handleChange
  }) => {
    const label = getLabel(canvas.label, "en");
    return /* @__PURE__ */ import_react73.default.createElement(Item, {
      "aria-checked": isActive,
      "data-testid": "media-thumbnail",
      "data-canvas": canvasIndex,
      onClick: () => handleChange(canvas.id),
      value: canvas.id
    }, /* @__PURE__ */ import_react73.default.createElement("figure", null, /* @__PURE__ */ import_react73.default.createElement("div", null, (thumbnail == null ? void 0 : thumbnail.id) && /* @__PURE__ */ import_react73.default.createElement("img", {
      src: thumbnail.id,
      alt: label
    }), /* @__PURE__ */ import_react73.default.createElement(Type, null, /* @__PURE__ */ import_react73.default.createElement(Tag, {
      isIcon: true,
      "data-testid": "thumbnail-tag"
    }, /* @__PURE__ */ import_react73.default.createElement(Spacer, null), /* @__PURE__ */ import_react73.default.createElement(Icon, {
      "aria-label": type
    }, /* @__PURE__ */ import_react73.default.createElement(IconPath, {
      type
    })), ["Video", "Sound"].includes(type) && /* @__PURE__ */ import_react73.default.createElement(Duration, null, convertTime(canvas.duration))))), /* @__PURE__ */ import_react73.default.createElement("figcaption", {
      "data-testid": "fig-caption"
    }, label)));
  };
  var Thumbnail_default = Thumbnail;

  // src/hooks/use-iiif/getResourceType.ts
  var getResourceType = (annotation) => {
    if (!annotation.body)
      return "Image";
    return annotation.body.type;
  };

  // src/components/Media/Controls.tsx
  var import_react75 = __toESM(require_react());

  // src/components/Media/Controls.styled.tsx
  var Form = styled("div", {
    position: "absolute",
    right: "1rem",
    top: "1rem",
    display: "flex",
    justifyContent: "flex-end",
    zIndex: "1"
  });
  var Input = styled("input", {
    flexGrow: "1",
    border: "none",
    backgroundColor: "$secondaryMuted",
    color: "$primary",
    marginRight: "1rem",
    height: "2rem",
    padding: "0 1rem",
    borderRadius: "2rem",
    fontFamily: "$sans",
    fontSize: "1rem",
    lineHeight: "1rem",
    boxShadow: "inset 1px 1px 2px #0003",
    "&::placeholder": {
      color: "$primaryMuted"
    }
  });
  var Button2 = styled("button", {
    display: "flex",
    background: "none",
    border: "none",
    width: "2rem !important",
    height: "2rem !important",
    padding: "0",
    margin: "0",
    fontWeight: "700",
    borderRadius: "2rem",
    backgroundColor: "$accent",
    color: "$secondary",
    cursor: "pointer",
    boxSizing: "content-box !important",
    transition: "$all",
    svg: {
      height: "60%",
      width: "60%",
      padding: "20%",
      fill: "$secondary",
      stroke: "$secondary",
      opacity: "1",
      filter: "drop-shadow(5px 5px 5px #000D)",
      boxSizing: "inherit",
      transition: "$all"
    },
    "&:disabled": {
      backgroundColor: "transparent",
      boxShadow: "none",
      svg: { opacity: "0.25" }
    }
  });
  var Direction = styled("div", {
    display: "flex",
    marginRight: "0.618rem",
    backgroundColor: "$accentAlt",
    borderRadius: "2rem",
    boxShadow: "5px 5px 5px #0003",
    color: "$secondary",
    alignItems: "center",
    "> span": {
      display: "flex",
      margin: "0 0.5rem",
      fontSize: "0.7222rem"
    }
  });
  var Wrapper2 = styled("div", {
    display: "flex",
    position: "relative",
    zIndex: "1",
    width: "100%",
    padding: "0",
    transition: "$all",
    variants: {
      isToggle: {
        true: {
          paddingTop: "2.618rem",
          [`& ${Form}`]: {
            width: "calc(100% - 2rem)",
            "@sm": {
              width: "calc(100% - 2rem)"
            }
          }
        }
      }
    }
  });

  // src/hooks/useKeyPress.ts
  var import_react74 = __toESM(require_react());
  var useKeyPress = (key, action) => {
    (0, import_react74.useEffect)(() => {
      function onKeyup(e4) {
        if (e4.key === key)
          action();
      }
      window.addEventListener("keyup", onKeyup);
      return () => window.removeEventListener("keyup", onKeyup);
    }, []);
  };
  var useKeyPress_default = useKeyPress;

  // src/components/Media/Controls.tsx
  var PreviousIcon = () => {
    return /* @__PURE__ */ import_react75.default.createElement("svg", {
      xmlns: "http://www.w3.org/2000/svg",
      viewBox: "0 0 512 512"
    }, /* @__PURE__ */ import_react75.default.createElement("title", null, "Arrow Back"), /* @__PURE__ */ import_react75.default.createElement("path", {
      fill: "none",
      stroke: "currentColor",
      strokeLinecap: "round",
      strokeLinejoin: "round",
      strokeMiterlimit: "10",
      strokeWidth: "45",
      d: "M244 400L100 256l144-144M120 256h292"
    }));
  };
  var NextIcon = () => {
    return /* @__PURE__ */ import_react75.default.createElement("svg", {
      xmlns: "http://www.w3.org/2000/svg",
      viewBox: "0 0 512 512"
    }, /* @__PURE__ */ import_react75.default.createElement("title", null, "Arrow Forward"), /* @__PURE__ */ import_react75.default.createElement("path", {
      fill: "none",
      stroke: "currentColor",
      strokeLinecap: "round",
      strokeLinejoin: "round",
      strokeMiterlimit: "10",
      strokeWidth: "45",
      d: "M268 112l144 144-144 144M392 256H100"
    }));
  };
  var CloseIcon = () => {
    return /* @__PURE__ */ import_react75.default.createElement("svg", {
      xmlns: "http://www.w3.org/2000/svg",
      viewBox: "0 0 512 512"
    }, /* @__PURE__ */ import_react75.default.createElement("title", null, "Close"), /* @__PURE__ */ import_react75.default.createElement("path", {
      d: "M289.94 256l95-95A24 24 0 00351 127l-95 95-95-95a24 24 0 00-34 34l95 95-95 95a24 24 0 1034 34l95-95 95 95a24 24 0 0034-34z"
    }));
  };
  var SearchIcon = () => {
    return /* @__PURE__ */ import_react75.default.createElement("svg", {
      xmlns: "http://www.w3.org/2000/svg",
      viewBox: "0 0 512 512"
    }, /* @__PURE__ */ import_react75.default.createElement("title", null, "Search"), /* @__PURE__ */ import_react75.default.createElement("path", {
      d: "M456.69 421.39L362.6 327.3a173.81 173.81 0 0034.84-104.58C397.44 126.38 319.06 48 222.72 48S48 126.38 48 222.72s78.38 174.72 174.72 174.72A173.81 173.81 0 00327.3 362.6l94.09 94.09a25 25 0 0035.3-35.3zM97.92 222.72a124.8 124.8 0 11124.8 124.8 124.95 124.95 0 01-124.8-124.8z"
    }));
  };
  var Controls = ({
    handleCanvasToggle,
    handleFilter,
    activeIndex,
    canvasLength
  }) => {
    const [toggleFilter, setToggleFilter] = (0, import_react75.useState)(false);
    const [isNextDisabled, setIsNextDisabled] = (0, import_react75.useState)(false);
    const [isPreviousDisabled, setIsPreviousDisabled] = (0, import_react75.useState)(false);
    (0, import_react75.useEffect)(() => {
      activeIndex === 0 ? setIsPreviousDisabled(true) : setIsPreviousDisabled(false);
      activeIndex === canvasLength - 1 ? setIsNextDisabled(true) : setIsNextDisabled(false);
    }, [activeIndex]);
    useKeyPress_default("Escape", () => {
      setToggleFilter(false);
      handleFilter("");
    });
    const handleFilterToggle = () => {
      setToggleFilter((prevToggleFilter) => !prevToggleFilter);
      handleFilter("");
    };
    const handleFilterChange = (event) => handleFilter(event.target.value);
    return /* @__PURE__ */ import_react75.default.createElement(Wrapper2, {
      isToggle: toggleFilter
    }, /* @__PURE__ */ import_react75.default.createElement(Form, null, toggleFilter && /* @__PURE__ */ import_react75.default.createElement(Input, {
      autoFocus: true,
      onChange: handleFilterChange,
      placeholder: "Search"
    }), !toggleFilter && /* @__PURE__ */ import_react75.default.createElement(Direction, null, /* @__PURE__ */ import_react75.default.createElement(Button2, {
      onClick: () => handleCanvasToggle(-1),
      disabled: isPreviousDisabled,
      type: "button"
    }, /* @__PURE__ */ import_react75.default.createElement(PreviousIcon, null)), /* @__PURE__ */ import_react75.default.createElement("span", null, activeIndex + 1, " of ", canvasLength), /* @__PURE__ */ import_react75.default.createElement(Button2, {
      onClick: () => handleCanvasToggle(1),
      disabled: isNextDisabled,
      type: "button"
    }, /* @__PURE__ */ import_react75.default.createElement(NextIcon, null))), /* @__PURE__ */ import_react75.default.createElement(Button2, {
      onClick: handleFilterToggle,
      type: "button"
    }, toggleFilter ? /* @__PURE__ */ import_react75.default.createElement(CloseIcon, null) : /* @__PURE__ */ import_react75.default.createElement(SearchIcon, null))));
  };
  var Controls_default = Controls;

  // src/components/Media/Media.tsx
  var Media = ({ items }) => {
    const dispatch = useViewerDispatch();
    const state = useViewerState();
    const { activeCanvas, vault } = state;
    const [filter, setFilter] = (0, import_react76.useState)("");
    const [mediaItems, setMediaItems] = (0, import_react76.useState)([]);
    const [activeIndex, setActiveIndex] = (0, import_react76.useState)(0);
    const scrollRef = import_react76.default.useRef(null);
    const motivation = "painting";
    const paintingType = ["Image", "Sound", "Video"];
    const handleChange = (canvasId) => {
      if (activeCanvas !== canvasId)
        dispatch({
          type: "updateActiveCanvas",
          canvasId
        });
    };
    (0, import_react76.useEffect)(() => {
      if (!mediaItems.length) {
        const entities = items.map((item) => getCanvasByCriteria(vault, item, motivation, paintingType)).filter((canvasEntity) => canvasEntity.annotations.length > 0);
        setMediaItems(entities);
      }
    }, []);
    (0, import_react76.useEffect)(() => {
      mediaItems.forEach((item, index) => {
        if (item == null ? void 0 : item.canvas) {
          if (item.canvas.id === activeCanvas)
            setActiveIndex(index);
        }
      });
    }, [activeCanvas]);
    (0, import_react76.useEffect)(() => {
      const element = document.querySelector(`[data-canvas="${activeIndex}"]`);
      if (element instanceof HTMLElement && scrollRef.current) {
        const leftPos = element.offsetLeft - scrollRef.current.offsetWidth / 2 + element.offsetWidth / 2;
        scrollRef.current.scrollTo({ left: leftPos, behavior: "smooth" });
      }
    }, [activeIndex]);
    const handleFilter = (value) => setFilter(value);
    const handleCanvasToggle = (step) => {
      const canvasEntity = mediaItems[activeIndex + step];
      if (canvasEntity == null ? void 0 : canvasEntity.canvas)
        handleChange(canvasEntity.canvas.id);
    };
    return /* @__PURE__ */ import_react76.default.createElement(import_react76.default.Fragment, null, /* @__PURE__ */ import_react76.default.createElement(Controls_default, {
      handleFilter,
      handleCanvasToggle,
      activeIndex,
      canvasLength: mediaItems.length
    }), /* @__PURE__ */ import_react76.default.createElement(Group, {
      "aria-label": "select item",
      "data-testid": "media",
      ref: scrollRef
    }, mediaItems.filter((item) => {
      var _a2;
      if ((_a2 = item.canvas) == null ? void 0 : _a2.label) {
        const label = getLabel(item.canvas.label);
        if (Array.isArray(label))
          return label[0].toLowerCase().includes(filter.toLowerCase());
      }
    }).map((item, index) => {
      var _a2, _b2;
      return /* @__PURE__ */ import_react76.default.createElement(Thumbnail_default, {
        canvas: item.canvas,
        canvasIndex: index,
        handleChange,
        isActive: activeCanvas === ((_a2 = item == null ? void 0 : item.canvas) == null ? void 0 : _a2.id) ? true : false,
        key: (_b2 = item == null ? void 0 : item.canvas) == null ? void 0 : _b2.id,
        thumbnail: getThumbnail(vault, item, 200, 200),
        type: getResourceType(item.annotations[0])
      });
    })));
  };
  var Media_default = Media;

  // src/components/Navigator/Navigator.tsx
  var import_react82 = __toESM(require_react());

  // node_modules/@radix-ui/react-tabs/dist/index.module.js
  var import_react77 = __toESM(require_react());
  function $parcel$export28(e4, n4, v5, s5) {
    Object.defineProperty(e4, n4, { get: v5, set: s5, enumerable: true, configurable: true });
  }
  var $69cb30bb0017df05$exports = {};
  $parcel$export28($69cb30bb0017df05$exports, "createTabsScope", () => $69cb30bb0017df05$export$355f5bd209d7b13a);
  $parcel$export28($69cb30bb0017df05$exports, "Tabs", () => $69cb30bb0017df05$export$b2539bed5023c21c);
  $parcel$export28($69cb30bb0017df05$exports, "TabsList", () => $69cb30bb0017df05$export$9712d22edc0d78c1);
  $parcel$export28($69cb30bb0017df05$exports, "TabsTrigger", () => $69cb30bb0017df05$export$8114b9fdfdf9f3ba);
  $parcel$export28($69cb30bb0017df05$exports, "TabsContent", () => $69cb30bb0017df05$export$bd905d70e8fd2ebb);
  $parcel$export28($69cb30bb0017df05$exports, "Root", () => $69cb30bb0017df05$export$be92b6f5f03c0fe9);
  $parcel$export28($69cb30bb0017df05$exports, "List", () => $69cb30bb0017df05$export$54c2e3dc7acea9f5);
  $parcel$export28($69cb30bb0017df05$exports, "Trigger", () => $69cb30bb0017df05$export$41fb9f06171c75f4);
  $parcel$export28($69cb30bb0017df05$exports, "Content", () => $69cb30bb0017df05$export$7c6e2c02157bb7d2);
  var $69cb30bb0017df05$var$TABS_NAME = "Tabs";
  var [$69cb30bb0017df05$var$createTabsContext, $69cb30bb0017df05$export$355f5bd209d7b13a] = $c512c27ab02ef895$export$50c7b4e9d9f19c1($69cb30bb0017df05$var$TABS_NAME, [
    $d7bdfb9eb0fdf311$export$c7109489551a4f4
  ]);
  var $69cb30bb0017df05$var$useRovingFocusGroupScope = $d7bdfb9eb0fdf311$export$c7109489551a4f4();
  var [$69cb30bb0017df05$var$TabsProvider, $69cb30bb0017df05$var$useTabsContext] = $69cb30bb0017df05$var$createTabsContext($69cb30bb0017df05$var$TABS_NAME);
  var $69cb30bb0017df05$export$b2539bed5023c21c = /* @__PURE__ */ (0, import_react77.forwardRef)((props, forwardedRef) => {
    const { __scopeTabs, value: valueProp, onValueChange, defaultValue: defaultValue2, orientation = "horizontal", dir, activationMode = "automatic", ...tabsProps } = props;
    const direction = $f631663db3294ace$export$b39126d51d94e6f32(dir);
    const [value, setValue] = $71cd76cc60e0454e$export$6f32135080cb4c3({
      prop: valueProp,
      onChange: onValueChange,
      defaultProp: defaultValue2
    });
    return /* @__PURE__ */ (0, import_react77.createElement)($69cb30bb0017df05$var$TabsProvider, {
      scope: __scopeTabs,
      baseId: $1746a345f3d73bb7$export$f680877a34711e37(),
      value,
      onValueChange: setValue,
      orientation,
      dir: direction,
      activationMode
    }, /* @__PURE__ */ (0, import_react77.createElement)($8927f6f2acc4f386$export$250ffa63cdc0d034.div, _extends({
      dir: direction,
      "data-orientation": orientation
    }, tabsProps, {
      ref: forwardedRef
    })));
  });
  var $69cb30bb0017df05$var$TAB_LIST_NAME = "TabsList";
  var $69cb30bb0017df05$export$9712d22edc0d78c1 = /* @__PURE__ */ (0, import_react77.forwardRef)((props, forwardedRef) => {
    const { __scopeTabs, loop = true, ...listProps } = props;
    const context = $69cb30bb0017df05$var$useTabsContext($69cb30bb0017df05$var$TAB_LIST_NAME, __scopeTabs);
    const rovingFocusGroupScope = $69cb30bb0017df05$var$useRovingFocusGroupScope(__scopeTabs);
    return /* @__PURE__ */ (0, import_react77.createElement)($d7bdfb9eb0fdf311$export$be92b6f5f03c0fe9, _extends({
      asChild: true
    }, rovingFocusGroupScope, {
      orientation: context.orientation,
      dir: context.dir,
      loop
    }), /* @__PURE__ */ (0, import_react77.createElement)($8927f6f2acc4f386$export$250ffa63cdc0d034.div, _extends({
      role: "tablist",
      "aria-orientation": context.orientation
    }, listProps, {
      ref: forwardedRef
    })));
  });
  var $69cb30bb0017df05$var$TRIGGER_NAME = "TabsTrigger";
  var $69cb30bb0017df05$export$8114b9fdfdf9f3ba = /* @__PURE__ */ (0, import_react77.forwardRef)((props, forwardedRef) => {
    const { __scopeTabs, value, disabled = false, ...triggerProps } = props;
    const context = $69cb30bb0017df05$var$useTabsContext($69cb30bb0017df05$var$TRIGGER_NAME, __scopeTabs);
    const rovingFocusGroupScope = $69cb30bb0017df05$var$useRovingFocusGroupScope(__scopeTabs);
    const triggerId = $69cb30bb0017df05$var$makeTriggerId(context.baseId, value);
    const contentId = $69cb30bb0017df05$var$makeContentId(context.baseId, value);
    const isSelected = value === context.value;
    return /* @__PURE__ */ (0, import_react77.createElement)($d7bdfb9eb0fdf311$export$6d08773d2e66f8f2, _extends({
      asChild: true
    }, rovingFocusGroupScope, {
      focusable: !disabled,
      active: isSelected
    }), /* @__PURE__ */ (0, import_react77.createElement)($8927f6f2acc4f386$export$250ffa63cdc0d034.button, _extends({
      type: "button",
      role: "tab",
      "aria-selected": isSelected,
      "aria-controls": contentId,
      "data-state": isSelected ? "active" : "inactive",
      "data-disabled": disabled ? "" : void 0,
      disabled,
      id: triggerId
    }, triggerProps, {
      ref: forwardedRef,
      onMouseDown: composeEventHandlers(props.onMouseDown, (event) => {
        if (!disabled && event.button === 0 && event.ctrlKey === false)
          context.onValueChange(value);
        else
          event.preventDefault();
      }),
      onKeyDown: composeEventHandlers(props.onKeyDown, (event) => {
        if ([
          " ",
          "Enter"
        ].includes(event.key))
          context.onValueChange(value);
      }),
      onFocus: composeEventHandlers(props.onFocus, () => {
        const isAutomaticActivation = context.activationMode !== "manual";
        if (!isSelected && !disabled && isAutomaticActivation)
          context.onValueChange(value);
      })
    })));
  });
  var $69cb30bb0017df05$var$CONTENT_NAME = "TabsContent";
  var $69cb30bb0017df05$export$bd905d70e8fd2ebb = /* @__PURE__ */ (0, import_react77.forwardRef)((props, forwardedRef) => {
    const { __scopeTabs, value, children, ...contentProps } = props;
    const context = $69cb30bb0017df05$var$useTabsContext($69cb30bb0017df05$var$CONTENT_NAME, __scopeTabs);
    const triggerId = $69cb30bb0017df05$var$makeTriggerId(context.baseId, value);
    const contentId = $69cb30bb0017df05$var$makeContentId(context.baseId, value);
    const isSelected = value === context.value;
    return /* @__PURE__ */ (0, import_react77.createElement)($8927f6f2acc4f386$export$250ffa63cdc0d034.div, _extends({
      "data-state": isSelected ? "active" : "inactive",
      "data-orientation": context.orientation,
      role: "tabpanel",
      "aria-labelledby": triggerId,
      hidden: !isSelected,
      id: contentId,
      tabIndex: 0
    }, contentProps, {
      ref: forwardedRef
    }), isSelected && children);
  });
  function $69cb30bb0017df05$var$makeTriggerId(baseId, value) {
    return `${baseId}-trigger-${value}`;
  }
  function $69cb30bb0017df05$var$makeContentId(baseId, value) {
    return `${baseId}-content-${value}`;
  }
  var $69cb30bb0017df05$export$be92b6f5f03c0fe9 = $69cb30bb0017df05$export$b2539bed5023c21c;
  var $69cb30bb0017df05$export$54c2e3dc7acea9f5 = $69cb30bb0017df05$export$9712d22edc0d78c1;
  var $69cb30bb0017df05$export$41fb9f06171c75f4 = $69cb30bb0017df05$export$8114b9fdfdf9f3ba;
  var $69cb30bb0017df05$export$7c6e2c02157bb7d2 = $69cb30bb0017df05$export$bd905d70e8fd2ebb;

  // src/components/Navigator/Navigator.styled.tsx
  var Wrapper3 = styled($69cb30bb0017df05$export$be92b6f5f03c0fe9, {
    display: "flex",
    flexDirection: "column",
    width: "100%",
    height: "100%",
    flexGrow: "1",
    flexShrink: "0",
    position: "relative",
    zIndex: "1",
    boxShadow: "-5px -5px 5px #00000011",
    "@sm": {
      marginTop: "0.5rem",
      boxShadow: "none"
    },
    "&:after": {
      position: "absolute",
      bottom: 0,
      content: "",
      width: "100%",
      height: "1rem",
      backgroundImage: `linear-gradient(0deg, #FFFFFF 0%, #FFFFFF00 100%)`,
      zIndex: 1,
      "@sm": {
        backgroundImage: "none"
      }
    }
  });
  var List = styled($69cb30bb0017df05$export$54c2e3dc7acea9f5, {
    display: "flex",
    flexGrow: "0",
    margin: "0 1.618rem",
    borderBottom: "4px solid $secondaryAlt",
    backgroundColor: "$secondary",
    "@sm": {
      margin: "0 1rem"
    }
  });
  var Trigger2 = styled($69cb30bb0017df05$export$41fb9f06171c75f4, {
    display: "flex",
    position: "relative",
    padding: "0.5rem 1rem",
    background: "none",
    backgroundColor: "transparent",
    color: "$primaryMuted",
    border: "none",
    fontFamily: "inherit",
    fontSize: "1rem",
    marginRight: "1rem",
    lineHeight: "1rem",
    whiteSpace: "nowrap",
    cursor: "pointer",
    fontWeight: 700,
    transition: "$all",
    "&::after": {
      width: "0",
      height: "4px",
      content: "",
      backgroundColor: "$primaryMuted",
      position: "absolute",
      bottom: "-4px",
      left: "0",
      transition: "$all"
    },
    "&:hover": {
      color: "$primary"
    },
    "&[data-state='active']": {
      color: "$accent",
      "&::after": {
        width: "100%",
        backgroundColor: "$accent"
      }
    }
  });
  var Content3 = styled($69cb30bb0017df05$export$7c6e2c02157bb7d2, {
    display: "flex",
    flexGrow: "1",
    flexShrink: "0",
    position: "absolute",
    top: "0",
    left: "0",
    "&[data-state='active']": {
      width: "100%",
      height: "calc(100% - 2rem)",
      padding: "1rem 0"
    }
  });
  var Scroll = styled("div", {
    position: "relative",
    height: "100%",
    width: "100%",
    overflowY: "scroll"
  });

  // src/components/Navigator/Resource.tsx
  var import_react81 = __toESM(require_react());

  // src/components/Navigator/Cue.styled.tsx
  var spin = keyframes({
    from: { transform: "rotate(360deg)" },
    to: { transform: "rotate(0deg)" }
  });
  var Group2 = styled($f99a8c78507165f7$export$be92b6f5f03c0fe9, {
    display: "flex",
    flexDirection: "column",
    width: "100%"
  });
  var Item2 = styled($f99a8c78507165f7$export$6d08773d2e66f8f2, {
    position: "relative",
    cursor: "pointer",
    display: "flex",
    width: "100%",
    justifyContent: "space-between",
    textAlign: "left",
    margin: "0",
    padding: "0.5rem 1.618rem",
    fontFamily: "inherit",
    lineHeight: "1.25em",
    fontSize: "1rem",
    color: "$primaryMuted",
    border: "none",
    background: "none",
    "@sm": {
      padding: "0.5rem 1rem",
      fontSize: "0.8333rem"
    },
    "&::before": {
      content: "",
      width: "12px",
      height: "12px",
      borderRadius: "12px",
      position: "absolute",
      backgroundColor: "$primaryMuted",
      opacity: "0",
      left: "8px",
      marginTop: "3px",
      boxSizing: "content-box",
      "@sm": {
        content: "unset"
      }
    },
    "&::after": {
      content: "",
      width: "4px",
      height: "6px",
      position: "absolute",
      backgroundColor: "$secondary",
      opacity: "0",
      clipPath: "polygon(100% 50%, 0 100%, 0 0)",
      left: "13px",
      marginTop: "6px",
      boxSizing: "content-box",
      "@sm": {
        content: "unset"
      }
    },
    strong: {
      marginLeft: "1rem"
    },
    "&:hover": {
      color: "$accent",
      "&::before": {
        backgroundColor: "$accent",
        opacity: "1"
      },
      "&::after": {
        content: "",
        width: "4px",
        height: "6px",
        position: "absolute",
        backgroundColor: "$secondary",
        clipPath: "polygon(100% 50%, 0 100%, 0 0)",
        opacity: "1"
      }
    },
    "&[aria-checked='true']": {
      color: "$primary",
      backgroundColor: "$secondaryMuted",
      fontFamily: "$sansBold",
      "&::before": {
        content: "",
        width: "6px",
        height: "6px",
        position: "absolute",
        backgroundColor: "transparent",
        border: "3px solid $accentMuted",
        borderRadius: "12px",
        left: "8px",
        marginTop: "4px",
        opacity: "1",
        animation: "1s linear infinite",
        animationName: spin,
        boxSizing: "content-box",
        "@sm": {
          content: "unset"
        }
      },
      "&::after": {
        content: "",
        width: "6px",
        height: "6px",
        position: "absolute",
        backgroundColor: "transparent",
        border: "3px solid $accent",
        clipPath: "polygon(100% 0, 100% 100%, 0 0)",
        borderRadius: "12px",
        left: "8px",
        marginTop: "4px",
        opacity: "1",
        animation: "1.5s linear infinite",
        animationName: spin,
        boxSizing: "content-box",
        "@sm": {
          content: "unset"
        }
      }
    }
  });

  // node_modules/uuid/dist/esm-browser/rng.js
  var getRandomValues;
  var rnds8 = new Uint8Array(16);
  function rng() {
    if (!getRandomValues) {
      getRandomValues = typeof crypto !== "undefined" && crypto.getRandomValues && crypto.getRandomValues.bind(crypto) || typeof msCrypto !== "undefined" && typeof msCrypto.getRandomValues === "function" && msCrypto.getRandomValues.bind(msCrypto);
      if (!getRandomValues) {
        throw new Error("crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported");
      }
    }
    return getRandomValues(rnds8);
  }

  // node_modules/uuid/dist/esm-browser/regex.js
  var regex_default = /^(?:[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}|00000000-0000-0000-0000-000000000000)$/i;

  // node_modules/uuid/dist/esm-browser/validate.js
  function validate(uuid) {
    return typeof uuid === "string" && regex_default.test(uuid);
  }
  var validate_default = validate;

  // node_modules/uuid/dist/esm-browser/stringify.js
  var byteToHex = [];
  for (i3 = 0; i3 < 256; ++i3) {
    byteToHex.push((i3 + 256).toString(16).substr(1));
  }
  var i3;
  function stringify(arr) {
    var offset = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 0;
    var uuid = (byteToHex[arr[offset + 0]] + byteToHex[arr[offset + 1]] + byteToHex[arr[offset + 2]] + byteToHex[arr[offset + 3]] + "-" + byteToHex[arr[offset + 4]] + byteToHex[arr[offset + 5]] + "-" + byteToHex[arr[offset + 6]] + byteToHex[arr[offset + 7]] + "-" + byteToHex[arr[offset + 8]] + byteToHex[arr[offset + 9]] + "-" + byteToHex[arr[offset + 10]] + byteToHex[arr[offset + 11]] + byteToHex[arr[offset + 12]] + byteToHex[arr[offset + 13]] + byteToHex[arr[offset + 14]] + byteToHex[arr[offset + 15]]).toLowerCase();
    if (!validate_default(uuid)) {
      throw TypeError("Stringified UUID is invalid");
    }
    return uuid;
  }
  var stringify_default = stringify;

  // node_modules/uuid/dist/esm-browser/v4.js
  function v4(options, buf, offset) {
    options = options || {};
    var rnds = options.random || (options.rng || rng)();
    rnds[6] = rnds[6] & 15 | 64;
    rnds[8] = rnds[8] & 63 | 128;
    if (buf) {
      offset = offset || 0;
      for (var i3 = 0; i3 < 16; ++i3) {
        buf[offset + i3] = rnds[i3];
      }
      return buf;
    }
    return stringify_default(rnds);
  }
  var v4_default = v4;

  // src/hooks/use-webvtt.ts
  var useWebVtt = () => {
    function addIdentifiersToParsedCues(cues) {
      const newCues = cues.map((cue) => {
        const identifier = cue.identifier || v4_default();
        return __spreadProps(__spreadValues({}, cue), { identifier });
      });
      return newCues;
    }
    function createNestedCues(flat) {
      const idCues = addIdentifiersToParsedCues(flat);
      function getNestedChildren(arr, parent) {
        const out = [];
        arr.forEach((item) => {
          const currentItemParents = arr.filter((arrItem) => {
            return item.start >= arrItem.start && item.end <= arrItem.end && item.identifier !== arrItem.identifier;
          });
          const currentItemParent = currentItemParents.sort((a3, b3) => {
            const aDuration = a3.end - a3.start;
            const bDuration = b3.end - b3.start;
            if (aDuration === bDuration)
              return 0;
            return aDuration < bDuration ? -1 : 1;
          })[0];
          if (!currentItemParent && !parent || (currentItemParent == null ? void 0 : currentItemParent.identifier) === parent) {
            const children = getNestedChildren(arr, item.identifier);
            if (children.length) {
              item.children = children;
            }
            out.push(item);
          }
        });
        return out;
      }
      const nestedCues = getNestedChildren(idCues, null);
      return nestedCues;
    }
    function isChild(cue, cues = []) {
      return cues.some((currentCue) => cue.start >= currentCue.start && cue.end <= currentCue.end);
    }
    function orderCuesByTime(cues = []) {
      return cues.sort((cue1, cue2) => cue1.start - cue2.start);
    }
    return {
      addIdentifiersToParsedCues,
      createNestedCues,
      isChild,
      orderCuesByTime
    };
  };
  var use_webvtt_default = useWebVtt;

  // src/components/Navigator/Menu.tsx
  var import_react80 = __toESM(require_react());

  // src/components/Navigator/Cue.tsx
  var import_react79 = __toESM(require_react());

  // src/context/current-time-context.tsx
  var import_react78 = __toESM(require_react());
  var defaultValue = {
    currentTime: 0,
    startTime: 0,
    updateStartTime: () => {
    },
    updateCurrentTime: () => {
    }
  };
  var CurrentTimeContext = import_react78.default.createContext(defaultValue);
  var CurrentTimeProvider = ({
    children
  }) => {
    const [currentTime, setCurrentTime] = import_react78.default.useState(defaultValue.currentTime);
    const [startTime, setStartTime] = import_react78.default.useState(0);
    const updateStartTime = (t4) => setStartTime(t4);
    const updateCurrentTime = (t4) => setCurrentTime(t4);
    return /* @__PURE__ */ import_react78.default.createElement(CurrentTimeContext.Provider, {
      value: { currentTime, startTime, updateStartTime, updateCurrentTime }
    }, children);
  };

  // src/components/Navigator/Cue.tsx
  var Cue = ({ label, start, end }) => {
    const { currentTime, updateStartTime } = import_react79.default.useContext(CurrentTimeContext);
    const isActive = start <= currentTime && currentTime < end;
    const handleClick = () => {
      updateStartTime(start);
    };
    return /* @__PURE__ */ import_react79.default.createElement(Item2, {
      "aria-checked": isActive,
      "data-testid": "navigator-cue",
      onClick: handleClick,
      value: label
    }, label, /* @__PURE__ */ import_react79.default.createElement("strong", null, convertTime(start)));
  };
  var Cue_default = Cue;

  // src/components/Navigator/Menu.styled.tsx
  var MenuStyled = styled("ul", {
    listStyle: "none",
    paddingLeft: "1rem",
    position: "relative",
    "&&:first-child": {
      paddingLeft: "0"
    },
    "& li ul": {
      [`& ${Item2}`]: {
        backgroundColor: "unset",
        "&::before": {
          content: "none"
        },
        "&::after": {
          content: "none"
        }
      }
    },
    "&:first-child": {
      margin: "0 0 1.618rem"
    }
  });

  // src/components/Navigator/Menu.tsx
  var Menu = ({ items }) => {
    return /* @__PURE__ */ import_react80.default.createElement(MenuStyled, null, items.map(({ text, start, end, children: cueChildren, identifier }) => {
      return /* @__PURE__ */ import_react80.default.createElement("li", {
        key: identifier
      }, /* @__PURE__ */ import_react80.default.createElement(Cue_default, {
        label: text,
        start,
        end
      }), cueChildren && /* @__PURE__ */ import_react80.default.createElement(Menu, {
        items: cueChildren
      }));
    }));
  };
  var Menu_default = Menu;

  // src/components/Navigator/Resource.tsx
  var import_node_webvtt = __toESM(require_node_webvtt());
  var Resource = ({ resource }) => {
    const [cues, setCues] = import_react81.default.useState([]);
    const { id, label } = resource;
    const { createNestedCues, orderCuesByTime } = use_webvtt_default();
    (0, import_react81.useEffect)(() => {
      fetch(id, {
        headers: {
          "Content-Type": "text/plain",
          Accept: "application/json"
        }
      }).then((response) => response.text()).then((data) => {
        const flatCues = (0, import_node_webvtt.parse)(data).cues;
        const orderedCues = orderCuesByTime(flatCues);
        const nestedCues = createNestedCues(orderedCues);
        setCues(nestedCues);
      }).catch((error) => console.error(id, error.toString()));
    }, [id]);
    return /* @__PURE__ */ import_react81.default.createElement(Group2, {
      "aria-label": `navigate ${getLabel(label, "en")}`
    }, /* @__PURE__ */ import_react81.default.createElement(Menu_default, {
      items: cues
    }));
  };
  var Resource_default = Resource;

  // src/components/Navigator/Navigator.tsx
  var Navigator = ({
    activeCanvas,
    defaultResource,
    resources
  }) => {
    const [activeResource, setActiveResource] = (0, import_react82.useState)(defaultResource);
    (0, import_react82.useEffect)(() => {
      setActiveResource(defaultResource);
    }, [activeCanvas, resources]);
    const handleValueChange = (value) => {
      setActiveResource(value);
    };
    if (!resources)
      return /* @__PURE__ */ import_react82.default.createElement(import_react82.default.Fragment, null);
    return /* @__PURE__ */ import_react82.default.createElement(Wrapper3, {
      "data-testid": "navigator",
      defaultValue: defaultResource,
      onValueChange: handleValueChange,
      orientation: "horizontal",
      value: activeResource
    }, /* @__PURE__ */ import_react82.default.createElement(List, {
      "aria-label": "select chapter",
      "data-testid": "navigator-list"
    }, resources.map(({ id, label }) => /* @__PURE__ */ import_react82.default.createElement(Trigger2, {
      key: id,
      value: id
    }, getLabel(label, "en")))), /* @__PURE__ */ import_react82.default.createElement(Scroll, null, resources.map((resource) => {
      return /* @__PURE__ */ import_react82.default.createElement(Content3, {
        key: resource.id,
        value: resource.id
      }, /* @__PURE__ */ import_react82.default.createElement(Resource_default, {
        resource
      }));
    })));
  };
  var Navigator_default = Navigator;

  // src/components/Player/Player.tsx
  var import_react85 = __toESM(require_react());
  var import_hls2 = __toESM(require_hls());

  // src/components/Player/Player.styled.tsx
  var PlayerWrapper = styled("div", {
    position: "relative",
    backgroundColor: "$primaryAlt",
    display: "flex",
    flexGrow: "0",
    flexShrink: "1",
    maxHeight: "500px",
    zIndex: "1",
    video: {
      backgroundColor: "transparent",
      display: "flex",
      position: "relative",
      objectFit: "contain",
      width: "100%",
      height: "100%",
      zIndex: "1"
    }
  });

  // src/components/Player/AudioVisualizer.tsx
  var import_react83 = __toESM(require_react());

  // src/components/Player/AudioVisualizer.styled.tsx
  var AudioVisualizerWrapper = styled("canvas", {
    position: "absolute",
    width: "100%",
    height: "100%"
  });

  // src/components/Player/AudioVisualizer.tsx
  var AudioVisualizer = import_react83.default.forwardRef((_props, ref) => {
    const canvasRef = import_react83.default.useRef(null);
    import_react83.default.useEffect(() => {
      if (!ref)
        return;
      ref.current.onplay = audioVisualizer;
    }, [ref]);
    function audioVisualizer() {
      const video = ref.current;
      const context = new AudioContext();
      const src = context.createMediaElementSource(video);
      let analyser = context.createAnalyser();
      const canvas = canvasRef.current;
      if (!canvas)
        return;
      canvas.width = video.offsetWidth;
      canvas.height = video.offsetHeight;
      const ctx = canvas.getContext("2d");
      src.connect(analyser);
      analyser.connect(context.destination);
      analyser.fftSize = 256;
      const bufferLength = analyser.frequencyBinCount;
      const dataArray = new Uint8Array(bufferLength);
      setInterval(function() {
        renderFrame(analyser, ctx, bufferLength, dataArray, canvas.width, canvas.height);
      }, 20);
    }
    function renderFrame(analyser, ctx, bufferLength, dataArray, width, height) {
      let barWidth = width / bufferLength * 2.6;
      let barHeight;
      let x4 = 0;
      analyser.getByteFrequencyData(dataArray);
      ctx.fillStyle = "#000000";
      ctx.fillRect(0, 0, width, height);
      for (let i3 = 0; i3 < bufferLength; i3++) {
        barHeight = dataArray[i3] * 2;
        ctx.fillStyle = `rgba(${78}, 42, 132, 1)`;
        ctx.fillRect(x4, height - barHeight, barWidth, barHeight);
        x4 += barWidth + 6;
      }
    }
    return /* @__PURE__ */ import_react83.default.createElement(AudioVisualizerWrapper, {
      ref: canvasRef
    });
  });
  var AudioVisualizer_default = AudioVisualizer;

  // src/components/Player/Track.tsx
  var import_react84 = __toESM(require_react());
  var Track = ({ resource, ignoreCaptionLabels }) => {
    const label = getLabel(resource.label, "en");
    const isIgnored = label.some((value) => ignoreCaptionLabels.includes(value));
    if (isIgnored)
      return null;
    return /* @__PURE__ */ import_react84.default.createElement("track", {
      key: resource.id,
      src: resource.id,
      label,
      srcLang: "en",
      "data-testid": "player-track"
    });
  };
  var Track_default = Track;

  // src/components/Player/Player.tsx
  var Player = ({ painting, resources }) => {
    var _a2;
    const playerRef = import_react85.default.useRef(null);
    const isAudio = (_a2 = painting == null ? void 0 : painting.format) == null ? void 0 : _a2.includes("audio/");
    const { startTime, updateCurrentTime } = import_react85.default.useContext(CurrentTimeContext);
    const viewerState = useViewerState();
    const { activeCanvas, configOptions, vault } = viewerState;
    const activeCanvasObject = getCanvasByCriteria(vault, { id: activeCanvas, type: "Canvas" }, "painting", ["Image"]);
    const posterImage = getAccompanyingCanvasImage(activeCanvasObject.accompanyingCanvas);
    import_react85.default.useEffect(() => {
      if (!painting.id || !playerRef.current)
        return;
      if (painting.id.split(".").pop() !== "m3u8")
        return;
      const hls = new import_hls2.default();
      hls.attachMedia(playerRef.current);
      hls.on(import_hls2.default.Events.MEDIA_ATTACHED, function() {
        hls.loadSource(painting.id);
      });
      hls.on(import_hls2.default.Events.ERROR, function(event, data) {
        if (data.fatal) {
          switch (data.type) {
            case import_hls2.default.ErrorTypes.NETWORK_ERROR:
              console.error(`fatal ${event} network error encountered, try to recover`);
              hls.startLoad();
              break;
            case import_hls2.default.ErrorTypes.MEDIA_ERROR:
              console.error(`fatal ${event} media error encountered, try to recover`);
              hls.recoverMediaError();
              break;
            default:
              hls.destroy();
              break;
          }
        }
      });
      return () => {
        if (hls) {
          hls.detachMedia();
          hls.destroy();
          updateCurrentTime(0);
        }
      };
    }, [painting.id]);
    import_react85.default.useEffect(() => {
      let video = playerRef.current;
      if (video)
        video.currentTime = startTime;
      if (startTime !== 0)
        video.play();
    }, [startTime]);
    const handlePlay = () => {
      let video = playerRef.current;
      if (video) {
        video.ontimeupdate = (event) => {
          updateCurrentTime(event.target.currentTime);
        };
      }
    };
    return /* @__PURE__ */ import_react85.default.createElement(PlayerWrapper, {
      css: {
        backgroundColor: configOptions.canvasBackgroundColor,
        maxHeight: configOptions.canvasHeight
      }
    }, /* @__PURE__ */ import_react85.default.createElement("video", {
      id: "clover-iiif-video",
      key: painting.id,
      ref: playerRef,
      controls: true,
      height: painting.height,
      width: painting.width,
      onPlay: handlePlay,
      crossOrigin: "anonymous",
      poster: posterImage
    }, /* @__PURE__ */ import_react85.default.createElement("source", {
      src: painting.id,
      type: painting.format
    }), resources.length > 0 && resources.map((resource) => /* @__PURE__ */ import_react85.default.createElement(Track_default, {
      resource,
      ignoreCaptionLabels: configOptions.ignoreCaptionLabels,
      key: resource.id
    })), "Sorry, your browser doesn't support embedded videos."), isAudio && /* @__PURE__ */ import_react85.default.createElement(AudioVisualizer_default, {
      ref: playerRef
    }));
  };
  var Player_default = Player;

  // src/components/ImageViewer/ImageViewer.tsx
  var import_react89 = __toESM(require_react());

  // src/components/ImageViewer/OSD.tsx
  var import_react88 = __toESM(require_react());
  var import_openseadragon = __toESM(require_openseadragon());

  // src/components/ImageViewer/ImageViewer.styled.tsx
  var Navigator2 = styled("div", {
    position: "absolute !important",
    zIndex: "1",
    top: "1rem",
    left: "1rem",
    width: "161.8px",
    height: "100px",
    backgroundColor: "#000D",
    boxShadow: "5px 5px 5px #0002",
    borderRadius: "3px",
    ".displayregion": {
      border: " 3px solid $accent !important",
      boxShadow: "0 0 3px #0006"
    },
    "@sm": {
      width: "123px",
      height: "76px"
    }
  });
  var Viewport = styled("div", {
    position: "relative",
    width: "100%",
    height: "100%",
    zIndex: "0"
  });
  var Wrapper4 = styled("div", {
    width: "100%",
    height: "61.8vh",
    maxHeight: "100vh",
    background: "black",
    backgroundSize: "contain",
    color: "white",
    position: "relative",
    zIndex: "1",
    overflow: "hidden"
  });

  // src/components/ImageViewer/Controls.tsx
  var import_react87 = __toESM(require_react());

  // src/components/ImageViewer/Button.tsx
  var import_react86 = __toESM(require_react());

  // src/components/ImageViewer/Button.styled.tsx
  var Item3 = styled("button", {
    display: "flex",
    height: "2rem",
    width: "2rem",
    borderRadius: "2rem",
    padding: "0",
    margin: "0",
    fontFamily: "inherit",
    background: "none",
    border: "none",
    color: "white",
    cursor: "pointer",
    marginLeft: "0.618rem",
    backgroundColor: "#000D",
    filter: "drop-shadow(5px 5px 5px #0006)",
    transition: "$all",
    boxSizing: "content-box !important",
    svg: {
      height: "60%",
      width: "60%",
      padding: "20%",
      fill: "$secondary",
      stroke: "$secondary",
      filter: "drop-shadow(5px 5px 5px #000D)",
      transition: "$all",
      boxSizing: "inherit"
    },
    "&:hover, &:focus": {
      backgroundColor: "$accent"
    },
    "&#zoomReset": {
      "&:hover, &:focus": {
        svg: {
          rotate: "45deg"
        }
      }
    }
  });

  // src/components/ImageViewer/Button.tsx
  var Button3 = ({ id, label, children }) => {
    return /* @__PURE__ */ import_react86.default.createElement(Item3, {
      id,
      "data-testid": "openseadragon-button"
    }, /* @__PURE__ */ import_react86.default.createElement("svg", {
      xmlns: "http://www.w3.org/2000/svg",
      "aria-labelledby": `${id}-svg-title`,
      "data-testid": "openseadragon-button-svg",
      focusable: "false",
      viewBox: "0 0 512 512",
      role: "img"
    }, /* @__PURE__ */ import_react86.default.createElement("title", {
      id: `${id}-svg-title`
    }, label), children));
  };
  var Button_default = Button3;

  // src/components/ImageViewer/Controls.styled.tsx
  var Wrapper5 = styled("div", {
    position: "absolute",
    zIndex: "1",
    top: "1rem",
    right: "1rem"
  });

  // src/components/ImageViewer/Controls.tsx
  var Controls2 = () => {
    const ZoomIn = () => {
      return /* @__PURE__ */ import_react87.default.createElement("path", {
        strokeLinecap: "round",
        strokeMiterlimit: "10",
        strokeWidth: "45",
        d: "M256 112v288M400 256H112"
      });
    };
    const ZoomOut = () => {
      return /* @__PURE__ */ import_react87.default.createElement("path", {
        strokeLinecap: "round",
        strokeMiterlimit: "10",
        strokeWidth: "45",
        d: "M400 256H112"
      });
    };
    const ZoomReset = () => {
      return /* @__PURE__ */ import_react87.default.createElement(import_react87.default.Fragment, null, /* @__PURE__ */ import_react87.default.createElement("path", {
        fill: "none",
        strokeLinecap: "round",
        strokeMiterlimit: "10",
        strokeWidth: "45",
        d: "M400 148l-21.12-24.57A191.43 191.43 0 00240 64C134 64 48 150 48 256s86 192 192 192a192.09 192.09 0 00181.07-128"
      }), /* @__PURE__ */ import_react87.default.createElement("path", {
        d: "M464 97.42V208a16 16 0 01-16 16H337.42c-14.26 0-21.4-17.23-11.32-27.31L436.69 86.1C446.77 76 464 83.16 464 97.42z"
      }));
    };
    return /* @__PURE__ */ import_react87.default.createElement(Wrapper5, {
      "data-testid": "openseadragon-controls",
      id: "openseadragon-controls"
    }, /* @__PURE__ */ import_react87.default.createElement(Button_default, {
      id: "zoomIn",
      label: "zoom in"
    }, /* @__PURE__ */ import_react87.default.createElement(ZoomIn, null)), /* @__PURE__ */ import_react87.default.createElement(Button_default, {
      id: "zoomOut",
      label: "zoom in"
    }, /* @__PURE__ */ import_react87.default.createElement(ZoomOut, null)), /* @__PURE__ */ import_react87.default.createElement(Button_default, {
      id: "zoomReset",
      label: "reset zoom"
    }, /* @__PURE__ */ import_react87.default.createElement(ZoomReset, null)));
  };
  var Controls_default2 = Controls2;

  // src/services/iiif.ts
  var getInfoResponse = (id) => fetch(`${id.replace(/\/$/, "")}/info.json`).then((response) => response.json()).then((json) => json).catch((error) => {
    console.error(`The IIIF tilesource ${id.replace(/\/$/, "")}/info.json failed to load: ${error}`);
  });
  var getImageServiceURI = (service) => {
    let imageService;
    let imageServiceURI;
    if (Array.isArray(service)) {
      imageService = service[0];
      if (imageService) {
        let id;
        "@id" in imageService ? id = imageService["@id"] : id = imageService.id;
        imageServiceURI = id;
      }
    }
    return imageServiceURI;
  };

  // src/components/ImageViewer/OSD.tsx
  var OSD = ({ uri, imageType }) => {
    const [osdUri, setOsdUri] = (0, import_react88.useState)();
    const viewerState = useViewerState();
    const { configOptions } = viewerState;
    const instance = v4_default();
    const config2 = {
      id: `openseadragon-viewport-${instance}`,
      loadTilesWithAjax: true,
      homeButton: "zoomReset",
      showFullPageControl: false,
      zoomInButton: "zoomIn",
      zoomOutButton: "zoomOut",
      showNavigator: true,
      navigatorBorderColor: "transparent",
      navigatorId: `openseadragon-navigator-${instance}`,
      gestureSettingsMouse: {
        clickToZoom: true,
        dblClickToZoom: true,
        pinchToZoom: true,
        scrollToZoom: false
      }
    };
    (0, import_react88.useEffect)(() => {
      if (uri !== osdUri)
        setOsdUri(uri);
    }, []);
    (0, import_react88.useEffect)(() => {
      if (osdUri) {
        switch (imageType) {
          case "simpleImage":
            (0, import_openseadragon.default)(config2).addSimpleImage({
              url: osdUri
            });
            break;
          case "tiledImage":
            getInfoResponse(osdUri).then((tileSource) => (0, import_openseadragon.default)(config2).addTiledImage({
              tileSource
            }));
            break;
          default:
            console.warn(`Unable to render ${osdUri} in OpenSeadragon as type: "${imageType}"`);
            break;
        }
      }
    }, [osdUri]);
    return /* @__PURE__ */ import_react88.default.createElement(Wrapper4, {
      css: {
        backgroundColor: configOptions.canvasBackgroundColor,
        height: configOptions.canvasHeight
      }
    }, /* @__PURE__ */ import_react88.default.createElement(Controls_default2, null), /* @__PURE__ */ import_react88.default.createElement(Navigator2, {
      id: `openseadragon-navigator-${instance}`
    }), /* @__PURE__ */ import_react88.default.createElement(Viewport, {
      id: `openseadragon-viewport-${instance}`
    }));
  };
  var OSD_default = OSD;

  // src/components/ImageViewer/ImageViewer.tsx
  var ImageViewer = ({ body }) => {
    const [imageType, setImageType] = (0, import_react89.useState)();
    const [uri, setUri] = (0, import_react89.useState)();
    (0, import_react89.useEffect)(() => {
      if (Array.isArray(body.service) && body.service.length > 0) {
        setImageType("tiledImage");
        setUri(getImageServiceURI(body.service));
      } else {
        setImageType("simpleImage");
        setUri(body.id);
      }
    }, [body]);
    return /* @__PURE__ */ import_react89.default.createElement(OSD_default, {
      uri,
      key: uri,
      imageType
    });
  };
  var ImageViewer_default = ImageViewer;

  // src/components/Viewer/Content.tsx
  var ViewerContent = ({
    activeCanvas,
    painting,
    resources,
    items,
    isMedia,
    isNavigator,
    isNavigatorOpen
  }) => {
    return /* @__PURE__ */ import_react90.default.createElement(Content, {
      className: "clover-content"
    }, /* @__PURE__ */ import_react90.default.createElement(CurrentTimeProvider, null, /* @__PURE__ */ import_react90.default.createElement(Main, null, isMedia ? /* @__PURE__ */ import_react90.default.createElement(Player_default, {
      painting,
      resources
    }) : painting && /* @__PURE__ */ import_react90.default.createElement(ImageViewer_default, {
      body: painting,
      key: activeCanvas
    }), /* @__PURE__ */ import_react90.default.createElement(CollapsibleTrigger, {
      "data-navigator": isNavigator
    }, /* @__PURE__ */ import_react90.default.createElement(Button, {
      as: "span"
    }, isNavigatorOpen ? "View Media Items" : "View Navigator")), items.length > 1 && /* @__PURE__ */ import_react90.default.createElement(MediaWrapper, {
      className: "clover-canvases"
    }, /* @__PURE__ */ import_react90.default.createElement(Media_default, {
      items,
      activeItem: 0
    }))), isNavigator && /* @__PURE__ */ import_react90.default.createElement(Aside, null, /* @__PURE__ */ import_react90.default.createElement(CollapsibleContent, null, /* @__PURE__ */ import_react90.default.createElement(Navigator_default, {
      activeCanvas,
      defaultResource: resources[0].id,
      resources
    })))));
  };
  var Content_default = ViewerContent;

  // src/components/Viewer/ErrorFallback.tsx
  var import_react91 = __toESM(require_react());

  // src/components/Viewer/ErrorFallback.styled.tsx
  var ErrorFallbackStyled = styled("div", {
    display: "flex",
    flexDirection: "column",
    alignItems: "center"
  });
  var Headline = styled("p", {
    fontFamily: "$display",
    fontWeight: "bold",
    fontSize: "x-large"
  });
  var ErrorBody = styled("span", {
    fontSize: "medium"
  });

  // src/components/Viewer/ErrorFallback.tsx
  var ErrorFallback = ({ error }) => {
    const { message } = error;
    return /* @__PURE__ */ import_react91.default.createElement(ErrorFallbackStyled, {
      role: "alert"
    }, /* @__PURE__ */ import_react91.default.createElement(Headline, {
      "data-testid": "headline"
    }, "Something went wrong"), message && /* @__PURE__ */ import_react91.default.createElement(ErrorBody, null, `Error message: ${message}`, " "));
  };
  var ErrorFallback_default = ErrorFallback;

  // src/components/Viewer/Viewer.tsx
  var import_react_error_boundary = __toESM(require_react_error_boundary_umd());
  var Viewer = ({ manifest, theme: theme3 }) => {
    const viewerState = useViewerState();
    const { activeCanvas, vault } = viewerState;
    const [isMedia, setIsMedia] = (0, import_react92.useState)(false);
    const [isNavigator, setIsNavigator] = (0, import_react92.useState)(false);
    const [isNavigatorOpen, setIsNavigatorOpen] = (0, import_react92.useState)(true);
    const [painting, setPainting] = (0, import_react92.useState)(void 0);
    const [resources, setResources] = (0, import_react92.useState)([]);
    const [isBodyLocked, setIsBodyLocked] = useBodyLocked(false);
    const isSmallViewport = useMediaQuery(media.sm);
    (0, import_react92.useEffect)(() => {
      if (!isSmallViewport) {
        setIsNavigatorOpen(true);
        return;
      }
      setIsNavigatorOpen(false);
    }, [isSmallViewport]);
    (0, import_react92.useEffect)(() => {
      if (!isSmallViewport) {
        setIsBodyLocked(false);
        return;
      }
      setIsBodyLocked(isNavigatorOpen);
    }, [isNavigatorOpen]);
    (0, import_react92.useEffect)(() => {
      const painting2 = getPaintingResource(vault, activeCanvas);
      const resources2 = getSupplementingResources(vault, activeCanvas, "text/vtt");
      if (painting2) {
        setIsMedia(["Sound", "Video"].indexOf(painting2.type) > -1 ? true : false);
        setPainting(__spreadValues({}, painting2));
      }
      setResources(resources2);
      setIsNavigator(resources2.length !== 0);
    }, [activeCanvas]);
    return /* @__PURE__ */ import_react92.default.createElement(import_react_error_boundary.ErrorBoundary, {
      FallbackComponent: ErrorFallback_default
    }, /* @__PURE__ */ import_react92.default.createElement(Wrapper, {
      className: `${theme3} clover-iiif`,
      "data-body-locked": isBodyLocked,
      "data-navigator": isNavigator,
      "data-navigator-open": isNavigatorOpen
    }, /* @__PURE__ */ import_react92.default.createElement($409067139f391064$export$be92b6f5f03c0fe9, {
      open: isNavigatorOpen,
      onOpenChange: setIsNavigatorOpen
    }, /* @__PURE__ */ import_react92.default.createElement(Header_default, {
      manifestLabel: manifest.label,
      manifestId: manifest.id
    }), /* @__PURE__ */ import_react92.default.createElement(Content_default, {
      activeCanvas,
      painting,
      resources,
      items: manifest.items,
      isMedia,
      isNavigator,
      isNavigatorOpen
    }))));
  };
  var Viewer_default = Viewer;

  // src/index.tsx
  var App = ({
    canvasIdCallback = () => {
    },
    customTheme,
    id,
    manifestId,
    options
  }) => {
    return /* @__PURE__ */ import_react93.default.createElement(ViewerProvider, null, /* @__PURE__ */ import_react93.default.createElement(RenderViewer, {
      id,
      manifestId,
      canvasIdCallback,
      customTheme,
      options
    }));
  };
  var RenderViewer = ({
    canvasIdCallback,
    customTheme,
    id,
    manifestId,
    options
  }) => {
    const dispatch = useViewerDispatch();
    const store = useViewerState();
    const { activeCanvas, activeManifest, isLoaded, vault } = store;
    const [iiifResource, setIiifResource] = (0, import_react93.useState)();
    const [manifest, setManifest] = (0, import_react93.useState)();
    let theme3 = {};
    if (customTheme)
      theme3 = Q2("custom", customTheme);
    (0, import_react93.useEffect)(() => {
      if (canvasIdCallback)
        canvasIdCallback(activeCanvas);
    }, [activeCanvas]);
    (0, import_react93.useEffect)(() => {
      if (activeManifest)
        vault.loadManifest(activeManifest).then((data) => {
          setManifest(data);
          dispatch({
            type: "updateActiveCanvas",
            canvasId: data.items[0] && data.items[0].id
          });
        }).catch((error) => {
          console.error(`Manifest failed to load: ${error}`);
        }).finally(() => {
          dispatch({
            type: "updateIsLoaded",
            isLoaded: true
          });
        });
    }, [activeManifest]);
    (0, import_react93.useEffect)(() => {
      let resource = id;
      if (manifestId)
        resource = manifestId;
      dispatch({
        type: "updateConfigOptions",
        configOptions: options
      });
      vault.load(resource).then((data) => {
        setIiifResource(data);
      }).catch((error) => {
        console.error(`The IIIF resource ${resource} failed to load: ${error}`);
      });
    }, [id, options]);
    (0, import_react93.useEffect)(() => {
      let manifests2 = [];
      if ((iiifResource == null ? void 0 : iiifResource.type) === "Collection") {
        dispatch({
          type: "updateCollection",
          collection: iiifResource
        });
        manifests2 = iiifResource.items.filter((item) => item.type === "Manifest").map((manifest2) => manifest2.id);
        if (manifests2.length > 0) {
          dispatch({
            type: "updateActiveManifest",
            manifestId: manifests2[0]
          });
        }
      } else if ((iiifResource == null ? void 0 : iiifResource.type) === "Manifest") {
        dispatch({
          type: "updateActiveManifest",
          manifestId: iiifResource.id
        });
      }
    }, [iiifResource]);
    if (!isLoaded)
      return /* @__PURE__ */ import_react93.default.createElement(import_react93.default.Fragment, null, "Loading");
    if (!manifest || !manifest["items"]) {
      console.log(`The IIIF manifest ${manifestId} failed to load.`);
      return /* @__PURE__ */ import_react93.default.createElement(import_react93.default.Fragment, null);
    }
    if (manifest["items"].length === 0) {
      console.log(`The IIIF manifest ${manifestId} does not contain canvases.`);
      return /* @__PURE__ */ import_react93.default.createElement(import_react93.default.Fragment, null);
    }
    return /* @__PURE__ */ import_react93.default.createElement(Viewer_default, {
      manifest,
      theme: theme3,
      key: manifest.id
    });
  };
  var src_default = App;

  // src/dev/DynamicUrl.tsx
  var import_react95 = __toESM(require_react());

  // src/dev/DynamicUrl.styled.tsx
  var DynamicUrlStyled = styled("section", {
    display: "flex",
    flexDirection: "column",
    alignItems: "center",
    padding: "2rem"
  });
  var ManualForm = styled("form", {
    display: "flex",
    justifyContent: "center",
    flexDirection: "column",
    alignItems: "center",
    width: "61.8%",
    label: {
      display: "block",
      marginBottom: "1rem",
      fontSize: "1.25rem",
      color: "$primary",
      fontWeight: "400",
      fontFamily: "$display"
    },
    "> div": {
      display: "flex",
      backgroundColor: "$secondaryMuted",
      position: "relative",
      width: "100%",
      borderRadius: "3px",
      input: {
        padding: "0.618rem 1rem",
        background: "transparent",
        color: "$primary",
        border: "none",
        fontFamily: "$sans",
        width: "100%"
      },
      button: {
        padding: "0.382rem 0.618rem",
        cursor: "pointer",
        position: "absolute",
        right: "0.382rem",
        alignSelf: "center",
        background: "$secondary",
        border: "none",
        fontSize: "0.7222rem",
        fontFamily: "$sans",
        fontWeight: "700",
        borderRadius: "3px",
        backgroundColor: "$secondary",
        color: "$primary"
      }
    }
  });
  var Curated = styled("div", {
    padding: "2rem",
    display: "flex",
    justifyContent: "center",
    flexWrap: "wrap"
  });
  var ButtonForm = styled("form", {
    button: {
      backgroundColor: "$transparent",
      border: "none",
      outline: "1px solid $secondaryMuted",
      color: "$primaryMuted",
      fontFamily: "$sans",
      fontSize: "0.8333rem",
      height: "2rem",
      padding: "0 1rem",
      borderRadius: "1rem",
      cursor: "pointer",
      margin: "0.5rem"
    },
    "&[data-active='true']": {
      button: {
        color: "$white",
        fontWeight: "700",
        backgroundColor: "$accent",
        outline: "1px solid $accent"
      }
    }
  });

  // src/dev/manifests.ts
  var manifests = [
    {
      url: "https://manifests.collections.yale.edu/ycba/obj/21168",
      label: "Greenland Falcon"
    },
    {
      url: "https://raw.githubusercontent.com/samvera-labs/bloom-iiif/main/public/fixtures/iiif/collection/masks-of-antonio-fava.json",
      label: "Masks of Antonio Fava (Collection)"
    },
    {
      url: "https://iiif.stack.rdc.library.northwestern.edu/public/iiif3/72/34/b6/dd/-d/6a/2-/49/54/-8/fc/c-/6c/9f/2d/fb/88/34-manifest.json",
      label: "The Takeover"
    },
    {
      url: "https://iiif.stack.rdc.library.northwestern.edu/public/iiif3/66/8a/2a/ea/-4/33/3-/4a/5e/-b/52/3-/41/ac/98/bd/15/b7-manifest.json",
      label: "Highlight Reel, 1935"
    },
    {
      url: "https://iiif.stack.rdc.library.northwestern.edu/public/iiif3/24/68/7f/7d/-1/59/5-/4f/56/-8/3b/2-/5f/93/36/72/86/b3-manifest.json",
      label: "Syracuse, 1984"
    },
    {
      url: "https://iiif.stack.rdc.library.northwestern.edu/public/iiif3/00/26/de/66/-6/b5/c-/47/da/-8/ee/2-/70/4b/68/0b/2c/81-manifest.json",
      label: "Piano Trio"
    },
    {
      url: "https://iiif.stack.rdc.library.northwestern.edu/public/ff/51/2f/7c/-b/df/8-/4a/b7/-9/74/f-/f4/36/f0/ed/13/5d-manifest.json",
      label: "Joan Baez"
    },
    {
      url: "https://figgy.princeton.edu/concern/scanned_resources/4ff986e6-4f71-4f7c-8ff9-0d0c33d96cf0/manifest",
      label: "Parrots and Toucans"
    },
    {
      url: "https://api.artic.edu/api/v1/artworks/25865/manifest.json",
      label: "The Herring Net"
    },
    {
      url: "https://iiif.harvardartmuseums.org/manifests/object/304096",
      label: "Basin"
    },
    {
      url: "https://digital.lib.utk.edu/assemble/manifest/rfta/8",
      label: "Rising from the Ashes"
    },
    {
      url: "https://figgy.princeton.edu/concern/scanned_resources/ace2909a-8966-43f9-b547-084aeaaea13d/manifest",
      label: "Selma to Montgomery"
    },
    {
      url: "https://view.nls.uk/manifest/7446/74465058/manifest.json",
      label: "Scotia depicta"
    }
  ];

  // src/dev/DynamicUrl.tsx
  var DynamicUrl = ({ url, setUrl }) => {
    const inputRef = (0, import_react95.useRef)(null);
    const handleSubmit = (e4) => {
      var _a2;
      e4.preventDefault();
      const target = e4.target;
      setUrl((_a2 = target.url) == null ? void 0 : _a2.value);
    };
    (0, import_react95.useEffect)(() => {
      if (inputRef.current)
        inputRef.current.value = url;
    }, [url]);
    return /* @__PURE__ */ import_react95.default.createElement(DynamicUrlStyled, null, /* @__PURE__ */ import_react95.default.createElement(ManualForm, {
      onSubmit: handleSubmit
    }, /* @__PURE__ */ import_react95.default.createElement("label", {
      htmlFor: "manual-manifest"
    }, "View a IIIF Manifest"), /* @__PURE__ */ import_react95.default.createElement("div", null, /* @__PURE__ */ import_react95.default.createElement("input", {
      type: "text",
      name: "url",
      id: "manual-manifest",
      placeholder: "IIIF Manifest",
      ref: inputRef
    }), /* @__PURE__ */ import_react95.default.createElement("button", {
      type: "submit"
    }, "View"))), manifests.length > 0 && /* @__PURE__ */ import_react95.default.createElement(Curated, null, manifests.map((obj) => /* @__PURE__ */ import_react95.default.createElement(ButtonForm, {
      key: obj.label,
      onSubmit: handleSubmit,
      "data-active": url === obj.url ? true : false
    }, /* @__PURE__ */ import_react95.default.createElement("button", {
      name: "url",
      value: obj.url
    }, obj.label)))));
  };
  var DynamicUrl_default = DynamicUrl;

  // src/dev.tsx
  var import_client = __toESM(require_client());
  var Wrapper6 = () => {
    const defaultUrl = manifests[0].url;
    const [url, setUrl] = (0, import_react96.useState)(defaultUrl);
    (0, import_react96.useEffect)(() => {
      const params = new URLSearchParams(window.location.search);
      const id = params.get("iiif-content");
      if (id)
        setUrl(id);
    }, []);
    const customTheme = {
      fonts: { display: `"Calistoga", "Inter", Arial, sans-serif` }
    };
    return /* @__PURE__ */ import_react96.default.createElement(import_react96.default.Fragment, null, /* @__PURE__ */ import_react96.default.createElement(src_default, {
      id: url,
      key: url,
      customTheme,
      options: {
        canvasBackgroundColor: "#e6e8eb",
        canvasHeight: "61.8vh"
      }
    }), /* @__PURE__ */ import_react96.default.createElement(DynamicUrl_default, {
      url,
      setUrl
    }));
  };
  var container = document.getElementById("root");
  var root = (0, import_client.createRoot)(container);
  root.render(/* @__PURE__ */ import_react96.default.createElement(import_react96.StrictMode, null, /* @__PURE__ */ import_react96.default.createElement(Wrapper6, null)));
})();
/*! *****************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */
/**
 * @license React
 * react-dom.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
/**
 * @license React
 * react.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
/**
 * @license React
 * scheduler.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
/**
 * Checks if an event is supported in the current execution environment.
 *
 * NOTE: This will not work correctly for non-generic events such as `change`,
 * `reset`, `load`, `error`, and `select`.
 *
 * Borrows from Modernizr.
 *
 * @param {string} eventNameSuffix Event name, e.g. "click".
 * @return {boolean} True if the event is supported.
 * @internal
 * @license Modernizr 3.0.0pre (Custom Build) | MIT
 */
//! Built on 2021-12-15
//! Git commit: v3.0.0-0-3eded36
//! License: http://openseadragon.github.io/license/
//! http://openseadragon.github.io
//! openseadragon 3.0.0
//# sourceMappingURL=script.js.map
